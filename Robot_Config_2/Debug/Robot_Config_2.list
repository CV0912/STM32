
Robot_Config_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000718  0800e398  0800e398  0000f398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eab0  0800eab0  000101f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eab0  0800eab0  0000fab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eab8  0800eab8  000101f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eab8  0800eab8  0000fab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eabc  0800eabc  0000fabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800eac0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000640  200001f8  0800ecb8  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000838  0800ecb8  00010838  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122c1  00000000  00000000  00010228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025fd  00000000  00000000  000224e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  00024ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ddd  00000000  00000000  00025c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b59  00000000  00000000  00026a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000158b2  00000000  00000000  0004a59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d766a  00000000  00000000  0005fe50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001374ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063bc  00000000  00000000  00137500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0013d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e380 	.word	0x0800e380

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800e380 	.word	0x0800e380

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <init_i2c_slave>:
volatile uint8_t i2c_data_ready = 0;
uint32_t last_i2c_reception = 0;
#define I2C_TIMEOUT_MS 1000  // 1 second timeout for I2C communication

// Initialize I2C communication
void init_i2c_slave(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	// Clear the receive buffer initially
	memset(rxbuff, 0, I2C_BUFFER_SIZE);
 8001028:	2210      	movs	r2, #16
 800102a:	2100      	movs	r1, #0
 800102c:	4809      	ldr	r0, [pc, #36]	@ (8001054 <init_i2c_slave+0x30>)
 800102e:	f008 fa75 	bl	800951c <memset>

	// Start the slave receiver in interrupt mode
	if (HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, I2C_BUFFER_SIZE) != HAL_OK) {
 8001032:	2210      	movs	r2, #16
 8001034:	4907      	ldr	r1, [pc, #28]	@ (8001054 <init_i2c_slave+0x30>)
 8001036:	4808      	ldr	r0, [pc, #32]	@ (8001058 <init_i2c_slave+0x34>)
 8001038:	f003 f96e 	bl	8004318 <HAL_I2C_Slave_Receive_IT>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <init_i2c_slave+0x22>
		// Handle initialization error
		Error_Handler();
 8001042:	f001 fdfb 	bl	8002c3c <Error_Handler>
	}

	// Record the initialization time
	last_i2c_reception = HAL_GetTick();
 8001046:	f002 fbbd 	bl	80037c4 <HAL_GetTick>
 800104a:	4603      	mov	r3, r0
 800104c:	4a03      	ldr	r2, [pc, #12]	@ (800105c <init_i2c_slave+0x38>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000688 	.word	0x20000688
 8001058:	20000268 	.word	0x20000268
 800105c:	200006e0 	.word	0x200006e0

08001060 <HAL_I2C_SlaveRxCpltCallback>:

// I2C Slave receive complete callback
void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c2.Instance) {
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b0c      	ldr	r3, [pc, #48]	@ (80010a0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	429a      	cmp	r2, r3
 8001072:	d111      	bne.n	8001098 <HAL_I2C_SlaveRxCpltCallback+0x38>
		// Set flag to indicate data received
		i2c_data_ready = 1;
 8001074:	4b0b      	ldr	r3, [pc, #44]	@ (80010a4 <HAL_I2C_SlaveRxCpltCallback+0x44>)
 8001076:	2201      	movs	r2, #1
 8001078:	701a      	strb	r2, [r3, #0]

		// Update the reception timestamp
		last_i2c_reception = HAL_GetTick();
 800107a:	f002 fba3 	bl	80037c4 <HAL_GetTick>
 800107e:	4603      	mov	r3, r0
 8001080:	4a09      	ldr	r2, [pc, #36]	@ (80010a8 <HAL_I2C_SlaveRxCpltCallback+0x48>)
 8001082:	6013      	str	r3, [r2, #0]

		// Restart the slave receive in interrupt mode
		if (HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, I2C_BUFFER_SIZE)
 8001084:	2210      	movs	r2, #16
 8001086:	4909      	ldr	r1, [pc, #36]	@ (80010ac <HAL_I2C_SlaveRxCpltCallback+0x4c>)
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <HAL_I2C_SlaveRxCpltCallback+0x40>)
 800108a:	f003 f945 	bl	8004318 <HAL_I2C_Slave_Receive_IT>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_I2C_SlaveRxCpltCallback+0x38>
				!= HAL_OK) {
			// If restarting receive fails, handle the error
			Error_Handler();
 8001094:	f001 fdd2 	bl	8002c3c <Error_Handler>
		}
	}
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000268 	.word	0x20000268
 80010a4:	200006dc 	.word	0x200006dc
 80010a8:	200006e0 	.word	0x200006e0
 80010ac:	20000688 	.word	0x20000688

080010b0 <HAL_I2C_ErrorCallback>:

// I2C Error callback
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (hi2c->Instance == hi2c2.Instance) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <HAL_I2C_ErrorCallback+0x54>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d11b      	bne.n	80010fc <HAL_I2C_ErrorCallback+0x4c>
		// Clear the receive buffer on error
		memset(rxbuff, 0, I2C_BUFFER_SIZE);
 80010c4:	2210      	movs	r2, #16
 80010c6:	2100      	movs	r1, #0
 80010c8:	480f      	ldr	r0, [pc, #60]	@ (8001108 <HAL_I2C_ErrorCallback+0x58>)
 80010ca:	f008 fa27 	bl	800951c <memset>

		// Reset the ready flag
		i2c_data_ready = 0;
 80010ce:	4b0f      	ldr	r3, [pc, #60]	@ (800110c <HAL_I2C_ErrorCallback+0x5c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]

		// Clear all error flags
		hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	641a      	str	r2, [r3, #64]	@ 0x40

		// Re-enable the I2C peripheral if it was disabled due to error
		if (hi2c->State == HAL_I2C_STATE_READY) {
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b20      	cmp	r3, #32
 80010e4:	d105      	bne.n	80010f2 <HAL_I2C_ErrorCallback+0x42>
			// Reset the I2C peripheral
			HAL_I2C_DeInit(hi2c);
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f003 f8d2 	bl	8004290 <HAL_I2C_DeInit>
			HAL_I2C_Init(hi2c);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f002 ff8b 	bl	8004008 <HAL_I2C_Init>
		}

		// Restart reception
		HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, I2C_BUFFER_SIZE);
 80010f2:	2210      	movs	r2, #16
 80010f4:	4904      	ldr	r1, [pc, #16]	@ (8001108 <HAL_I2C_ErrorCallback+0x58>)
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <HAL_I2C_ErrorCallback+0x54>)
 80010f8:	f003 f90e 	bl	8004318 <HAL_I2C_Slave_Receive_IT>
	}
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000268 	.word	0x20000268
 8001108:	20000688 	.word	0x20000688
 800110c:	200006dc 	.word	0x200006dc

08001110 <check_i2c_communication>:

// Check I2C communication status
uint8_t check_i2c_communication(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001116:	f002 fb55 	bl	80037c4 <HAL_GetTick>
 800111a:	6078      	str	r0, [r7, #4]

	// Check for timeout
	if (current_time - last_i2c_reception > I2C_TIMEOUT_MS) {
 800111c:	4b10      	ldr	r3, [pc, #64]	@ (8001160 <check_i2c_communication+0x50>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001128:	d915      	bls.n	8001156 <check_i2c_communication+0x46>
		// No communication for too long, restart I2C
		memset(rxbuff, 0, I2C_BUFFER_SIZE);
 800112a:	2210      	movs	r2, #16
 800112c:	2100      	movs	r1, #0
 800112e:	480d      	ldr	r0, [pc, #52]	@ (8001164 <check_i2c_communication+0x54>)
 8001130:	f008 f9f4 	bl	800951c <memset>
		i2c_data_ready = 0;
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <check_i2c_communication+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	701a      	strb	r2, [r3, #0]

		// Abort any ongoing transfer
		HAL_I2C_Master_Abort_IT(&hi2c2, I2C_SLAVE_ADDRESS);
 800113a:	2108      	movs	r1, #8
 800113c:	480b      	ldr	r0, [pc, #44]	@ (800116c <check_i2c_communication+0x5c>)
 800113e:	f003 f95b 	bl	80043f8 <HAL_I2C_Master_Abort_IT>

		// Restart reception
		HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, I2C_BUFFER_SIZE);
 8001142:	2210      	movs	r2, #16
 8001144:	4907      	ldr	r1, [pc, #28]	@ (8001164 <check_i2c_communication+0x54>)
 8001146:	4809      	ldr	r0, [pc, #36]	@ (800116c <check_i2c_communication+0x5c>)
 8001148:	f003 f8e6 	bl	8004318 <HAL_I2C_Slave_Receive_IT>

		// Update the timestamp
		last_i2c_reception = current_time;
 800114c:	4a04      	ldr	r2, [pc, #16]	@ (8001160 <check_i2c_communication+0x50>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]

		return 0; // Communication failed
 8001152:	2300      	movs	r3, #0
 8001154:	e000      	b.n	8001158 <check_i2c_communication+0x48>
	}

	return 1; // Communication OK
 8001156:	2301      	movs	r3, #1
}
 8001158:	4618      	mov	r0, r3
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	200006e0 	.word	0x200006e0
 8001164:	20000688 	.word	0x20000688
 8001168:	200006dc 	.word	0x200006dc
 800116c:	20000268 	.word	0x20000268

08001170 <process_i2c_data>:

// Process I2C data - call this in your main loop
void process_i2c_data(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	// Check if I2C communication is working
	if (!check_i2c_communication()) {
 8001174:	f7ff ffcc 	bl	8001110 <check_i2c_communication>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d103      	bne.n	8001186 <process_i2c_data+0x16>
		// Handle communication failure
		printf("I2C communication failure\r\n");
 800117e:	4877      	ldr	r0, [pc, #476]	@ (800135c <process_i2c_data+0x1ec>)
 8001180:	f008 f8cc 	bl	800931c <puts>
		return;
 8001184:	e140      	b.n	8001408 <process_i2c_data+0x298>
	}

	// Process data only if new data is available
	if (i2c_data_ready) {
 8001186:	4b76      	ldr	r3, [pc, #472]	@ (8001360 <process_i2c_data+0x1f0>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b00      	cmp	r3, #0
 800118e:	f000 810b 	beq.w	80013a8 <process_i2c_data+0x238>
		// Parse the received data
		lx = (rxbuff[0] & 0x80) ?
 8001192:	4b74      	ldr	r3, [pc, #464]	@ (8001364 <process_i2c_data+0x1f4>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 8001198:	2b00      	cmp	r3, #0
 800119a:	da04      	bge.n	80011a6 <process_i2c_data+0x36>
 800119c:	4b71      	ldr	r3, [pc, #452]	@ (8001364 <process_i2c_data+0x1f4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011a4:	e001      	b.n	80011aa <process_i2c_data+0x3a>
 80011a6:	4b6f      	ldr	r3, [pc, #444]	@ (8001364 <process_i2c_data+0x1f4>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
		lx = (rxbuff[0] & 0x80) ?
 80011aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001368 <process_i2c_data+0x1f8>)
 80011ac:	6013      	str	r3, [r2, #0]
		ly = (rxbuff[1] & 0x80) ?
 80011ae:	4b6d      	ldr	r3, [pc, #436]	@ (8001364 <process_i2c_data+0x1f4>)
 80011b0:	785b      	ldrb	r3, [r3, #1]
 80011b2:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	da04      	bge.n	80011c2 <process_i2c_data+0x52>
 80011b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001364 <process_i2c_data+0x1f4>)
 80011ba:	785b      	ldrb	r3, [r3, #1]
 80011bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011c0:	e001      	b.n	80011c6 <process_i2c_data+0x56>
 80011c2:	4b68      	ldr	r3, [pc, #416]	@ (8001364 <process_i2c_data+0x1f4>)
 80011c4:	785b      	ldrb	r3, [r3, #1]
		ly = (rxbuff[1] & 0x80) ?
 80011c6:	4a69      	ldr	r2, [pc, #420]	@ (800136c <process_i2c_data+0x1fc>)
 80011c8:	6013      	str	r3, [r2, #0]
		rx = (rxbuff[2] & 0x80) ?
 80011ca:	4b66      	ldr	r3, [pc, #408]	@ (8001364 <process_i2c_data+0x1f4>)
 80011cc:	789b      	ldrb	r3, [r3, #2]
 80011ce:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	da04      	bge.n	80011de <process_i2c_data+0x6e>
 80011d4:	4b63      	ldr	r3, [pc, #396]	@ (8001364 <process_i2c_data+0x1f4>)
 80011d6:	789b      	ldrb	r3, [r3, #2]
 80011d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011dc:	e001      	b.n	80011e2 <process_i2c_data+0x72>
 80011de:	4b61      	ldr	r3, [pc, #388]	@ (8001364 <process_i2c_data+0x1f4>)
 80011e0:	789b      	ldrb	r3, [r3, #2]
		rx = (rxbuff[2] & 0x80) ?
 80011e2:	4a63      	ldr	r2, [pc, #396]	@ (8001370 <process_i2c_data+0x200>)
 80011e4:	6013      	str	r3, [r2, #0]
		ry = (rxbuff[3] & 0x80) ?
 80011e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001364 <process_i2c_data+0x1f4>)
 80011e8:	78db      	ldrb	r3, [r3, #3]
 80011ea:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	da04      	bge.n	80011fa <process_i2c_data+0x8a>
 80011f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001364 <process_i2c_data+0x1f4>)
 80011f2:	78db      	ldrb	r3, [r3, #3]
 80011f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011f8:	e001      	b.n	80011fe <process_i2c_data+0x8e>
 80011fa:	4b5a      	ldr	r3, [pc, #360]	@ (8001364 <process_i2c_data+0x1f4>)
 80011fc:	78db      	ldrb	r3, [r3, #3]
		ry = (rxbuff[3] & 0x80) ?
 80011fe:	4a5d      	ldr	r2, [pc, #372]	@ (8001374 <process_i2c_data+0x204>)
 8001200:	6013      	str	r3, [r2, #0]
		tri = (rxbuff[4] & 0x80) ?
 8001202:	4b58      	ldr	r3, [pc, #352]	@ (8001364 <process_i2c_data+0x1f4>)
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8001208:	2b00      	cmp	r3, #0
 800120a:	da04      	bge.n	8001216 <process_i2c_data+0xa6>
 800120c:	4b55      	ldr	r3, [pc, #340]	@ (8001364 <process_i2c_data+0x1f4>)
 800120e:	791b      	ldrb	r3, [r3, #4]
 8001210:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001214:	e001      	b.n	800121a <process_i2c_data+0xaa>
 8001216:	4b53      	ldr	r3, [pc, #332]	@ (8001364 <process_i2c_data+0x1f4>)
 8001218:	791b      	ldrb	r3, [r3, #4]
		tri = (rxbuff[4] & 0x80) ?
 800121a:	4a57      	ldr	r2, [pc, #348]	@ (8001378 <process_i2c_data+0x208>)
 800121c:	6013      	str	r3, [r2, #0]
		cir = (rxbuff[5] & 0x80) ?
 800121e:	4b51      	ldr	r3, [pc, #324]	@ (8001364 <process_i2c_data+0x1f4>)
 8001220:	795b      	ldrb	r3, [r3, #5]
 8001222:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8001224:	2b00      	cmp	r3, #0
 8001226:	da04      	bge.n	8001232 <process_i2c_data+0xc2>
 8001228:	4b4e      	ldr	r3, [pc, #312]	@ (8001364 <process_i2c_data+0x1f4>)
 800122a:	795b      	ldrb	r3, [r3, #5]
 800122c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001230:	e001      	b.n	8001236 <process_i2c_data+0xc6>
 8001232:	4b4c      	ldr	r3, [pc, #304]	@ (8001364 <process_i2c_data+0x1f4>)
 8001234:	795b      	ldrb	r3, [r3, #5]
		cir = (rxbuff[5] & 0x80) ?
 8001236:	4a51      	ldr	r2, [pc, #324]	@ (800137c <process_i2c_data+0x20c>)
 8001238:	6013      	str	r3, [r2, #0]
		cro = (rxbuff[6] & 0x80) ?
 800123a:	4b4a      	ldr	r3, [pc, #296]	@ (8001364 <process_i2c_data+0x1f4>)
 800123c:	799b      	ldrb	r3, [r3, #6]
 800123e:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 8001240:	2b00      	cmp	r3, #0
 8001242:	da04      	bge.n	800124e <process_i2c_data+0xde>
 8001244:	4b47      	ldr	r3, [pc, #284]	@ (8001364 <process_i2c_data+0x1f4>)
 8001246:	799b      	ldrb	r3, [r3, #6]
 8001248:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800124c:	e001      	b.n	8001252 <process_i2c_data+0xe2>
 800124e:	4b45      	ldr	r3, [pc, #276]	@ (8001364 <process_i2c_data+0x1f4>)
 8001250:	799b      	ldrb	r3, [r3, #6]
		cro = (rxbuff[6] & 0x80) ?
 8001252:	4a4b      	ldr	r2, [pc, #300]	@ (8001380 <process_i2c_data+0x210>)
 8001254:	6013      	str	r3, [r2, #0]
		squ = (rxbuff[7] & 0x80) ?
 8001256:	4b43      	ldr	r3, [pc, #268]	@ (8001364 <process_i2c_data+0x1f4>)
 8001258:	79db      	ldrb	r3, [r3, #7]
 800125a:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 800125c:	2b00      	cmp	r3, #0
 800125e:	da04      	bge.n	800126a <process_i2c_data+0xfa>
 8001260:	4b40      	ldr	r3, [pc, #256]	@ (8001364 <process_i2c_data+0x1f4>)
 8001262:	79db      	ldrb	r3, [r3, #7]
 8001264:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001268:	e001      	b.n	800126e <process_i2c_data+0xfe>
 800126a:	4b3e      	ldr	r3, [pc, #248]	@ (8001364 <process_i2c_data+0x1f4>)
 800126c:	79db      	ldrb	r3, [r3, #7]
		squ = (rxbuff[7] & 0x80) ?
 800126e:	4a45      	ldr	r2, [pc, #276]	@ (8001384 <process_i2c_data+0x214>)
 8001270:	6013      	str	r3, [r2, #0]
		ll1 = (rxbuff[8] & 0x80) ?
 8001272:	4b3c      	ldr	r3, [pc, #240]	@ (8001364 <process_i2c_data+0x1f4>)
 8001274:	7a1b      	ldrb	r3, [r3, #8]
 8001276:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 8001278:	2b00      	cmp	r3, #0
 800127a:	da04      	bge.n	8001286 <process_i2c_data+0x116>
 800127c:	4b39      	ldr	r3, [pc, #228]	@ (8001364 <process_i2c_data+0x1f4>)
 800127e:	7a1b      	ldrb	r3, [r3, #8]
 8001280:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001284:	e001      	b.n	800128a <process_i2c_data+0x11a>
 8001286:	4b37      	ldr	r3, [pc, #220]	@ (8001364 <process_i2c_data+0x1f4>)
 8001288:	7a1b      	ldrb	r3, [r3, #8]
		ll1 = (rxbuff[8] & 0x80) ?
 800128a:	4a3f      	ldr	r2, [pc, #252]	@ (8001388 <process_i2c_data+0x218>)
 800128c:	6013      	str	r3, [r2, #0]
		rr1 = (rxbuff[9] & 0x80) ?
 800128e:	4b35      	ldr	r3, [pc, #212]	@ (8001364 <process_i2c_data+0x1f4>)
 8001290:	7a5b      	ldrb	r3, [r3, #9]
 8001292:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 8001294:	2b00      	cmp	r3, #0
 8001296:	da04      	bge.n	80012a2 <process_i2c_data+0x132>
 8001298:	4b32      	ldr	r3, [pc, #200]	@ (8001364 <process_i2c_data+0x1f4>)
 800129a:	7a5b      	ldrb	r3, [r3, #9]
 800129c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012a0:	e001      	b.n	80012a6 <process_i2c_data+0x136>
 80012a2:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <process_i2c_data+0x1f4>)
 80012a4:	7a5b      	ldrb	r3, [r3, #9]
		rr1 = (rxbuff[9] & 0x80) ?
 80012a6:	4a39      	ldr	r2, [pc, #228]	@ (800138c <process_i2c_data+0x21c>)
 80012a8:	6013      	str	r3, [r2, #0]
		ll2 = (rxbuff[10] & 0x80) ?
 80012aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001364 <process_i2c_data+0x1f4>)
 80012ac:	7a9b      	ldrb	r3, [r3, #10]
 80012ae:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da04      	bge.n	80012be <process_i2c_data+0x14e>
 80012b4:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <process_i2c_data+0x1f4>)
 80012b6:	7a9b      	ldrb	r3, [r3, #10]
 80012b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012bc:	e001      	b.n	80012c2 <process_i2c_data+0x152>
 80012be:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <process_i2c_data+0x1f4>)
 80012c0:	7a9b      	ldrb	r3, [r3, #10]
		ll2 = (rxbuff[10] & 0x80) ?
 80012c2:	4a33      	ldr	r2, [pc, #204]	@ (8001390 <process_i2c_data+0x220>)
 80012c4:	6013      	str	r3, [r2, #0]
		rr2 = (rxbuff[11] & 0x80) ?
 80012c6:	4b27      	ldr	r3, [pc, #156]	@ (8001364 <process_i2c_data+0x1f4>)
 80012c8:	7adb      	ldrb	r3, [r3, #11]
 80012ca:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	da04      	bge.n	80012da <process_i2c_data+0x16a>
 80012d0:	4b24      	ldr	r3, [pc, #144]	@ (8001364 <process_i2c_data+0x1f4>)
 80012d2:	7adb      	ldrb	r3, [r3, #11]
 80012d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012d8:	e001      	b.n	80012de <process_i2c_data+0x16e>
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <process_i2c_data+0x1f4>)
 80012dc:	7adb      	ldrb	r3, [r3, #11]
		rr2 = (rxbuff[11] & 0x80) ?
 80012de:	4a2d      	ldr	r2, [pc, #180]	@ (8001394 <process_i2c_data+0x224>)
 80012e0:	6013      	str	r3, [r2, #0]
		up = (rxbuff[12] & 0x80) ?
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <process_i2c_data+0x1f4>)
 80012e4:	7b1b      	ldrb	r3, [r3, #12]
 80012e6:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da04      	bge.n	80012f6 <process_i2c_data+0x186>
 80012ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <process_i2c_data+0x1f4>)
 80012ee:	7b1b      	ldrb	r3, [r3, #12]
 80012f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012f4:	e001      	b.n	80012fa <process_i2c_data+0x18a>
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <process_i2c_data+0x1f4>)
 80012f8:	7b1b      	ldrb	r3, [r3, #12]
		up = (rxbuff[12] & 0x80) ?
 80012fa:	4a27      	ldr	r2, [pc, #156]	@ (8001398 <process_i2c_data+0x228>)
 80012fc:	6013      	str	r3, [r2, #0]
		down = (rxbuff[13] & 0x80) ?
 80012fe:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <process_i2c_data+0x1f4>)
 8001300:	7b5b      	ldrb	r3, [r3, #13]
 8001302:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8001304:	2b00      	cmp	r3, #0
 8001306:	da04      	bge.n	8001312 <process_i2c_data+0x1a2>
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <process_i2c_data+0x1f4>)
 800130a:	7b5b      	ldrb	r3, [r3, #13]
 800130c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001310:	e001      	b.n	8001316 <process_i2c_data+0x1a6>
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <process_i2c_data+0x1f4>)
 8001314:	7b5b      	ldrb	r3, [r3, #13]
		down = (rxbuff[13] & 0x80) ?
 8001316:	4a21      	ldr	r2, [pc, #132]	@ (800139c <process_i2c_data+0x22c>)
 8001318:	6013      	str	r3, [r2, #0]
		right = (rxbuff[14] & 0x80) ?
 800131a:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <process_i2c_data+0x1f4>)
 800131c:	7b9b      	ldrb	r3, [r3, #14]
 800131e:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8001320:	2b00      	cmp	r3, #0
 8001322:	da04      	bge.n	800132e <process_i2c_data+0x1be>
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <process_i2c_data+0x1f4>)
 8001326:	7b9b      	ldrb	r3, [r3, #14]
 8001328:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800132c:	e001      	b.n	8001332 <process_i2c_data+0x1c2>
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <process_i2c_data+0x1f4>)
 8001330:	7b9b      	ldrb	r3, [r3, #14]
		right = (rxbuff[14] & 0x80) ?
 8001332:	4a1b      	ldr	r2, [pc, #108]	@ (80013a0 <process_i2c_data+0x230>)
 8001334:	6013      	str	r3, [r2, #0]
		left = (rxbuff[15] & 0x80) ?
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <process_i2c_data+0x1f4>)
 8001338:	7bdb      	ldrb	r3, [r3, #15]
 800133a:	b25b      	sxtb	r3, r3
				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 800133c:	2b00      	cmp	r3, #0
 800133e:	da04      	bge.n	800134a <process_i2c_data+0x1da>
 8001340:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <process_i2c_data+0x1f4>)
 8001342:	7bdb      	ldrb	r3, [r3, #15]
 8001344:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001348:	e001      	b.n	800134e <process_i2c_data+0x1de>
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <process_i2c_data+0x1f4>)
 800134c:	7bdb      	ldrb	r3, [r3, #15]
		left = (rxbuff[15] & 0x80) ?
 800134e:	4a15      	ldr	r2, [pc, #84]	@ (80013a4 <process_i2c_data+0x234>)
 8001350:	6013      	str	r3, [r2, #0]
//				"Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %d %d\r\n",
//				lx, ly, rx, ry, tri, cir, cro, squ, ll1, rr1, ll2, rr2, up,
//				down, right, left, ebike_running, drib_speed);

		// Reset the data ready flag
		i2c_data_ready = 0;
 8001352:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <process_i2c_data+0x1f0>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
 8001358:	e056      	b.n	8001408 <process_i2c_data+0x298>
 800135a:	bf00      	nop
 800135c:	0800e398 	.word	0x0800e398
 8001360:	200006dc 	.word	0x200006dc
 8001364:	20000688 	.word	0x20000688
 8001368:	20000698 	.word	0x20000698
 800136c:	2000069c 	.word	0x2000069c
 8001370:	200006a0 	.word	0x200006a0
 8001374:	200006a4 	.word	0x200006a4
 8001378:	200006b0 	.word	0x200006b0
 800137c:	200006b4 	.word	0x200006b4
 8001380:	200006a8 	.word	0x200006a8
 8001384:	200006ac 	.word	0x200006ac
 8001388:	200006c8 	.word	0x200006c8
 800138c:	200006cc 	.word	0x200006cc
 8001390:	200006d0 	.word	0x200006d0
 8001394:	200006d4 	.word	0x200006d4
 8001398:	200006b8 	.word	0x200006b8
 800139c:	200006bc 	.word	0x200006bc
 80013a0:	200006c4 	.word	0x200006c4
 80013a4:	200006c0 	.word	0x200006c0
	} else {
		lx = 0, ly = 0, rx = 0, ry = 0, cro = 0, squ = 0, tri = 0, cir = 0, up = 0, down = 0, left = 0, right = 0, ll1 = 0, rr1 = 0, ll2 = 0, rr2 = 0;
 80013a8:	4b18      	ldr	r3, [pc, #96]	@ (800140c <process_i2c_data+0x29c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <process_i2c_data+0x2a0>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <process_i2c_data+0x2a4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <process_i2c_data+0x2a8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	4b16      	ldr	r3, [pc, #88]	@ (800141c <process_i2c_data+0x2ac>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	4b16      	ldr	r3, [pc, #88]	@ (8001420 <process_i2c_data+0x2b0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <process_i2c_data+0x2b4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <process_i2c_data+0x2b8>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <process_i2c_data+0x2bc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <process_i2c_data+0x2c0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	4b13      	ldr	r3, [pc, #76]	@ (8001434 <process_i2c_data+0x2c4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <process_i2c_data+0x2c8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <process_i2c_data+0x2cc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	4b12      	ldr	r3, [pc, #72]	@ (8001440 <process_i2c_data+0x2d0>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <process_i2c_data+0x2d4>)
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	4b11      	ldr	r3, [pc, #68]	@ (8001448 <process_i2c_data+0x2d8>)
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
	}
}
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000698 	.word	0x20000698
 8001410:	2000069c 	.word	0x2000069c
 8001414:	200006a0 	.word	0x200006a0
 8001418:	200006a4 	.word	0x200006a4
 800141c:	200006a8 	.word	0x200006a8
 8001420:	200006ac 	.word	0x200006ac
 8001424:	200006b0 	.word	0x200006b0
 8001428:	200006b4 	.word	0x200006b4
 800142c:	200006b8 	.word	0x200006b8
 8001430:	200006bc 	.word	0x200006bc
 8001434:	200006c0 	.word	0x200006c0
 8001438:	200006c4 	.word	0x200006c4
 800143c:	200006c8 	.word	0x200006c8
 8001440:	200006cc 	.word	0x200006cc
 8001444:	200006d0 	.word	0x200006d0
 8001448:	200006d4 	.word	0x200006d4

0800144c <stopEncoders>:
	__HAL_TIM_SET_COUNTER(&htim1, 0);
	__HAL_TIM_SET_COUNTER(&htim2, 0);
	__HAL_TIM_SET_COUNTER(&htim3, 0);
}

void stopEncoders() {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim1, TIM_CHANNEL_ALL);
 8001450:	213c      	movs	r1, #60	@ 0x3c
 8001452:	4806      	ldr	r0, [pc, #24]	@ (800146c <stopEncoders+0x20>)
 8001454:	f005 fdb4 	bl	8006fc0 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8001458:	213c      	movs	r1, #60	@ 0x3c
 800145a:	4805      	ldr	r0, [pc, #20]	@ (8001470 <stopEncoders+0x24>)
 800145c:	f005 fdb0 	bl	8006fc0 <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8001460:	213c      	movs	r1, #60	@ 0x3c
 8001462:	4804      	ldr	r0, [pc, #16]	@ (8001474 <stopEncoders+0x28>)
 8001464:	f005 fdac 	bl	8006fc0 <HAL_TIM_Encoder_Stop>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200002bc 	.word	0x200002bc
 8001470:	20000304 	.word	0x20000304
 8001474:	2000034c 	.word	0x2000034c

08001478 <startEncoders>:

void startEncoders() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800147c:	213c      	movs	r1, #60	@ 0x3c
 800147e:	4806      	ldr	r0, [pc, #24]	@ (8001498 <startEncoders+0x20>)
 8001480:	f005 fd10 	bl	8006ea4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001484:	213c      	movs	r1, #60	@ 0x3c
 8001486:	4805      	ldr	r0, [pc, #20]	@ (800149c <startEncoders+0x24>)
 8001488:	f005 fd0c 	bl	8006ea4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800148c:	213c      	movs	r1, #60	@ 0x3c
 800148e:	4804      	ldr	r0, [pc, #16]	@ (80014a0 <startEncoders+0x28>)
 8001490:	f005 fd08 	bl	8006ea4 <HAL_TIM_Encoder_Start>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200002bc 	.word	0x200002bc
 800149c:	20000304 	.word	0x20000304
 80014a0:	2000034c 	.word	0x2000034c

080014a4 <rectToPolar>:
	} else {
		return val;
	}
}

void rectToPolar() {
 80014a4:	b5b0      	push	{r4, r5, r7, lr}
 80014a6:	af00      	add	r7, sp, #0
	if (abs(lx) < deadzone)
 80014a8:	4b4e      	ldr	r3, [pc, #312]	@ (80015e4 <rectToPolar+0x140>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	bfb8      	it	lt
 80014b0:	425b      	neglt	r3, r3
 80014b2:	2228      	movs	r2, #40	@ 0x28
 80014b4:	4293      	cmp	r3, r2
 80014b6:	da02      	bge.n	80014be <rectToPolar+0x1a>
		lx = 0;
 80014b8:	4b4a      	ldr	r3, [pc, #296]	@ (80015e4 <rectToPolar+0x140>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
	// else lx = (lx > 0) ? lx - deadzone : lx + deadzone;

	if (abs(ly) < deadzone)
 80014be:	4b4a      	ldr	r3, [pc, #296]	@ (80015e8 <rectToPolar+0x144>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bfb8      	it	lt
 80014c6:	425b      	neglt	r3, r3
 80014c8:	2228      	movs	r2, #40	@ 0x28
 80014ca:	4293      	cmp	r3, r2
 80014cc:	da02      	bge.n	80014d4 <rectToPolar+0x30>
		ly = 0;
 80014ce:	4b46      	ldr	r3, [pc, #280]	@ (80015e8 <rectToPolar+0x144>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
	// else ly = (ly > 0) ? ly - deadzone : ly + deadzone;

	if (abs(rx) < deadzone)
 80014d4:	4b45      	ldr	r3, [pc, #276]	@ (80015ec <rectToPolar+0x148>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bfb8      	it	lt
 80014dc:	425b      	neglt	r3, r3
 80014de:	2228      	movs	r2, #40	@ 0x28
 80014e0:	4293      	cmp	r3, r2
 80014e2:	da02      	bge.n	80014ea <rectToPolar+0x46>
		rx = 0;
 80014e4:	4b41      	ldr	r3, [pc, #260]	@ (80015ec <rectToPolar+0x148>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
	// else rx = (rx > 0) ? rx - deadzone : rx + deadzone;

	if (abs(ry) < deadzone)
 80014ea:	4b41      	ldr	r3, [pc, #260]	@ (80015f0 <rectToPolar+0x14c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	bfb8      	it	lt
 80014f2:	425b      	neglt	r3, r3
 80014f4:	2228      	movs	r2, #40	@ 0x28
 80014f6:	4293      	cmp	r3, r2
 80014f8:	da02      	bge.n	8001500 <rectToPolar+0x5c>
		ry = 0;
 80014fa:	4b3d      	ldr	r3, [pc, #244]	@ (80015f0 <rectToPolar+0x14c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
	// else ry = (ry > 0) ? ry - deadzone : ry + deadzone;
	rL = sqrt(lx * lx + ly * ly);
 8001500:	4b38      	ldr	r3, [pc, #224]	@ (80015e4 <rectToPolar+0x140>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a37      	ldr	r2, [pc, #220]	@ (80015e4 <rectToPolar+0x140>)
 8001506:	6812      	ldr	r2, [r2, #0]
 8001508:	fb03 f202 	mul.w	r2, r3, r2
 800150c:	4b36      	ldr	r3, [pc, #216]	@ (80015e8 <rectToPolar+0x144>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4935      	ldr	r1, [pc, #212]	@ (80015e8 <rectToPolar+0x144>)
 8001512:	6809      	ldr	r1, [r1, #0]
 8001514:	fb01 f303 	mul.w	r3, r1, r3
 8001518:	4413      	add	r3, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff f822 	bl	8000564 <__aeabi_i2d>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	ec43 2b10 	vmov	d0, r2, r3
 8001528:	f00b fb3e 	bl	800cba8 <sqrt>
 800152c:	eeb0 7a40 	vmov.f32	s14, s0
 8001530:	eef0 7a60 	vmov.f32	s15, s1
 8001534:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <rectToPolar+0x150>)
 8001536:	ed83 7b00 	vstr	d7, [r3]
	thetaL = atan2(lx, ly);
 800153a:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <rectToPolar+0x140>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f810 	bl	8000564 <__aeabi_i2d>
 8001544:	4604      	mov	r4, r0
 8001546:	460d      	mov	r5, r1
 8001548:	4b27      	ldr	r3, [pc, #156]	@ (80015e8 <rectToPolar+0x144>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f809 	bl	8000564 <__aeabi_i2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b11 	vmov	d1, r2, r3
 800155a:	ec45 4b10 	vmov	d0, r4, r5
 800155e:	f00b fb21 	bl	800cba4 <atan2>
 8001562:	eeb0 7a40 	vmov.f32	s14, s0
 8001566:	eef0 7a60 	vmov.f32	s15, s1
 800156a:	4b23      	ldr	r3, [pc, #140]	@ (80015f8 <rectToPolar+0x154>)
 800156c:	ed83 7b00 	vstr	d7, [r3]
	rR = sqrt(rx * rx + ry * ry);
 8001570:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <rectToPolar+0x148>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <rectToPolar+0x148>)
 8001576:	6812      	ldr	r2, [r2, #0]
 8001578:	fb03 f202 	mul.w	r2, r3, r2
 800157c:	4b1c      	ldr	r3, [pc, #112]	@ (80015f0 <rectToPolar+0x14c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	491b      	ldr	r1, [pc, #108]	@ (80015f0 <rectToPolar+0x14c>)
 8001582:	6809      	ldr	r1, [r1, #0]
 8001584:	fb01 f303 	mul.w	r3, r1, r3
 8001588:	4413      	add	r3, r2
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffea 	bl	8000564 <__aeabi_i2d>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	ec43 2b10 	vmov	d0, r2, r3
 8001598:	f00b fb06 	bl	800cba8 <sqrt>
 800159c:	eeb0 7a40 	vmov.f32	s14, s0
 80015a0:	eef0 7a60 	vmov.f32	s15, s1
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <rectToPolar+0x158>)
 80015a6:	ed83 7b00 	vstr	d7, [r3]
	thetaR = atan2(ry, rx);
 80015aa:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <rectToPolar+0x14c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ffd8 	bl	8000564 <__aeabi_i2d>
 80015b4:	4604      	mov	r4, r0
 80015b6:	460d      	mov	r5, r1
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <rectToPolar+0x148>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe ffd1 	bl	8000564 <__aeabi_i2d>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	ec43 2b11 	vmov	d1, r2, r3
 80015ca:	ec45 4b10 	vmov	d0, r4, r5
 80015ce:	f00b fae9 	bl	800cba4 <atan2>
 80015d2:	eeb0 7a40 	vmov.f32	s14, s0
 80015d6:	eef0 7a60 	vmov.f32	s15, s1
 80015da:	4b09      	ldr	r3, [pc, #36]	@ (8001600 <rectToPolar+0x15c>)
 80015dc:	ed83 7b00 	vstr	d7, [r3]
}
 80015e0:	bf00      	nop
 80015e2:	bdb0      	pop	{r4, r5, r7, pc}
 80015e4:	20000698 	.word	0x20000698
 80015e8:	2000069c 	.word	0x2000069c
 80015ec:	200006a0 	.word	0x200006a0
 80015f0:	200006a4 	.word	0x200006a4
 80015f4:	20000610 	.word	0x20000610
 80015f8:	20000618 	.word	0x20000618
 80015fc:	20000620 	.word	0x20000620
 8001600:	20000628 	.word	0x20000628
 8001604:	00000000 	.word	0x00000000

08001608 <compute3wheel>:

void compute3wheel() {
 8001608:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800160c:	b08c      	sub	sp, #48	@ 0x30
 800160e:	af00      	add	r7, sp, #0
	// Calculate joystick-based velocities
	const double theta = -30 * pi / 180;
 8001610:	a3b1      	add	r3, pc, #708	@ (adr r3, 80018d8 <compute3wheel+0x2d0>)
 8001612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001616:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	double lx_rotated = lx * cos(theta) - ly * sin(theta);
 800161a:	4ba3      	ldr	r3, [pc, #652]	@ (80018a8 <compute3wheel+0x2a0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffa0 	bl	8000564 <__aeabi_i2d>
 8001624:	4604      	mov	r4, r0
 8001626:	460d      	mov	r5, r1
 8001628:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800162c:	f00b fae8 	bl	800cc00 <cos>
 8001630:	ec53 2b10 	vmov	r2, r3, d0
 8001634:	4620      	mov	r0, r4
 8001636:	4629      	mov	r1, r5
 8001638:	f7fe fffe 	bl	8000638 <__aeabi_dmul>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4690      	mov	r8, r2
 8001642:	4699      	mov	r9, r3
 8001644:	4b99      	ldr	r3, [pc, #612]	@ (80018ac <compute3wheel+0x2a4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4618      	mov	r0, r3
 800164a:	f7fe ff8b 	bl	8000564 <__aeabi_i2d>
 800164e:	4604      	mov	r4, r0
 8001650:	460d      	mov	r5, r1
 8001652:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 8001656:	f00b fb27 	bl	800cca8 <sin>
 800165a:	ec53 2b10 	vmov	r2, r3, d0
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe ffe9 	bl	8000638 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4640      	mov	r0, r8
 800166c:	4649      	mov	r1, r9
 800166e:	f7fe fe2b 	bl	80002c8 <__aeabi_dsub>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double ly_rotated = lx * sin(theta) + ly * cos(theta);
 800167a:	4b8b      	ldr	r3, [pc, #556]	@ (80018a8 <compute3wheel+0x2a0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff70 	bl	8000564 <__aeabi_i2d>
 8001684:	4604      	mov	r4, r0
 8001686:	460d      	mov	r5, r1
 8001688:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 800168c:	f00b fb0c 	bl	800cca8 <sin>
 8001690:	ec53 2b10 	vmov	r2, r3, d0
 8001694:	4620      	mov	r0, r4
 8001696:	4629      	mov	r1, r5
 8001698:	f7fe ffce 	bl	8000638 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4690      	mov	r8, r2
 80016a2:	4699      	mov	r9, r3
 80016a4:	4b81      	ldr	r3, [pc, #516]	@ (80018ac <compute3wheel+0x2a4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff5b 	bl	8000564 <__aeabi_i2d>
 80016ae:	4604      	mov	r4, r0
 80016b0:	460d      	mov	r5, r1
 80016b2:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80016b6:	f00b faa3 	bl	800cc00 <cos>
 80016ba:	ec53 2b10 	vmov	r2, r3, d0
 80016be:	4620      	mov	r0, r4
 80016c0:	4629      	mov	r1, r5
 80016c2:	f7fe ffb9 	bl	8000638 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4640      	mov	r0, r8
 80016cc:	4649      	mov	r1, r9
 80016ce:	f7fe fdfd 	bl	80002cc <__adddf3>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double vx = ly_rotated;
 80016da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016de:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double vy = lx_rotated;
 80016e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016e6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	w = rx * 2.5;
 80016ea:	4b71      	ldr	r3, [pc, #452]	@ (80018b0 <compute3wheel+0x2a8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ff38 	bl	8000564 <__aeabi_i2d>
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b6e      	ldr	r3, [pc, #440]	@ (80018b4 <compute3wheel+0x2ac>)
 80016fa:	f7fe ff9d 	bl	8000638 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	496d      	ldr	r1, [pc, #436]	@ (80018b8 <compute3wheel+0x2b0>)
 8001704:	e9c1 2300 	strd	r2, r3, [r1]
	double speedFactorL = 15 * (rL / 127 + rR / 127) / 2;
 8001708:	4b6c      	ldr	r3, [pc, #432]	@ (80018bc <compute3wheel+0x2b4>)
 800170a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800170e:	a360      	add	r3, pc, #384	@ (adr r3, 8001890 <compute3wheel+0x288>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7ff f8ba 	bl	800088c <__aeabi_ddiv>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	4614      	mov	r4, r2
 800171e:	461d      	mov	r5, r3
 8001720:	4b67      	ldr	r3, [pc, #412]	@ (80018c0 <compute3wheel+0x2b8>)
 8001722:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001726:	a35a      	add	r3, pc, #360	@ (adr r3, 8001890 <compute3wheel+0x288>)
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	f7ff f8ae 	bl	800088c <__aeabi_ddiv>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7fe fdc8 	bl	80002cc <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b5e      	ldr	r3, [pc, #376]	@ (80018c4 <compute3wheel+0x2bc>)
 800174a:	f7fe ff75 	bl	8000638 <__aeabi_dmul>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800175e:	f7ff f895 	bl	800088c <__aeabi_ddiv>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	e9c7 2300 	strd	r2, r3, [r7]
	// Modify wheel velocities to include yaw correction
	target_wf = ((-0.5 * vx) + (sqrt(3) / 2) * vy + l0 * w) * speedFactorL;
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	4b56      	ldr	r3, [pc, #344]	@ (80018c8 <compute3wheel+0x2c0>)
 8001770:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001774:	f7fe ff60 	bl	8000638 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4614      	mov	r4, r2
 800177e:	461d      	mov	r5, r3
 8001780:	a345      	add	r3, pc, #276	@ (adr r3, 8001898 <compute3wheel+0x290>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800178a:	f7fe ff55 	bl	8000638 <__aeabi_dmul>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4620      	mov	r0, r4
 8001794:	4629      	mov	r1, r5
 8001796:	f7fe fd99 	bl	80002cc <__adddf3>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4614      	mov	r4, r2
 80017a0:	461d      	mov	r5, r3
 80017a2:	4b45      	ldr	r3, [pc, #276]	@ (80018b8 <compute3wheel+0x2b0>)
 80017a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017a8:	a33d      	add	r3, pc, #244	@ (adr r3, 80018a0 <compute3wheel+0x298>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff43 	bl	8000638 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd87 	bl	80002cc <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017ca:	f7fe ff35 	bl	8000638 <__aeabi_dmul>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	493e      	ldr	r1, [pc, #248]	@ (80018cc <compute3wheel+0x2c4>)
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]
	target_wrr = ((-0.5 * vx) - (sqrt(3) / 2) * vy + l0 * w) * speedFactorL;
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	4b3a      	ldr	r3, [pc, #232]	@ (80018c8 <compute3wheel+0x2c0>)
 80017de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017e2:	f7fe ff29 	bl	8000638 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4614      	mov	r4, r2
 80017ec:	461d      	mov	r5, r3
 80017ee:	a32a      	add	r3, pc, #168	@ (adr r3, 8001898 <compute3wheel+0x290>)
 80017f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017f8:	f7fe ff1e 	bl	8000638 <__aeabi_dmul>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4620      	mov	r0, r4
 8001802:	4629      	mov	r1, r5
 8001804:	f7fe fd60 	bl	80002c8 <__aeabi_dsub>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4614      	mov	r4, r2
 800180e:	461d      	mov	r5, r3
 8001810:	4b29      	ldr	r3, [pc, #164]	@ (80018b8 <compute3wheel+0x2b0>)
 8001812:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001816:	a322      	add	r3, pc, #136	@ (adr r3, 80018a0 <compute3wheel+0x298>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ff0c 	bl	8000638 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4620      	mov	r0, r4
 8001826:	4629      	mov	r1, r5
 8001828:	f7fe fd50 	bl	80002cc <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001838:	f7fe fefe 	bl	8000638 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4923      	ldr	r1, [pc, #140]	@ (80018d0 <compute3wheel+0x2c8>)
 8001842:	e9c1 2300 	strd	r2, r3, [r1]
	target_wrl = (vx + l0 * w) * speedFactorL;
 8001846:	4b1c      	ldr	r3, [pc, #112]	@ (80018b8 <compute3wheel+0x2b0>)
 8001848:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184c:	a314      	add	r3, pc, #80	@ (adr r3, 80018a0 <compute3wheel+0x298>)
 800184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001852:	f7fe fef1 	bl	8000638 <__aeabi_dmul>
 8001856:	4602      	mov	r2, r0
 8001858:	460b      	mov	r3, r1
 800185a:	4610      	mov	r0, r2
 800185c:	4619      	mov	r1, r3
 800185e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001862:	f7fe fd33 	bl	80002cc <__adddf3>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4610      	mov	r0, r2
 800186c:	4619      	mov	r1, r3
 800186e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001872:	f7fe fee1 	bl	8000638 <__aeabi_dmul>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4916      	ldr	r1, [pc, #88]	@ (80018d4 <compute3wheel+0x2cc>)
 800187c:	e9c1 2300 	strd	r2, r3, [r1]
	// target_wrl = (-vx + l0*w)*speedFactorL;
	// Constrain target wheel speeds
//	target_wf = constrain(target_wf, -950, 950);
//	target_wrr = constrain(target_wrr, -950, 950);
//	target_wrl = constrain(target_wrl, -950, 950);
}
 8001880:	bf00      	nop
 8001882:	3730      	adds	r7, #48	@ 0x30
 8001884:	46bd      	mov	sp, r7
 8001886:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	00000000 	.word	0x00000000
 8001894:	405fc000 	.word	0x405fc000
 8001898:	e8584caa 	.word	0xe8584caa
 800189c:	3febb67a 	.word	0x3febb67a
 80018a0:	33333333 	.word	0x33333333
 80018a4:	3fd33333 	.word	0x3fd33333
 80018a8:	20000698 	.word	0x20000698
 80018ac:	2000069c 	.word	0x2000069c
 80018b0:	200006a0 	.word	0x200006a0
 80018b4:	40040000 	.word	0x40040000
 80018b8:	20000608 	.word	0x20000608
 80018bc:	20000610 	.word	0x20000610
 80018c0:	20000620 	.word	0x20000620
 80018c4:	402e0000 	.word	0x402e0000
 80018c8:	bfe00000 	.word	0xbfe00000
 80018cc:	200005d8 	.word	0x200005d8
 80018d0:	200005e8 	.word	0x200005e8
 80018d4:	200005e0 	.word	0x200005e0
 80018d8:	382b64d8 	.word	0x382b64d8
 80018dc:	bfe0c152 	.word	0xbfe0c152

080018e0 <applyDeceleration>:

void applyDeceleration() {
 80018e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018e4:	af00      	add	r7, sp, #0
	// Gradually approach target speeds for each wheel
	current_wf += (target_wf - current_wf) / decelerationRate;
 80018e6:	4b79      	ldr	r3, [pc, #484]	@ (8001acc <applyDeceleration+0x1ec>)
 80018e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ec:	4b78      	ldr	r3, [pc, #480]	@ (8001ad0 <applyDeceleration+0x1f0>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fce9 	bl	80002c8 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b74      	ldr	r3, [pc, #464]	@ (8001ad4 <applyDeceleration+0x1f4>)
 8001904:	f7fe ffc2 	bl	800088c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad0 <applyDeceleration+0x1f0>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe fcd9 	bl	80002cc <__adddf3>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	496c      	ldr	r1, [pc, #432]	@ (8001ad0 <applyDeceleration+0x1f0>)
 8001920:	e9c1 2300 	strd	r2, r3, [r1]
	current_wrl += (target_wrl - current_wrl) / decelerationRate;
 8001924:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad8 <applyDeceleration+0x1f8>)
 8001926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192a:	4b6c      	ldr	r3, [pc, #432]	@ (8001adc <applyDeceleration+0x1fc>)
 800192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001930:	f7fe fcca 	bl	80002c8 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4b64      	ldr	r3, [pc, #400]	@ (8001ad4 <applyDeceleration+0x1f4>)
 8001942:	f7fe ffa3 	bl	800088c <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	4b63      	ldr	r3, [pc, #396]	@ (8001adc <applyDeceleration+0x1fc>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fcba 	bl	80002cc <__adddf3>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	495f      	ldr	r1, [pc, #380]	@ (8001adc <applyDeceleration+0x1fc>)
 800195e:	e9c1 2300 	strd	r2, r3, [r1]
	current_wrr += (target_wrr - current_wrr) / decelerationRate;
 8001962:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae0 <applyDeceleration+0x200>)
 8001964:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001968:	4b5e      	ldr	r3, [pc, #376]	@ (8001ae4 <applyDeceleration+0x204>)
 800196a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196e:	f7fe fcab 	bl	80002c8 <__aeabi_dsub>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4610      	mov	r0, r2
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	4b55      	ldr	r3, [pc, #340]	@ (8001ad4 <applyDeceleration+0x1f4>)
 8001980:	f7fe ff84 	bl	800088c <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4610      	mov	r0, r2
 800198a:	4619      	mov	r1, r3
 800198c:	4b55      	ldr	r3, [pc, #340]	@ (8001ae4 <applyDeceleration+0x204>)
 800198e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001992:	f7fe fc9b 	bl	80002cc <__adddf3>
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	4952      	ldr	r1, [pc, #328]	@ (8001ae4 <applyDeceleration+0x204>)
 800199c:	e9c1 2300 	strd	r2, r3, [r1]
	// Serial.print(current_wrr);
	// Serial.print("wrl =");
	// Serial.println(current_wrl);

	// Update motor directions and speeds based on decelerated values
	if (current_wf >= 0) {
 80019a0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad0 <applyDeceleration+0x1f0>)
 80019a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	f7ff f8c9 	bl	8000b44 <__aeabi_dcmpge>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d010      	beq.n	80019da <applyDeceleration+0xfa>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80019b8:	2200      	movs	r2, #0
 80019ba:	2101      	movs	r1, #1
 80019bc:	484a      	ldr	r0, [pc, #296]	@ (8001ae8 <applyDeceleration+0x208>)
 80019be:	f002 fb09 	bl	8003fd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, current_wf);
 80019c2:	4b43      	ldr	r3, [pc, #268]	@ (8001ad0 <applyDeceleration+0x1f0>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	4948      	ldr	r1, [pc, #288]	@ (8001aec <applyDeceleration+0x20c>)
 80019ca:	680e      	ldr	r6, [r1, #0]
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f90a 	bl	8000be8 <__aeabi_d2uiz>
 80019d4:	4603      	mov	r3, r0
 80019d6:	6373      	str	r3, [r6, #52]	@ 0x34
 80019d8:	e012      	b.n	8001a00 <applyDeceleration+0x120>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	2101      	movs	r1, #1
 80019de:	4842      	ldr	r0, [pc, #264]	@ (8001ae8 <applyDeceleration+0x208>)
 80019e0:	f002 faf8 	bl	8003fd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, -current_wf);
 80019e4:	4b3a      	ldr	r3, [pc, #232]	@ (8001ad0 <applyDeceleration+0x1f0>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	4692      	mov	sl, r2
 80019ec:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 80019f0:	4b3e      	ldr	r3, [pc, #248]	@ (8001aec <applyDeceleration+0x20c>)
 80019f2:	681e      	ldr	r6, [r3, #0]
 80019f4:	4650      	mov	r0, sl
 80019f6:	4659      	mov	r1, fp
 80019f8:	f7ff f8f6 	bl	8000be8 <__aeabi_d2uiz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	6373      	str	r3, [r6, #52]	@ 0x34
	}

	if (current_wrl >= 0) {
 8001a00:	4b36      	ldr	r3, [pc, #216]	@ (8001adc <applyDeceleration+0x1fc>)
 8001a02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	f7ff f899 	bl	8000b44 <__aeabi_dcmpge>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <applyDeceleration+0x15a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2102      	movs	r1, #2
 8001a1c:	4832      	ldr	r0, [pc, #200]	@ (8001ae8 <applyDeceleration+0x208>)
 8001a1e:	f002 fad9 	bl	8003fd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, current_wrl);
 8001a22:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <applyDeceleration+0x1fc>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	4931      	ldr	r1, [pc, #196]	@ (8001af0 <applyDeceleration+0x210>)
 8001a2a:	680e      	ldr	r6, [r1, #0]
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	4619      	mov	r1, r3
 8001a30:	f7ff f8da 	bl	8000be8 <__aeabi_d2uiz>
 8001a34:	4603      	mov	r3, r0
 8001a36:	6373      	str	r3, [r6, #52]	@ 0x34
 8001a38:	e012      	b.n	8001a60 <applyDeceleration+0x180>
	} else {
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	2102      	movs	r1, #2
 8001a3e:	482a      	ldr	r0, [pc, #168]	@ (8001ae8 <applyDeceleration+0x208>)
 8001a40:	f002 fac8 	bl	8003fd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, -current_wrl);
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <applyDeceleration+0x1fc>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	4690      	mov	r8, r2
 8001a4c:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001a50:	4b27      	ldr	r3, [pc, #156]	@ (8001af0 <applyDeceleration+0x210>)
 8001a52:	681e      	ldr	r6, [r3, #0]
 8001a54:	4640      	mov	r0, r8
 8001a56:	4649      	mov	r1, r9
 8001a58:	f7ff f8c6 	bl	8000be8 <__aeabi_d2uiz>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	6373      	str	r3, [r6, #52]	@ 0x34
	}

	if (current_wrr >= 0) {
 8001a60:	4b20      	ldr	r3, [pc, #128]	@ (8001ae4 <applyDeceleration+0x204>)
 8001a62:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a66:	f04f 0200 	mov.w	r2, #0
 8001a6a:	f04f 0300 	mov.w	r3, #0
 8001a6e:	f7ff f869 	bl	8000b44 <__aeabi_dcmpge>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d011      	beq.n	8001a9c <applyDeceleration+0x1bc>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a7e:	481d      	ldr	r0, [pc, #116]	@ (8001af4 <applyDeceleration+0x214>)
 8001a80:	f002 faa8 	bl	8003fd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, current_wrr);
 8001a84:	4b17      	ldr	r3, [pc, #92]	@ (8001ae4 <applyDeceleration+0x204>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	491b      	ldr	r1, [pc, #108]	@ (8001af8 <applyDeceleration+0x218>)
 8001a8c:	680c      	ldr	r4, [r1, #0]
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	f7ff f8a9 	bl	8000be8 <__aeabi_d2uiz>
 8001a96:	4603      	mov	r3, r0
 8001a98:	6363      	str	r3, [r4, #52]	@ 0x34
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, -current_wrr);
	}
}
 8001a9a:	e013      	b.n	8001ac4 <applyDeceleration+0x1e4>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aa2:	4814      	ldr	r0, [pc, #80]	@ (8001af4 <applyDeceleration+0x214>)
 8001aa4:	f002 fa96 	bl	8003fd4 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_1, -current_wrr);
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae4 <applyDeceleration+0x204>)
 8001aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aae:	4614      	mov	r4, r2
 8001ab0:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001ab4:	4b10      	ldr	r3, [pc, #64]	@ (8001af8 <applyDeceleration+0x218>)
 8001ab6:	681e      	ldr	r6, [r3, #0]
 8001ab8:	4620      	mov	r0, r4
 8001aba:	4629      	mov	r1, r5
 8001abc:	f7ff f894 	bl	8000be8 <__aeabi_d2uiz>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	6373      	str	r3, [r6, #52]	@ 0x34
}
 8001ac4:	bf00      	nop
 8001ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aca:	bf00      	nop
 8001acc:	200005d8 	.word	0x200005d8
 8001ad0:	200005f0 	.word	0x200005f0
 8001ad4:	403e0000 	.word	0x403e0000
 8001ad8:	200005e0 	.word	0x200005e0
 8001adc:	200005f8 	.word	0x200005f8
 8001ae0:	200005e8 	.word	0x200005e8
 8001ae4:	20000600 	.word	0x20000600
 8001ae8:	40020800 	.word	0x40020800
 8001aec:	20000424 	.word	0x20000424
 8001af0:	2000046c 	.word	0x2000046c
 8001af4:	40020400 	.word	0x40020400
 8001af8:	200004b4 	.word	0x200004b4

08001afc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001afe:	b0a1      	sub	sp, #132	@ 0x84
 8001b00:	af10      	add	r7, sp, #64	@ 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b02:	f001 fdf9 	bl	80036f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b06:	f000 fb1d 	bl	8002144 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b0a:	f000 ffe5 	bl	8002ad8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001b0e:	f000 ffb9 	bl	8002a84 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001b12:	f000 fbe5 	bl	80022e0 <MX_TIM1_Init>
	MX_TIM8_Init();
 8001b16:	f000 fdc3 	bl	80026a0 <MX_TIM8_Init>
	MX_I2C1_Init();
 8001b1a:	f000 fb85 	bl	8002228 <MX_I2C1_Init>
	MX_TIM5_Init();
 8001b1e:	f000 fd6b 	bl	80025f8 <MX_TIM5_Init>
	MX_TIM10_Init();
 8001b22:	f000 fe15 	bl	8002750 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001b26:	f000 fe61 	bl	80027ec <MX_TIM11_Init>
	MX_TIM13_Init();
 8001b2a:	f000 ff0f 	bl	800294c <MX_TIM13_Init>
	MX_TIM2_Init();
 8001b2e:	f000 fc91 	bl	8002454 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001b32:	f000 fce3 	bl	80024fc <MX_TIM3_Init>
	MX_TIM12_Init();
 8001b36:	f000 fea7 	bl	8002888 <MX_TIM12_Init>
	MX_TIM14_Init();
 8001b3a:	f000 ff55 	bl	80029e8 <MX_TIM14_Init>
	MX_I2C2_Init();
 8001b3e:	f000 fba1 	bl	8002284 <MX_I2C2_Init>
	/* USER CODE BEGIN 2 */
//	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
//	HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, 16);
//
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001b42:	213c      	movs	r1, #60	@ 0x3c
 8001b44:	4847      	ldr	r0, [pc, #284]	@ (8001c64 <main+0x168>)
 8001b46:	f005 f9ad 	bl	8006ea4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b4a:	213c      	movs	r1, #60	@ 0x3c
 8001b4c:	4846      	ldr	r0, [pc, #280]	@ (8001c68 <main+0x16c>)
 8001b4e:	f005 f9a9 	bl	8006ea4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001b52:	213c      	movs	r1, #60	@ 0x3c
 8001b54:	4845      	ldr	r0, [pc, #276]	@ (8001c6c <main+0x170>)
 8001b56:	f005 f9a5 	bl	8006ea4 <HAL_TIM_Encoder_Start>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4841      	ldr	r0, [pc, #260]	@ (8001c64 <main+0x168>)
 8001b5e:	f005 f833 	bl	8006bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001b62:	2108      	movs	r1, #8
 8001b64:	483f      	ldr	r0, [pc, #252]	@ (8001c64 <main+0x168>)
 8001b66:	f005 f82f 	bl	8006bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	483f      	ldr	r0, [pc, #252]	@ (8001c6c <main+0x170>)
 8001b6e:	f005 f82b 	bl	8006bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001b72:	2100      	movs	r1, #0
 8001b74:	483e      	ldr	r0, [pc, #248]	@ (8001c70 <main+0x174>)
 8001b76:	f005 f827 	bl	8006bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	483d      	ldr	r0, [pc, #244]	@ (8001c74 <main+0x178>)
 8001b7e:	f005 f823 	bl	8006bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8001b82:	2100      	movs	r1, #0
 8001b84:	483c      	ldr	r0, [pc, #240]	@ (8001c78 <main+0x17c>)
 8001b86:	f005 f81f 	bl	8006bc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 8001b8a:	2100      	movs	r1, #0
 8001b8c:	483b      	ldr	r0, [pc, #236]	@ (8001c7c <main+0x180>)
 8001b8e:	f005 f81b 	bl	8006bc8 <HAL_TIM_PWM_Start>

	// Initialize I2C slave communication
	init_i2c_slave();
 8001b92:	f7ff fa47 	bl	8001024 <init_i2c_slave>

	// Set default values
	memset(rxbuff, 0, I2C_BUFFER_SIZE);
 8001b96:	2210      	movs	r2, #16
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4839      	ldr	r0, [pc, #228]	@ (8001c80 <main+0x184>)
 8001b9c:	f007 fcbe 	bl	800951c <memset>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		/* ps5 controller */
		process_i2c_data();
 8001ba0:	f7ff fae6 	bl	8001170 <process_i2c_data>
//		right = (rxbuff[14] & 0x80) ?
//				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
//		left = (rxbuff[15] & 0x80) ?
//				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
//
		printf(
 8001ba4:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <main+0x188>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001baa:	4b37      	ldr	r3, [pc, #220]	@ (8001c88 <main+0x18c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001bb0:	4b36      	ldr	r3, [pc, #216]	@ (8001c8c <main+0x190>)
 8001bb2:	6818      	ldr	r0, [r3, #0]
 8001bb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8001bb6:	4b36      	ldr	r3, [pc, #216]	@ (8001c90 <main+0x194>)
 8001bb8:	681d      	ldr	r5, [r3, #0]
 8001bba:	4b36      	ldr	r3, [pc, #216]	@ (8001c94 <main+0x198>)
 8001bbc:	681e      	ldr	r6, [r3, #0]
 8001bbe:	4b36      	ldr	r3, [pc, #216]	@ (8001c98 <main+0x19c>)
 8001bc0:	681c      	ldr	r4, [r3, #0]
 8001bc2:	623c      	str	r4, [r7, #32]
 8001bc4:	4b35      	ldr	r3, [pc, #212]	@ (8001c9c <main+0x1a0>)
 8001bc6:	6819      	ldr	r1, [r3, #0]
 8001bc8:	61f9      	str	r1, [r7, #28]
 8001bca:	4b35      	ldr	r3, [pc, #212]	@ (8001ca0 <main+0x1a4>)
 8001bcc:	6818      	ldr	r0, [r3, #0]
 8001bce:	61b8      	str	r0, [r7, #24]
 8001bd0:	4b34      	ldr	r3, [pc, #208]	@ (8001ca4 <main+0x1a8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	617b      	str	r3, [r7, #20]
 8001bd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ca8 <main+0x1ac>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	613a      	str	r2, [r7, #16]
 8001bdc:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <main+0x1b0>)
 8001bde:	681c      	ldr	r4, [r3, #0]
 8001be0:	60fc      	str	r4, [r7, #12]
 8001be2:	4b33      	ldr	r3, [pc, #204]	@ (8001cb0 <main+0x1b4>)
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	60b9      	str	r1, [r7, #8]
 8001be8:	4b32      	ldr	r3, [pc, #200]	@ (8001cb4 <main+0x1b8>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	4b32      	ldr	r3, [pc, #200]	@ (8001cb8 <main+0x1bc>)
 8001bf0:	681c      	ldr	r4, [r3, #0]
 8001bf2:	4b32      	ldr	r3, [pc, #200]	@ (8001cbc <main+0x1c0>)
 8001bf4:	6818      	ldr	r0, [r3, #0]
 8001bf6:	4b32      	ldr	r3, [pc, #200]	@ (8001cc0 <main+0x1c4>)
 8001bf8:	6819      	ldr	r1, [r3, #0]
 8001bfa:	4b32      	ldr	r3, [pc, #200]	@ (8001cc4 <main+0x1c8>)
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <main+0x1cc>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	930e      	str	r3, [sp, #56]	@ 0x38
 8001c04:	920d      	str	r2, [sp, #52]	@ 0x34
 8001c06:	910c      	str	r1, [sp, #48]	@ 0x30
 8001c08:	900b      	str	r0, [sp, #44]	@ 0x2c
 8001c0a:	940a      	str	r4, [sp, #40]	@ 0x28
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	9009      	str	r0, [sp, #36]	@ 0x24
 8001c10:	68b9      	ldr	r1, [r7, #8]
 8001c12:	9108      	str	r1, [sp, #32]
 8001c14:	68fc      	ldr	r4, [r7, #12]
 8001c16:	9407      	str	r4, [sp, #28]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	9206      	str	r2, [sp, #24]
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	9305      	str	r3, [sp, #20]
 8001c20:	69b8      	ldr	r0, [r7, #24]
 8001c22:	9004      	str	r0, [sp, #16]
 8001c24:	69f9      	ldr	r1, [r7, #28]
 8001c26:	9103      	str	r1, [sp, #12]
 8001c28:	6a3c      	ldr	r4, [r7, #32]
 8001c2a:	9402      	str	r4, [sp, #8]
 8001c2c:	9601      	str	r6, [sp, #4]
 8001c2e:	9500      	str	r5, [sp, #0]
 8001c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001c36:	4825      	ldr	r0, [pc, #148]	@ (8001ccc <main+0x1d0>)
 8001c38:	f007 fb08 	bl	800924c <iprintf>
//				down, right, left, target_wf, target_wrl, target_wrr, ebike_running);

//			HAL_I2C_Slave_Receive_IT(&hi2c2, rxbuff, 16);

		/* 3 wheel */
		MovementState current_state = STOP;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

		rectToPolar();
 8001c42:	f7ff fc2f 	bl	80014a4 <rectToPolar>
		compute3wheel();
 8001c46:	f7ff fcdf 	bl	8001608 <compute3wheel>
		applyDeceleration();
 8001c4a:	f7ff fe49 	bl	80018e0 <applyDeceleration>

		if (current_state == CLOCKWISE || current_state == ANTICLOCKWISE) {
 8001c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001c52:	2b05      	cmp	r3, #5
 8001c54:	d003      	beq.n	8001c5e <main+0x162>
 8001c56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d138      	bne.n	8001cd0 <main+0x1d4>
			stopEncoders();
 8001c5e:	f7ff fbf5 	bl	800144c <stopEncoders>
 8001c62:	e037      	b.n	8001cd4 <main+0x1d8>
 8001c64:	200002bc 	.word	0x200002bc
 8001c68:	20000304 	.word	0x20000304
 8001c6c:	2000034c 	.word	0x2000034c
 8001c70:	20000394 	.word	0x20000394
 8001c74:	20000424 	.word	0x20000424
 8001c78:	2000046c 	.word	0x2000046c
 8001c7c:	200004b4 	.word	0x200004b4
 8001c80:	20000688 	.word	0x20000688
 8001c84:	20000698 	.word	0x20000698
 8001c88:	2000069c 	.word	0x2000069c
 8001c8c:	200006a0 	.word	0x200006a0
 8001c90:	200006a4 	.word	0x200006a4
 8001c94:	200006b0 	.word	0x200006b0
 8001c98:	200006b4 	.word	0x200006b4
 8001c9c:	200006a8 	.word	0x200006a8
 8001ca0:	200006ac 	.word	0x200006ac
 8001ca4:	200006c8 	.word	0x200006c8
 8001ca8:	200006cc 	.word	0x200006cc
 8001cac:	200006d0 	.word	0x200006d0
 8001cb0:	200006d4 	.word	0x200006d4
 8001cb4:	200006b8 	.word	0x200006b8
 8001cb8:	200006bc 	.word	0x200006bc
 8001cbc:	200006c4 	.word	0x200006c4
 8001cc0:	200006c0 	.word	0x200006c0
 8001cc4:	20000648 	.word	0x20000648
 8001cc8:	2000000c 	.word	0x2000000c
 8001ccc:	0800e3b4 	.word	0x0800e3b4
		} else {
			startEncoders();
 8001cd0:	f7ff fbd2 	bl	8001478 <startEncoders>
		}

		/* 3 encoders */
		uint16_t raw_counter1 = __HAL_TIM_GET_COUNTER(&htim1);
 8001cd4:	4b75      	ldr	r3, [pc, #468]	@ (8001eac <main+0x3b0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	87bb      	strh	r3, [r7, #60]	@ 0x3c
		uint32_t raw_counter2 = __HAL_TIM_GET_COUNTER(&htim2);
 8001cdc:	4b74      	ldr	r3, [pc, #464]	@ (8001eb0 <main+0x3b4>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
		uint16_t raw_counter3 = __HAL_TIM_GET_COUNTER(&htim3);
 8001ce4:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <main+0x3b8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cea:	86fb      	strh	r3, [r7, #54]	@ 0x36

		// Convert to signed values
		signed_counter1 =
				(raw_counter1 < 32768) ?
						(int16_t) raw_counter1 :
 8001cec:	f9b7 203c 	ldrsh.w	r2, [r7, #60]	@ 0x3c
		signed_counter1 =
 8001cf0:	4b71      	ldr	r3, [pc, #452]	@ (8001eb8 <main+0x3bc>)
 8001cf2:	801a      	strh	r2, [r3, #0]
						(int16_t) (raw_counter1 - 65536);
		signed_counter2 =
				(raw_counter2 < 2147483648) ?
						(int32_t) raw_counter2 :
 8001cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
		signed_counter2 =
 8001cf6:	4a71      	ldr	r2, [pc, #452]	@ (8001ebc <main+0x3c0>)
 8001cf8:	6013      	str	r3, [r2, #0]
						(int32_t) (raw_counter2 - 4294967296);
		signed_counter3 =
				(raw_counter3 < 32768) ?
						(int16_t) raw_counter3 :
 8001cfa:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
		signed_counter3 =
 8001cfe:	4b70      	ldr	r3, [pc, #448]	@ (8001ec0 <main+0x3c4>)
 8001d00:	801a      	strh	r2, [r3, #0]
		////				printf("Yaw: %.2f\r\n", yaw);
		//		printf("Encoder position: %d %d %d X: %.2f Y: %.2f\r\n",
		//				signed_counter1, signed_counter2, signed_counter3, x, y);
		/* Stepper */
		//		stepper_running1 = 1;
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 8001d02:	4b70      	ldr	r3, [pc, #448]	@ (8001ec4 <main+0x3c8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	2108      	movs	r1, #8
 8001d14:	486c      	ldr	r0, [pc, #432]	@ (8001ec8 <main+0x3cc>)
 8001d16:	f002 f95d 	bl	8003fd4 <HAL_GPIO_WritePin>
				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,
 8001d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec4 <main+0x3c8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	bf0c      	ite	eq
 8001d22:	2301      	moveq	r3, #1
 8001d24:	2300      	movne	r3, #0
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	461a      	mov	r2, r3
 8001d2a:	2140      	movs	r1, #64	@ 0x40
 8001d2c:	4866      	ldr	r0, [pc, #408]	@ (8001ec8 <main+0x3cc>)
 8001d2e:	f002 f951 	bl	8003fd4 <HAL_GPIO_WritePin>
				!direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 8001d32:	4b66      	ldr	r3, [pc, #408]	@ (8001ecc <main+0x3d0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d117      	bne.n	8001d6a <main+0x26e>
 8001d3a:	4b65      	ldr	r3, [pc, #404]	@ (8001ed0 <main+0x3d4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <main+0x26e>
			direction1 = 1;  // Set to Anti-clockwise
 8001d42:	4b60      	ldr	r3, [pc, #384]	@ (8001ec4 <main+0x3c8>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 8001d48:	4b62      	ldr	r3, [pc, #392]	@ (8001ed4 <main+0x3d8>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8001d4e:	4b62      	ldr	r3, [pc, #392]	@ (8001ed8 <main+0x3dc>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]
			target_steps = STEPS;
 8001d54:	4b61      	ldr	r3, [pc, #388]	@ (8001edc <main+0x3e0>)
 8001d56:	22f0      	movs	r2, #240	@ 0xf0
 8001d58:	601a      	str	r2, [r3, #0]
			target_steps1 = STEPS;
 8001d5a:	4b61      	ldr	r3, [pc, #388]	@ (8001ee0 <main+0x3e4>)
 8001d5c:	22f0      	movs	r2, #240	@ 0xf0
 8001d5e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2180      	movs	r1, #128	@ 0x80
 8001d64:	4858      	ldr	r0, [pc, #352]	@ (8001ec8 <main+0x3cc>)
 8001d66:	f002 f935 	bl	8003fd4 <HAL_GPIO_WritePin>
		}
		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8001d6a:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee4 <main+0x3e8>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d117      	bne.n	8001da2 <main+0x2a6>
 8001d72:	4b5d      	ldr	r3, [pc, #372]	@ (8001ee8 <main+0x3ec>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d113      	bne.n	8001da2 <main+0x2a6>
			direction1 = 0;  // Set to Clockwise
 8001d7a:	4b52      	ldr	r3, [pc, #328]	@ (8001ec4 <main+0x3c8>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
			stepper_running = 1;
 8001d80:	4b54      	ldr	r3, [pc, #336]	@ (8001ed4 <main+0x3d8>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
			stepper_running1 = 1;
 8001d86:	4b54      	ldr	r3, [pc, #336]	@ (8001ed8 <main+0x3dc>)
 8001d88:	2201      	movs	r2, #1
 8001d8a:	601a      	str	r2, [r3, #0]
			target_steps = STEPS;
 8001d8c:	4b53      	ldr	r3, [pc, #332]	@ (8001edc <main+0x3e0>)
 8001d8e:	22f0      	movs	r2, #240	@ 0xf0
 8001d90:	601a      	str	r2, [r3, #0]
			target_steps1 = STEPS;
 8001d92:	4b53      	ldr	r3, [pc, #332]	@ (8001ee0 <main+0x3e4>)
 8001d94:	22f0      	movs	r2, #240	@ 0xf0
 8001d96:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2180      	movs	r1, #128	@ 0x80
 8001d9c:	484a      	ldr	r0, [pc, #296]	@ (8001ec8 <main+0x3cc>)
 8001d9e:	f002 f919 	bl	8003fd4 <HAL_GPIO_WritePin>
		}
		if (cir == 1 && !prev_cir) {
 8001da2:	4b52      	ldr	r3, [pc, #328]	@ (8001eec <main+0x3f0>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d114      	bne.n	8001dd4 <main+0x2d8>
 8001daa:	4b51      	ldr	r3, [pc, #324]	@ (8001ef0 <main+0x3f4>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d110      	bne.n	8001dd4 <main+0x2d8>
			stepper_running = 0;
 8001db2:	4b48      	ldr	r3, [pc, #288]	@ (8001ed4 <main+0x3d8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
			stepper_running1 = 0;
 8001db8:	4b47      	ldr	r3, [pc, #284]	@ (8001ed8 <main+0x3dc>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
			current_steps = 0;
 8001dbe:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef4 <main+0x3f8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
			current_steps1 = 0;
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ef8 <main+0x3fc>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001dca:	2201      	movs	r2, #1
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	483e      	ldr	r0, [pc, #248]	@ (8001ec8 <main+0x3cc>)
 8001dd0:	f002 f900 	bl	8003fd4 <HAL_GPIO_WritePin>
		}
		prev_ll1 = ll1;
 8001dd4:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <main+0x3d0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ed0 <main+0x3d4>)
 8001dda:	6013      	str	r3, [r2, #0]
		prev_rr1 = rr1;
 8001ddc:	4b41      	ldr	r3, [pc, #260]	@ (8001ee4 <main+0x3e8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a41      	ldr	r2, [pc, #260]	@ (8001ee8 <main+0x3ec>)
 8001de2:	6013      	str	r3, [r2, #0]
		prev_cir = cir;
 8001de4:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <main+0x3f0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a41      	ldr	r2, [pc, #260]	@ (8001ef0 <main+0x3f4>)
 8001dea:	6013      	str	r3, [r2, #0]
		if (stepper_running && (HAL_GetTick() - last_step_time) >= step_delay
 8001dec:	4b39      	ldr	r3, [pc, #228]	@ (8001ed4 <main+0x3d8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d02e      	beq.n	8001e52 <main+0x356>
 8001df4:	f001 fce6 	bl	80037c4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	4b40      	ldr	r3, [pc, #256]	@ (8001efc <main+0x400>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	4a3f      	ldr	r2, [pc, #252]	@ (8001f00 <main+0x404>)
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d324      	bcc.n	8001e52 <main+0x356>
				&& current_steps < target_steps) {
 8001e08:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef4 <main+0x3f8>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	4b33      	ldr	r3, [pc, #204]	@ (8001edc <main+0x3e0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d21e      	bcs.n	8001e52 <main+0x356>
			last_step_time = HAL_GetTick(); // Update last step time
 8001e14:	f001 fcd6 	bl	80037c4 <HAL_GetTick>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a38      	ldr	r2, [pc, #224]	@ (8001efc <main+0x400>)
 8001e1c:	6013      	str	r3, [r2, #0]

			if (step_state == 0) {
 8001e1e:	4b39      	ldr	r3, [pc, #228]	@ (8001f04 <main+0x408>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10d      	bne.n	8001e42 <main+0x346>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 8001e26:	2201      	movs	r2, #1
 8001e28:	2120      	movs	r1, #32
 8001e2a:	4827      	ldr	r0, [pc, #156]	@ (8001ec8 <main+0x3cc>)
 8001e2c:	f002 f8d2 	bl	8003fd4 <HAL_GPIO_WritePin>
				step_state = 1;
 8001e30:	4b34      	ldr	r3, [pc, #208]	@ (8001f04 <main+0x408>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]
				current_steps++;
 8001e36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef4 <main+0x3f8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8001ef4 <main+0x3f8>)
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	e007      	b.n	8001e52 <main+0x356>
			} else {
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 8001e42:	2200      	movs	r2, #0
 8001e44:	2120      	movs	r1, #32
 8001e46:	4820      	ldr	r0, [pc, #128]	@ (8001ec8 <main+0x3cc>)
 8001e48:	f002 f8c4 	bl	8003fd4 <HAL_GPIO_WritePin>
				step_state = 0;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <main+0x408>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
			}
		}
		if (stepper_running1 && (HAL_GetTick() - last_step_time1) >= step_delay1
 8001e52:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <main+0x3dc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d067      	beq.n	8001f2a <main+0x42e>
 8001e5a:	f001 fcb3 	bl	80037c4 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b29      	ldr	r3, [pc, #164]	@ (8001f08 <main+0x40c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a29      	ldr	r2, [pc, #164]	@ (8001f0c <main+0x410>)
 8001e68:	6812      	ldr	r2, [r2, #0]
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d35d      	bcc.n	8001f2a <main+0x42e>
				&& current_steps1 < target_steps1) {
 8001e6e:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <main+0x3fc>)
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee0 <main+0x3e4>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d257      	bcs.n	8001f2a <main+0x42e>
			last_step_time1 = HAL_GetTick(); // Update last step time
 8001e7a:	f001 fca3 	bl	80037c4 <HAL_GetTick>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <main+0x40c>)
 8001e82:	6013      	str	r3, [r2, #0]

			if (step_state1 == 0) {
 8001e84:	4b22      	ldr	r3, [pc, #136]	@ (8001f10 <main+0x414>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d145      	bne.n	8001f18 <main+0x41c>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Step HIGH
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e92:	4820      	ldr	r0, [pc, #128]	@ (8001f14 <main+0x418>)
 8001e94:	f002 f89e 	bl	8003fd4 <HAL_GPIO_WritePin>
				step_state1 = 1;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <main+0x414>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
				current_steps1++;
 8001e9e:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <main+0x3fc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	4a14      	ldr	r2, [pc, #80]	@ (8001ef8 <main+0x3fc>)
 8001ea6:	6013      	str	r3, [r2, #0]
 8001ea8:	e03f      	b.n	8001f2a <main+0x42e>
 8001eaa:	bf00      	nop
 8001eac:	200002bc 	.word	0x200002bc
 8001eb0:	20000304 	.word	0x20000304
 8001eb4:	2000034c 	.word	0x2000034c
 8001eb8:	2000067c 	.word	0x2000067c
 8001ebc:	20000680 	.word	0x20000680
 8001ec0:	20000684 	.word	0x20000684
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	200006c8 	.word	0x200006c8
 8001ed0:	2000065c 	.word	0x2000065c
 8001ed4:	20000640 	.word	0x20000640
 8001ed8:	20000644 	.word	0x20000644
 8001edc:	2000066c 	.word	0x2000066c
 8001ee0:	20000674 	.word	0x20000674
 8001ee4:	200006cc 	.word	0x200006cc
 8001ee8:	20000660 	.word	0x20000660
 8001eec:	200006b4 	.word	0x200006b4
 8001ef0:	2000064c 	.word	0x2000064c
 8001ef4:	20000670 	.word	0x20000670
 8001ef8:	20000678 	.word	0x20000678
 8001efc:	20000630 	.word	0x20000630
 8001f00:	20000004 	.word	0x20000004
 8001f04:	20000638 	.word	0x20000638
 8001f08:	20000634 	.word	0x20000634
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	2000063c 	.word	0x2000063c
 8001f14:	40020400 	.word	0x40020400
			} else {
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Step LOW
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f1e:	486c      	ldr	r0, [pc, #432]	@ (80020d0 <main+0x5d4>)
 8001f20:	f002 f858 	bl	8003fd4 <HAL_GPIO_WritePin>
				step_state1 = 0;
 8001f24:	4b6b      	ldr	r3, [pc, #428]	@ (80020d4 <main+0x5d8>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
			}
		}
		// Stop when target steps are reached
		if (current_steps >= target_steps) {
 8001f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80020d8 <main+0x5dc>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	4b6b      	ldr	r3, [pc, #428]	@ (80020dc <main+0x5e0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d30a      	bcc.n	8001f4c <main+0x450>
			stepper_running = 0;
 8001f36:	4b6a      	ldr	r3, [pc, #424]	@ (80020e0 <main+0x5e4>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
			current_steps = 0;
 8001f3c:	4b66      	ldr	r3, [pc, #408]	@ (80020d8 <main+0x5dc>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	4867      	ldr	r0, [pc, #412]	@ (80020e4 <main+0x5e8>)
 8001f48:	f002 f844 	bl	8003fd4 <HAL_GPIO_WritePin>
		}
		if (current_steps1 >= target_steps1) {
 8001f4c:	4b66      	ldr	r3, [pc, #408]	@ (80020e8 <main+0x5ec>)
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	4b66      	ldr	r3, [pc, #408]	@ (80020ec <main+0x5f0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d30a      	bcc.n	8001f6e <main+0x472>
			stepper_running1 = 0;
 8001f58:	4b65      	ldr	r3, [pc, #404]	@ (80020f0 <main+0x5f4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
			current_steps1 = 0;
 8001f5e:	4b62      	ldr	r3, [pc, #392]	@ (80020e8 <main+0x5ec>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001f64:	2201      	movs	r2, #1
 8001f66:	2180      	movs	r1, #128	@ 0x80
 8001f68:	485e      	ldr	r0, [pc, #376]	@ (80020e4 <main+0x5e8>)
 8001f6a:	f002 f833 	bl	8003fd4 <HAL_GPIO_WritePin>
		}

		/* Dribbling */
		if (tri == 1 && !prev_tri) {
 8001f6e:	4b61      	ldr	r3, [pc, #388]	@ (80020f4 <main+0x5f8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d106      	bne.n	8001f84 <main+0x488>
 8001f76:	4b60      	ldr	r3, [pc, #384]	@ (80020f8 <main+0x5fc>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <main+0x488>
			ebike_running = 1;
 8001f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80020fc <main+0x600>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
		}
		if (cro == 1 && !prev_cro) {  // cro button pressed
 8001f84:	4b5e      	ldr	r3, [pc, #376]	@ (8002100 <main+0x604>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d109      	bne.n	8001fa0 <main+0x4a4>
 8001f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002104 <main+0x608>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d105      	bne.n	8001fa0 <main+0x4a4>
			printf("cross pressed");
 8001f94:	485c      	ldr	r0, [pc, #368]	@ (8002108 <main+0x60c>)
 8001f96:	f007 f959 	bl	800924c <iprintf>
			//			direction1 = 0;  // Set to Clockwise
			ebike_running = 0;
 8001f9a:	4b58      	ldr	r3, [pc, #352]	@ (80020fc <main+0x600>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
		}
		if (ll2 == 1 && !prev_ll2) {
 8001fa0:	4b5a      	ldr	r3, [pc, #360]	@ (800210c <main+0x610>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d108      	bne.n	8001fba <main+0x4be>
 8001fa8:	4b59      	ldr	r3, [pc, #356]	@ (8002110 <main+0x614>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d104      	bne.n	8001fba <main+0x4be>
			drib_speed = drib_speed - 2;
 8001fb0:	4b58      	ldr	r3, [pc, #352]	@ (8002114 <main+0x618>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3b02      	subs	r3, #2
 8001fb6:	4a57      	ldr	r2, [pc, #348]	@ (8002114 <main+0x618>)
 8001fb8:	6013      	str	r3, [r2, #0]
		}
		if (rr2 == 1 && !prev_rr2) {
 8001fba:	4b57      	ldr	r3, [pc, #348]	@ (8002118 <main+0x61c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d108      	bne.n	8001fd4 <main+0x4d8>
 8001fc2:	4b56      	ldr	r3, [pc, #344]	@ (800211c <main+0x620>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d104      	bne.n	8001fd4 <main+0x4d8>
			drib_speed = drib_speed + 2; //62 speed for passing 50 for dribbling
 8001fca:	4b52      	ldr	r3, [pc, #328]	@ (8002114 <main+0x618>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	3302      	adds	r3, #2
 8001fd0:	4a50      	ldr	r2, [pc, #320]	@ (8002114 <main+0x618>)
 8001fd2:	6013      	str	r3, [r2, #0]
		}
		if (down == 1 && !prev_down) {
 8001fd4:	4b52      	ldr	r3, [pc, #328]	@ (8002120 <main+0x624>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d106      	bne.n	8001fea <main+0x4ee>
 8001fdc:	4b51      	ldr	r3, [pc, #324]	@ (8002124 <main+0x628>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d102      	bne.n	8001fea <main+0x4ee>
			drib_speed = 70;
 8001fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8002114 <main+0x618>)
 8001fe6:	2246      	movs	r2, #70	@ 0x46
 8001fe8:	601a      	str	r2, [r3, #0]
		}
		if (drib_speed < 0) {
			drib_speed = 0;
		}
		if (drib_speed > 100) {
 8001fea:	4b4a      	ldr	r3, [pc, #296]	@ (8002114 <main+0x618>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2b64      	cmp	r3, #100	@ 0x64
 8001ff0:	d902      	bls.n	8001ff8 <main+0x4fc>
			drib_speed = 100;
 8001ff2:	4b48      	ldr	r3, [pc, #288]	@ (8002114 <main+0x618>)
 8001ff4:	2264      	movs	r2, #100	@ 0x64
 8001ff6:	601a      	str	r2, [r3, #0]
		}
		prev_ll2 = ll2;
 8001ff8:	4b44      	ldr	r3, [pc, #272]	@ (800210c <main+0x610>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a44      	ldr	r2, [pc, #272]	@ (8002110 <main+0x614>)
 8001ffe:	6013      	str	r3, [r2, #0]
		prev_rr2 = rr2;
 8002000:	4b45      	ldr	r3, [pc, #276]	@ (8002118 <main+0x61c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a45      	ldr	r2, [pc, #276]	@ (800211c <main+0x620>)
 8002006:	6013      	str	r3, [r2, #0]
		prev_tri = tri;
 8002008:	4b3a      	ldr	r3, [pc, #232]	@ (80020f4 <main+0x5f8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a3a      	ldr	r2, [pc, #232]	@ (80020f8 <main+0x5fc>)
 800200e:	6013      	str	r3, [r2, #0]
		prev_cro = cro;
 8002010:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <main+0x604>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a3b      	ldr	r2, [pc, #236]	@ (8002104 <main+0x608>)
 8002016:	6013      	str	r3, [r2, #0]
		prev_down = down;
 8002018:	4b41      	ldr	r3, [pc, #260]	@ (8002120 <main+0x624>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a41      	ldr	r2, [pc, #260]	@ (8002124 <main+0x628>)
 800201e:	6013      	str	r3, [r2, #0]
		if (ebike_running) {
 8002020:	4b36      	ldr	r3, [pc, #216]	@ (80020fc <main+0x600>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d012      	beq.n	800204e <main+0x552>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8002028:	2201      	movs	r2, #1
 800202a:	2110      	movs	r1, #16
 800202c:	483e      	ldr	r0, [pc, #248]	@ (8002128 <main+0x62c>)
 800202e:	f001 ffd1 	bl	8003fd4 <HAL_GPIO_WritePin>
//			TIM1->CCR3 = (drib_speed * 999) / 100;  //rpm 2000 test
//			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3,
 8002032:	4b38      	ldr	r3, [pc, #224]	@ (8002114 <main+0x618>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800203a:	fb03 f202 	mul.w	r2, r3, r2
 800203e:	4b3b      	ldr	r3, [pc, #236]	@ (800212c <main+0x630>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	493b      	ldr	r1, [pc, #236]	@ (8002130 <main+0x634>)
 8002044:	fba1 1202 	umull	r1, r2, r1, r2
 8002048:	0952      	lsrs	r2, r2, #5
 800204a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800204c:	e003      	b.n	8002056 <main+0x55a>
					((drib_speed * 999) / 100));
		} else {
			//			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, 1);
//			TIM1->CCR3 = (0 * 999) / 100;
//			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, ((0 * 999) / 100));
 800204e:	4b37      	ldr	r3, [pc, #220]	@ (800212c <main+0x630>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2200      	movs	r2, #0
 8002054:	63da      	str	r2, [r3, #60]	@ 0x3c
		}

		// pneumatics
		if (squ == 1) {
 8002056:	4b37      	ldr	r3, [pc, #220]	@ (8002134 <main+0x638>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d103      	bne.n	8002066 <main+0x56a>
			pneumatic_open = 1;
 800205e:	4b36      	ldr	r3, [pc, #216]	@ (8002138 <main+0x63c>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e002      	b.n	800206c <main+0x570>
		} else {
			pneumatic_open = 0;
 8002066:	4b34      	ldr	r3, [pc, #208]	@ (8002138 <main+0x63c>)
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
		}
		//		prev_squ = squ;
		if (pneumatic_open) {
 800206c:	4b32      	ldr	r3, [pc, #200]	@ (8002138 <main+0x63c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <main+0x584>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8002074:	2201      	movs	r2, #1
 8002076:	2104      	movs	r1, #4
 8002078:	4815      	ldr	r0, [pc, #84]	@ (80020d0 <main+0x5d4>)
 800207a:	f001 ffab 	bl	8003fd4 <HAL_GPIO_WritePin>
 800207e:	e004      	b.n	800208a <main+0x58e>
		} else {
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	2104      	movs	r1, #4
 8002084:	4812      	ldr	r0, [pc, #72]	@ (80020d0 <main+0x5d4>)
 8002086:	f001 ffa5 	bl	8003fd4 <HAL_GPIO_WritePin>
//		} else if (right == 1) {
//
//			htim3.Instance->CCR3 = 125; // duty cycle is 2 ms (180 degrees)
//
//		}
		if (left == 1) {
 800208a:	4b2c      	ldr	r3, [pc, #176]	@ (800213c <main+0x640>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d10c      	bne.n	80020ac <main+0x5b0>
//			Set_Servo_Angle(&htim5, TIM_CHANNEL_1, 180);
			htim1.Instance->CCR1 = 75; // 90 degree
 8002092:	4b26      	ldr	r3, [pc, #152]	@ (800212c <main+0x630>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	224b      	movs	r2, #75	@ 0x4b
 8002098:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR2 = 75;
 800209a:	4b24      	ldr	r3, [pc, #144]	@ (800212c <main+0x630>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	224b      	movs	r2, #75	@ 0x4b
 80020a0:	639a      	str	r2, [r3, #56]	@ 0x38
			htim1.Instance->CCR3 = 75;
 80020a2:	4b22      	ldr	r3, [pc, #136]	@ (800212c <main+0x630>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	224b      	movs	r2, #75	@ 0x4b
 80020a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020aa:	e579      	b.n	8001ba0 <main+0xa4>
		} else if (right == 1) {
 80020ac:	4b24      	ldr	r3, [pc, #144]	@ (8002140 <main+0x644>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f47f ad75 	bne.w	8001ba0 <main+0xa4>
//			Set_Servo_Angle(&htim5, TIM_CHANNEL_1, 90); // duty cycle is 2 ms (180 degrees)
			htim1.Instance->CCR1 = 125; // 180 degree
 80020b6:	4b1d      	ldr	r3, [pc, #116]	@ (800212c <main+0x630>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	227d      	movs	r2, #125	@ 0x7d
 80020bc:	635a      	str	r2, [r3, #52]	@ 0x34
			htim1.Instance->CCR2 = 125;
 80020be:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <main+0x630>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	227d      	movs	r2, #125	@ 0x7d
 80020c4:	639a      	str	r2, [r3, #56]	@ 0x38
			htim1.Instance->CCR3 = 125;
 80020c6:	4b19      	ldr	r3, [pc, #100]	@ (800212c <main+0x630>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	227d      	movs	r2, #125	@ 0x7d
 80020cc:	63da      	str	r2, [r3, #60]	@ 0x3c
	while (1) {
 80020ce:	e567      	b.n	8001ba0 <main+0xa4>
 80020d0:	40020400 	.word	0x40020400
 80020d4:	2000063c 	.word	0x2000063c
 80020d8:	20000670 	.word	0x20000670
 80020dc:	2000066c 	.word	0x2000066c
 80020e0:	20000640 	.word	0x20000640
 80020e4:	40020800 	.word	0x40020800
 80020e8:	20000678 	.word	0x20000678
 80020ec:	20000674 	.word	0x20000674
 80020f0:	20000644 	.word	0x20000644
 80020f4:	200006b0 	.word	0x200006b0
 80020f8:	20000650 	.word	0x20000650
 80020fc:	20000648 	.word	0x20000648
 8002100:	200006a8 	.word	0x200006a8
 8002104:	20000654 	.word	0x20000654
 8002108:	0800e410 	.word	0x0800e410
 800210c:	200006d0 	.word	0x200006d0
 8002110:	20000664 	.word	0x20000664
 8002114:	2000000c 	.word	0x2000000c
 8002118:	200006d4 	.word	0x200006d4
 800211c:	20000668 	.word	0x20000668
 8002120:	200006bc 	.word	0x200006bc
 8002124:	20000658 	.word	0x20000658
 8002128:	40020000 	.word	0x40020000
 800212c:	200002bc 	.word	0x200002bc
 8002130:	51eb851f 	.word	0x51eb851f
 8002134:	200006ac 	.word	0x200006ac
 8002138:	200006d8 	.word	0x200006d8
 800213c:	200006c0 	.word	0x200006c0
 8002140:	200006c4 	.word	0x200006c4

08002144 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b094      	sub	sp, #80	@ 0x50
 8002148:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	2234      	movs	r2, #52	@ 0x34
 8002150:	2100      	movs	r1, #0
 8002152:	4618      	mov	r0, r3
 8002154:	f007 f9e2 	bl	800951c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	4b2c      	ldr	r3, [pc, #176]	@ (8002220 <SystemClock_Config+0xdc>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002170:	4a2b      	ldr	r2, [pc, #172]	@ (8002220 <SystemClock_Config+0xdc>)
 8002172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002176:	6413      	str	r3, [r2, #64]	@ 0x40
 8002178:	4b29      	ldr	r3, [pc, #164]	@ (8002220 <SystemClock_Config+0xdc>)
 800217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002180:	607b      	str	r3, [r7, #4]
 8002182:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002184:	2300      	movs	r3, #0
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	4b26      	ldr	r3, [pc, #152]	@ (8002224 <SystemClock_Config+0xe0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a25      	ldr	r2, [pc, #148]	@ (8002224 <SystemClock_Config+0xe0>)
 800218e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b23      	ldr	r3, [pc, #140]	@ (8002224 <SystemClock_Config+0xe0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800219c:	603b      	str	r3, [r7, #0]
 800219e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021a4:	2301      	movs	r3, #1
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021a8:	2310      	movs	r3, #16
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ac:	2302      	movs	r3, #2
 80021ae:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021b0:	2300      	movs	r3, #0
 80021b2:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = 8;
 80021b4:	2308      	movs	r3, #8
 80021b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80021b8:	23b4      	movs	r3, #180	@ 0xb4
 80021ba:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021bc:	2302      	movs	r3, #2
 80021be:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80021c0:	2302      	movs	r3, #2
 80021c2:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80021c4:	2302      	movs	r3, #2
 80021c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80021c8:	f107 031c 	add.w	r3, r7, #28
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 f9bf 	bl	8006550 <HAL_RCC_OscConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0x98>
		Error_Handler();
 80021d8:	f000 fd30 	bl	8002c3c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80021dc:	f003 fe1e 	bl	8005e1c <HAL_PWREx_EnableOverDrive>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <SystemClock_Config+0xa6>
		Error_Handler();
 80021e6:	f000 fd29 	bl	8002c3c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80021ea:	230f      	movs	r3, #15
 80021ec:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ee:	2302      	movs	r3, #2
 80021f0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021fa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 80021fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002200:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	2105      	movs	r1, #5
 8002208:	4618      	mov	r0, r3
 800220a:	f003 fe57 	bl	8005ebc <HAL_RCC_ClockConfig>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d001      	beq.n	8002218 <SystemClock_Config+0xd4>
		Error_Handler();
 8002214:	f000 fd12 	bl	8002c3c <Error_Handler>
	}
}
 8002218:	bf00      	nop
 800221a:	3750      	adds	r7, #80	@ 0x50
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40023800 	.word	0x40023800
 8002224:	40007000 	.word	0x40007000

08002228 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <MX_I2C1_Init+0x50>)
 800222e:	4a13      	ldr	r2, [pc, #76]	@ (800227c <MX_I2C1_Init+0x54>)
 8002230:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002234:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <MX_I2C1_Init+0x58>)
 8002236:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002238:	4b0f      	ldr	r3, [pc, #60]	@ (8002278 <MX_I2C1_Init+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002240:	2200      	movs	r2, #0
 8002242:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002244:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800224a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800224c:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <MX_I2C1_Init+0x50>)
 800224e:	2200      	movs	r2, #0
 8002250:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002258:	4b07      	ldr	r3, [pc, #28]	@ (8002278 <MX_I2C1_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002264:	4804      	ldr	r0, [pc, #16]	@ (8002278 <MX_I2C1_Init+0x50>)
 8002266:	f001 fecf 	bl	8004008 <HAL_I2C_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002270:	f000 fce4 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000214 	.word	0x20000214
 800227c:	40005400 	.word	0x40005400
 8002280:	000186a0 	.word	0x000186a0

08002284 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002288:	4b12      	ldr	r3, [pc, #72]	@ (80022d4 <MX_I2C2_Init+0x50>)
 800228a:	4a13      	ldr	r2, [pc, #76]	@ (80022d8 <MX_I2C2_Init+0x54>)
 800228c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800228e:	4b11      	ldr	r3, [pc, #68]	@ (80022d4 <MX_I2C2_Init+0x50>)
 8002290:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <MX_I2C2_Init+0x58>)
 8002292:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002294:	4b0f      	ldr	r3, [pc, #60]	@ (80022d4 <MX_I2C2_Init+0x50>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 32;
 800229a:	4b0e      	ldr	r3, [pc, #56]	@ (80022d4 <MX_I2C2_Init+0x50>)
 800229c:	2220      	movs	r2, #32
 800229e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022a6:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 80022ae:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022b4:	4b07      	ldr	r3, [pc, #28]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022ba:	4b06      	ldr	r3, [pc, #24]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80022c0:	4804      	ldr	r0, [pc, #16]	@ (80022d4 <MX_I2C2_Init+0x50>)
 80022c2:	f001 fea1 	bl	8004008 <HAL_I2C_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_I2C2_Init+0x4c>
		Error_Handler();
 80022cc:	f000 fcb6 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000268 	.word	0x20000268
 80022d8:	40005800 	.word	0x40005800
 80022dc:	000186a0 	.word	0x000186a0

080022e0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b096      	sub	sp, #88	@ 0x58
 80022e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80022e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80022f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80022fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]
 800230e:	615a      	str	r2, [r3, #20]
 8002310:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8002312:	1d3b      	adds	r3, r7, #4
 8002314:	2220      	movs	r2, #32
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f007 f8ff 	bl	800951c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800231e:	4b4b      	ldr	r3, [pc, #300]	@ (800244c <MX_TIM1_Init+0x16c>)
 8002320:	4a4b      	ldr	r2, [pc, #300]	@ (8002450 <MX_TIM1_Init+0x170>)
 8002322:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 899;
 8002324:	4b49      	ldr	r3, [pc, #292]	@ (800244c <MX_TIM1_Init+0x16c>)
 8002326:	f240 3283 	movw	r2, #899	@ 0x383
 800232a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232c:	4b47      	ldr	r3, [pc, #284]	@ (800244c <MX_TIM1_Init+0x16c>)
 800232e:	2200      	movs	r2, #0
 8002330:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 999;
 8002332:	4b46      	ldr	r3, [pc, #280]	@ (800244c <MX_TIM1_Init+0x16c>)
 8002334:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002338:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800233a:	4b44      	ldr	r3, [pc, #272]	@ (800244c <MX_TIM1_Init+0x16c>)
 800233c:	2200      	movs	r2, #0
 800233e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8002340:	4b42      	ldr	r3, [pc, #264]	@ (800244c <MX_TIM1_Init+0x16c>)
 8002342:	2200      	movs	r2, #0
 8002344:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002346:	4b41      	ldr	r3, [pc, #260]	@ (800244c <MX_TIM1_Init+0x16c>)
 8002348:	2200      	movs	r2, #0
 800234a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800234c:	483f      	ldr	r0, [pc, #252]	@ (800244c <MX_TIM1_Init+0x16c>)
 800234e:	f004 fb9d 	bl	8006a8c <HAL_TIM_Base_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8002358:	f000 fc70 	bl	8002c3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800235c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002360:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002362:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002366:	4619      	mov	r1, r3
 8002368:	4838      	ldr	r0, [pc, #224]	@ (800244c <MX_TIM1_Init+0x16c>)
 800236a:	f004 ff83 	bl	8007274 <HAL_TIM_ConfigClockSource>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM1_Init+0x98>
		Error_Handler();
 8002374:	f000 fc62 	bl	8002c3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002378:	4834      	ldr	r0, [pc, #208]	@ (800244c <MX_TIM1_Init+0x16c>)
 800237a:	f004 fbd6 	bl	8006b2a <HAL_TIM_PWM_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8002384:	f000 fc5a 	bl	8002c3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8002390:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002394:	4619      	mov	r1, r3
 8002396:	482d      	ldr	r0, [pc, #180]	@ (800244c <MX_TIM1_Init+0x16c>)
 8002398:	f005 fb50 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM1_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 80023a2:	f000 fc4b 	bl	8002c3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a6:	2360      	movs	r3, #96	@ 0x60
 80023a8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023b2:	2300      	movs	r3, #0
 80023b4:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80023c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c6:	2200      	movs	r2, #0
 80023c8:	4619      	mov	r1, r3
 80023ca:	4820      	ldr	r0, [pc, #128]	@ (800244c <MX_TIM1_Init+0x16c>)
 80023cc:	f004 fe90 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80023d6:	f000 fc31 	bl	8002c3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 80023da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023de:	2204      	movs	r2, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	481a      	ldr	r0, [pc, #104]	@ (800244c <MX_TIM1_Init+0x16c>)
 80023e4:	f004 fe84 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM1_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 80023ee:	f000 fc25 	bl	8002c3c <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 80023f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f6:	2208      	movs	r2, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	4814      	ldr	r0, [pc, #80]	@ (800244c <MX_TIM1_Init+0x16c>)
 80023fc:	f004 fe78 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8002406:	f000 fc19 	bl	8002c3c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800240a:	2300      	movs	r3, #0
 800240c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800240e:	2300      	movs	r3, #0
 8002410:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800241e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002422:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	4619      	mov	r1, r3
 800242c:	4807      	ldr	r0, [pc, #28]	@ (800244c <MX_TIM1_Init+0x16c>)
 800242e:	f005 fb81 	bl	8007b34 <HAL_TIMEx_ConfigBreakDeadTime>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM1_Init+0x15c>
			!= HAL_OK) {
		Error_Handler();
 8002438:	f000 fc00 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800243c:	4803      	ldr	r0, [pc, #12]	@ (800244c <MX_TIM1_Init+0x16c>)
 800243e:	f000 fec3 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 8002442:	bf00      	nop
 8002444:	3758      	adds	r7, #88	@ 0x58
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200002bc 	.word	0x200002bc
 8002450:	40010000 	.word	0x40010000

08002454 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	@ 0x30
 8002458:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 800245a:	f107 030c 	add.w	r3, r7, #12
 800245e:	2224      	movs	r2, #36	@ 0x24
 8002460:	2100      	movs	r1, #0
 8002462:	4618      	mov	r0, r3
 8002464:	f007 f85a 	bl	800951c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
 800246e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002470:	4b21      	ldr	r3, [pc, #132]	@ (80024f8 <MX_TIM2_Init+0xa4>)
 8002472:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002476:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8002478:	4b1f      	ldr	r3, [pc, #124]	@ (80024f8 <MX_TIM2_Init+0xa4>)
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247e:	4b1e      	ldr	r3, [pc, #120]	@ (80024f8 <MX_TIM2_Init+0xa4>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8002484:	4b1c      	ldr	r3, [pc, #112]	@ (80024f8 <MX_TIM2_Init+0xa4>)
 8002486:	f04f 32ff 	mov.w	r2, #4294967295
 800248a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248c:	4b1a      	ldr	r3, [pc, #104]	@ (80024f8 <MX_TIM2_Init+0xa4>)
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <MX_TIM2_Init+0xa4>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002498:	2301      	movs	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024a0:	2301      	movs	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024a4:	2300      	movs	r3, #0
 80024a6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024b0:	2301      	movs	r3, #1
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024b4:	2300      	movs	r3, #0
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK) {
 80024bc:	f107 030c 	add.w	r3, r7, #12
 80024c0:	4619      	mov	r1, r3
 80024c2:	480d      	ldr	r0, [pc, #52]	@ (80024f8 <MX_TIM2_Init+0xa4>)
 80024c4:	f004 fc48 	bl	8006d58 <HAL_TIM_Encoder_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM2_Init+0x7e>
		Error_Handler();
 80024ce:	f000 fbb5 	bl	8002c3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4806      	ldr	r0, [pc, #24]	@ (80024f8 <MX_TIM2_Init+0xa4>)
 80024e0:	f005 faac 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM2_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 80024ea:	f000 fba7 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	3730      	adds	r7, #48	@ 0x30
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	20000304 	.word	0x20000304

080024fc <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b092      	sub	sp, #72	@ 0x48
 8002500:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8002502:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002506:	2224      	movs	r2, #36	@ 0x24
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f007 f806 	bl	800951c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002510:	f107 031c 	add.w	r3, r7, #28
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800251a:	463b      	mov	r3, r7
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
 8002528:	615a      	str	r2, [r3, #20]
 800252a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800252c:	4b30      	ldr	r3, [pc, #192]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 800252e:	4a31      	ldr	r2, [pc, #196]	@ (80025f4 <MX_TIM3_Init+0xf8>)
 8002530:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 900 - 1;
 8002532:	4b2f      	ldr	r3, [pc, #188]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 8002534:	f240 3283 	movw	r2, #899	@ 0x383
 8002538:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800253a:	4b2d      	ldr	r3, [pc, #180]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 800253c:	2200      	movs	r2, #0
 800253e:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8002540:	4b2b      	ldr	r3, [pc, #172]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 8002542:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002546:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002548:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 800254a:	2200      	movs	r2, #0
 800254c:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800254e:	4b28      	ldr	r3, [pc, #160]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002554:	4826      	ldr	r0, [pc, #152]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 8002556:	f004 fae8 	bl	8006b2a <HAL_TIM_PWM_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM3_Init+0x68>
		Error_Handler();
 8002560:	f000 fb6c 	bl	8002c3c <Error_Handler>
	}
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002564:	2301      	movs	r3, #1
 8002566:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002568:	2300      	movs	r3, #0
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800256c:	2301      	movs	r3, #1
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002570:	2300      	movs	r3, #0
 8002572:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfig.IC1Filter = 0;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002578:	2300      	movs	r3, #0
 800257a:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800257c:	2301      	movs	r3, #1
 800257e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002580:	2300      	movs	r3, #0
 8002582:	643b      	str	r3, [r7, #64]	@ 0x40
	sConfig.IC2Filter = 0;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8002588:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800258c:	4619      	mov	r1, r3
 800258e:	4818      	ldr	r0, [pc, #96]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 8002590:	f004 fbe2 	bl	8006d58 <HAL_TIM_Encoder_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_TIM3_Init+0xa2>
		Error_Handler();
 800259a:	f000 fb4f 	bl	8002c3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80025a6:	f107 031c 	add.w	r3, r7, #28
 80025aa:	4619      	mov	r1, r3
 80025ac:	4810      	ldr	r0, [pc, #64]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 80025ae:	f005 fa45 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM3_Init+0xc0>
			!= HAL_OK) {
		Error_Handler();
 80025b8:	f000 fb40 	bl	8002c3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025bc:	2360      	movs	r3, #96	@ 0x60
 80025be:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80025cc:	463b      	mov	r3, r7
 80025ce:	2208      	movs	r2, #8
 80025d0:	4619      	mov	r1, r3
 80025d2:	4807      	ldr	r0, [pc, #28]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 80025d4:	f004 fd8c 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM3_Init+0xe6>
			!= HAL_OK) {
		Error_Handler();
 80025de:	f000 fb2d 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80025e2:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <MX_TIM3_Init+0xf4>)
 80025e4:	f000 fdf0 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 80025e8:	bf00      	nop
 80025ea:	3748      	adds	r7, #72	@ 0x48
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	2000034c 	.word	0x2000034c
 80025f4:	40000400 	.word	0x40000400

080025f8 <MX_TIM5_Init>:
/**
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b08c      	sub	sp, #48	@ 0x30
 80025fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM5_Init 0 */

	/* USER CODE END TIM5_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80025fe:	f107 030c 	add.w	r3, r7, #12
 8002602:	2224      	movs	r2, #36	@ 0x24
 8002604:	2100      	movs	r1, #0
 8002606:	4618      	mov	r0, r3
 8002608:	f006 ff88 	bl	800951c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800260c:	1d3b      	adds	r3, r7, #4
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM5_Init 1 */

	/* USER CODE END TIM5_Init 1 */
	htim5.Instance = TIM5;
 8002614:	4b20      	ldr	r3, [pc, #128]	@ (8002698 <MX_TIM5_Init+0xa0>)
 8002616:	4a21      	ldr	r2, [pc, #132]	@ (800269c <MX_TIM5_Init+0xa4>)
 8002618:	601a      	str	r2, [r3, #0]
	htim5.Init.Prescaler = 179;
 800261a:	4b1f      	ldr	r3, [pc, #124]	@ (8002698 <MX_TIM5_Init+0xa0>)
 800261c:	22b3      	movs	r2, #179	@ 0xb3
 800261e:	605a      	str	r2, [r3, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	4b1d      	ldr	r3, [pc, #116]	@ (8002698 <MX_TIM5_Init+0xa0>)
 8002622:	2200      	movs	r2, #0
 8002624:	609a      	str	r2, [r3, #8]
	htim5.Init.Period = 999;
 8002626:	4b1c      	ldr	r3, [pc, #112]	@ (8002698 <MX_TIM5_Init+0xa0>)
 8002628:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800262c:	60da      	str	r2, [r3, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800262e:	4b1a      	ldr	r3, [pc, #104]	@ (8002698 <MX_TIM5_Init+0xa0>)
 8002630:	2200      	movs	r2, #0
 8002632:	611a      	str	r2, [r3, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002634:	4b18      	ldr	r3, [pc, #96]	@ (8002698 <MX_TIM5_Init+0xa0>)
 8002636:	2200      	movs	r2, #0
 8002638:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800263a:	2301      	movs	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002642:	2301      	movs	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002646:	2300      	movs	r3, #0
 8002648:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800264e:	2300      	movs	r3, #0
 8002650:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002652:	2301      	movs	r3, #1
 8002654:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002656:	2300      	movs	r3, #0
 8002658:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK) {
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4619      	mov	r1, r3
 8002664:	480c      	ldr	r0, [pc, #48]	@ (8002698 <MX_TIM5_Init+0xa0>)
 8002666:	f004 fb77 	bl	8006d58 <HAL_TIM_Encoder_Init>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <MX_TIM5_Init+0x7c>
		Error_Handler();
 8002670:	f000 fae4 	bl	8002c3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002674:	2300      	movs	r3, #0
 8002676:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800267c:	1d3b      	adds	r3, r7, #4
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	@ (8002698 <MX_TIM5_Init+0xa0>)
 8002682:	f005 f9db 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <MX_TIM5_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 800268c:	f000 fad6 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM5_Init 2 */

	/* USER CODE END TIM5_Init 2 */

}
 8002690:	bf00      	nop
 8002692:	3730      	adds	r7, #48	@ 0x30
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000394 	.word	0x20000394
 800269c:	40000c00 	.word	0x40000c00

080026a0 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	@ 0x30
 80026a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 80026a6:	f107 030c 	add.w	r3, r7, #12
 80026aa:	2224      	movs	r2, #36	@ 0x24
 80026ac:	2100      	movs	r1, #0
 80026ae:	4618      	mov	r0, r3
 80026b0:	f006 ff34 	bl	800951c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80026bc:	4b22      	ldr	r3, [pc, #136]	@ (8002748 <MX_TIM8_Init+0xa8>)
 80026be:	4a23      	ldr	r2, [pc, #140]	@ (800274c <MX_TIM8_Init+0xac>)
 80026c0:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 180 - 1;
 80026c2:	4b21      	ldr	r3, [pc, #132]	@ (8002748 <MX_TIM8_Init+0xa8>)
 80026c4:	22b3      	movs	r2, #179	@ 0xb3
 80026c6:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002748 <MX_TIM8_Init+0xa8>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1000 - 1;
 80026ce:	4b1e      	ldr	r3, [pc, #120]	@ (8002748 <MX_TIM8_Init+0xa8>)
 80026d0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026d4:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002748 <MX_TIM8_Init+0xa8>)
 80026d8:	2200      	movs	r2, #0
 80026da:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80026dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002748 <MX_TIM8_Init+0xa8>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026e2:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <MX_TIM8_Init+0xa8>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80026e8:	2301      	movs	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80026ec:	2300      	movs	r3, #0
 80026ee:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026f0:	2301      	movs	r3, #1
 80026f2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026f4:	2300      	movs	r3, #0
 80026f6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026fc:	2300      	movs	r3, #0
 80026fe:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002700:	2301      	movs	r3, #1
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK) {
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	4619      	mov	r1, r3
 8002712:	480d      	ldr	r0, [pc, #52]	@ (8002748 <MX_TIM8_Init+0xa8>)
 8002714:	f004 fb20 	bl	8006d58 <HAL_TIM_Encoder_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM8_Init+0x82>
		Error_Handler();
 800271e:	f000 fa8d 	bl	8002c3c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	4619      	mov	r1, r3
 800272e:	4806      	ldr	r0, [pc, #24]	@ (8002748 <MX_TIM8_Init+0xa8>)
 8002730:	f005 f984 	bl	8007a3c <HAL_TIMEx_MasterConfigSynchronization>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM8_Init+0x9e>
			!= HAL_OK) {
		Error_Handler();
 800273a:	f000 fa7f 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 800273e:	bf00      	nop
 8002740:	3730      	adds	r7, #48	@ 0x30
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	200003dc 	.word	0x200003dc
 800274c:	40010400 	.word	0x40010400

08002750 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b088      	sub	sp, #32
 8002754:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
 8002764:	615a      	str	r2, [r3, #20]
 8002766:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002768:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <MX_TIM10_Init+0x94>)
 800276a:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <MX_TIM10_Init+0x98>)
 800276c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 179;
 800276e:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <MX_TIM10_Init+0x94>)
 8002770:	22b3      	movs	r2, #179	@ 0xb3
 8002772:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002774:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <MX_TIM10_Init+0x94>)
 8002776:	2200      	movs	r2, #0
 8002778:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 999;
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <MX_TIM10_Init+0x94>)
 800277c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002780:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <MX_TIM10_Init+0x94>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002788:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <MX_TIM10_Init+0x94>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800278e:	4815      	ldr	r0, [pc, #84]	@ (80027e4 <MX_TIM10_Init+0x94>)
 8002790:	f004 f97c 	bl	8006a8c <HAL_TIM_Base_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM10_Init+0x4e>
		Error_Handler();
 800279a:	f000 fa4f 	bl	8002c3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 800279e:	4811      	ldr	r0, [pc, #68]	@ (80027e4 <MX_TIM10_Init+0x94>)
 80027a0:	f004 f9c3 	bl	8006b2a <HAL_TIM_PWM_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM10_Init+0x5e>
		Error_Handler();
 80027aa:	f000 fa47 	bl	8002c3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027ae:	2360      	movs	r3, #96	@ 0x60
 80027b0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80027be:	1d3b      	adds	r3, r7, #4
 80027c0:	2200      	movs	r2, #0
 80027c2:	4619      	mov	r1, r3
 80027c4:	4807      	ldr	r0, [pc, #28]	@ (80027e4 <MX_TIM10_Init+0x94>)
 80027c6:	f004 fc93 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <MX_TIM10_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80027d0:	f000 fa34 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 80027d4:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <MX_TIM10_Init+0x94>)
 80027d6:	f000 fcf7 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 80027da:	bf00      	nop
 80027dc:	3720      	adds	r7, #32
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20000424 	.word	0x20000424
 80027e8:	40014400 	.word	0x40014400

080027ec <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80027f2:	1d3b      	adds	r3, r7, #4
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	605a      	str	r2, [r3, #4]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	60da      	str	r2, [r3, #12]
 80027fe:	611a      	str	r2, [r3, #16]
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002804:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <MX_TIM11_Init+0x94>)
 8002806:	4a1f      	ldr	r2, [pc, #124]	@ (8002884 <MX_TIM11_Init+0x98>)
 8002808:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 179;
 800280a:	4b1d      	ldr	r3, [pc, #116]	@ (8002880 <MX_TIM11_Init+0x94>)
 800280c:	22b3      	movs	r2, #179	@ 0xb3
 800280e:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002810:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <MX_TIM11_Init+0x94>)
 8002812:	2200      	movs	r2, #0
 8002814:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 999;
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <MX_TIM11_Init+0x94>)
 8002818:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800281c:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <MX_TIM11_Init+0x94>)
 8002820:	2200      	movs	r2, #0
 8002822:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002824:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <MX_TIM11_Init+0x94>)
 8002826:	2200      	movs	r2, #0
 8002828:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK) {
 800282a:	4815      	ldr	r0, [pc, #84]	@ (8002880 <MX_TIM11_Init+0x94>)
 800282c:	f004 f92e 	bl	8006a8c <HAL_TIM_Base_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM11_Init+0x4e>
		Error_Handler();
 8002836:	f000 fa01 	bl	8002c3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK) {
 800283a:	4811      	ldr	r0, [pc, #68]	@ (8002880 <MX_TIM11_Init+0x94>)
 800283c:	f004 f975 	bl	8006b2a <HAL_TIM_PWM_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_TIM11_Init+0x5e>
		Error_Handler();
 8002846:	f000 f9f9 	bl	8002c3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800284a:	2360      	movs	r3, #96	@ 0x60
 800284c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002852:	2300      	movs	r3, #0
 8002854:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	2200      	movs	r2, #0
 800285e:	4619      	mov	r1, r3
 8002860:	4807      	ldr	r0, [pc, #28]	@ (8002880 <MX_TIM11_Init+0x94>)
 8002862:	f004 fc45 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM11_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 800286c:	f000 f9e6 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8002870:	4803      	ldr	r0, [pc, #12]	@ (8002880 <MX_TIM11_Init+0x94>)
 8002872:	f000 fca9 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 8002876:	bf00      	nop
 8002878:	3720      	adds	r7, #32
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	2000046c 	.word	0x2000046c
 8002884:	40014800 	.word	0x40014800

08002888 <MX_TIM12_Init>:
/**
 * @brief TIM12 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM12_Init(void) {
 8002888:	b580      	push	{r7, lr}
 800288a:	b08c      	sub	sp, #48	@ 0x30
 800288c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM12_Init 0 */

	/* USER CODE END TIM12_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800289c:	1d3b      	adds	r3, r7, #4
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	605a      	str	r2, [r3, #4]
 80028a4:	609a      	str	r2, [r3, #8]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	611a      	str	r2, [r3, #16]
 80028aa:	615a      	str	r2, [r3, #20]
 80028ac:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM12_Init 1 */

	/* USER CODE END TIM12_Init 1 */
	htim12.Instance = TIM12;
 80028ae:	4b25      	ldr	r3, [pc, #148]	@ (8002944 <MX_TIM12_Init+0xbc>)
 80028b0:	4a25      	ldr	r2, [pc, #148]	@ (8002948 <MX_TIM12_Init+0xc0>)
 80028b2:	601a      	str	r2, [r3, #0]
	htim12.Init.Prescaler = 179;
 80028b4:	4b23      	ldr	r3, [pc, #140]	@ (8002944 <MX_TIM12_Init+0xbc>)
 80028b6:	22b3      	movs	r2, #179	@ 0xb3
 80028b8:	605a      	str	r2, [r3, #4]
	htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028ba:	4b22      	ldr	r3, [pc, #136]	@ (8002944 <MX_TIM12_Init+0xbc>)
 80028bc:	2200      	movs	r2, #0
 80028be:	609a      	str	r2, [r3, #8]
	htim12.Init.Period = 999;
 80028c0:	4b20      	ldr	r3, [pc, #128]	@ (8002944 <MX_TIM12_Init+0xbc>)
 80028c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80028c6:	60da      	str	r2, [r3, #12]
	htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002944 <MX_TIM12_Init+0xbc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
	htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002944 <MX_TIM12_Init+0xbc>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim12) != HAL_OK) {
 80028d4:	481b      	ldr	r0, [pc, #108]	@ (8002944 <MX_TIM12_Init+0xbc>)
 80028d6:	f004 f8d9 	bl	8006a8c <HAL_TIM_Base_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM12_Init+0x5c>
		Error_Handler();
 80028e0:	f000 f9ac 	bl	8002c3c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028e8:	623b      	str	r3, [r7, #32]
	if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK) {
 80028ea:	f107 0320 	add.w	r3, r7, #32
 80028ee:	4619      	mov	r1, r3
 80028f0:	4814      	ldr	r0, [pc, #80]	@ (8002944 <MX_TIM12_Init+0xbc>)
 80028f2:	f004 fcbf 	bl	8007274 <HAL_TIM_ConfigClockSource>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM12_Init+0x78>
		Error_Handler();
 80028fc:	f000 f99e 	bl	8002c3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim12) != HAL_OK) {
 8002900:	4810      	ldr	r0, [pc, #64]	@ (8002944 <MX_TIM12_Init+0xbc>)
 8002902:	f004 f912 	bl	8006b2a <HAL_TIM_PWM_Init>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM12_Init+0x88>
		Error_Handler();
 800290c:	f000 f996 	bl	8002c3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002910:	2360      	movs	r3, #96	@ 0x60
 8002912:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1)
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	2200      	movs	r2, #0
 8002924:	4619      	mov	r1, r3
 8002926:	4807      	ldr	r0, [pc, #28]	@ (8002944 <MX_TIM12_Init+0xbc>)
 8002928:	f004 fbe2 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM12_Init+0xae>
			!= HAL_OK) {
		Error_Handler();
 8002932:	f000 f983 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM12_Init 2 */

	/* USER CODE END TIM12_Init 2 */
	HAL_TIM_MspPostInit(&htim12);
 8002936:	4803      	ldr	r0, [pc, #12]	@ (8002944 <MX_TIM12_Init+0xbc>)
 8002938:	f000 fc46 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 800293c:	bf00      	nop
 800293e:	3730      	adds	r7, #48	@ 0x30
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	200004b4 	.word	0x200004b4
 8002948:	40001800 	.word	0x40001800

0800294c <MX_TIM13_Init>:
/**
 * @brief TIM13 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM13_Init(void) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM13_Init 0 */

	/* USER CODE END TIM13_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	605a      	str	r2, [r3, #4]
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	60da      	str	r2, [r3, #12]
 800295e:	611a      	str	r2, [r3, #16]
 8002960:	615a      	str	r2, [r3, #20]
 8002962:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM13_Init 1 */

	/* USER CODE END TIM13_Init 1 */
	htim13.Instance = TIM13;
 8002964:	4b1e      	ldr	r3, [pc, #120]	@ (80029e0 <MX_TIM13_Init+0x94>)
 8002966:	4a1f      	ldr	r2, [pc, #124]	@ (80029e4 <MX_TIM13_Init+0x98>)
 8002968:	601a      	str	r2, [r3, #0]
	htim13.Init.Prescaler = 179;
 800296a:	4b1d      	ldr	r3, [pc, #116]	@ (80029e0 <MX_TIM13_Init+0x94>)
 800296c:	22b3      	movs	r2, #179	@ 0xb3
 800296e:	605a      	str	r2, [r3, #4]
	htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <MX_TIM13_Init+0x94>)
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
	htim13.Init.Period = 999;
 8002976:	4b1a      	ldr	r3, [pc, #104]	@ (80029e0 <MX_TIM13_Init+0x94>)
 8002978:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800297c:	60da      	str	r2, [r3, #12]
	htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <MX_TIM13_Init+0x94>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
	htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002984:	4b16      	ldr	r3, [pc, #88]	@ (80029e0 <MX_TIM13_Init+0x94>)
 8002986:	2200      	movs	r2, #0
 8002988:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim13) != HAL_OK) {
 800298a:	4815      	ldr	r0, [pc, #84]	@ (80029e0 <MX_TIM13_Init+0x94>)
 800298c:	f004 f87e 	bl	8006a8c <HAL_TIM_Base_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_TIM13_Init+0x4e>
		Error_Handler();
 8002996:	f000 f951 	bl	8002c3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim13) != HAL_OK) {
 800299a:	4811      	ldr	r0, [pc, #68]	@ (80029e0 <MX_TIM13_Init+0x94>)
 800299c:	f004 f8c5 	bl	8006b2a <HAL_TIM_PWM_Init>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_TIM13_Init+0x5e>
		Error_Handler();
 80029a6:	f000 f949 	bl	8002c3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029aa:	2360      	movs	r3, #96	@ 0x60
 80029ac:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1)
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	2200      	movs	r2, #0
 80029be:	4619      	mov	r1, r3
 80029c0:	4807      	ldr	r0, [pc, #28]	@ (80029e0 <MX_TIM13_Init+0x94>)
 80029c2:	f004 fb95 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_TIM13_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 80029cc:	f000 f936 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM13_Init 2 */

	/* USER CODE END TIM13_Init 2 */
	HAL_TIM_MspPostInit(&htim13);
 80029d0:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <MX_TIM13_Init+0x94>)
 80029d2:	f000 fbf9 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 80029d6:	bf00      	nop
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200004fc 	.word	0x200004fc
 80029e4:	40001c00 	.word	0x40001c00

080029e8 <MX_TIM14_Init>:
/**
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM14_Init 0 */

	/* USER CODE END TIM14_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80029ee:	1d3b      	adds	r3, r7, #4
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	609a      	str	r2, [r3, #8]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	611a      	str	r2, [r3, #16]
 80029fc:	615a      	str	r2, [r3, #20]
 80029fe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8002a00:	4b1e      	ldr	r3, [pc, #120]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a02:	4a1f      	ldr	r2, [pc, #124]	@ (8002a80 <MX_TIM14_Init+0x98>)
 8002a04:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 179;
 8002a06:	4b1d      	ldr	r3, [pc, #116]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a08:	22b3      	movs	r2, #179	@ 0xb3
 8002a0a:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 999;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a14:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a18:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a1a:	4b18      	ldr	r3, [pc, #96]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a20:	4b16      	ldr	r3, [pc, #88]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8002a26:	4815      	ldr	r0, [pc, #84]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a28:	f004 f830 	bl	8006a8c <HAL_TIM_Base_Init>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM14_Init+0x4e>
		Error_Handler();
 8002a32:	f000 f903 	bl	8002c3c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim14) != HAL_OK) {
 8002a36:	4811      	ldr	r0, [pc, #68]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a38:	f004 f877 	bl	8006b2a <HAL_TIM_PWM_Init>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <MX_TIM14_Init+0x5e>
		Error_Handler();
 8002a42:	f000 f8fb 	bl	8002c3c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a46:	2360      	movs	r3, #96	@ 0x60
 8002a48:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1)
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4807      	ldr	r0, [pc, #28]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a5e:	f004 fb47 	bl	80070f0 <HAL_TIM_PWM_ConfigChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <MX_TIM14_Init+0x84>
			!= HAL_OK) {
		Error_Handler();
 8002a68:	f000 f8e8 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */
	HAL_TIM_MspPostInit(&htim14);
 8002a6c:	4803      	ldr	r0, [pc, #12]	@ (8002a7c <MX_TIM14_Init+0x94>)
 8002a6e:	f000 fbab 	bl	80031c8 <HAL_TIM_MspPostInit>

}
 8002a72:	bf00      	nop
 8002a74:	3720      	adds	r7, #32
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	20000544 	.word	0x20000544
 8002a80:	40002000 	.word	0x40002000

08002a84 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ad4 <MX_USART2_UART_Init+0x50>)
 8002a8c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002a94:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a96:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002aa8:	4b09      	ldr	r3, [pc, #36]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002aaa:	220c      	movs	r2, #12
 8002aac:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ab4:	4b06      	ldr	r3, [pc, #24]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002aba:	4805      	ldr	r0, [pc, #20]	@ (8002ad0 <MX_USART2_UART_Init+0x4c>)
 8002abc:	f005 f88c 	bl	8007bd8 <HAL_UART_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8002ac6:	f000 f8b9 	bl	8002c3c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002aca:	bf00      	nop
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	2000058c 	.word	0x2000058c
 8002ad4:	40004400 	.word	0x40004400

08002ad8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	@ 0x28
 8002adc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002ade:	f107 0314 	add.w	r3, r7, #20
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	609a      	str	r2, [r3, #8]
 8002aea:	60da      	str	r2, [r3, #12]
 8002aec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	4b43      	ldr	r3, [pc, #268]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a42      	ldr	r2, [pc, #264]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002af8:	f043 0304 	orr.w	r3, r3, #4
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b40      	ldr	r3, [pc, #256]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	4a3b      	ldr	r2, [pc, #236]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1a:	4b39      	ldr	r3, [pc, #228]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60bb      	str	r3, [r7, #8]
 8002b2a:	4b35      	ldr	r3, [pc, #212]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	4a34      	ldr	r2, [pc, #208]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b36:	4b32      	ldr	r3, [pc, #200]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	607b      	str	r3, [r7, #4]
 8002b46:	4b2e      	ldr	r3, [pc, #184]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	4a2d      	ldr	r2, [pc, #180]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b52:	4b2b      	ldr	r3, [pc, #172]	@ (8002c00 <MX_GPIO_Init+0x128>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	607b      	str	r3, [r7, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f648 413f 	movw	r1, #35903	@ 0x8c3f
 8002b64:	4827      	ldr	r0, [pc, #156]	@ (8002c04 <MX_GPIO_Init+0x12c>)
 8002b66:	f001 fa35 	bl	8003fd4 <HAL_GPIO_WritePin>
			S3_Pulse_Pin | M1_Pin | M2_Pin | S1_Dir_Pin | S1_Pulse_Pin
					| ENA_1_Pin | S3_Dir_Pin | S2_Pulse_Pin | S2_Dir_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | LD2_Pin | P1_Pin | P2_Pin,
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f641 0130 	movw	r1, #6192	@ 0x1830
 8002b70:	4825      	ldr	r0, [pc, #148]	@ (8002c08 <MX_GPIO_Init+0x130>)
 8002b72:	f001 fa2f 	bl	8003fd4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_2 | M3_Pin | GPIO_PIN_15,
 8002b76:	2200      	movs	r2, #0
 8002b78:	f24a 0105 	movw	r1, #40965	@ 0xa005
 8002b7c:	4823      	ldr	r0, [pc, #140]	@ (8002c0c <MX_GPIO_Init+0x134>)
 8002b7e:	f001 fa29 	bl	8003fd4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8002b82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b88:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002b8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b92:	f107 0314 	add.w	r3, r7, #20
 8002b96:	4619      	mov	r1, r3
 8002b98:	481a      	ldr	r0, [pc, #104]	@ (8002c04 <MX_GPIO_Init+0x12c>)
 8002b9a:	f000 ff93 	bl	8003ac4 <HAL_GPIO_Init>

	/*Configure GPIO pins : S3_Pulse_Pin M1_Pin M2_Pin S1_Dir_Pin
	 S1_Pulse_Pin ENA_1_Pin S3_Dir_Pin S2_Pulse_Pin
	 S2_Dir_Pin */
	GPIO_InitStruct.Pin = S3_Pulse_Pin | M1_Pin | M2_Pin | S1_Dir_Pin
 8002b9e:	f648 433f 	movw	r3, #35903	@ 0x8c3f
 8002ba2:	617b      	str	r3, [r7, #20]
			| S1_Pulse_Pin | ENA_1_Pin | S3_Dir_Pin | S2_Pulse_Pin | S2_Dir_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4813      	ldr	r0, [pc, #76]	@ (8002c04 <MX_GPIO_Init+0x12c>)
 8002bb8:	f000 ff84 	bl	8003ac4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 LD2_Pin P1_Pin P2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | LD2_Pin | P1_Pin | P2_Pin;
 8002bbc:	f641 0330 	movw	r3, #6192	@ 0x1830
 8002bc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bce:	f107 0314 	add.w	r3, r7, #20
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	480c      	ldr	r0, [pc, #48]	@ (8002c08 <MX_GPIO_Init+0x130>)
 8002bd6:	f000 ff75 	bl	8003ac4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB2 M3_Pin PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | M3_Pin | GPIO_PIN_15;
 8002bda:	f24a 0305 	movw	r3, #40965	@ 0xa005
 8002bde:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002be0:	2301      	movs	r3, #1
 8002be2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	4806      	ldr	r0, [pc, #24]	@ (8002c0c <MX_GPIO_Init+0x134>)
 8002bf4:	f000 ff66 	bl	8003ac4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002bf8:	bf00      	nop
 8002bfa:	3728      	adds	r7, #40	@ 0x28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020800 	.word	0x40020800
 8002c08:	40020000 	.word	0x40020000
 8002c0c:	40020400 	.word	0x40020400

08002c10 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	f04f 33ff 	mov.w	r3, #4294967295
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	4804      	ldr	r0, [pc, #16]	@ (8002c38 <_write+0x28>)
 8002c28:	f005 f826 	bl	8007c78 <HAL_UART_Transmit>
	return len;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	2000058c 	.word	0x2000058c

08002c3c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c40:	b672      	cpsid	i
}
 8002c42:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <Error_Handler+0x8>

08002c48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	4a0f      	ldr	r2, [pc, #60]	@ (8002c94 <HAL_MspInit+0x4c>)
 8002c58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c94 <HAL_MspInit+0x4c>)
 8002c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c66:	607b      	str	r3, [r7, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	603b      	str	r3, [r7, #0]
 8002c6e:	4b09      	ldr	r3, [pc, #36]	@ (8002c94 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	4a08      	ldr	r2, [pc, #32]	@ (8002c94 <HAL_MspInit+0x4c>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7a:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_MspInit+0x4c>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	603b      	str	r3, [r7, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c86:	2007      	movs	r0, #7
 8002c88:	f000 fe9c 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	40023800 	.word	0x40023800

08002c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	@ 0x30
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8002de0 <HAL_I2C_MspInit+0x148>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d12c      	bne.n	8002d14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	4b49      	ldr	r3, [pc, #292]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	4a48      	ldr	r2, [pc, #288]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cca:	4b46      	ldr	r3, [pc, #280]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cd6:	23c0      	movs	r3, #192	@ 0xc0
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cda:	2312      	movs	r3, #18
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 031c 	add.w	r3, r7, #28
 8002cee:	4619      	mov	r1, r3
 8002cf0:	483d      	ldr	r0, [pc, #244]	@ (8002de8 <HAL_I2C_MspInit+0x150>)
 8002cf2:	f000 fee7 	bl	8003ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	4a39      	ldr	r2, [pc, #228]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002d00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d06:	4b37      	ldr	r3, [pc, #220]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002d12:	e060      	b.n	8002dd6 <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a34      	ldr	r2, [pc, #208]	@ (8002dec <HAL_I2C_MspInit+0x154>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d15b      	bne.n	8002dd6 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	4b30      	ldr	r3, [pc, #192]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	4a2f      	ldr	r2, [pc, #188]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2e:	4b2d      	ldr	r3, [pc, #180]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b29      	ldr	r3, [pc, #164]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	4a28      	ldr	r2, [pc, #160]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4a:	4b26      	ldr	r3, [pc, #152]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d5c:	2312      	movs	r3, #18
 8002d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d68:	2304      	movs	r3, #4
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d6c:	f107 031c 	add.w	r3, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	481d      	ldr	r0, [pc, #116]	@ (8002de8 <HAL_I2C_MspInit+0x150>)
 8002d74:	f000 fea6 	bl	8003ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d7e:	2312      	movs	r3, #18
 8002d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d8e:	f107 031c 	add.w	r3, r7, #28
 8002d92:	4619      	mov	r1, r3
 8002d94:	4816      	ldr	r0, [pc, #88]	@ (8002df0 <HAL_I2C_MspInit+0x158>)
 8002d96:	f000 fe95 	bl	8003ac4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	4a10      	ldr	r2, [pc, #64]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002da4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002daa:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_I2C_MspInit+0x14c>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8002db6:	2200      	movs	r2, #0
 8002db8:	2100      	movs	r1, #0
 8002dba:	2021      	movs	r0, #33	@ 0x21
 8002dbc:	f000 fe0d 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002dc0:	2021      	movs	r0, #33	@ 0x21
 8002dc2:	f000 fe26 	bl	8003a12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	2100      	movs	r1, #0
 8002dca:	2022      	movs	r0, #34	@ 0x22
 8002dcc:	f000 fe05 	bl	80039da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002dd0:	2022      	movs	r0, #34	@ 0x22
 8002dd2:	f000 fe1e 	bl	8003a12 <HAL_NVIC_EnableIRQ>
}
 8002dd6:	bf00      	nop
 8002dd8:	3730      	adds	r7, #48	@ 0x30
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40005400 	.word	0x40005400
 8002de4:	40023800 	.word	0x40023800
 8002de8:	40020400 	.word	0x40020400
 8002dec:	40005800 	.word	0x40005800
 8002df0:	40020800 	.word	0x40020800

08002df4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a18      	ldr	r2, [pc, #96]	@ (8002e64 <HAL_I2C_MspDeInit+0x70>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d10e      	bne.n	8002e24 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002e06:	4b18      	ldr	r3, [pc, #96]	@ (8002e68 <HAL_I2C_MspDeInit+0x74>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	4a17      	ldr	r2, [pc, #92]	@ (8002e68 <HAL_I2C_MspDeInit+0x74>)
 8002e0c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002e10:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002e12:	2140      	movs	r1, #64	@ 0x40
 8002e14:	4815      	ldr	r0, [pc, #84]	@ (8002e6c <HAL_I2C_MspDeInit+0x78>)
 8002e16:	f000 ffe9 	bl	8003dec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002e1a:	2180      	movs	r1, #128	@ 0x80
 8002e1c:	4813      	ldr	r0, [pc, #76]	@ (8002e6c <HAL_I2C_MspDeInit+0x78>)
 8002e1e:	f000 ffe5 	bl	8003dec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002e22:	e01a      	b.n	8002e5a <HAL_I2C_MspDeInit+0x66>
  else if(hi2c->Instance==I2C2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a11      	ldr	r2, [pc, #68]	@ (8002e70 <HAL_I2C_MspDeInit+0x7c>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d115      	bne.n	8002e5a <HAL_I2C_MspDeInit+0x66>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <HAL_I2C_MspDeInit+0x74>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	4a0d      	ldr	r2, [pc, #52]	@ (8002e68 <HAL_I2C_MspDeInit+0x74>)
 8002e34:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002e38:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002e3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002e3e:	480b      	ldr	r0, [pc, #44]	@ (8002e6c <HAL_I2C_MspDeInit+0x78>)
 8002e40:	f000 ffd4 	bl	8003dec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8002e44:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e48:	480a      	ldr	r0, [pc, #40]	@ (8002e74 <HAL_I2C_MspDeInit+0x80>)
 8002e4a:	f000 ffcf 	bl	8003dec <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8002e4e:	2021      	movs	r0, #33	@ 0x21
 8002e50:	f000 fded 	bl	8003a2e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002e54:	2022      	movs	r0, #34	@ 0x22
 8002e56:	f000 fdea 	bl	8003a2e <HAL_NVIC_DisableIRQ>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40005400 	.word	0x40005400
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40020400 	.word	0x40020400
 8002e70:	40005800 	.word	0x40005800
 8002e74:	40020800 	.word	0x40020800

08002e78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	@ 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a3d      	ldr	r2, [pc, #244]	@ (8002f7c <HAL_TIM_Base_MspInit+0x104>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d10e      	bne.n	8002ea8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e92:	4a3b      	ldr	r2, [pc, #236]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002e94:	f043 0301 	orr.w	r3, r3, #1
 8002e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e9a:	4b39      	ldr	r3, [pc, #228]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002ea6:	e062      	b.n	8002f6e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM10)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a35      	ldr	r2, [pc, #212]	@ (8002f84 <HAL_TIM_Base_MspInit+0x10c>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61bb      	str	r3, [r7, #24]
 8002eb6:	4b32      	ldr	r3, [pc, #200]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	4a31      	ldr	r2, [pc, #196]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ec0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	61bb      	str	r3, [r7, #24]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
}
 8002ece:	e04e      	b.n	8002f6e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM11)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8002f88 <HAL_TIM_Base_MspInit+0x110>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d10e      	bne.n	8002ef8 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	4b28      	ldr	r3, [pc, #160]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee2:	4a27      	ldr	r2, [pc, #156]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eea:	4b25      	ldr	r3, [pc, #148]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	697b      	ldr	r3, [r7, #20]
}
 8002ef6:	e03a      	b.n	8002f6e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM12)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a23      	ldr	r2, [pc, #140]	@ (8002f8c <HAL_TIM_Base_MspInit+0x114>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d10e      	bne.n	8002f20 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	4b1e      	ldr	r3, [pc, #120]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b1b      	ldr	r3, [pc, #108]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f1a:	613b      	str	r3, [r7, #16]
 8002f1c:	693b      	ldr	r3, [r7, #16]
}
 8002f1e:	e026      	b.n	8002f6e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM13)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	@ (8002f90 <HAL_TIM_Base_MspInit+0x118>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d10e      	bne.n	8002f48 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f32:	4a13      	ldr	r2, [pc, #76]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f3a:	4b11      	ldr	r3, [pc, #68]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
}
 8002f46:	e012      	b.n	8002f6e <HAL_TIM_Base_MspInit+0xf6>
  else if(htim_base->Instance==TIM14)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a11      	ldr	r2, [pc, #68]	@ (8002f94 <HAL_TIM_Base_MspInit+0x11c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10d      	bne.n	8002f6e <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4b0a      	ldr	r3, [pc, #40]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5a:	4a09      	ldr	r2, [pc, #36]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f62:	4b07      	ldr	r3, [pc, #28]	@ (8002f80 <HAL_TIM_Base_MspInit+0x108>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
}
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	@ 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40010000 	.word	0x40010000
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800
 8002f8c:	40001800 	.word	0x40001800
 8002f90:	40001c00 	.word	0x40001c00
 8002f94:	40002000 	.word	0x40002000

08002f98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b08e      	sub	sp, #56	@ 0x38
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	60da      	str	r2, [r3, #12]
 8002fae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fb8:	d14b      	bne.n	8003052 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
 8002fbe:	4b58      	ldr	r3, [pc, #352]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc2:	4a57      	ldr	r2, [pc, #348]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fca:	4b55      	ldr	r3, [pc, #340]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f003 0301 	and.w	r3, r3, #1
 8002fd2:	623b      	str	r3, [r7, #32]
 8002fd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	4b51      	ldr	r3, [pc, #324]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	4a50      	ldr	r2, [pc, #320]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fe6:	4b4e      	ldr	r3, [pc, #312]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	4a49      	ldr	r2, [pc, #292]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8002ffc:	f043 0302 	orr.w	r3, r3, #2
 8003000:	6313      	str	r3, [r2, #48]	@ 0x30
 8003002:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	61bb      	str	r3, [r7, #24]
 800300c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800300e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003018:	2301      	movs	r3, #1
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301c:	2300      	movs	r3, #0
 800301e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003020:	2301      	movs	r3, #1
 8003022:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003028:	4619      	mov	r1, r3
 800302a:	483e      	ldr	r0, [pc, #248]	@ (8003124 <HAL_TIM_Encoder_MspInit+0x18c>)
 800302c:	f000 fd4a 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003030:	2308      	movs	r3, #8
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003038:	2301      	movs	r3, #1
 800303a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800303c:	2300      	movs	r3, #0
 800303e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003040:	2301      	movs	r3, #1
 8003042:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003044:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003048:	4619      	mov	r1, r3
 800304a:	4837      	ldr	r0, [pc, #220]	@ (8003128 <HAL_TIM_Encoder_MspInit+0x190>)
 800304c:	f000 fd3a 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003050:	e062      	b.n	8003118 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM5)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a35      	ldr	r2, [pc, #212]	@ (800312c <HAL_TIM_Encoder_MspInit+0x194>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d12c      	bne.n	80030b6 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	4b2f      	ldr	r3, [pc, #188]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	4a2e      	ldr	r2, [pc, #184]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8003066:	f043 0308 	orr.w	r3, r3, #8
 800306a:	6413      	str	r3, [r2, #64]	@ 0x40
 800306c:	4b2c      	ldr	r3, [pc, #176]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f003 0308 	and.w	r3, r3, #8
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]
 800307c:	4b28      	ldr	r3, [pc, #160]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	4a27      	ldr	r2, [pc, #156]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 8003082:	f043 0301 	orr.w	r3, r3, #1
 8003086:	6313      	str	r3, [r2, #48]	@ 0x30
 8003088:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003094:	2303      	movs	r3, #3
 8003096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003098:	2302      	movs	r3, #2
 800309a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a0:	2300      	movs	r3, #0
 80030a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030a4:	2302      	movs	r3, #2
 80030a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ac:	4619      	mov	r1, r3
 80030ae:	481d      	ldr	r0, [pc, #116]	@ (8003124 <HAL_TIM_Encoder_MspInit+0x18c>)
 80030b0:	f000 fd08 	bl	8003ac4 <HAL_GPIO_Init>
}
 80030b4:	e030      	b.n	8003118 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003130 <HAL_TIM_Encoder_MspInit+0x198>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d12b      	bne.n	8003118 <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	4b16      	ldr	r3, [pc, #88]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 80030c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c8:	4a15      	ldr	r2, [pc, #84]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80030d0:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 80030d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030dc:	2300      	movs	r3, #0
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e4:	4a0e      	ldr	r2, [pc, #56]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <HAL_TIM_Encoder_MspInit+0x188>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030f8:	23c0      	movs	r3, #192	@ 0xc0
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fc:	2302      	movs	r3, #2
 80030fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003100:	2300      	movs	r3, #0
 8003102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003104:	2300      	movs	r3, #0
 8003106:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003108:	2303      	movs	r3, #3
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800310c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003110:	4619      	mov	r1, r3
 8003112:	4808      	ldr	r0, [pc, #32]	@ (8003134 <HAL_TIM_Encoder_MspInit+0x19c>)
 8003114:	f000 fcd6 	bl	8003ac4 <HAL_GPIO_Init>
}
 8003118:	bf00      	nop
 800311a:	3738      	adds	r7, #56	@ 0x38
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800
 8003124:	40020000 	.word	0x40020000
 8003128:	40020400 	.word	0x40020400
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40010400 	.word	0x40010400
 8003134:	40020800 	.word	0x40020800

08003138 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	@ 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003140:	f107 0314 	add.w	r3, r7, #20
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
 8003148:	605a      	str	r2, [r3, #4]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM3)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a19      	ldr	r2, [pc, #100]	@ (80031bc <HAL_TIM_PWM_MspInit+0x84>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d12b      	bne.n	80031b2 <HAL_TIM_PWM_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	4b18      	ldr	r3, [pc, #96]	@ (80031c0 <HAL_TIM_PWM_MspInit+0x88>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a17      	ldr	r2, [pc, #92]	@ (80031c0 <HAL_TIM_PWM_MspInit+0x88>)
 8003164:	f043 0302 	orr.w	r3, r3, #2
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b15      	ldr	r3, [pc, #84]	@ (80031c0 <HAL_TIM_PWM_MspInit+0x88>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
 800317a:	4b11      	ldr	r3, [pc, #68]	@ (80031c0 <HAL_TIM_PWM_MspInit+0x88>)
 800317c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317e:	4a10      	ldr	r2, [pc, #64]	@ (80031c0 <HAL_TIM_PWM_MspInit+0x88>)
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	6313      	str	r3, [r2, #48]	@ 0x30
 8003186:	4b0e      	ldr	r3, [pc, #56]	@ (80031c0 <HAL_TIM_PWM_MspInit+0x88>)
 8003188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003192:	2330      	movs	r3, #48	@ 0x30
 8003194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003196:	2302      	movs	r3, #2
 8003198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800319a:	2301      	movs	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800319e:	2300      	movs	r3, #0
 80031a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031a2:	2302      	movs	r3, #2
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031a6:	f107 0314 	add.w	r3, r7, #20
 80031aa:	4619      	mov	r1, r3
 80031ac:	4805      	ldr	r0, [pc, #20]	@ (80031c4 <HAL_TIM_PWM_MspInit+0x8c>)
 80031ae:	f000 fc89 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80031b2:	bf00      	nop
 80031b4:	3728      	adds	r7, #40	@ 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020400 	.word	0x40020400

080031c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08e      	sub	sp, #56	@ 0x38
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]
 80031d8:	605a      	str	r2, [r3, #4]
 80031da:	609a      	str	r2, [r3, #8]
 80031dc:	60da      	str	r2, [r3, #12]
 80031de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a80      	ldr	r2, [pc, #512]	@ (80033e8 <HAL_TIM_MspPostInit+0x220>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d11f      	bne.n	800322a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
 80031ee:	4b7f      	ldr	r3, [pc, #508]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	4a7e      	ldr	r2, [pc, #504]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031fa:	4b7c      	ldr	r3, [pc, #496]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	623b      	str	r3, [r7, #32]
 8003204:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8003206:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800320a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2300      	movs	r3, #0
 8003216:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003218:	2301      	movs	r3, #1
 800321a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003220:	4619      	mov	r1, r3
 8003222:	4873      	ldr	r0, [pc, #460]	@ (80033f0 <HAL_TIM_MspPostInit+0x228>)
 8003224:	f000 fc4e 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8003228:	e0da      	b.n	80033e0 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM3)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a71      	ldr	r2, [pc, #452]	@ (80033f4 <HAL_TIM_MspPostInit+0x22c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d11f      	bne.n	8003274 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	4b6c      	ldr	r3, [pc, #432]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323c:	4a6b      	ldr	r2, [pc, #428]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6313      	str	r3, [r2, #48]	@ 0x30
 8003244:	4b69      	ldr	r3, [pc, #420]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003248:	f003 0304 	and.w	r3, r3, #4
 800324c:	61fb      	str	r3, [r7, #28]
 800324e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003256:	2302      	movs	r3, #2
 8003258:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325a:	2300      	movs	r3, #0
 800325c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800325e:	2300      	movs	r3, #0
 8003260:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003262:	2302      	movs	r3, #2
 8003264:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003266:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800326a:	4619      	mov	r1, r3
 800326c:	4862      	ldr	r0, [pc, #392]	@ (80033f8 <HAL_TIM_MspPostInit+0x230>)
 800326e:	f000 fc29 	bl	8003ac4 <HAL_GPIO_Init>
}
 8003272:	e0b5      	b.n	80033e0 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM10)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a60      	ldr	r2, [pc, #384]	@ (80033fc <HAL_TIM_MspPostInit+0x234>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d11f      	bne.n	80032be <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	4b5a      	ldr	r3, [pc, #360]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	4a59      	ldr	r2, [pc, #356]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 8003288:	f043 0302 	orr.w	r3, r3, #2
 800328c:	6313      	str	r3, [r2, #48]	@ 0x30
 800328e:	4b57      	ldr	r3, [pc, #348]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = M1_PWM_Pin;
 800329a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800329e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a0:	2302      	movs	r3, #2
 80032a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a8:	2300      	movs	r3, #0
 80032aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80032ac:	2303      	movs	r3, #3
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M1_PWM_GPIO_Port, &GPIO_InitStruct);
 80032b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032b4:	4619      	mov	r1, r3
 80032b6:	4852      	ldr	r0, [pc, #328]	@ (8003400 <HAL_TIM_MspPostInit+0x238>)
 80032b8:	f000 fc04 	bl	8003ac4 <HAL_GPIO_Init>
}
 80032bc:	e090      	b.n	80033e0 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM11)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a50      	ldr	r2, [pc, #320]	@ (8003404 <HAL_TIM_MspPostInit+0x23c>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d11f      	bne.n	8003308 <HAL_TIM_MspPostInit+0x140>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	4b47      	ldr	r3, [pc, #284]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	4a46      	ldr	r2, [pc, #280]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80032d8:	4b44      	ldr	r3, [pc, #272]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 80032e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ea:	2302      	movs	r3, #2
 80032ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f2:	2300      	movs	r3, #0
 80032f4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80032f6:	2303      	movs	r3, #3
 80032f8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032fe:	4619      	mov	r1, r3
 8003300:	483f      	ldr	r0, [pc, #252]	@ (8003400 <HAL_TIM_MspPostInit+0x238>)
 8003302:	f000 fbdf 	bl	8003ac4 <HAL_GPIO_Init>
}
 8003306:	e06b      	b.n	80033e0 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM12)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a3e      	ldr	r2, [pc, #248]	@ (8003408 <HAL_TIM_MspPostInit+0x240>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d11f      	bne.n	8003352 <HAL_TIM_MspPostInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	4b35      	ldr	r3, [pc, #212]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	4a34      	ldr	r2, [pc, #208]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 800331c:	f043 0302 	orr.w	r3, r3, #2
 8003320:	6313      	str	r3, [r2, #48]	@ 0x30
 8003322:	4b32      	ldr	r3, [pc, #200]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M3_PWM_Pin;
 800332e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003332:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2302      	movs	r3, #2
 8003336:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333c:	2300      	movs	r3, #0
 800333e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003340:	2309      	movs	r3, #9
 8003342:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(M3_PWM_GPIO_Port, &GPIO_InitStruct);
 8003344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003348:	4619      	mov	r1, r3
 800334a:	482d      	ldr	r0, [pc, #180]	@ (8003400 <HAL_TIM_MspPostInit+0x238>)
 800334c:	f000 fbba 	bl	8003ac4 <HAL_GPIO_Init>
}
 8003350:	e046      	b.n	80033e0 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM13)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a2d      	ldr	r2, [pc, #180]	@ (800340c <HAL_TIM_MspPostInit+0x244>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d11e      	bne.n	800339a <HAL_TIM_MspPostInit+0x1d2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800335c:	2300      	movs	r3, #0
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	4b22      	ldr	r3, [pc, #136]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 8003362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003364:	4a21      	ldr	r2, [pc, #132]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	6313      	str	r3, [r2, #48]	@ 0x30
 800336c:	4b1f      	ldr	r3, [pc, #124]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	f003 0301 	and.w	r3, r3, #1
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003378:	2340      	movs	r3, #64	@ 0x40
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003380:	2300      	movs	r3, #0
 8003382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	2300      	movs	r3, #0
 8003386:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8003388:	2309      	movs	r3, #9
 800338a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003390:	4619      	mov	r1, r3
 8003392:	4817      	ldr	r0, [pc, #92]	@ (80033f0 <HAL_TIM_MspPostInit+0x228>)
 8003394:	f000 fb96 	bl	8003ac4 <HAL_GPIO_Init>
}
 8003398:	e022      	b.n	80033e0 <HAL_TIM_MspPostInit+0x218>
  else if(htim->Instance==TIM14)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a1c      	ldr	r2, [pc, #112]	@ (8003410 <HAL_TIM_MspPostInit+0x248>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d11d      	bne.n	80033e0 <HAL_TIM_MspPostInit+0x218>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a4:	2300      	movs	r3, #0
 80033a6:	60bb      	str	r3, [r7, #8]
 80033a8:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80033aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ac:	4a0f      	ldr	r2, [pc, #60]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80033b4:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <HAL_TIM_MspPostInit+0x224>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	60bb      	str	r3, [r7, #8]
 80033be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = E_Bike_PWM_Pin;
 80033c0:	2380      	movs	r3, #128	@ 0x80
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c4:	2302      	movs	r3, #2
 80033c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c8:	2300      	movs	r3, #0
 80033ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033cc:	2300      	movs	r3, #0
 80033ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80033d0:	2309      	movs	r3, #9
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(E_Bike_PWM_GPIO_Port, &GPIO_InitStruct);
 80033d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033d8:	4619      	mov	r1, r3
 80033da:	4805      	ldr	r0, [pc, #20]	@ (80033f0 <HAL_TIM_MspPostInit+0x228>)
 80033dc:	f000 fb72 	bl	8003ac4 <HAL_GPIO_Init>
}
 80033e0:	bf00      	nop
 80033e2:	3738      	adds	r7, #56	@ 0x38
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40010000 	.word	0x40010000
 80033ec:	40023800 	.word	0x40023800
 80033f0:	40020000 	.word	0x40020000
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40020800 	.word	0x40020800
 80033fc:	40014400 	.word	0x40014400
 8003400:	40020400 	.word	0x40020400
 8003404:	40014800 	.word	0x40014800
 8003408:	40001800 	.word	0x40001800
 800340c:	40001c00 	.word	0x40001c00
 8003410:	40002000 	.word	0x40002000

08003414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	@ 0x28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
 800342a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a19      	ldr	r2, [pc, #100]	@ (8003498 <HAL_UART_MspInit+0x84>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d12b      	bne.n	800348e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	4b18      	ldr	r3, [pc, #96]	@ (800349c <HAL_UART_MspInit+0x88>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	4a17      	ldr	r2, [pc, #92]	@ (800349c <HAL_UART_MspInit+0x88>)
 8003440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003444:	6413      	str	r3, [r2, #64]	@ 0x40
 8003446:	4b15      	ldr	r3, [pc, #84]	@ (800349c <HAL_UART_MspInit+0x88>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b11      	ldr	r3, [pc, #68]	@ (800349c <HAL_UART_MspInit+0x88>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800345a:	4a10      	ldr	r2, [pc, #64]	@ (800349c <HAL_UART_MspInit+0x88>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6313      	str	r3, [r2, #48]	@ 0x30
 8003462:	4b0e      	ldr	r3, [pc, #56]	@ (800349c <HAL_UART_MspInit+0x88>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800346e:	230c      	movs	r3, #12
 8003470:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003472:	2302      	movs	r3, #2
 8003474:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800347a:	2303      	movs	r3, #3
 800347c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800347e:	2307      	movs	r3, #7
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	4805      	ldr	r0, [pc, #20]	@ (80034a0 <HAL_UART_MspInit+0x8c>)
 800348a:	f000 fb1b 	bl	8003ac4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800348e:	bf00      	nop
 8003490:	3728      	adds	r7, #40	@ 0x28
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40004400 	.word	0x40004400
 800349c:	40023800 	.word	0x40023800
 80034a0:	40020000 	.word	0x40020000

080034a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80034a8:	bf00      	nop
 80034aa:	e7fd      	b.n	80034a8 <NMI_Handler+0x4>

080034ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034b0:	bf00      	nop
 80034b2:	e7fd      	b.n	80034b0 <HardFault_Handler+0x4>

080034b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034b8:	bf00      	nop
 80034ba:	e7fd      	b.n	80034b8 <MemManage_Handler+0x4>

080034bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <BusFault_Handler+0x4>

080034c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034c4:	b480      	push	{r7}
 80034c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034c8:	bf00      	nop
 80034ca:	e7fd      	b.n	80034c8 <UsageFault_Handler+0x4>

080034cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034d0:	bf00      	nop
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034fa:	f000 f94f 	bl	800379c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003508:	4802      	ldr	r0, [pc, #8]	@ (8003514 <I2C2_EV_IRQHandler+0x10>)
 800350a:	f000 ffc7 	bl	800449c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000268 	.word	0x20000268

08003518 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 800351c:	4802      	ldr	r0, [pc, #8]	@ (8003528 <I2C2_ER_IRQHandler+0x10>)
 800351e:	f001 f910 	bl	8004742 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	20000268 	.word	0x20000268

0800352c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return 1;
 8003530:	2301      	movs	r3, #1
}
 8003532:	4618      	mov	r0, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <_kill>:

int _kill(int pid, int sig)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003546:	f006 f83b 	bl	80095c0 <__errno>
 800354a:	4603      	mov	r3, r0
 800354c:	2216      	movs	r2, #22
 800354e:	601a      	str	r2, [r3, #0]
  return -1;
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <_exit>:

void _exit (int status)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003564:	f04f 31ff 	mov.w	r1, #4294967295
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ffe7 	bl	800353c <_kill>
  while (1) {}    /* Make sure we hang here */
 800356e:	bf00      	nop
 8003570:	e7fd      	b.n	800356e <_exit+0x12>

08003572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	e00a      	b.n	800359a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003584:	f3af 8000 	nop.w
 8003588:	4601      	mov	r1, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	60ba      	str	r2, [r7, #8]
 8003590:	b2ca      	uxtb	r2, r1
 8003592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3301      	adds	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	dbf0      	blt.n	8003584 <_read+0x12>
  }

  return len;
 80035a2:	687b      	ldr	r3, [r7, #4]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035d4:	605a      	str	r2, [r3, #4]
  return 0;
 80035d6:	2300      	movs	r3, #0
}
 80035d8:	4618      	mov	r0, r3
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <_isatty>:

int _isatty(int file)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035ec:	2301      	movs	r3, #1
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3714      	adds	r7, #20
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800361c:	4a14      	ldr	r2, [pc, #80]	@ (8003670 <_sbrk+0x5c>)
 800361e:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <_sbrk+0x60>)
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003628:	4b13      	ldr	r3, [pc, #76]	@ (8003678 <_sbrk+0x64>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d102      	bne.n	8003636 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003630:	4b11      	ldr	r3, [pc, #68]	@ (8003678 <_sbrk+0x64>)
 8003632:	4a12      	ldr	r2, [pc, #72]	@ (800367c <_sbrk+0x68>)
 8003634:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003636:	4b10      	ldr	r3, [pc, #64]	@ (8003678 <_sbrk+0x64>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	429a      	cmp	r2, r3
 8003642:	d207      	bcs.n	8003654 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003644:	f005 ffbc 	bl	80095c0 <__errno>
 8003648:	4603      	mov	r3, r0
 800364a:	220c      	movs	r2, #12
 800364c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800364e:	f04f 33ff 	mov.w	r3, #4294967295
 8003652:	e009      	b.n	8003668 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003654:	4b08      	ldr	r3, [pc, #32]	@ (8003678 <_sbrk+0x64>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800365a:	4b07      	ldr	r3, [pc, #28]	@ (8003678 <_sbrk+0x64>)
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	4a05      	ldr	r2, [pc, #20]	@ (8003678 <_sbrk+0x64>)
 8003664:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003666:	68fb      	ldr	r3, [r7, #12]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20020000 	.word	0x20020000
 8003674:	00000400 	.word	0x00000400
 8003678:	200006e4 	.word	0x200006e4
 800367c:	20000838 	.word	0x20000838

08003680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003684:	4b06      	ldr	r3, [pc, #24]	@ (80036a0 <SystemInit+0x20>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	4a05      	ldr	r2, [pc, #20]	@ (80036a0 <SystemInit+0x20>)
 800368c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	e000ed00 	.word	0xe000ed00

080036a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80036a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80036a8:	f7ff ffea 	bl	8003680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80036ac:	480c      	ldr	r0, [pc, #48]	@ (80036e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036ae:	490d      	ldr	r1, [pc, #52]	@ (80036e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036b0:	4a0d      	ldr	r2, [pc, #52]	@ (80036e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036b4:	e002      	b.n	80036bc <LoopCopyDataInit>

080036b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ba:	3304      	adds	r3, #4

080036bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c0:	d3f9      	bcc.n	80036b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036c2:	4a0a      	ldr	r2, [pc, #40]	@ (80036ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036c4:	4c0a      	ldr	r4, [pc, #40]	@ (80036f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036c8:	e001      	b.n	80036ce <LoopFillZerobss>

080036ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036cc:	3204      	adds	r2, #4

080036ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d0:	d3fb      	bcc.n	80036ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80036d2:	f005 ff7b 	bl	80095cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036d6:	f7fe fa11 	bl	8001afc <main>
  bx  lr    
 80036da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036e4:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80036e8:	0800eac0 	.word	0x0800eac0
  ldr r2, =_sbss
 80036ec:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80036f0:	20000838 	.word	0x20000838

080036f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036f4:	e7fe      	b.n	80036f4 <ADC_IRQHandler>
	...

080036f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003738 <HAL_Init+0x40>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0d      	ldr	r2, [pc, #52]	@ (8003738 <HAL_Init+0x40>)
 8003702:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003708:	4b0b      	ldr	r3, [pc, #44]	@ (8003738 <HAL_Init+0x40>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a0a      	ldr	r2, [pc, #40]	@ (8003738 <HAL_Init+0x40>)
 800370e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003714:	4b08      	ldr	r3, [pc, #32]	@ (8003738 <HAL_Init+0x40>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a07      	ldr	r2, [pc, #28]	@ (8003738 <HAL_Init+0x40>)
 800371a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800371e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003720:	2003      	movs	r0, #3
 8003722:	f000 f94f 	bl	80039c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003726:	2000      	movs	r0, #0
 8003728:	f000 f808 	bl	800373c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800372c:	f7ff fa8c 	bl	8002c48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40023c00 	.word	0x40023c00

0800373c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003744:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <HAL_InitTick+0x54>)
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	4b12      	ldr	r3, [pc, #72]	@ (8003794 <HAL_InitTick+0x58>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	4619      	mov	r1, r3
 800374e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003752:	fbb3 f3f1 	udiv	r3, r3, r1
 8003756:	fbb2 f3f3 	udiv	r3, r2, r3
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f975 	bl	8003a4a <HAL_SYSTICK_Config>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e00e      	b.n	8003788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b0f      	cmp	r3, #15
 800376e:	d80a      	bhi.n	8003786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003770:	2200      	movs	r2, #0
 8003772:	6879      	ldr	r1, [r7, #4]
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	f000 f92f 	bl	80039da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800377c:	4a06      	ldr	r2, [pc, #24]	@ (8003798 <HAL_InitTick+0x5c>)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	e000      	b.n	8003788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20000010 	.word	0x20000010
 8003794:	20000018 	.word	0x20000018
 8003798:	20000014 	.word	0x20000014

0800379c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037a0:	4b06      	ldr	r3, [pc, #24]	@ (80037bc <HAL_IncTick+0x20>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	4b06      	ldr	r3, [pc, #24]	@ (80037c0 <HAL_IncTick+0x24>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4413      	add	r3, r2
 80037ac:	4a04      	ldr	r2, [pc, #16]	@ (80037c0 <HAL_IncTick+0x24>)
 80037ae:	6013      	str	r3, [r2, #0]
}
 80037b0:	bf00      	nop
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20000018 	.word	0x20000018
 80037c0:	200006e8 	.word	0x200006e8

080037c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  return uwTick;
 80037c8:	4b03      	ldr	r3, [pc, #12]	@ (80037d8 <HAL_GetTick+0x14>)
 80037ca:	681b      	ldr	r3, [r3, #0]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	200006e8 	.word	0x200006e8

080037dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80037f8:	4013      	ands	r3, r2
 80037fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003804:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003808:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800380c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800380e:	4a04      	ldr	r2, [pc, #16]	@ (8003820 <__NVIC_SetPriorityGrouping+0x44>)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	60d3      	str	r3, [r2, #12]
}
 8003814:	bf00      	nop
 8003816:	3714      	adds	r7, #20
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000ed00 	.word	0xe000ed00

08003824 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003828:	4b04      	ldr	r3, [pc, #16]	@ (800383c <__NVIC_GetPriorityGrouping+0x18>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	0a1b      	lsrs	r3, r3, #8
 800382e:	f003 0307 	and.w	r3, r3, #7
}
 8003832:	4618      	mov	r0, r3
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	2b00      	cmp	r3, #0
 8003850:	db0b      	blt.n	800386a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	4907      	ldr	r1, [pc, #28]	@ (8003878 <__NVIC_EnableIRQ+0x38>)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2001      	movs	r0, #1
 8003862:	fa00 f202 	lsl.w	r2, r0, r2
 8003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000e100 	.word	0xe000e100

0800387c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db12      	blt.n	80038b4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	490a      	ldr	r1, [pc, #40]	@ (80038c0 <__NVIC_DisableIRQ+0x44>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	3320      	adds	r3, #32
 80038a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80038a8:	f3bf 8f4f 	dsb	sy
}
 80038ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80038ae:	f3bf 8f6f 	isb	sy
}
 80038b2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100

080038c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	@ (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	@ (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003918:	b480      	push	{r7}
 800391a:	b089      	sub	sp, #36	@ 0x24
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f1c3 0307 	rsb	r3, r3, #7
 8003932:	2b04      	cmp	r3, #4
 8003934:	bf28      	it	cs
 8003936:	2304      	movcs	r3, #4
 8003938:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3304      	adds	r3, #4
 800393e:	2b06      	cmp	r3, #6
 8003940:	d902      	bls.n	8003948 <NVIC_EncodePriority+0x30>
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	3b03      	subs	r3, #3
 8003946:	e000      	b.n	800394a <NVIC_EncodePriority+0x32>
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800394c:	f04f 32ff 	mov.w	r2, #4294967295
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	43da      	mvns	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003960:	f04f 31ff 	mov.w	r1, #4294967295
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	fa01 f303 	lsl.w	r3, r1, r3
 800396a:	43d9      	mvns	r1, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003970:	4313      	orrs	r3, r2
         );
}
 8003972:	4618      	mov	r0, r3
 8003974:	3724      	adds	r7, #36	@ 0x24
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
	...

08003980 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003990:	d301      	bcc.n	8003996 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003992:	2301      	movs	r3, #1
 8003994:	e00f      	b.n	80039b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <SysTick_Config+0x40>)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3b01      	subs	r3, #1
 800399c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800399e:	210f      	movs	r1, #15
 80039a0:	f04f 30ff 	mov.w	r0, #4294967295
 80039a4:	f7ff ff8e 	bl	80038c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039a8:	4b05      	ldr	r3, [pc, #20]	@ (80039c0 <SysTick_Config+0x40>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039ae:	4b04      	ldr	r3, [pc, #16]	@ (80039c0 <SysTick_Config+0x40>)
 80039b0:	2207      	movs	r2, #7
 80039b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	e000e010 	.word	0xe000e010

080039c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f7ff ff05 	bl	80037dc <__NVIC_SetPriorityGrouping>
}
 80039d2:	bf00      	nop
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	4603      	mov	r3, r0
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
 80039e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039ec:	f7ff ff1a 	bl	8003824 <__NVIC_GetPriorityGrouping>
 80039f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	6978      	ldr	r0, [r7, #20]
 80039f8:	f7ff ff8e 	bl	8003918 <NVIC_EncodePriority>
 80039fc:	4602      	mov	r2, r0
 80039fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a02:	4611      	mov	r1, r2
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff ff5d 	bl	80038c4 <__NVIC_SetPriority>
}
 8003a0a:	bf00      	nop
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b082      	sub	sp, #8
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	4603      	mov	r3, r0
 8003a1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7ff ff0d 	bl	8003840 <__NVIC_EnableIRQ>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003a38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7ff ff1d 	bl	800387c <__NVIC_DisableIRQ>
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b082      	sub	sp, #8
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff ff94 	bl	8003980 <SysTick_Config>
 8003a58:	4603      	mov	r3, r0
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a62:	b480      	push	{r7}
 8003a64:	b083      	sub	sp, #12
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d004      	beq.n	8003a80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2280      	movs	r2, #128	@ 0x80
 8003a7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e00c      	b.n	8003a9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2205      	movs	r2, #5
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ab4:	b2db      	uxtb	r3, r3
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e165      	b.n	8003dac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	f040 8154 	bne.w	8003da6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d005      	beq.n	8003b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d130      	bne.n	8003b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	2203      	movs	r2, #3
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 0201 	and.w	r2, r3, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d017      	beq.n	8003bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d123      	bne.n	8003c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3208      	adds	r2, #8
 8003bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	69b9      	ldr	r1, [r7, #24]
 8003c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80ae 	beq.w	8003da6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4b5d      	ldr	r3, [pc, #372]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	4a5c      	ldr	r2, [pc, #368]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5a:	4b5a      	ldr	r3, [pc, #360]	@ (8003dc4 <HAL_GPIO_Init+0x300>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c66:	4a58      	ldr	r2, [pc, #352]	@ (8003dc8 <HAL_GPIO_Init+0x304>)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a4f      	ldr	r2, [pc, #316]	@ (8003dcc <HAL_GPIO_Init+0x308>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d025      	beq.n	8003cde <HAL_GPIO_Init+0x21a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a4e      	ldr	r2, [pc, #312]	@ (8003dd0 <HAL_GPIO_Init+0x30c>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d01f      	beq.n	8003cda <HAL_GPIO_Init+0x216>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a4d      	ldr	r2, [pc, #308]	@ (8003dd4 <HAL_GPIO_Init+0x310>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d019      	beq.n	8003cd6 <HAL_GPIO_Init+0x212>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4c      	ldr	r2, [pc, #304]	@ (8003dd8 <HAL_GPIO_Init+0x314>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <HAL_GPIO_Init+0x20e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4b      	ldr	r2, [pc, #300]	@ (8003ddc <HAL_GPIO_Init+0x318>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d00d      	beq.n	8003cce <HAL_GPIO_Init+0x20a>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8003de0 <HAL_GPIO_Init+0x31c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d007      	beq.n	8003cca <HAL_GPIO_Init+0x206>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a49      	ldr	r2, [pc, #292]	@ (8003de4 <HAL_GPIO_Init+0x320>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d101      	bne.n	8003cc6 <HAL_GPIO_Init+0x202>
 8003cc2:	2306      	movs	r3, #6
 8003cc4:	e00c      	b.n	8003ce0 <HAL_GPIO_Init+0x21c>
 8003cc6:	2307      	movs	r3, #7
 8003cc8:	e00a      	b.n	8003ce0 <HAL_GPIO_Init+0x21c>
 8003cca:	2305      	movs	r3, #5
 8003ccc:	e008      	b.n	8003ce0 <HAL_GPIO_Init+0x21c>
 8003cce:	2304      	movs	r3, #4
 8003cd0:	e006      	b.n	8003ce0 <HAL_GPIO_Init+0x21c>
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e004      	b.n	8003ce0 <HAL_GPIO_Init+0x21c>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e002      	b.n	8003ce0 <HAL_GPIO_Init+0x21c>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <HAL_GPIO_Init+0x21c>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	69fa      	ldr	r2, [r7, #28]
 8003ce2:	f002 0203 	and.w	r2, r2, #3
 8003ce6:	0092      	lsls	r2, r2, #2
 8003ce8:	4093      	lsls	r3, r2
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cf0:	4935      	ldr	r1, [pc, #212]	@ (8003dc8 <HAL_GPIO_Init+0x304>)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	089b      	lsrs	r3, r3, #2
 8003cf6:	3302      	adds	r3, #2
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	43db      	mvns	r3, r3
 8003d08:	69ba      	ldr	r2, [r7, #24]
 8003d0a:	4013      	ands	r3, r2
 8003d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003d1a:	69ba      	ldr	r2, [r7, #24]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d22:	4a31      	ldr	r2, [pc, #196]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d28:	4b2f      	ldr	r3, [pc, #188]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4013      	ands	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d4c:	4a26      	ldr	r2, [pc, #152]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d52:	4b25      	ldr	r3, [pc, #148]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d76:	4a1c      	ldr	r2, [pc, #112]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d003      	beq.n	8003da0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003da0:	4a11      	ldr	r2, [pc, #68]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	3301      	adds	r3, #1
 8003daa:	61fb      	str	r3, [r7, #28]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b0f      	cmp	r3, #15
 8003db0:	f67f ae96 	bls.w	8003ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	3724      	adds	r7, #36	@ 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40023800 	.word	0x40023800
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	40020000 	.word	0x40020000
 8003dd0:	40020400 	.word	0x40020400
 8003dd4:	40020800 	.word	0x40020800
 8003dd8:	40020c00 	.word	0x40020c00
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	40021400 	.word	0x40021400
 8003de4:	40021800 	.word	0x40021800
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e02:	2300      	movs	r3, #0
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e0c7      	b.n	8003f98 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e08:	2201      	movs	r2, #1
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e10:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	4013      	ands	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	429a      	cmp	r2, r3
 8003e20:	f040 80b7 	bne.w	8003f92 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003e24:	4a62      	ldr	r2, [pc, #392]	@ (8003fb0 <HAL_GPIO_DeInit+0x1c4>)
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	089b      	lsrs	r3, r3, #2
 8003e2a:	3302      	adds	r3, #2
 8003e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e30:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	220f      	movs	r2, #15
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a5a      	ldr	r2, [pc, #360]	@ (8003fb4 <HAL_GPIO_DeInit+0x1c8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d025      	beq.n	8003e9a <HAL_GPIO_DeInit+0xae>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a59      	ldr	r2, [pc, #356]	@ (8003fb8 <HAL_GPIO_DeInit+0x1cc>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01f      	beq.n	8003e96 <HAL_GPIO_DeInit+0xaa>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a58      	ldr	r2, [pc, #352]	@ (8003fbc <HAL_GPIO_DeInit+0x1d0>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d019      	beq.n	8003e92 <HAL_GPIO_DeInit+0xa6>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a57      	ldr	r2, [pc, #348]	@ (8003fc0 <HAL_GPIO_DeInit+0x1d4>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_GPIO_DeInit+0xa2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a56      	ldr	r2, [pc, #344]	@ (8003fc4 <HAL_GPIO_DeInit+0x1d8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00d      	beq.n	8003e8a <HAL_GPIO_DeInit+0x9e>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a55      	ldr	r2, [pc, #340]	@ (8003fc8 <HAL_GPIO_DeInit+0x1dc>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <HAL_GPIO_DeInit+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a54      	ldr	r2, [pc, #336]	@ (8003fcc <HAL_GPIO_DeInit+0x1e0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_GPIO_DeInit+0x96>
 8003e7e:	2306      	movs	r3, #6
 8003e80:	e00c      	b.n	8003e9c <HAL_GPIO_DeInit+0xb0>
 8003e82:	2307      	movs	r3, #7
 8003e84:	e00a      	b.n	8003e9c <HAL_GPIO_DeInit+0xb0>
 8003e86:	2305      	movs	r3, #5
 8003e88:	e008      	b.n	8003e9c <HAL_GPIO_DeInit+0xb0>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	e006      	b.n	8003e9c <HAL_GPIO_DeInit+0xb0>
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e004      	b.n	8003e9c <HAL_GPIO_DeInit+0xb0>
 8003e92:	2302      	movs	r3, #2
 8003e94:	e002      	b.n	8003e9c <HAL_GPIO_DeInit+0xb0>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <HAL_GPIO_DeInit+0xb0>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	f002 0203 	and.w	r2, r2, #3
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	4093      	lsls	r3, r2
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d132      	bne.n	8003f12 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003eac:	4b48      	ldr	r3, [pc, #288]	@ (8003fd0 <HAL_GPIO_DeInit+0x1e4>)
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43db      	mvns	r3, r3
 8003eb4:	4946      	ldr	r1, [pc, #280]	@ (8003fd0 <HAL_GPIO_DeInit+0x1e4>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003eba:	4b45      	ldr	r3, [pc, #276]	@ (8003fd0 <HAL_GPIO_DeInit+0x1e4>)
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	4943      	ldr	r1, [pc, #268]	@ (8003fd0 <HAL_GPIO_DeInit+0x1e4>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ec8:	4b41      	ldr	r3, [pc, #260]	@ (8003fd0 <HAL_GPIO_DeInit+0x1e4>)
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	493f      	ldr	r1, [pc, #252]	@ (8003fd0 <HAL_GPIO_DeInit+0x1e4>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8003fd0 <HAL_GPIO_DeInit+0x1e4>)
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	43db      	mvns	r3, r3
 8003ede:	493c      	ldr	r1, [pc, #240]	@ (8003fd0 <HAL_GPIO_DeInit+0x1e4>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	220f      	movs	r2, #15
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb0 <HAL_GPIO_DeInit+0x1c4>)
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	089b      	lsrs	r3, r3, #2
 8003efa:	3302      	adds	r3, #2
 8003efc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	43da      	mvns	r2, r3
 8003f04:	482a      	ldr	r0, [pc, #168]	@ (8003fb0 <HAL_GPIO_DeInit+0x1c4>)
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	089b      	lsrs	r3, r3, #2
 8003f0a:	400a      	ands	r2, r1
 8003f0c:	3302      	adds	r3, #2
 8003f0e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	2103      	movs	r1, #3
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	401a      	ands	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	08da      	lsrs	r2, r3, #3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3208      	adds	r2, #8
 8003f30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	220f      	movs	r2, #15
 8003f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f42:	43db      	mvns	r3, r3
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	08d2      	lsrs	r2, r2, #3
 8003f48:	4019      	ands	r1, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	3208      	adds	r2, #8
 8003f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	2103      	movs	r1, #3
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	401a      	ands	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	fa01 f303 	lsl.w	r3, r1, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	401a      	ands	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	2103      	movs	r1, #3
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	43db      	mvns	r3, r3
 8003f8c:	401a      	ands	r2, r3
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3301      	adds	r3, #1
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b0f      	cmp	r3, #15
 8003f9c:	f67f af34 	bls.w	8003e08 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003fa0:	bf00      	nop
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	40013800 	.word	0x40013800
 8003fb4:	40020000 	.word	0x40020000
 8003fb8:	40020400 	.word	0x40020400
 8003fbc:	40020800 	.word	0x40020800
 8003fc0:	40020c00 	.word	0x40020c00
 8003fc4:	40021000 	.word	0x40021000
 8003fc8:	40021400 	.word	0x40021400
 8003fcc:	40021800 	.word	0x40021800
 8003fd0:	40013c00 	.word	0x40013c00

08003fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	460b      	mov	r3, r1
 8003fde:	807b      	strh	r3, [r7, #2]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe4:	787b      	ldrb	r3, [r7, #1]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fea:	887a      	ldrh	r2, [r7, #2]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ff0:	e003      	b.n	8003ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ff2:	887b      	ldrh	r3, [r7, #2]
 8003ff4:	041a      	lsls	r2, r3, #16
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	619a      	str	r2, [r3, #24]
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
	...

08004008 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e12b      	b.n	8004272 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d106      	bne.n	8004034 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe fe32 	bl	8002c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2224      	movs	r2, #36	@ 0x24
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0201 	bic.w	r2, r2, #1
 800404a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800405a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800406a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800406c:	f002 f818 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8004070:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	4a81      	ldr	r2, [pc, #516]	@ (800427c <HAL_I2C_Init+0x274>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d807      	bhi.n	800408c <HAL_I2C_Init+0x84>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4a80      	ldr	r2, [pc, #512]	@ (8004280 <HAL_I2C_Init+0x278>)
 8004080:	4293      	cmp	r3, r2
 8004082:	bf94      	ite	ls
 8004084:	2301      	movls	r3, #1
 8004086:	2300      	movhi	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e006      	b.n	800409a <HAL_I2C_Init+0x92>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4a7d      	ldr	r2, [pc, #500]	@ (8004284 <HAL_I2C_Init+0x27c>)
 8004090:	4293      	cmp	r3, r2
 8004092:	bf94      	ite	ls
 8004094:	2301      	movls	r3, #1
 8004096:	2300      	movhi	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e0e7      	b.n	8004272 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4a78      	ldr	r2, [pc, #480]	@ (8004288 <HAL_I2C_Init+0x280>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0c9b      	lsrs	r3, r3, #18
 80040ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6a1b      	ldr	r3, [r3, #32]
 80040c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a6a      	ldr	r2, [pc, #424]	@ (800427c <HAL_I2C_Init+0x274>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d802      	bhi.n	80040dc <HAL_I2C_Init+0xd4>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	3301      	adds	r3, #1
 80040da:	e009      	b.n	80040f0 <HAL_I2C_Init+0xe8>
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	4a69      	ldr	r2, [pc, #420]	@ (800428c <HAL_I2C_Init+0x284>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	3301      	adds	r3, #1
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6812      	ldr	r2, [r2, #0]
 80040f4:	430b      	orrs	r3, r1
 80040f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004102:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	495c      	ldr	r1, [pc, #368]	@ (800427c <HAL_I2C_Init+0x274>)
 800410c:	428b      	cmp	r3, r1
 800410e:	d819      	bhi.n	8004144 <HAL_I2C_Init+0x13c>
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1e59      	subs	r1, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	fbb1 f3f3 	udiv	r3, r1, r3
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004124:	400b      	ands	r3, r1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_I2C_Init+0x138>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e59      	subs	r1, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb1 f3f3 	udiv	r3, r1, r3
 8004138:	3301      	adds	r3, #1
 800413a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800413e:	e051      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004140:	2304      	movs	r3, #4
 8004142:	e04f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d111      	bne.n	8004170 <HAL_I2C_Init+0x168>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	e012      	b.n	8004196 <HAL_I2C_Init+0x18e>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1e58      	subs	r0, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6859      	ldr	r1, [r3, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	0099      	lsls	r1, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	fbb0 f3f3 	udiv	r3, r0, r3
 8004186:	3301      	adds	r3, #1
 8004188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418c:	2b00      	cmp	r3, #0
 800418e:	bf0c      	ite	eq
 8004190:	2301      	moveq	r3, #1
 8004192:	2300      	movne	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <HAL_I2C_Init+0x196>
 800419a:	2301      	movs	r3, #1
 800419c:	e022      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d10e      	bne.n	80041c4 <HAL_I2C_Init+0x1bc>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1e58      	subs	r0, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6859      	ldr	r1, [r3, #4]
 80041ae:	460b      	mov	r3, r1
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	440b      	add	r3, r1
 80041b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b8:	3301      	adds	r3, #1
 80041ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c2:	e00f      	b.n	80041e4 <HAL_I2C_Init+0x1dc>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	1e58      	subs	r0, r3, #1
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6859      	ldr	r1, [r3, #4]
 80041cc:	460b      	mov	r3, r1
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	0099      	lsls	r1, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041da:	3301      	adds	r3, #1
 80041dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	6809      	ldr	r1, [r1, #0]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69da      	ldr	r2, [r3, #28]
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a1b      	ldr	r3, [r3, #32]
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	430a      	orrs	r2, r1
 8004206:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004212:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6911      	ldr	r1, [r2, #16]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68d2      	ldr	r2, [r2, #12]
 800421e:	4311      	orrs	r1, r2
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	6812      	ldr	r2, [r2, #0]
 8004224:	430b      	orrs	r3, r1
 8004226:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	695a      	ldr	r2, [r3, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	699b      	ldr	r3, [r3, #24]
 800423a:	431a      	orrs	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0201 	orr.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	000186a0 	.word	0x000186a0
 8004280:	001e847f 	.word	0x001e847f
 8004284:	003d08ff 	.word	0x003d08ff
 8004288:	431bde83 	.word	0x431bde83
 800428c:	10624dd3 	.word	0x10624dd3

08004290 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e021      	b.n	80042e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2224      	movs	r2, #36	@ 0x24
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f022 0201 	bic.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f7fe fd9a 	bl	8002df4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	695b      	ldr	r3, [r3, #20]
 80042fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004300:	2b80      	cmp	r3, #128	@ 0x80
 8004302:	d103      	bne.n	800430c <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
  }
}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	4613      	mov	r3, r2
 8004324:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b20      	cmp	r3, #32
 8004330:	d158      	bne.n	80043e4 <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d002      	beq.n	800433e <HAL_I2C_Slave_Receive_IT+0x26>
 8004338:	88fb      	ldrh	r3, [r7, #6]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e051      	b.n	80043e6 <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_I2C_Slave_Receive_IT+0x38>
 800434c:	2302      	movs	r3, #2
 800434e:	e04a      	b.n	80043e6 <HAL_I2C_Slave_Receive_IT+0xce>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b01      	cmp	r3, #1
 8004364:	d007      	beq.n	8004376 <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f042 0201 	orr.w	r2, r2, #1
 8004374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004384:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2222      	movs	r2, #34	@ 0x22
 800438a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	88fa      	ldrh	r2, [r7, #6]
 80043a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	4a0f      	ldr	r2, [pc, #60]	@ (80043f4 <HAL_I2C_Slave_Receive_IT+0xdc>)
 80043b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043c6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80043de:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	ffff0000 	.word	0xffff0000

080043f8 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	460b      	mov	r3, r1
 8004402:	807b      	strh	r3, [r7, #2]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800440a:	73fb      	strb	r3, [r7, #15]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(DevAddress);

  /* Abort Master transfer during Receive or Transmit process    */
  if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && ((CurrentMode == HAL_I2C_MODE_MASTER) || 
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b02      	cmp	r3, #2
 8004418:	d13b      	bne.n	8004492 <HAL_I2C_Master_Abort_IT+0x9a>
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b10      	cmp	r3, #16
 800441e:	d002      	beq.n	8004426 <HAL_I2C_Master_Abort_IT+0x2e>
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	2b40      	cmp	r3, #64	@ 0x40
 8004424:	d135      	bne.n	8004492 <HAL_I2C_Master_Abort_IT+0x9a>
                                                             (CurrentMode == HAL_I2C_MODE_MEM)))
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800442c:	2b01      	cmp	r3, #1
 800442e:	d101      	bne.n	8004434 <HAL_I2C_Master_Abort_IT+0x3c>
 8004430:	2302      	movs	r3, #2
 8004432:	e02f      	b.n	8004494 <HAL_I2C_Master_Abort_IT+0x9c>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    hi2c->PreviousState = I2C_STATE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_ABORT;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2260      	movs	r2, #96	@ 0x60
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004458:	601a      	str	r2, [r3, #0]

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004468:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800447e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f001 fa9f 	bl	80059cc <I2C_ITError>

    return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_I2C_Master_Abort_IT+0x9c>
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    /* Or periphal is not in busy state, mean there is no active sequence to be abort */
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
  }
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044bc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80044c6:	7bfb      	ldrb	r3, [r7, #15]
 80044c8:	2b10      	cmp	r3, #16
 80044ca:	d003      	beq.n	80044d4 <HAL_I2C_EV_IRQHandler+0x38>
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b40      	cmp	r3, #64	@ 0x40
 80044d0:	f040 80b1 	bne.w	8004636 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <HAL_I2C_EV_IRQHandler+0x6e>
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80044f4:	d003      	beq.n	80044fe <HAL_I2C_EV_IRQHandler+0x62>
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80044fc:	d101      	bne.n	8004502 <HAL_I2C_EV_IRQHandler+0x66>
 80044fe:	2301      	movs	r3, #1
 8004500:	e000      	b.n	8004504 <HAL_I2C_EV_IRQHandler+0x68>
 8004502:	2300      	movs	r3, #0
 8004504:	2b01      	cmp	r3, #1
 8004506:	f000 8114 	beq.w	8004732 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00b      	beq.n	800452c <HAL_I2C_EV_IRQHandler+0x90>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f001 fc60 	bl	8005de4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f000 fd66 	bl	8004ff6 <I2C_Master_SB>
 800452a:	e083      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d008      	beq.n	8004548 <HAL_I2C_EV_IRQHandler+0xac>
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 fdde 	bl	8005102 <I2C_Master_ADD10>
 8004546:	e075      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d008      	beq.n	8004564 <HAL_I2C_EV_IRQHandler+0xc8>
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fdfa 	bl	8005156 <I2C_Master_ADDR>
 8004562:	e067      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d036      	beq.n	80045dc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800457c:	f000 80db 	beq.w	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00d      	beq.n	80045a6 <HAL_I2C_EV_IRQHandler+0x10a>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_I2C_EV_IRQHandler+0x10a>
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f003 0304 	and.w	r3, r3, #4
 800459a:	2b00      	cmp	r3, #0
 800459c:	d103      	bne.n	80045a6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 f9c2 	bl	8004928 <I2C_MasterTransmit_TXE>
 80045a4:	e046      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f000 80c2 	beq.w	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 80bc 	beq.w	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80045be:	7bbb      	ldrb	r3, [r7, #14]
 80045c0:	2b21      	cmp	r3, #33	@ 0x21
 80045c2:	d103      	bne.n	80045cc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fa4b 	bl	8004a60 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ca:	e0b4      	b.n	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	f040 80b1 	bne.w	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 fab9 	bl	8004b4c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045da:	e0ac      	b.n	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80045e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80045ea:	f000 80a4 	beq.w	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <HAL_I2C_EV_IRQHandler+0x178>
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d008      	beq.n	8004614 <HAL_I2C_EV_IRQHandler+0x178>
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f000 fb35 	bl	8004c7c <I2C_MasterReceive_RXNE>
 8004612:	e00f      	b.n	8004634 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 808b 	beq.w	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8085 	beq.w	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fbed 	bl	8004e0c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004632:	e080      	b.n	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
 8004634:	e07f      	b.n	8004736 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	2b00      	cmp	r3, #0
 800463c:	d004      	beq.n	8004648 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	61fb      	str	r3, [r7, #28]
 8004646:	e007      	b.n	8004658 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d011      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800467c:	69b9      	ldr	r1, [r7, #24]
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 ffb8 	bl	80055f4 <I2C_Slave_ADDR>
 8004684:	e05a      	b.n	800473c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	f003 0310 	and.w	r3, r3, #16
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_I2C_EV_IRQHandler+0x206>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fff2 	bl	8005684 <I2C_Slave_STOPF>
 80046a0:	e04c      	b.n	800473c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046a2:	7bbb      	ldrb	r3, [r7, #14]
 80046a4:	2b21      	cmp	r3, #33	@ 0x21
 80046a6:	d002      	beq.n	80046ae <HAL_I2C_EV_IRQHandler+0x212>
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	2b29      	cmp	r3, #41	@ 0x29
 80046ac:	d120      	bne.n	80046f0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00d      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x238>
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_I2C_EV_IRQHandler+0x238>
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f003 0304 	and.w	r3, r3, #4
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d103      	bne.n	80046d4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 fed3 	bl	8005478 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046d2:	e032      	b.n	800473a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f003 0304 	and.w	r3, r3, #4
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d02d      	beq.n	800473a <HAL_I2C_EV_IRQHandler+0x29e>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d028      	beq.n	800473a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 ff02 	bl	80054f2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046ee:	e024      	b.n	800473a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00d      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x27a>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_I2C_EV_IRQHandler+0x27a>
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 ff10 	bl	8005534 <I2C_SlaveReceive_RXNE>
 8004714:	e012      	b.n	800473c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004726:	2b00      	cmp	r3, #0
 8004728:	d008      	beq.n	800473c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 ff40 	bl	80055b0 <I2C_SlaveReceive_BTF>
 8004730:	e004      	b.n	800473c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004732:	bf00      	nop
 8004734:	e002      	b.n	800473c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004736:	bf00      	nop
 8004738:	e000      	b.n	800473c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800473a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b08a      	sub	sp, #40	@ 0x28
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800475a:	2300      	movs	r3, #0
 800475c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004764:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004766:	6a3b      	ldr	r3, [r7, #32]
 8004768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00d      	beq.n	800478c <HAL_I2C_ER_IRQHandler+0x4a>
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d008      	beq.n	800478c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800477a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800478a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00d      	beq.n	80047b2 <HAL_I2C_ER_IRQHandler+0x70>
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	f043 0302 	orr.w	r3, r3, #2
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80047b0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d03e      	beq.n	800483a <HAL_I2C_ER_IRQHandler+0xf8>
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d039      	beq.n	800483a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80047c6:	7efb      	ldrb	r3, [r7, #27]
 80047c8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047de:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80047e0:	7ebb      	ldrb	r3, [r7, #26]
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d112      	bne.n	800480c <HAL_I2C_ER_IRQHandler+0xca>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10f      	bne.n	800480c <HAL_I2C_ER_IRQHandler+0xca>
 80047ec:	7cfb      	ldrb	r3, [r7, #19]
 80047ee:	2b21      	cmp	r3, #33	@ 0x21
 80047f0:	d008      	beq.n	8004804 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80047f2:	7cfb      	ldrb	r3, [r7, #19]
 80047f4:	2b29      	cmp	r3, #41	@ 0x29
 80047f6:	d005      	beq.n	8004804 <HAL_I2C_ER_IRQHandler+0xc2>
 80047f8:	7cfb      	ldrb	r3, [r7, #19]
 80047fa:	2b28      	cmp	r3, #40	@ 0x28
 80047fc:	d106      	bne.n	800480c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2b21      	cmp	r3, #33	@ 0x21
 8004802:	d103      	bne.n	800480c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f001 f86d 	bl	80058e4 <I2C_Slave_AF>
 800480a:	e016      	b.n	800483a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004814:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	f043 0304 	orr.w	r3, r3, #4
 800481c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800481e:	7efb      	ldrb	r3, [r7, #27]
 8004820:	2b10      	cmp	r3, #16
 8004822:	d002      	beq.n	800482a <HAL_I2C_ER_IRQHandler+0xe8>
 8004824:	7efb      	ldrb	r3, [r7, #27]
 8004826:	2b40      	cmp	r3, #64	@ 0x40
 8004828:	d107      	bne.n	800483a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004838:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <HAL_I2C_ER_IRQHandler+0x11e>
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d008      	beq.n	8004860 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800485e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004862:	2b00      	cmp	r3, #0
 8004864:	d008      	beq.n	8004878 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	431a      	orrs	r2, r3
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f001 f8aa 	bl	80059cc <I2C_ITError>
  }
}
 8004878:	bf00      	nop
 800487a:	3728      	adds	r7, #40	@ 0x28
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004888:	bf00      	nop
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80048b0:	bf00      	nop
 80048b2:	370c      	adds	r7, #12
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	70fb      	strb	r3, [r7, #3]
 80048c8:	4613      	mov	r3, r2
 80048ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80048cc:	bf00      	nop
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004936:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800493e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004944:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	d150      	bne.n	80049f0 <I2C_MasterTransmit_TXE+0xc8>
 800494e:	7bfb      	ldrb	r3, [r7, #15]
 8004950:	2b21      	cmp	r3, #33	@ 0x21
 8004952:	d14d      	bne.n	80049f0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d01d      	beq.n	8004996 <I2C_MasterTransmit_TXE+0x6e>
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b20      	cmp	r3, #32
 800495e:	d01a      	beq.n	8004996 <I2C_MasterTransmit_TXE+0x6e>
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004966:	d016      	beq.n	8004996 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004976:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2211      	movs	r2, #17
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f7ff ff76 	bl	8004880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004994:	e060      	b.n	8004a58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80049a4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049b4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b40      	cmp	r3, #64	@ 0x40
 80049ce:	d107      	bne.n	80049e0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7ff ff87 	bl	80048ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049de:	e03b      	b.n	8004a58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff49 	bl	8004880 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049ee:	e033      	b.n	8004a58 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b21      	cmp	r3, #33	@ 0x21
 80049f4:	d005      	beq.n	8004a02 <I2C_MasterTransmit_TXE+0xda>
 80049f6:	7bbb      	ldrb	r3, [r7, #14]
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	d12d      	bne.n	8004a58 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b22      	cmp	r3, #34	@ 0x22
 8004a00:	d12a      	bne.n	8004a58 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d108      	bne.n	8004a1e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a1a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004a1c:	e01c      	b.n	8004a58 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d103      	bne.n	8004a32 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f88e 	bl	8004b4c <I2C_MemoryTransmit_TXE_BTF>
}
 8004a30:	e012      	b.n	8004a58 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	781a      	ldrb	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004a56:	e7ff      	b.n	8004a58 <I2C_MasterTransmit_TXE+0x130>
 8004a58:	bf00      	nop
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b21      	cmp	r3, #33	@ 0x21
 8004a78:	d164      	bne.n	8004b44 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d012      	beq.n	8004aaa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a88:	781a      	ldrb	r2, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	1c5a      	adds	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004aa8:	e04c      	b.n	8004b44 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2b08      	cmp	r3, #8
 8004aae:	d01d      	beq.n	8004aec <I2C_MasterTransmit_BTF+0x8c>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2b20      	cmp	r3, #32
 8004ab4:	d01a      	beq.n	8004aec <I2C_MasterTransmit_BTF+0x8c>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004abc:	d016      	beq.n	8004aec <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004acc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2211      	movs	r2, #17
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fecb 	bl	8004880 <HAL_I2C_MasterTxCpltCallback>
}
 8004aea:	e02b      	b.n	8004b44 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004afa:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	2b40      	cmp	r3, #64	@ 0x40
 8004b24:	d107      	bne.n	8004b36 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7ff fedc 	bl	80048ec <HAL_I2C_MemTxCpltCallback>
}
 8004b34:	e006      	b.n	8004b44 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7ff fe9e 	bl	8004880 <HAL_I2C_MasterTxCpltCallback>
}
 8004b44:	bf00      	nop
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b5a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d11d      	bne.n	8004ba0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d10b      	bne.n	8004b84 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004b82:	e077      	b.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	121b      	asrs	r3, r3, #8
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004b9e:	e069      	b.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d10b      	bne.n	8004bc0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb8:	1c5a      	adds	r2, r3, #1
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004bbe:	e059      	b.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d152      	bne.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b22      	cmp	r3, #34	@ 0x22
 8004bcc:	d10d      	bne.n	8004bea <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bdc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004be2:	1c5a      	adds	r2, r3, #1
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004be8:	e044      	b.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
 8004bf6:	2b21      	cmp	r3, #33	@ 0x21
 8004bf8:	d112      	bne.n	8004c20 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	781a      	ldrb	r2, [r3, #0]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c0a:	1c5a      	adds	r2, r3, #1
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004c1e:	e029      	b.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d124      	bne.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004c2a:	7bfb      	ldrb	r3, [r7, #15]
 8004c2c:	2b21      	cmp	r3, #33	@ 0x21
 8004c2e:	d121      	bne.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c3e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c4e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7ff fe40 	bl	80048ec <HAL_I2C_MemTxCpltCallback>
}
 8004c6c:	e002      	b.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fb3d 	bl	80042ee <I2C_Flush_DR>
}
 8004c74:	bf00      	nop
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	2b22      	cmp	r3, #34	@ 0x22
 8004c8e:	f040 80b9 	bne.w	8004e04 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d921      	bls.n	8004cea <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	f040 8096 	bne.w	8004e04 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce6:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004ce8:	e08c      	b.n	8004e04 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d07f      	beq.n	8004df2 <I2C_MasterReceive_RXNE+0x176>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d002      	beq.n	8004cfe <I2C_MasterReceive_RXNE+0x82>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d179      	bne.n	8004df2 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f001 f83e 	bl	8005d80 <I2C_WaitOnSTOPRequestThroughIT>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d14c      	bne.n	8004da4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d18:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d28:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d34:	b2d2      	uxtb	r2, r2
 8004d36:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	3b01      	subs	r3, #1
 8004d4a:	b29a      	uxth	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b40      	cmp	r3, #64	@ 0x40
 8004d62:	d10a      	bne.n	8004d7a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f7ff fdc4 	bl	8004900 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004d78:	e044      	b.n	8004e04 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d002      	beq.n	8004d8e <I2C_MasterReceive_RXNE+0x112>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2b20      	cmp	r3, #32
 8004d8c:	d103      	bne.n	8004d96 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	631a      	str	r2, [r3, #48]	@ 0x30
 8004d94:	e002      	b.n	8004d9c <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2212      	movs	r2, #18
 8004d9a:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f7ff fd79 	bl	8004894 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004da2:	e02f      	b.n	8004e04 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004db2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691a      	ldr	r2, [r3, #16]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc f960 	bl	80010b0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004df0:	e008      	b.n	8004e04 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e00:	605a      	str	r2, [r3, #4]
}
 8004e02:	e7ff      	b.n	8004e04 <I2C_MasterReceive_RXNE+0x188>
 8004e04:	bf00      	nop
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e18:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d11b      	bne.n	8004e5c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e32:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e46:	1c5a      	adds	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	3b01      	subs	r3, #1
 8004e54:	b29a      	uxth	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004e5a:	e0c8      	b.n	8004fee <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b03      	cmp	r3, #3
 8004e64:	d129      	bne.n	8004eba <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e74:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d00a      	beq.n	8004e92 <I2C_MasterReceive_BTF+0x86>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d007      	beq.n	8004e92 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e90:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	691a      	ldr	r2, [r3, #16]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004eb8:	e099      	b.n	8004fee <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	f040 8081 	bne.w	8004fc8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d002      	beq.n	8004ed2 <I2C_MasterReceive_BTF+0xc6>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2b10      	cmp	r3, #16
 8004ed0:	d108      	bne.n	8004ee4 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee0:	601a      	str	r2, [r3, #0]
 8004ee2:	e019      	b.n	8004f18 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d002      	beq.n	8004ef0 <I2C_MasterReceive_BTF+0xe4>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d108      	bne.n	8004f02 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e00a      	b.n	8004f18 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d007      	beq.n	8004f18 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f16:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004f72:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b40      	cmp	r3, #64	@ 0x40
 8004f86:	d10a      	bne.n	8004f9e <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7ff fcb2 	bl	8004900 <HAL_I2C_MemRxCpltCallback>
}
 8004f9c:	e027      	b.n	8004fee <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d002      	beq.n	8004fb2 <I2C_MasterReceive_BTF+0x1a6>
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2b20      	cmp	r3, #32
 8004fb0:	d103      	bne.n	8004fba <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fb8:	e002      	b.n	8004fc0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2212      	movs	r2, #18
 8004fbe:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff fc67 	bl	8004894 <HAL_I2C_MasterRxCpltCallback>
}
 8004fc6:	e012      	b.n	8004fee <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fd2:	b2d2      	uxtb	r2, r2
 8004fd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b083      	sub	sp, #12
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b40      	cmp	r3, #64	@ 0x40
 8005008:	d117      	bne.n	800503a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005016:	b2db      	uxtb	r3, r3
 8005018:	461a      	mov	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005022:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005024:	e067      	b.n	80050f6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f043 0301 	orr.w	r3, r3, #1
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	611a      	str	r2, [r3, #16]
}
 8005038:	e05d      	b.n	80050f6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005042:	d133      	bne.n	80050ac <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b21      	cmp	r3, #33	@ 0x21
 800504e:	d109      	bne.n	8005064 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005054:	b2db      	uxtb	r3, r3
 8005056:	461a      	mov	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005060:	611a      	str	r2, [r3, #16]
 8005062:	e008      	b.n	8005076 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005068:	b2db      	uxtb	r3, r3
 800506a:	f043 0301 	orr.w	r3, r3, #1
 800506e:	b2da      	uxtb	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800507a:	2b00      	cmp	r3, #0
 800507c:	d004      	beq.n	8005088 <I2C_Master_SB+0x92>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005084:	2b00      	cmp	r3, #0
 8005086:	d108      	bne.n	800509a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800508c:	2b00      	cmp	r3, #0
 800508e:	d032      	beq.n	80050f6 <I2C_Master_SB+0x100>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	2b00      	cmp	r3, #0
 8005098:	d02d      	beq.n	80050f6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050a8:	605a      	str	r2, [r3, #4]
}
 80050aa:	e024      	b.n	80050f6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d10e      	bne.n	80050d2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	11db      	asrs	r3, r3, #7
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	f003 0306 	and.w	r3, r3, #6
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	f063 030f 	orn	r3, r3, #15
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	611a      	str	r2, [r3, #16]
}
 80050d0:	e011      	b.n	80050f6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d10d      	bne.n	80050f6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050de:	b29b      	uxth	r3, r3
 80050e0:	11db      	asrs	r3, r3, #7
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f003 0306 	and.w	r3, r3, #6
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	f063 030e 	orn	r3, r3, #14
 80050ee:	b2da      	uxtb	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	611a      	str	r2, [r3, #16]
}
 80050f6:	bf00      	nop
 80050f8:	370c      	adds	r7, #12
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr

08005102 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510e:	b2da      	uxtb	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800511a:	2b00      	cmp	r3, #0
 800511c:	d004      	beq.n	8005128 <I2C_Master_ADD10+0x26>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d108      	bne.n	800513a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00c      	beq.n	800514a <I2C_Master_ADD10+0x48>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005136:	2b00      	cmp	r3, #0
 8005138:	d007      	beq.n	800514a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005148:	605a      	str	r2, [r3, #4]
  }
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005156:	b480      	push	{r7}
 8005158:	b091      	sub	sp, #68	@ 0x44
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005164:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b22      	cmp	r3, #34	@ 0x22
 800517e:	f040 8169 	bne.w	8005454 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10f      	bne.n	80051aa <I2C_Master_ADDR+0x54>
 800518a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800518e:	2b40      	cmp	r3, #64	@ 0x40
 8005190:	d10b      	bne.n	80051aa <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005192:	2300      	movs	r3, #0
 8005194:	633b      	str	r3, [r7, #48]	@ 0x30
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	633b      	str	r3, [r7, #48]	@ 0x30
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a8:	e160      	b.n	800546c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d11d      	bne.n	80051ee <I2C_Master_ADDR+0x98>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80051ba:	d118      	bne.n	80051ee <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051bc:	2300      	movs	r3, #0
 80051be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051e0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	651a      	str	r2, [r3, #80]	@ 0x50
 80051ec:	e13e      	b.n	800546c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d113      	bne.n	8005220 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f8:	2300      	movs	r3, #0
 80051fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	695b      	ldr	r3, [r3, #20]
 8005202:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699b      	ldr	r3, [r3, #24]
 800520a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800520c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e115      	b.n	800544c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	2b01      	cmp	r3, #1
 8005228:	f040 808a 	bne.w	8005340 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800522c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800522e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005232:	d137      	bne.n	80052a4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005242:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800524e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005252:	d113      	bne.n	800527c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005262:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005264:	2300      	movs	r3, #0
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	e0e7      	b.n	800544c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800527c:	2300      	movs	r3, #0
 800527e:	623b      	str	r3, [r7, #32]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	623b      	str	r3, [r7, #32]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	623b      	str	r3, [r7, #32]
 8005290:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	e0d3      	b.n	800544c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d02e      	beq.n	8005308 <I2C_Master_ADDR+0x1b2>
 80052aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ac:	2b20      	cmp	r3, #32
 80052ae:	d02b      	beq.n	8005308 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	2b12      	cmp	r3, #18
 80052b4:	d102      	bne.n	80052bc <I2C_Master_ADDR+0x166>
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d125      	bne.n	8005308 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80052bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d00e      	beq.n	80052e0 <I2C_Master_ADDR+0x18a>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d00b      	beq.n	80052e0 <I2C_Master_ADDR+0x18a>
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d008      	beq.n	80052e0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052dc:	601a      	str	r2, [r3, #0]
 80052de:	e007      	b.n	80052f0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052ee:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f0:	2300      	movs	r3, #0
 80052f2:	61fb      	str	r3, [r7, #28]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	61fb      	str	r3, [r7, #28]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	61fb      	str	r3, [r7, #28]
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	e0a1      	b.n	800544c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005316:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005318:	2300      	movs	r3, #0
 800531a:	61bb      	str	r3, [r7, #24]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	61bb      	str	r3, [r7, #24]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	61bb      	str	r3, [r7, #24]
 800532c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e085      	b.n	800544c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b02      	cmp	r3, #2
 8005348:	d14d      	bne.n	80053e6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800534a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800534c:	2b04      	cmp	r3, #4
 800534e:	d016      	beq.n	800537e <I2C_Master_ADDR+0x228>
 8005350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005352:	2b02      	cmp	r3, #2
 8005354:	d013      	beq.n	800537e <I2C_Master_ADDR+0x228>
 8005356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005358:	2b10      	cmp	r3, #16
 800535a:	d010      	beq.n	800537e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800536a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	e007      	b.n	800538e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800538c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800539c:	d117      	bne.n	80053ce <I2C_Master_ADDR+0x278>
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053a4:	d00b      	beq.n	80053be <I2C_Master_ADDR+0x268>
 80053a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d008      	beq.n	80053be <I2C_Master_ADDR+0x268>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d005      	beq.n	80053be <I2C_Master_ADDR+0x268>
 80053b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b4:	2b10      	cmp	r3, #16
 80053b6:	d002      	beq.n	80053be <I2C_Master_ADDR+0x268>
 80053b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d107      	bne.n	80053ce <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685a      	ldr	r2, [r3, #4]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ce:	2300      	movs	r3, #0
 80053d0:	617b      	str	r3, [r7, #20]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	617b      	str	r3, [r7, #20]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	e032      	b.n	800544c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053f4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005404:	d117      	bne.n	8005436 <I2C_Master_ADDR+0x2e0>
 8005406:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005408:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800540c:	d00b      	beq.n	8005426 <I2C_Master_ADDR+0x2d0>
 800540e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005410:	2b01      	cmp	r3, #1
 8005412:	d008      	beq.n	8005426 <I2C_Master_ADDR+0x2d0>
 8005414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005416:	2b08      	cmp	r3, #8
 8005418:	d005      	beq.n	8005426 <I2C_Master_ADDR+0x2d0>
 800541a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800541c:	2b10      	cmp	r3, #16
 800541e:	d002      	beq.n	8005426 <I2C_Master_ADDR+0x2d0>
 8005420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005422:	2b20      	cmp	r3, #32
 8005424:	d107      	bne.n	8005436 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005434:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005436:	2300      	movs	r3, #0
 8005438:	613b      	str	r3, [r7, #16]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005452:	e00b      	b.n	800546c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005454:	2300      	movs	r3, #0
 8005456:	60fb      	str	r3, [r7, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
}
 800546a:	e7ff      	b.n	800546c <I2C_Master_ADDR+0x316>
 800546c:	bf00      	nop
 800546e:	3744      	adds	r7, #68	@ 0x44
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005486:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d02b      	beq.n	80054ea <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005496:	781a      	ldrb	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	3b01      	subs	r3, #1
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d114      	bne.n	80054ea <I2C_SlaveTransmit_TXE+0x72>
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	2b29      	cmp	r3, #41	@ 0x29
 80054c4:	d111      	bne.n	80054ea <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2221      	movs	r2, #33	@ 0x21
 80054da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2228      	movs	r2, #40	@ 0x28
 80054e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff f9df 	bl	80048a8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80054ea:	bf00      	nop
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}

080054f2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d011      	beq.n	8005528 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005514:	1c5a      	adds	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005528:	bf00      	nop
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005542:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d02c      	beq.n	80055a8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	b2d2      	uxtb	r2, r2
 800555a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800556a:	b29b      	uxth	r3, r3
 800556c:	3b01      	subs	r3, #1
 800556e:	b29a      	uxth	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d114      	bne.n	80055a8 <I2C_SlaveReceive_RXNE+0x74>
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b2a      	cmp	r3, #42	@ 0x2a
 8005582:	d111      	bne.n	80055a8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005592:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2222      	movs	r2, #34	@ 0x22
 8005598:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2228      	movs	r2, #40	@ 0x28
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7fb fd5c 	bl	8001060 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d012      	beq.n	80055e8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	691a      	ldr	r2, [r3, #16]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055cc:	b2d2      	uxtb	r2, r2
 80055ce:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b084      	sub	sp, #16
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80055fe:	2300      	movs	r3, #0
 8005600:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800560e:	2b28      	cmp	r3, #40	@ 0x28
 8005610:	d125      	bne.n	800565e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005620:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800562c:	2301      	movs	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005636:	2b00      	cmp	r3, #0
 8005638:	d103      	bne.n	8005642 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	81bb      	strh	r3, [r7, #12]
 8005640:	e002      	b.n	8005648 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005650:	89ba      	ldrh	r2, [r7, #12]
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	4619      	mov	r1, r3
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7ff f930 	bl	80048bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800565c:	e00e      	b.n	800567c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800565e:	2300      	movs	r3, #0
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	695b      	ldr	r3, [r3, #20]
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	60bb      	str	r3, [r7, #8]
 8005672:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005692:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80056a2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056e0:	d172      	bne.n	80057c8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	2b22      	cmp	r3, #34	@ 0x22
 80056e6:	d002      	beq.n	80056ee <I2C_Slave_STOPF+0x6a>
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80056ec:	d135      	bne.n	800575a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005720:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005726:	4618      	mov	r0, r3
 8005728:	f7fe f9bd 	bl	8003aa6 <HAL_DMA_GetState>
 800572c:	4603      	mov	r3, r0
 800572e:	2b01      	cmp	r3, #1
 8005730:	d049      	beq.n	80057c6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005736:	4a69      	ldr	r2, [pc, #420]	@ (80058dc <I2C_Slave_STOPF+0x258>)
 8005738:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800573e:	4618      	mov	r0, r3
 8005740:	f7fe f98f 	bl	8003a62 <HAL_DMA_Abort_IT>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d03d      	beq.n	80057c6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005754:	4610      	mov	r0, r2
 8005756:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005758:	e035      	b.n	80057c6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	b29a      	uxth	r2, r3
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576c:	b29b      	uxth	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d005      	beq.n	800577e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005776:	f043 0204 	orr.w	r2, r3, #4
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800578c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe f987 	bl	8003aa6 <HAL_DMA_GetState>
 8005798:	4603      	mov	r3, r0
 800579a:	2b01      	cmp	r3, #1
 800579c:	d014      	beq.n	80057c8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057a2:	4a4e      	ldr	r2, [pc, #312]	@ (80058dc <I2C_Slave_STOPF+0x258>)
 80057a4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe f959 	bl	8003a62 <HAL_DMA_Abort_IT>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d008      	beq.n	80057c8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057c0:	4610      	mov	r0, r2
 80057c2:	4798      	blx	r3
 80057c4:	e000      	b.n	80057c8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057c6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d03e      	beq.n	8005850 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0304 	and.w	r3, r3, #4
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d112      	bne.n	8005806 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	691a      	ldr	r2, [r3, #16]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f2:	1c5a      	adds	r2, r3, #1
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	3b01      	subs	r3, #1
 8005800:	b29a      	uxth	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005810:	2b40      	cmp	r3, #64	@ 0x40
 8005812:	d112      	bne.n	800583a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	3b01      	subs	r3, #1
 8005834:	b29a      	uxth	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800583e:	b29b      	uxth	r3, r3
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	f043 0204 	orr.w	r2, r3, #4
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d003      	beq.n	8005860 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f8b7 	bl	80059cc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800585e:	e039      	b.n	80058d4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b2a      	cmp	r3, #42	@ 0x2a
 8005864:	d109      	bne.n	800587a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2228      	movs	r2, #40	@ 0x28
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f7fb fbf3 	bl	8001060 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b28      	cmp	r3, #40	@ 0x28
 8005884:	d111      	bne.n	80058aa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	4a15      	ldr	r2, [pc, #84]	@ (80058e0 <I2C_Slave_STOPF+0x25c>)
 800588a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7ff f818 	bl	80048d8 <HAL_I2C_ListenCpltCallback>
}
 80058a8:	e014      	b.n	80058d4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ae:	2b22      	cmp	r3, #34	@ 0x22
 80058b0:	d002      	beq.n	80058b8 <I2C_Slave_STOPF+0x234>
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b22      	cmp	r3, #34	@ 0x22
 80058b6:	d10d      	bne.n	80058d4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f7fb fbc6 	bl	8001060 <HAL_I2C_SlaveRxCpltCallback>
}
 80058d4:	bf00      	nop
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	08005c31 	.word	0x08005c31
 80058e0:	ffff0000 	.word	0xffff0000

080058e4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058f2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d002      	beq.n	8005906 <I2C_Slave_AF+0x22>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b20      	cmp	r3, #32
 8005904:	d129      	bne.n	800595a <I2C_Slave_AF+0x76>
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	2b28      	cmp	r3, #40	@ 0x28
 800590a:	d126      	bne.n	800595a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a2e      	ldr	r2, [pc, #184]	@ (80059c8 <I2C_Slave_AF+0xe4>)
 8005910:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005920:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800592a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800593a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fe ffc0 	bl	80048d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005958:	e031      	b.n	80059be <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800595a:	7bfb      	ldrb	r3, [r7, #15]
 800595c:	2b21      	cmp	r3, #33	@ 0x21
 800595e:	d129      	bne.n	80059b4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a19      	ldr	r2, [pc, #100]	@ (80059c8 <I2C_Slave_AF+0xe4>)
 8005964:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2221      	movs	r2, #33	@ 0x21
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800598a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005994:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059a4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fe fca1 	bl	80042ee <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fe ff7b 	bl	80048a8 <HAL_I2C_SlaveTxCpltCallback>
}
 80059b2:	e004      	b.n	80059be <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059bc:	615a      	str	r2, [r3, #20]
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	ffff0000 	.word	0xffff0000

080059cc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059da:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059e2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d002      	beq.n	80059f0 <I2C_ITError+0x24>
 80059ea:	7bbb      	ldrb	r3, [r7, #14]
 80059ec:	2b40      	cmp	r3, #64	@ 0x40
 80059ee:	d10a      	bne.n	8005a06 <I2C_ITError+0x3a>
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2b22      	cmp	r3, #34	@ 0x22
 80059f4:	d107      	bne.n	8005a06 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a04:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a0c:	2b28      	cmp	r3, #40	@ 0x28
 8005a0e:	d107      	bne.n	8005a20 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2228      	movs	r2, #40	@ 0x28
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a1e:	e015      	b.n	8005a4c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a2e:	d00a      	beq.n	8005a46 <I2C_ITError+0x7a>
 8005a30:	7bfb      	ldrb	r3, [r7, #15]
 8005a32:	2b60      	cmp	r3, #96	@ 0x60
 8005a34:	d007      	beq.n	8005a46 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a56:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a5a:	d162      	bne.n	8005b22 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a6a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a74:	b2db      	uxtb	r3, r3
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d020      	beq.n	8005abc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a7e:	4a6a      	ldr	r2, [pc, #424]	@ (8005c28 <I2C_ITError+0x25c>)
 8005a80:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fd ffeb 	bl	8003a62 <HAL_DMA_Abort_IT>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	f000 8089 	beq.w	8005ba6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0201 	bic.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ab6:	4610      	mov	r0, r2
 8005ab8:	4798      	blx	r3
 8005aba:	e074      	b.n	8005ba6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac0:	4a59      	ldr	r2, [pc, #356]	@ (8005c28 <I2C_ITError+0x25c>)
 8005ac2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fd ffca 	bl	8003a62 <HAL_DMA_Abort_IT>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d068      	beq.n	8005ba6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b40      	cmp	r3, #64	@ 0x40
 8005ae0:	d10b      	bne.n	8005afa <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aec:	b2d2      	uxtb	r2, r2
 8005aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af4:	1c5a      	adds	r2, r3, #1
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4798      	blx	r3
 8005b20:	e041      	b.n	8005ba6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b60      	cmp	r3, #96	@ 0x60
 8005b2c:	d125      	bne.n	8005b7a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b46:	2b40      	cmp	r3, #64	@ 0x40
 8005b48:	d10b      	bne.n	8005b62 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691a      	ldr	r2, [r3, #16]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b54:	b2d2      	uxtb	r2, r2
 8005b56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f7fe fece 	bl	8004914 <HAL_I2C_AbortCpltCallback>
 8005b78:	e015      	b.n	8005ba6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b84:	2b40      	cmp	r3, #64	@ 0x40
 8005b86:	d10b      	bne.n	8005ba0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691a      	ldr	r2, [r3, #16]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	b2d2      	uxtb	r2, r2
 8005b94:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9a:	1c5a      	adds	r2, r3, #1
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7fb fa85 	bl	80010b0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d10e      	bne.n	8005bd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d109      	bne.n	8005bd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d104      	bne.n	8005bd4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d007      	beq.n	8005be4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005be2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bea:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d113      	bne.n	8005c20 <I2C_ITError+0x254>
 8005bf8:	7bfb      	ldrb	r3, [r7, #15]
 8005bfa:	2b28      	cmp	r3, #40	@ 0x28
 8005bfc:	d110      	bne.n	8005c20 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a0a      	ldr	r2, [pc, #40]	@ (8005c2c <I2C_ITError+0x260>)
 8005c02:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fe fe5c 	bl	80048d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005c20:	bf00      	nop
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	08005c31 	.word	0x08005c31
 8005c2c:	ffff0000 	.word	0xffff0000

08005c30 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c40:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c48:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d78 <I2C_DMAAbort+0x148>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	08db      	lsrs	r3, r3, #3
 8005c50:	4a4a      	ldr	r2, [pc, #296]	@ (8005d7c <I2C_DMAAbort+0x14c>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	0a1a      	lsrs	r2, r3, #8
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00da      	lsls	r2, r3, #3
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6e:	f043 0220 	orr.w	r2, r3, #32
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005c76:	e00a      	b.n	8005c8e <I2C_DMAAbort+0x5e>
    }
    count--;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	3b01      	subs	r3, #1
 8005c7c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c8c:	d0ea      	beq.n	8005c64 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	2200      	movs	r2, #0
 8005cac:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cbc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b60      	cmp	r3, #96	@ 0x60
 8005cfe:	d10e      	bne.n	8005d1e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2200      	movs	r2, #0
 8005d14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005d16:	6978      	ldr	r0, [r7, #20]
 8005d18:	f7fe fdfc 	bl	8004914 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d1c:	e027      	b.n	8005d6e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d1e:	7cfb      	ldrb	r3, [r7, #19]
 8005d20:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d24:	2b28      	cmp	r3, #40	@ 0x28
 8005d26:	d117      	bne.n	8005d58 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0201 	orr.w	r2, r2, #1
 8005d36:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d46:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2228      	movs	r2, #40	@ 0x28
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d56:	e007      	b.n	8005d68 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005d68:	6978      	ldr	r0, [r7, #20]
 8005d6a:	f7fb f9a1 	bl	80010b0 <HAL_I2C_ErrorCallback>
}
 8005d6e:	bf00      	nop
 8005d70:	3718      	adds	r7, #24
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	20000010 	.word	0x20000010
 8005d7c:	14f8b589 	.word	0x14f8b589

08005d80 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d8c:	4b13      	ldr	r3, [pc, #76]	@ (8005ddc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	08db      	lsrs	r3, r3, #3
 8005d92:	4a13      	ldr	r2, [pc, #76]	@ (8005de0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d94:	fba2 2303 	umull	r2, r3, r2, r3
 8005d98:	0a1a      	lsrs	r2, r3, #8
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3b01      	subs	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d107      	bne.n	8005dbe <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db2:	f043 0220 	orr.w	r2, r3, #32
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	e008      	b.n	8005dd0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dcc:	d0e9      	beq.n	8005da2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr
 8005ddc:	20000010 	.word	0x20000010
 8005de0:	14f8b589 	.word	0x14f8b589

08005de4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005df4:	d103      	bne.n	8005dfe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005dfc:	e007      	b.n	8005e0e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e02:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005e06:	d102      	bne.n	8005e0e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005e0e:	bf00      	nop
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr
	...

08005e1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005e22:	2300      	movs	r3, #0
 8005e24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005e26:	2300      	movs	r3, #0
 8005e28:	603b      	str	r3, [r7, #0]
 8005e2a:	4b20      	ldr	r3, [pc, #128]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x90>)
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x90>)
 8005e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e36:	4b1d      	ldr	r3, [pc, #116]	@ (8005eac <HAL_PWREx_EnableOverDrive+0x90>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e3e:	603b      	str	r3, [r7, #0]
 8005e40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005e42:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb0 <HAL_PWREx_EnableOverDrive+0x94>)
 8005e44:	2201      	movs	r2, #1
 8005e46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e48:	f7fd fcbc 	bl	80037c4 <HAL_GetTick>
 8005e4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e4e:	e009      	b.n	8005e64 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e50:	f7fd fcb8 	bl	80037c4 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e5e:	d901      	bls.n	8005e64 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005e60:	2303      	movs	r3, #3
 8005e62:	e01f      	b.n	8005ea4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005e64:	4b13      	ldr	r3, [pc, #76]	@ (8005eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e70:	d1ee      	bne.n	8005e50 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005e72:	4b11      	ldr	r3, [pc, #68]	@ (8005eb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005e74:	2201      	movs	r2, #1
 8005e76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e78:	f7fd fca4 	bl	80037c4 <HAL_GetTick>
 8005e7c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e7e:	e009      	b.n	8005e94 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005e80:	f7fd fca0 	bl	80037c4 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e8e:	d901      	bls.n	8005e94 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e007      	b.n	8005ea4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005e94:	4b07      	ldr	r3, [pc, #28]	@ (8005eb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ea0:	d1ee      	bne.n	8005e80 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	40023800 	.word	0x40023800
 8005eb0:	420e0040 	.word	0x420e0040
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	420e0044 	.word	0x420e0044

08005ebc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e0cc      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ed0:	4b68      	ldr	r3, [pc, #416]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d90c      	bls.n	8005ef8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ede:	4b65      	ldr	r3, [pc, #404]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee0:	683a      	ldr	r2, [r7, #0]
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ee6:	4b63      	ldr	r3, [pc, #396]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 030f 	and.w	r3, r3, #15
 8005eee:	683a      	ldr	r2, [r7, #0]
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d001      	beq.n	8005ef8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0b8      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d020      	beq.n	8005f46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f003 0304 	and.w	r3, r3, #4
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d005      	beq.n	8005f1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f10:	4b59      	ldr	r3, [pc, #356]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	4a58      	ldr	r2, [pc, #352]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f003 0308 	and.w	r3, r3, #8
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f28:	4b53      	ldr	r3, [pc, #332]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	4a52      	ldr	r2, [pc, #328]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f34:	4b50      	ldr	r3, [pc, #320]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	494d      	ldr	r1, [pc, #308]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d044      	beq.n	8005fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d107      	bne.n	8005f6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5a:	4b47      	ldr	r3, [pc, #284]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d119      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e07f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d003      	beq.n	8005f7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d107      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d109      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e06f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f8a:	4b3b      	ldr	r3, [pc, #236]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d101      	bne.n	8005f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e067      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f9a:	4b37      	ldr	r3, [pc, #220]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f023 0203 	bic.w	r2, r3, #3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	4934      	ldr	r1, [pc, #208]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fac:	f7fd fc0a 	bl	80037c4 <HAL_GetTick>
 8005fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb2:	e00a      	b.n	8005fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fb4:	f7fd fc06 	bl	80037c4 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e04f      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fca:	4b2b      	ldr	r3, [pc, #172]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 020c 	and.w	r2, r3, #12
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d1eb      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fdc:	4b25      	ldr	r3, [pc, #148]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 030f 	and.w	r3, r3, #15
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d20c      	bcs.n	8006004 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fea:	4b22      	ldr	r3, [pc, #136]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ff2:	4b20      	ldr	r3, [pc, #128]	@ (8006074 <HAL_RCC_ClockConfig+0x1b8>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 030f 	and.w	r3, r3, #15
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e032      	b.n	800606a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d008      	beq.n	8006022 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006010:	4b19      	ldr	r3, [pc, #100]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4916      	ldr	r1, [pc, #88]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0308 	and.w	r3, r3, #8
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800602e:	4b12      	ldr	r3, [pc, #72]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	00db      	lsls	r3, r3, #3
 800603c:	490e      	ldr	r1, [pc, #56]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006042:	f000 f855 	bl	80060f0 <HAL_RCC_GetSysClockFreq>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0b      	ldr	r3, [pc, #44]	@ (8006078 <HAL_RCC_ClockConfig+0x1bc>)
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	091b      	lsrs	r3, r3, #4
 800604e:	f003 030f 	and.w	r3, r3, #15
 8006052:	490a      	ldr	r1, [pc, #40]	@ (800607c <HAL_RCC_ClockConfig+0x1c0>)
 8006054:	5ccb      	ldrb	r3, [r1, r3]
 8006056:	fa22 f303 	lsr.w	r3, r2, r3
 800605a:	4a09      	ldr	r2, [pc, #36]	@ (8006080 <HAL_RCC_ClockConfig+0x1c4>)
 800605c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800605e:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <HAL_RCC_ClockConfig+0x1c8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4618      	mov	r0, r3
 8006064:	f7fd fb6a 	bl	800373c <HAL_InitTick>

  return HAL_OK;
 8006068:	2300      	movs	r3, #0
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40023c00 	.word	0x40023c00
 8006078:	40023800 	.word	0x40023800
 800607c:	0800e420 	.word	0x0800e420
 8006080:	20000010 	.word	0x20000010
 8006084:	20000014 	.word	0x20000014

08006088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800608c:	4b03      	ldr	r3, [pc, #12]	@ (800609c <HAL_RCC_GetHCLKFreq+0x14>)
 800608e:	681b      	ldr	r3, [r3, #0]
}
 8006090:	4618      	mov	r0, r3
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	20000010 	.word	0x20000010

080060a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80060a4:	f7ff fff0 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	@ (80060c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	0a9b      	lsrs	r3, r3, #10
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4903      	ldr	r1, [pc, #12]	@ (80060c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40023800 	.word	0x40023800
 80060c4:	0800e430 	.word	0x0800e430

080060c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060cc:	f7ff ffdc 	bl	8006088 <HAL_RCC_GetHCLKFreq>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4b05      	ldr	r3, [pc, #20]	@ (80060e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	0b5b      	lsrs	r3, r3, #13
 80060d8:	f003 0307 	and.w	r3, r3, #7
 80060dc:	4903      	ldr	r1, [pc, #12]	@ (80060ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80060de:	5ccb      	ldrb	r3, [r1, r3]
 80060e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	bd80      	pop	{r7, pc}
 80060e8:	40023800 	.word	0x40023800
 80060ec:	0800e430 	.word	0x0800e430

080060f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f4:	b0ae      	sub	sp, #184	@ 0xb8
 80060f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8006110:	2300      	movs	r3, #0
 8006112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006116:	4bcb      	ldr	r3, [pc, #812]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
 800611e:	2b0c      	cmp	r3, #12
 8006120:	f200 8206 	bhi.w	8006530 <HAL_RCC_GetSysClockFreq+0x440>
 8006124:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <HAL_RCC_GetSysClockFreq+0x3c>)
 8006126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612a:	bf00      	nop
 800612c:	08006161 	.word	0x08006161
 8006130:	08006531 	.word	0x08006531
 8006134:	08006531 	.word	0x08006531
 8006138:	08006531 	.word	0x08006531
 800613c:	08006169 	.word	0x08006169
 8006140:	08006531 	.word	0x08006531
 8006144:	08006531 	.word	0x08006531
 8006148:	08006531 	.word	0x08006531
 800614c:	08006171 	.word	0x08006171
 8006150:	08006531 	.word	0x08006531
 8006154:	08006531 	.word	0x08006531
 8006158:	08006531 	.word	0x08006531
 800615c:	08006361 	.word	0x08006361
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006160:	4bb9      	ldr	r3, [pc, #740]	@ (8006448 <HAL_RCC_GetSysClockFreq+0x358>)
 8006162:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006166:	e1e7      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006168:	4bb8      	ldr	r3, [pc, #736]	@ (800644c <HAL_RCC_GetSysClockFreq+0x35c>)
 800616a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800616e:	e1e3      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006170:	4bb4      	ldr	r3, [pc, #720]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006178:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800617c:	4bb1      	ldr	r3, [pc, #708]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d071      	beq.n	800626c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006188:	4bae      	ldr	r3, [pc, #696]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	099b      	lsrs	r3, r3, #6
 800618e:	2200      	movs	r2, #0
 8006190:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006194:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8006198:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800619c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061a4:	2300      	movs	r3, #0
 80061a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80061ae:	4622      	mov	r2, r4
 80061b0:	462b      	mov	r3, r5
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f04f 0100 	mov.w	r1, #0
 80061ba:	0159      	lsls	r1, r3, #5
 80061bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c0:	0150      	lsls	r0, r2, #5
 80061c2:	4602      	mov	r2, r0
 80061c4:	460b      	mov	r3, r1
 80061c6:	4621      	mov	r1, r4
 80061c8:	1a51      	subs	r1, r2, r1
 80061ca:	6439      	str	r1, [r7, #64]	@ 0x40
 80061cc:	4629      	mov	r1, r5
 80061ce:	eb63 0301 	sbc.w	r3, r3, r1
 80061d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80061e0:	4649      	mov	r1, r9
 80061e2:	018b      	lsls	r3, r1, #6
 80061e4:	4641      	mov	r1, r8
 80061e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80061ea:	4641      	mov	r1, r8
 80061ec:	018a      	lsls	r2, r1, #6
 80061ee:	4641      	mov	r1, r8
 80061f0:	1a51      	subs	r1, r2, r1
 80061f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80061f4:	4649      	mov	r1, r9
 80061f6:	eb63 0301 	sbc.w	r3, r3, r1
 80061fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061fc:	f04f 0200 	mov.w	r2, #0
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8006208:	4649      	mov	r1, r9
 800620a:	00cb      	lsls	r3, r1, #3
 800620c:	4641      	mov	r1, r8
 800620e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006212:	4641      	mov	r1, r8
 8006214:	00ca      	lsls	r2, r1, #3
 8006216:	4610      	mov	r0, r2
 8006218:	4619      	mov	r1, r3
 800621a:	4603      	mov	r3, r0
 800621c:	4622      	mov	r2, r4
 800621e:	189b      	adds	r3, r3, r2
 8006220:	633b      	str	r3, [r7, #48]	@ 0x30
 8006222:	462b      	mov	r3, r5
 8006224:	460a      	mov	r2, r1
 8006226:	eb42 0303 	adc.w	r3, r2, r3
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34
 800622c:	f04f 0200 	mov.w	r2, #0
 8006230:	f04f 0300 	mov.w	r3, #0
 8006234:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006238:	4629      	mov	r1, r5
 800623a:	024b      	lsls	r3, r1, #9
 800623c:	4621      	mov	r1, r4
 800623e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006242:	4621      	mov	r1, r4
 8006244:	024a      	lsls	r2, r1, #9
 8006246:	4610      	mov	r0, r2
 8006248:	4619      	mov	r1, r3
 800624a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800624e:	2200      	movs	r2, #0
 8006250:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006254:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006258:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800625c:	f7fa fd34 	bl	8000cc8 <__aeabi_uldivmod>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4613      	mov	r3, r2
 8006266:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800626a:	e067      	b.n	800633c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800626c:	4b75      	ldr	r3, [pc, #468]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	099b      	lsrs	r3, r3, #6
 8006272:	2200      	movs	r2, #0
 8006274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006278:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800627c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006284:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006286:	2300      	movs	r3, #0
 8006288:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800628a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800628e:	4622      	mov	r2, r4
 8006290:	462b      	mov	r3, r5
 8006292:	f04f 0000 	mov.w	r0, #0
 8006296:	f04f 0100 	mov.w	r1, #0
 800629a:	0159      	lsls	r1, r3, #5
 800629c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062a0:	0150      	lsls	r0, r2, #5
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4621      	mov	r1, r4
 80062a8:	1a51      	subs	r1, r2, r1
 80062aa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80062ac:	4629      	mov	r1, r5
 80062ae:	eb63 0301 	sbc.w	r3, r3, r1
 80062b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062b4:	f04f 0200 	mov.w	r2, #0
 80062b8:	f04f 0300 	mov.w	r3, #0
 80062bc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80062c0:	4649      	mov	r1, r9
 80062c2:	018b      	lsls	r3, r1, #6
 80062c4:	4641      	mov	r1, r8
 80062c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80062ca:	4641      	mov	r1, r8
 80062cc:	018a      	lsls	r2, r1, #6
 80062ce:	4641      	mov	r1, r8
 80062d0:	ebb2 0a01 	subs.w	sl, r2, r1
 80062d4:	4649      	mov	r1, r9
 80062d6:	eb63 0b01 	sbc.w	fp, r3, r1
 80062da:	f04f 0200 	mov.w	r2, #0
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80062e6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80062ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ee:	4692      	mov	sl, r2
 80062f0:	469b      	mov	fp, r3
 80062f2:	4623      	mov	r3, r4
 80062f4:	eb1a 0303 	adds.w	r3, sl, r3
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	462b      	mov	r3, r5
 80062fc:	eb4b 0303 	adc.w	r3, fp, r3
 8006300:	627b      	str	r3, [r7, #36]	@ 0x24
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800630e:	4629      	mov	r1, r5
 8006310:	028b      	lsls	r3, r1, #10
 8006312:	4621      	mov	r1, r4
 8006314:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006318:	4621      	mov	r1, r4
 800631a:	028a      	lsls	r2, r1, #10
 800631c:	4610      	mov	r0, r2
 800631e:	4619      	mov	r1, r3
 8006320:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006324:	2200      	movs	r2, #0
 8006326:	673b      	str	r3, [r7, #112]	@ 0x70
 8006328:	677a      	str	r2, [r7, #116]	@ 0x74
 800632a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800632e:	f7fa fccb 	bl	8000cc8 <__aeabi_uldivmod>
 8006332:	4602      	mov	r2, r0
 8006334:	460b      	mov	r3, r1
 8006336:	4613      	mov	r3, r2
 8006338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800633c:	4b41      	ldr	r3, [pc, #260]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	0c1b      	lsrs	r3, r3, #16
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	3301      	adds	r3, #1
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800634e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006356:	fbb2 f3f3 	udiv	r3, r2, r3
 800635a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800635e:	e0eb      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006360:	4b38      	ldr	r3, [pc, #224]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800636c:	4b35      	ldr	r3, [pc, #212]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d06b      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006378:	4b32      	ldr	r3, [pc, #200]	@ (8006444 <HAL_RCC_GetSysClockFreq+0x354>)
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	099b      	lsrs	r3, r3, #6
 800637e:	2200      	movs	r2, #0
 8006380:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006384:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800638a:	663b      	str	r3, [r7, #96]	@ 0x60
 800638c:	2300      	movs	r3, #0
 800638e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006390:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8006394:	4622      	mov	r2, r4
 8006396:	462b      	mov	r3, r5
 8006398:	f04f 0000 	mov.w	r0, #0
 800639c:	f04f 0100 	mov.w	r1, #0
 80063a0:	0159      	lsls	r1, r3, #5
 80063a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063a6:	0150      	lsls	r0, r2, #5
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4621      	mov	r1, r4
 80063ae:	1a51      	subs	r1, r2, r1
 80063b0:	61b9      	str	r1, [r7, #24]
 80063b2:	4629      	mov	r1, r5
 80063b4:	eb63 0301 	sbc.w	r3, r3, r1
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	f04f 0200 	mov.w	r2, #0
 80063be:	f04f 0300 	mov.w	r3, #0
 80063c2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80063c6:	4659      	mov	r1, fp
 80063c8:	018b      	lsls	r3, r1, #6
 80063ca:	4651      	mov	r1, sl
 80063cc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80063d0:	4651      	mov	r1, sl
 80063d2:	018a      	lsls	r2, r1, #6
 80063d4:	4651      	mov	r1, sl
 80063d6:	ebb2 0801 	subs.w	r8, r2, r1
 80063da:	4659      	mov	r1, fp
 80063dc:	eb63 0901 	sbc.w	r9, r3, r1
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063f4:	4690      	mov	r8, r2
 80063f6:	4699      	mov	r9, r3
 80063f8:	4623      	mov	r3, r4
 80063fa:	eb18 0303 	adds.w	r3, r8, r3
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	462b      	mov	r3, r5
 8006402:	eb49 0303 	adc.w	r3, r9, r3
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8006414:	4629      	mov	r1, r5
 8006416:	024b      	lsls	r3, r1, #9
 8006418:	4621      	mov	r1, r4
 800641a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800641e:	4621      	mov	r1, r4
 8006420:	024a      	lsls	r2, r1, #9
 8006422:	4610      	mov	r0, r2
 8006424:	4619      	mov	r1, r3
 8006426:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800642a:	2200      	movs	r2, #0
 800642c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800642e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8006430:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006434:	f7fa fc48 	bl	8000cc8 <__aeabi_uldivmod>
 8006438:	4602      	mov	r2, r0
 800643a:	460b      	mov	r3, r1
 800643c:	4613      	mov	r3, r2
 800643e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006442:	e065      	b.n	8006510 <HAL_RCC_GetSysClockFreq+0x420>
 8006444:	40023800 	.word	0x40023800
 8006448:	00f42400 	.word	0x00f42400
 800644c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006450:	4b3d      	ldr	r3, [pc, #244]	@ (8006548 <HAL_RCC_GetSysClockFreq+0x458>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	099b      	lsrs	r3, r3, #6
 8006456:	2200      	movs	r2, #0
 8006458:	4618      	mov	r0, r3
 800645a:	4611      	mov	r1, r2
 800645c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006460:	653b      	str	r3, [r7, #80]	@ 0x50
 8006462:	2300      	movs	r3, #0
 8006464:	657b      	str	r3, [r7, #84]	@ 0x54
 8006466:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800646a:	4642      	mov	r2, r8
 800646c:	464b      	mov	r3, r9
 800646e:	f04f 0000 	mov.w	r0, #0
 8006472:	f04f 0100 	mov.w	r1, #0
 8006476:	0159      	lsls	r1, r3, #5
 8006478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800647c:	0150      	lsls	r0, r2, #5
 800647e:	4602      	mov	r2, r0
 8006480:	460b      	mov	r3, r1
 8006482:	4641      	mov	r1, r8
 8006484:	1a51      	subs	r1, r2, r1
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	4649      	mov	r1, r9
 800648a:	eb63 0301 	sbc.w	r3, r3, r1
 800648e:	60fb      	str	r3, [r7, #12]
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	f04f 0300 	mov.w	r3, #0
 8006498:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800649c:	4659      	mov	r1, fp
 800649e:	018b      	lsls	r3, r1, #6
 80064a0:	4651      	mov	r1, sl
 80064a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80064a6:	4651      	mov	r1, sl
 80064a8:	018a      	lsls	r2, r1, #6
 80064aa:	4651      	mov	r1, sl
 80064ac:	1a54      	subs	r4, r2, r1
 80064ae:	4659      	mov	r1, fp
 80064b0:	eb63 0501 	sbc.w	r5, r3, r1
 80064b4:	f04f 0200 	mov.w	r2, #0
 80064b8:	f04f 0300 	mov.w	r3, #0
 80064bc:	00eb      	lsls	r3, r5, #3
 80064be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064c2:	00e2      	lsls	r2, r4, #3
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	4643      	mov	r3, r8
 80064ca:	18e3      	adds	r3, r4, r3
 80064cc:	603b      	str	r3, [r7, #0]
 80064ce:	464b      	mov	r3, r9
 80064d0:	eb45 0303 	adc.w	r3, r5, r3
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064e2:	4629      	mov	r1, r5
 80064e4:	028b      	lsls	r3, r1, #10
 80064e6:	4621      	mov	r1, r4
 80064e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80064ec:	4621      	mov	r1, r4
 80064ee:	028a      	lsls	r2, r1, #10
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80064f8:	2200      	movs	r2, #0
 80064fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064fc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80064fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006502:	f7fa fbe1 	bl	8000cc8 <__aeabi_uldivmod>
 8006506:	4602      	mov	r2, r0
 8006508:	460b      	mov	r3, r1
 800650a:	4613      	mov	r3, r2
 800650c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8006510:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <HAL_RCC_GetSysClockFreq+0x458>)
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	0f1b      	lsrs	r3, r3, #28
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800651e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006522:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006526:	fbb2 f3f3 	udiv	r3, r2, r3
 800652a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800652e:	e003      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006530:	4b06      	ldr	r3, [pc, #24]	@ (800654c <HAL_RCC_GetSysClockFreq+0x45c>)
 8006532:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8006536:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800653c:	4618      	mov	r0, r3
 800653e:	37b8      	adds	r7, #184	@ 0xb8
 8006540:	46bd      	mov	sp, r7
 8006542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006546:	bf00      	nop
 8006548:	40023800 	.word	0x40023800
 800654c:	00f42400 	.word	0x00f42400

08006550 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b086      	sub	sp, #24
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d101      	bne.n	8006562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e28d      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 8083 	beq.w	8006676 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006570:	4b94      	ldr	r3, [pc, #592]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b04      	cmp	r3, #4
 800657a:	d019      	beq.n	80065b0 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800657c:	4b91      	ldr	r3, [pc, #580]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 030c 	and.w	r3, r3, #12
        || \
 8006584:	2b08      	cmp	r3, #8
 8006586:	d106      	bne.n	8006596 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8006588:	4b8e      	ldr	r3, [pc, #568]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006594:	d00c      	beq.n	80065b0 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006596:	4b8b      	ldr	r3, [pc, #556]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800659e:	2b0c      	cmp	r3, #12
 80065a0:	d112      	bne.n	80065c8 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a2:	4b88      	ldr	r3, [pc, #544]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ae:	d10b      	bne.n	80065c8 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b0:	4b84      	ldr	r3, [pc, #528]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d05b      	beq.n	8006674 <HAL_RCC_OscConfig+0x124>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d157      	bne.n	8006674 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e25a      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d0:	d106      	bne.n	80065e0 <HAL_RCC_OscConfig+0x90>
 80065d2:	4b7c      	ldr	r3, [pc, #496]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a7b      	ldr	r2, [pc, #492]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e01d      	b.n	800661c <HAL_RCC_OscConfig+0xcc>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0xb4>
 80065ea:	4b76      	ldr	r3, [pc, #472]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a75      	ldr	r2, [pc, #468]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b73      	ldr	r3, [pc, #460]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a72      	ldr	r2, [pc, #456]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80065fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e00b      	b.n	800661c <HAL_RCC_OscConfig+0xcc>
 8006604:	4b6f      	ldr	r3, [pc, #444]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a6e      	ldr	r2, [pc, #440]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 800660a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4b6c      	ldr	r3, [pc, #432]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a6b      	ldr	r2, [pc, #428]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d013      	beq.n	800664c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006624:	f7fd f8ce 	bl	80037c4 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800662c:	f7fd f8ca 	bl	80037c4 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	@ 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e21f      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663e:	4b61      	ldr	r3, [pc, #388]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0xdc>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800664c:	f7fd f8ba 	bl	80037c4 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fd f8b6 	bl	80037c4 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	@ 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e20b      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006666:	4b57      	ldr	r3, [pc, #348]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0x104>
 8006672:	e000      	b.n	8006676 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d06f      	beq.n	8006762 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006682:	4b50      	ldr	r3, [pc, #320]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b00      	cmp	r3, #0
 800668c:	d017      	beq.n	80066be <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800668e:	4b4d      	ldr	r3, [pc, #308]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
        || \
 8006696:	2b08      	cmp	r3, #8
 8006698:	d105      	bne.n	80066a6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800669a:	4b4a      	ldr	r3, [pc, #296]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066a6:	4b47      	ldr	r3, [pc, #284]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80066ae:	2b0c      	cmp	r3, #12
 80066b0:	d11c      	bne.n	80066ec <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b2:	4b44      	ldr	r3, [pc, #272]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d116      	bne.n	80066ec <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066be:	4b41      	ldr	r3, [pc, #260]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_RCC_OscConfig+0x186>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e1d3      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d6:	4b3b      	ldr	r3, [pc, #236]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4937      	ldr	r1, [pc, #220]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	e03a      	b.n	8006762 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d020      	beq.n	8006736 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066f4:	4b34      	ldr	r3, [pc, #208]	@ (80067c8 <HAL_RCC_OscConfig+0x278>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fd f863 	bl	80037c4 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006702:	f7fd f85f 	bl	80037c4 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e1b4      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006714:	4b2b      	ldr	r3, [pc, #172]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4b28      	ldr	r3, [pc, #160]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	4925      	ldr	r1, [pc, #148]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006730:	4313      	orrs	r3, r2
 8006732:	600b      	str	r3, [r1, #0]
 8006734:	e015      	b.n	8006762 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006736:	4b24      	ldr	r3, [pc, #144]	@ (80067c8 <HAL_RCC_OscConfig+0x278>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673c:	f7fd f842 	bl	80037c4 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006744:	f7fd f83e 	bl	80037c4 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e193      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006756:	4b1b      	ldr	r3, [pc, #108]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d036      	beq.n	80067dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006776:	4b15      	ldr	r3, [pc, #84]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677c:	f7fd f822 	bl	80037c4 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006784:	f7fd f81e 	bl	80037c4 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e173      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006796:	4b0b      	ldr	r3, [pc, #44]	@ (80067c4 <HAL_RCC_OscConfig+0x274>)
 8006798:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0x234>
 80067a2:	e01b      	b.n	80067dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a4:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <HAL_RCC_OscConfig+0x27c>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067aa:	f7fd f80b 	bl	80037c4 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b0:	e00e      	b.n	80067d0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b2:	f7fd f807 	bl	80037c4 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d907      	bls.n	80067d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e15c      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470000 	.word	0x42470000
 80067cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d0:	4b8a      	ldr	r3, [pc, #552]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80067d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ea      	bne.n	80067b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8097 	beq.w	8006918 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ee:	4b83      	ldr	r3, [pc, #524]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10f      	bne.n	800681a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	4b7f      	ldr	r3, [pc, #508]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006802:	4a7e      	ldr	r2, [pc, #504]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006808:	6413      	str	r3, [r2, #64]	@ 0x40
 800680a:	4b7c      	ldr	r3, [pc, #496]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681a:	4b79      	ldr	r3, [pc, #484]	@ (8006a00 <HAL_RCC_OscConfig+0x4b0>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d118      	bne.n	8006858 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006826:	4b76      	ldr	r3, [pc, #472]	@ (8006a00 <HAL_RCC_OscConfig+0x4b0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a75      	ldr	r2, [pc, #468]	@ (8006a00 <HAL_RCC_OscConfig+0x4b0>)
 800682c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006832:	f7fc ffc7 	bl	80037c4 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683a:	f7fc ffc3 	bl	80037c4 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e118      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	4b6c      	ldr	r3, [pc, #432]	@ (8006a00 <HAL_RCC_OscConfig+0x4b0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x31e>
 8006860:	4b66      	ldr	r3, [pc, #408]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006864:	4a65      	ldr	r2, [pc, #404]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6713      	str	r3, [r2, #112]	@ 0x70
 800686c:	e01c      	b.n	80068a8 <HAL_RCC_OscConfig+0x358>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b05      	cmp	r3, #5
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x340>
 8006876:	4b61      	ldr	r3, [pc, #388]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687a:	4a60      	ldr	r2, [pc, #384]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 800687c:	f043 0304 	orr.w	r3, r3, #4
 8006880:	6713      	str	r3, [r2, #112]	@ 0x70
 8006882:	4b5e      	ldr	r3, [pc, #376]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006886:	4a5d      	ldr	r2, [pc, #372]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	6713      	str	r3, [r2, #112]	@ 0x70
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0x358>
 8006890:	4b5a      	ldr	r3, [pc, #360]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006894:	4a59      	ldr	r2, [pc, #356]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006896:	f023 0301 	bic.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	@ 0x70
 800689c:	4b57      	ldr	r3, [pc, #348]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a0:	4a56      	ldr	r2, [pc, #344]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80068a2:	f023 0304 	bic.w	r3, r3, #4
 80068a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d015      	beq.n	80068dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b0:	f7fc ff88 	bl	80037c4 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b6:	e00a      	b.n	80068ce <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068b8:	f7fc ff84 	bl	80037c4 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e0d7      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ce:	4b4b      	ldr	r3, [pc, #300]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0ee      	beq.n	80068b8 <HAL_RCC_OscConfig+0x368>
 80068da:	e014      	b.n	8006906 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068dc:	f7fc ff72 	bl	80037c4 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e2:	e00a      	b.n	80068fa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e4:	f7fc ff6e 	bl	80037c4 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0c1      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068fa:	4b40      	ldr	r3, [pc, #256]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ee      	bne.n	80068e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d105      	bne.n	8006918 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800690c:	4b3b      	ldr	r3, [pc, #236]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 800690e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006910:	4a3a      	ldr	r2, [pc, #232]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006912:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006916:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 80ad 	beq.w	8006a7c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006922:	4b36      	ldr	r3, [pc, #216]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b08      	cmp	r3, #8
 800692c:	d060      	beq.n	80069f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d145      	bne.n	80069c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006936:	4b33      	ldr	r3, [pc, #204]	@ (8006a04 <HAL_RCC_OscConfig+0x4b4>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693c:	f7fc ff42 	bl	80037c4 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006944:	f7fc ff3e 	bl	80037c4 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e093      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006956:	4b29      	ldr	r3, [pc, #164]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006970:	019b      	lsls	r3, r3, #6
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	3b01      	subs	r3, #1
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006984:	061b      	lsls	r3, r3, #24
 8006986:	431a      	orrs	r2, r3
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	071b      	lsls	r3, r3, #28
 800698e:	491b      	ldr	r1, [pc, #108]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 8006990:	4313      	orrs	r3, r2
 8006992:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006994:	4b1b      	ldr	r3, [pc, #108]	@ (8006a04 <HAL_RCC_OscConfig+0x4b4>)
 8006996:	2201      	movs	r2, #1
 8006998:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800699a:	f7fc ff13 	bl	80037c4 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a2:	f7fc ff0f 	bl	80037c4 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e064      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069b4:	4b11      	ldr	r3, [pc, #68]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x452>
 80069c0:	e05c      	b.n	8006a7c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069c2:	4b10      	ldr	r3, [pc, #64]	@ (8006a04 <HAL_RCC_OscConfig+0x4b4>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fc fefc 	bl	80037c4 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069d0:	f7fc fef8 	bl	80037c4 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e04d      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069e2:	4b06      	ldr	r3, [pc, #24]	@ (80069fc <HAL_RCC_OscConfig+0x4ac>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0x480>
 80069ee:	e045      	b.n	8006a7c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d107      	bne.n	8006a08 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e040      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
 80069fc:	40023800 	.word	0x40023800
 8006a00:	40007000 	.word	0x40007000
 8006a04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a08:	4b1f      	ldr	r3, [pc, #124]	@ (8006a88 <HAL_RCC_OscConfig+0x538>)
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d030      	beq.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d129      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d122      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a38:	4013      	ands	r3, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d119      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	3b01      	subs	r3, #1
 8006a52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a54:	429a      	cmp	r2, r3
 8006a56:	d10f      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d107      	bne.n	8006a78 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a72:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d001      	beq.n	8006a7c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e000      	b.n	8006a7e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	40023800 	.word	0x40023800

08006a8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e041      	b.n	8006b22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fc f9e0 	bl	8002e78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4610      	mov	r0, r2
 8006acc:	f000 fc9a 	bl	8007404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e041      	b.n	8006bc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d106      	bne.n	8006b56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7fc faf1 	bl	8003138 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2202      	movs	r2, #2
 8006b5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	3304      	adds	r3, #4
 8006b66:	4619      	mov	r1, r3
 8006b68:	4610      	mov	r0, r2
 8006b6a:	f000 fc4b 	bl	8007404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2201      	movs	r2, #1
 8006b7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3708      	adds	r7, #8
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d109      	bne.n	8006bec <HAL_TIM_PWM_Start+0x24>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	bf14      	ite	ne
 8006be4:	2301      	movne	r3, #1
 8006be6:	2300      	moveq	r3, #0
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	e022      	b.n	8006c32 <HAL_TIM_PWM_Start+0x6a>
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b04      	cmp	r3, #4
 8006bf0:	d109      	bne.n	8006c06 <HAL_TIM_PWM_Start+0x3e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	bf14      	ite	ne
 8006bfe:	2301      	movne	r3, #1
 8006c00:	2300      	moveq	r3, #0
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	e015      	b.n	8006c32 <HAL_TIM_PWM_Start+0x6a>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b08      	cmp	r3, #8
 8006c0a:	d109      	bne.n	8006c20 <HAL_TIM_PWM_Start+0x58>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	bf14      	ite	ne
 8006c18:	2301      	movne	r3, #1
 8006c1a:	2300      	moveq	r3, #0
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	e008      	b.n	8006c32 <HAL_TIM_PWM_Start+0x6a>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	bf14      	ite	ne
 8006c2c:	2301      	movne	r3, #1
 8006c2e:	2300      	moveq	r3, #0
 8006c30:	b2db      	uxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d001      	beq.n	8006c3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e07c      	b.n	8006d34 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d104      	bne.n	8006c4a <HAL_TIM_PWM_Start+0x82>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c48:	e013      	b.n	8006c72 <HAL_TIM_PWM_Start+0xaa>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b04      	cmp	r3, #4
 8006c4e:	d104      	bne.n	8006c5a <HAL_TIM_PWM_Start+0x92>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2202      	movs	r2, #2
 8006c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c58:	e00b      	b.n	8006c72 <HAL_TIM_PWM_Start+0xaa>
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d104      	bne.n	8006c6a <HAL_TIM_PWM_Start+0xa2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2202      	movs	r2, #2
 8006c64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c68:	e003      	b.n	8006c72 <HAL_TIM_PWM_Start+0xaa>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2201      	movs	r2, #1
 8006c78:	6839      	ldr	r1, [r7, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 feb8 	bl	80079f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a2d      	ldr	r2, [pc, #180]	@ (8006d3c <HAL_TIM_PWM_Start+0x174>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <HAL_TIM_PWM_Start+0xcc>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a2c      	ldr	r2, [pc, #176]	@ (8006d40 <HAL_TIM_PWM_Start+0x178>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d101      	bne.n	8006c98 <HAL_TIM_PWM_Start+0xd0>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e000      	b.n	8006c9a <HAL_TIM_PWM_Start+0xd2>
 8006c98:	2300      	movs	r3, #0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d007      	beq.n	8006cae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cac:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a22      	ldr	r2, [pc, #136]	@ (8006d3c <HAL_TIM_PWM_Start+0x174>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d022      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc0:	d01d      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a1f      	ldr	r2, [pc, #124]	@ (8006d44 <HAL_TIM_PWM_Start+0x17c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d018      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d48 <HAL_TIM_PWM_Start+0x180>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a1c      	ldr	r2, [pc, #112]	@ (8006d4c <HAL_TIM_PWM_Start+0x184>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00e      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a16      	ldr	r2, [pc, #88]	@ (8006d40 <HAL_TIM_PWM_Start+0x178>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d009      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a18      	ldr	r2, [pc, #96]	@ (8006d50 <HAL_TIM_PWM_Start+0x188>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d004      	beq.n	8006cfe <HAL_TIM_PWM_Start+0x136>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a16      	ldr	r2, [pc, #88]	@ (8006d54 <HAL_TIM_PWM_Start+0x18c>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d111      	bne.n	8006d22 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 0307 	and.w	r3, r3, #7
 8006d08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b06      	cmp	r3, #6
 8006d0e:	d010      	beq.n	8006d32 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d20:	e007      	b.n	8006d32 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f042 0201 	orr.w	r2, r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400
 8006d44:	40000400 	.word	0x40000400
 8006d48:	40000800 	.word	0x40000800
 8006d4c:	40000c00 	.word	0x40000c00
 8006d50:	40014000 	.word	0x40014000
 8006d54:	40001800 	.word	0x40001800

08006d58 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e097      	b.n	8006e9c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7fc f909 	bl	8002f98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2202      	movs	r2, #2
 8006d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d9c:	f023 0307 	bic.w	r3, r3, #7
 8006da0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	3304      	adds	r3, #4
 8006daa:	4619      	mov	r1, r3
 8006dac:	4610      	mov	r0, r2
 8006dae:	f000 fb29 	bl	8007404 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a1b      	ldr	r3, [r3, #32]
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dda:	f023 0303 	bic.w	r3, r3, #3
 8006dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	021b      	lsls	r3, r3, #8
 8006dea:	4313      	orrs	r3, r2
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8006df8:	f023 030c 	bic.w	r3, r3, #12
 8006dfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	69db      	ldr	r3, [r3, #28]
 8006e12:	021b      	lsls	r3, r3, #8
 8006e14:	4313      	orrs	r3, r2
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	011a      	lsls	r2, r3, #4
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	031b      	lsls	r3, r3, #12
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006e36:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006e3e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2201      	movs	r2, #1
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b084      	sub	sp, #16
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006eb4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ebc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ec4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006ecc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d110      	bne.n	8006ef6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	d102      	bne.n	8006ee0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006eda:	7b7b      	ldrb	r3, [r7, #13]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d001      	beq.n	8006ee4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e069      	b.n	8006fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ef4:	e031      	b.n	8006f5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b04      	cmp	r3, #4
 8006efa:	d110      	bne.n	8006f1e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006efc:	7bbb      	ldrb	r3, [r7, #14]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d102      	bne.n	8006f08 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f02:	7b3b      	ldrb	r3, [r7, #12]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d001      	beq.n	8006f0c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e055      	b.n	8006fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f1c:	e01d      	b.n	8006f5a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d108      	bne.n	8006f36 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f24:	7bbb      	ldrb	r3, [r7, #14]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d105      	bne.n	8006f36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006f2a:	7b7b      	ldrb	r3, [r7, #13]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d102      	bne.n	8006f36 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006f30:	7b3b      	ldrb	r3, [r7, #12]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d001      	beq.n	8006f3a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e03e      	b.n	8006fb8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2202      	movs	r2, #2
 8006f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2202      	movs	r2, #2
 8006f46:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2202      	movs	r2, #2
 8006f4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2202      	movs	r2, #2
 8006f56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d003      	beq.n	8006f68 <HAL_TIM_Encoder_Start+0xc4>
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	2b04      	cmp	r3, #4
 8006f64:	d008      	beq.n	8006f78 <HAL_TIM_Encoder_Start+0xd4>
 8006f66:	e00f      	b.n	8006f88 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f000 fd3d 	bl	80079f0 <TIM_CCxChannelCmd>
      break;
 8006f76:	e016      	b.n	8006fa6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	2104      	movs	r1, #4
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fd35 	bl	80079f0 <TIM_CCxChannelCmd>
      break;
 8006f86:	e00e      	b.n	8006fa6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	2100      	movs	r1, #0
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fd2d 	bl	80079f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	2104      	movs	r1, #4
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 fd26 	bl	80079f0 <TIM_CCxChannelCmd>
      break;
 8006fa4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_TIM_Encoder_Stop+0x18>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b04      	cmp	r3, #4
 8006fd4:	d008      	beq.n	8006fe8 <HAL_TIM_Encoder_Stop+0x28>
 8006fd6:	e00f      	b.n	8006ff8 <HAL_TIM_Encoder_Stop+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f000 fd05 	bl	80079f0 <TIM_CCxChannelCmd>
      break;
 8006fe6:	e016      	b.n	8007016 <HAL_TIM_Encoder_Stop+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2200      	movs	r2, #0
 8006fee:	2104      	movs	r1, #4
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f000 fcfd 	bl	80079f0 <TIM_CCxChannelCmd>
      break;
 8006ff6:	e00e      	b.n	8007016 <HAL_TIM_Encoder_Stop+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2100      	movs	r1, #0
 8007000:	4618      	mov	r0, r3
 8007002:	f000 fcf5 	bl	80079f0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2200      	movs	r2, #0
 800700c:	2104      	movs	r1, #4
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fcee 	bl	80079f0 <TIM_CCxChannelCmd>
      break;
 8007014:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6a1a      	ldr	r2, [r3, #32]
 800701c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007020:	4013      	ands	r3, r2
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10f      	bne.n	8007046 <HAL_TIM_Encoder_Stop+0x86>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	6a1a      	ldr	r2, [r3, #32]
 800702c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007030:	4013      	ands	r3, r2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d107      	bne.n	8007046 <HAL_TIM_Encoder_Stop+0x86>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f022 0201 	bic.w	r2, r2, #1
 8007044:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel(s) state */
  if ((Channel == TIM_CHANNEL_1) || (Channel == TIM_CHANNEL_2))
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <HAL_TIM_Encoder_Stop+0x92>
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	2b04      	cmp	r3, #4
 8007050:	d138      	bne.n	80070c4 <HAL_TIM_Encoder_Stop+0x104>
  {
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d104      	bne.n	8007062 <HAL_TIM_Encoder_Stop+0xa2>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007060:	e013      	b.n	800708a <HAL_TIM_Encoder_Stop+0xca>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	2b04      	cmp	r3, #4
 8007066:	d104      	bne.n	8007072 <HAL_TIM_Encoder_Stop+0xb2>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007070:	e00b      	b.n	800708a <HAL_TIM_Encoder_Stop+0xca>
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	2b08      	cmp	r3, #8
 8007076:	d104      	bne.n	8007082 <HAL_TIM_Encoder_Stop+0xc2>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007080:	e003      	b.n	800708a <HAL_TIM_Encoder_Stop+0xca>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <HAL_TIM_Encoder_Stop+0xda>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007098:	e024      	b.n	80070e4 <HAL_TIM_Encoder_Stop+0x124>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d104      	bne.n	80070aa <HAL_TIM_Encoder_Stop+0xea>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80070a8:	e01c      	b.n	80070e4 <HAL_TIM_Encoder_Stop+0x124>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_Encoder_Stop+0xfa>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070b8:	e014      	b.n	80070e4 <HAL_TIM_Encoder_Stop+0x124>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070c2:	e00f      	b.n	80070e4 <HAL_TIM_Encoder_Stop+0x124>
  }
  else
  {
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  }

  /* Return function status */
  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070fc:	2300      	movs	r3, #0
 80070fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007106:	2b01      	cmp	r3, #1
 8007108:	d101      	bne.n	800710e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800710a:	2302      	movs	r3, #2
 800710c:	e0ae      	b.n	800726c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2201      	movs	r2, #1
 8007112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2b0c      	cmp	r3, #12
 800711a:	f200 809f 	bhi.w	800725c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800711e:	a201      	add	r2, pc, #4	@ (adr r2, 8007124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007124:	08007159 	.word	0x08007159
 8007128:	0800725d 	.word	0x0800725d
 800712c:	0800725d 	.word	0x0800725d
 8007130:	0800725d 	.word	0x0800725d
 8007134:	08007199 	.word	0x08007199
 8007138:	0800725d 	.word	0x0800725d
 800713c:	0800725d 	.word	0x0800725d
 8007140:	0800725d 	.word	0x0800725d
 8007144:	080071db 	.word	0x080071db
 8007148:	0800725d 	.word	0x0800725d
 800714c:	0800725d 	.word	0x0800725d
 8007150:	0800725d 	.word	0x0800725d
 8007154:	0800721b 	.word	0x0800721b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68b9      	ldr	r1, [r7, #8]
 800715e:	4618      	mov	r0, r3
 8007160:	f000 f9fc 	bl	800755c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699a      	ldr	r2, [r3, #24]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0208 	orr.w	r2, r2, #8
 8007172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	699a      	ldr	r2, [r3, #24]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0204 	bic.w	r2, r2, #4
 8007182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6999      	ldr	r1, [r3, #24]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	691a      	ldr	r2, [r3, #16]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	430a      	orrs	r2, r1
 8007194:	619a      	str	r2, [r3, #24]
      break;
 8007196:	e064      	b.n	8007262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	4618      	mov	r0, r3
 80071a0:	f000 fa4c 	bl	800763c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	699a      	ldr	r2, [r3, #24]
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6999      	ldr	r1, [r3, #24]
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	021a      	lsls	r2, r3, #8
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	619a      	str	r2, [r3, #24]
      break;
 80071d8:	e043      	b.n	8007262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	68b9      	ldr	r1, [r7, #8]
 80071e0:	4618      	mov	r0, r3
 80071e2:	f000 faa1 	bl	8007728 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f042 0208 	orr.w	r2, r2, #8
 80071f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69da      	ldr	r2, [r3, #28]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 0204 	bic.w	r2, r2, #4
 8007204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	69d9      	ldr	r1, [r3, #28]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	691a      	ldr	r2, [r3, #16]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	430a      	orrs	r2, r1
 8007216:	61da      	str	r2, [r3, #28]
      break;
 8007218:	e023      	b.n	8007262 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68b9      	ldr	r1, [r7, #8]
 8007220:	4618      	mov	r0, r3
 8007222:	f000 faf5 	bl	8007810 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	69da      	ldr	r2, [r3, #28]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69d9      	ldr	r1, [r3, #28]
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	021a      	lsls	r2, r3, #8
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	61da      	str	r2, [r3, #28]
      break;
 800725a:	e002      	b.n	8007262 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	75fb      	strb	r3, [r7, #23]
      break;
 8007260:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800726a:	7dfb      	ldrb	r3, [r7, #23]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_TIM_ConfigClockSource+0x1c>
 800728c:	2302      	movs	r3, #2
 800728e:	e0b4      	b.n	80073fa <HAL_TIM_ConfigClockSource+0x186>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072c8:	d03e      	beq.n	8007348 <HAL_TIM_ConfigClockSource+0xd4>
 80072ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ce:	f200 8087 	bhi.w	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d6:	f000 8086 	beq.w	80073e6 <HAL_TIM_ConfigClockSource+0x172>
 80072da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072de:	d87f      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
 80072e0:	2b70      	cmp	r3, #112	@ 0x70
 80072e2:	d01a      	beq.n	800731a <HAL_TIM_ConfigClockSource+0xa6>
 80072e4:	2b70      	cmp	r3, #112	@ 0x70
 80072e6:	d87b      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
 80072e8:	2b60      	cmp	r3, #96	@ 0x60
 80072ea:	d050      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x11a>
 80072ec:	2b60      	cmp	r3, #96	@ 0x60
 80072ee:	d877      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
 80072f0:	2b50      	cmp	r3, #80	@ 0x50
 80072f2:	d03c      	beq.n	800736e <HAL_TIM_ConfigClockSource+0xfa>
 80072f4:	2b50      	cmp	r3, #80	@ 0x50
 80072f6:	d873      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
 80072f8:	2b40      	cmp	r3, #64	@ 0x40
 80072fa:	d058      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0x13a>
 80072fc:	2b40      	cmp	r3, #64	@ 0x40
 80072fe:	d86f      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007300:	2b30      	cmp	r3, #48	@ 0x30
 8007302:	d064      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x15a>
 8007304:	2b30      	cmp	r3, #48	@ 0x30
 8007306:	d86b      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007308:	2b20      	cmp	r3, #32
 800730a:	d060      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x15a>
 800730c:	2b20      	cmp	r3, #32
 800730e:	d867      	bhi.n	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d05c      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x15a>
 8007314:	2b10      	cmp	r3, #16
 8007316:	d05a      	beq.n	80073ce <HAL_TIM_ConfigClockSource+0x15a>
 8007318:	e062      	b.n	80073e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800732a:	f000 fb41 	bl	80079b0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800733c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	609a      	str	r2, [r3, #8]
      break;
 8007346:	e04f      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007358:	f000 fb2a 	bl	80079b0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800736a:	609a      	str	r2, [r3, #8]
      break;
 800736c:	e03c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800737a:	461a      	mov	r2, r3
 800737c:	f000 fa9e 	bl	80078bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2150      	movs	r1, #80	@ 0x50
 8007386:	4618      	mov	r0, r3
 8007388:	f000 faf7 	bl	800797a <TIM_ITRx_SetConfig>
      break;
 800738c:	e02c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800739a:	461a      	mov	r2, r3
 800739c:	f000 fabd 	bl	800791a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2160      	movs	r1, #96	@ 0x60
 80073a6:	4618      	mov	r0, r3
 80073a8:	f000 fae7 	bl	800797a <TIM_ITRx_SetConfig>
      break;
 80073ac:	e01c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ba:	461a      	mov	r2, r3
 80073bc:	f000 fa7e 	bl	80078bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2140      	movs	r1, #64	@ 0x40
 80073c6:	4618      	mov	r0, r3
 80073c8:	f000 fad7 	bl	800797a <TIM_ITRx_SetConfig>
      break;
 80073cc:	e00c      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4619      	mov	r1, r3
 80073d8:	4610      	mov	r0, r2
 80073da:	f000 face 	bl	800797a <TIM_ITRx_SetConfig>
      break;
 80073de:	e003      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	73fb      	strb	r3, [r7, #15]
      break;
 80073e4:	e000      	b.n	80073e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2201      	movs	r2, #1
 80073ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a46      	ldr	r2, [pc, #280]	@ (8007530 <TIM_Base_SetConfig+0x12c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007422:	d00f      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a43      	ldr	r2, [pc, #268]	@ (8007534 <TIM_Base_SetConfig+0x130>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d00b      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a42      	ldr	r2, [pc, #264]	@ (8007538 <TIM_Base_SetConfig+0x134>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d007      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a41      	ldr	r2, [pc, #260]	@ (800753c <TIM_Base_SetConfig+0x138>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d003      	beq.n	8007444 <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a40      	ldr	r2, [pc, #256]	@ (8007540 <TIM_Base_SetConfig+0x13c>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d108      	bne.n	8007456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	4313      	orrs	r3, r2
 8007454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a35      	ldr	r2, [pc, #212]	@ (8007530 <TIM_Base_SetConfig+0x12c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d02b      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007464:	d027      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a32      	ldr	r2, [pc, #200]	@ (8007534 <TIM_Base_SetConfig+0x130>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d023      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	4a31      	ldr	r2, [pc, #196]	@ (8007538 <TIM_Base_SetConfig+0x134>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d01f      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a30      	ldr	r2, [pc, #192]	@ (800753c <TIM_Base_SetConfig+0x138>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d01b      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a2f      	ldr	r2, [pc, #188]	@ (8007540 <TIM_Base_SetConfig+0x13c>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d017      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a2e      	ldr	r2, [pc, #184]	@ (8007544 <TIM_Base_SetConfig+0x140>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d013      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a2d      	ldr	r2, [pc, #180]	@ (8007548 <TIM_Base_SetConfig+0x144>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00f      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2c      	ldr	r2, [pc, #176]	@ (800754c <TIM_Base_SetConfig+0x148>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d00b      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007550 <TIM_Base_SetConfig+0x14c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d007      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007554 <TIM_Base_SetConfig+0x150>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d003      	beq.n	80074b6 <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a29      	ldr	r2, [pc, #164]	@ (8007558 <TIM_Base_SetConfig+0x154>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d108      	bne.n	80074c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	4313      	orrs	r3, r2
 80074c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681a      	ldr	r2, [r3, #0]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a10      	ldr	r2, [pc, #64]	@ (8007530 <TIM_Base_SetConfig+0x12c>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d003      	beq.n	80074fc <TIM_Base_SetConfig+0xf8>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a12      	ldr	r2, [pc, #72]	@ (8007540 <TIM_Base_SetConfig+0x13c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d103      	bne.n	8007504 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	691a      	ldr	r2, [r3, #16]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	f003 0301 	and.w	r3, r3, #1
 8007512:	2b01      	cmp	r3, #1
 8007514:	d105      	bne.n	8007522 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	691b      	ldr	r3, [r3, #16]
 800751a:	f023 0201 	bic.w	r2, r3, #1
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	611a      	str	r2, [r3, #16]
  }
}
 8007522:	bf00      	nop
 8007524:	3714      	adds	r7, #20
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40010000 	.word	0x40010000
 8007534:	40000400 	.word	0x40000400
 8007538:	40000800 	.word	0x40000800
 800753c:	40000c00 	.word	0x40000c00
 8007540:	40010400 	.word	0x40010400
 8007544:	40014000 	.word	0x40014000
 8007548:	40014400 	.word	0x40014400
 800754c:	40014800 	.word	0x40014800
 8007550:	40001800 	.word	0x40001800
 8007554:	40001c00 	.word	0x40001c00
 8007558:	40002000 	.word	0x40002000

0800755c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800755c:	b480      	push	{r7}
 800755e:	b087      	sub	sp, #28
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	f023 0201 	bic.w	r2, r3, #1
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	699b      	ldr	r3, [r3, #24]
 8007582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f023 0303 	bic.w	r3, r3, #3
 8007592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f023 0302 	bic.w	r3, r3, #2
 80075a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a20      	ldr	r2, [pc, #128]	@ (8007634 <TIM_OC1_SetConfig+0xd8>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_OC1_SetConfig+0x64>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007638 <TIM_OC1_SetConfig+0xdc>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d10c      	bne.n	80075da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f023 0308 	bic.w	r3, r3, #8
 80075c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	68db      	ldr	r3, [r3, #12]
 80075cc:	697a      	ldr	r2, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f023 0304 	bic.w	r3, r3, #4
 80075d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a15      	ldr	r2, [pc, #84]	@ (8007634 <TIM_OC1_SetConfig+0xd8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_OC1_SetConfig+0x8e>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a14      	ldr	r2, [pc, #80]	@ (8007638 <TIM_OC1_SetConfig+0xdc>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d111      	bne.n	800760e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075ea:	693b      	ldr	r3, [r7, #16]
 80075ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	699b      	ldr	r3, [r3, #24]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	685a      	ldr	r2, [r3, #4]
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	697a      	ldr	r2, [r7, #20]
 8007626:	621a      	str	r2, [r3, #32]
}
 8007628:	bf00      	nop
 800762a:	371c      	adds	r7, #28
 800762c:	46bd      	mov	sp, r7
 800762e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007632:	4770      	bx	lr
 8007634:	40010000 	.word	0x40010000
 8007638:	40010400 	.word	0x40010400

0800763c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800763c:	b480      	push	{r7}
 800763e:	b087      	sub	sp, #28
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	f023 0210 	bic.w	r2, r3, #16
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	699b      	ldr	r3, [r3, #24]
 8007662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800766a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	021b      	lsls	r3, r3, #8
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4313      	orrs	r3, r2
 800767e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f023 0320 	bic.w	r3, r3, #32
 8007686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	011b      	lsls	r3, r3, #4
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	4313      	orrs	r3, r2
 8007692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	4a22      	ldr	r2, [pc, #136]	@ (8007720 <TIM_OC2_SetConfig+0xe4>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d003      	beq.n	80076a4 <TIM_OC2_SetConfig+0x68>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a21      	ldr	r2, [pc, #132]	@ (8007724 <TIM_OC2_SetConfig+0xe8>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d10d      	bne.n	80076c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	011b      	lsls	r3, r3, #4
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a17      	ldr	r2, [pc, #92]	@ (8007720 <TIM_OC2_SetConfig+0xe4>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d003      	beq.n	80076d0 <TIM_OC2_SetConfig+0x94>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4a16      	ldr	r2, [pc, #88]	@ (8007724 <TIM_OC2_SetConfig+0xe8>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d113      	bne.n	80076f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	695b      	ldr	r3, [r3, #20]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	693a      	ldr	r2, [r7, #16]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	699b      	ldr	r3, [r3, #24]
 80076f0:	009b      	lsls	r3, r3, #2
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68fa      	ldr	r2, [r7, #12]
 8007702:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	685a      	ldr	r2, [r3, #4]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	621a      	str	r2, [r3, #32]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
 800771e:	bf00      	nop
 8007720:	40010000 	.word	0x40010000
 8007724:	40010400 	.word	0x40010400

08007728 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007728:	b480      	push	{r7}
 800772a:	b087      	sub	sp, #28
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f023 0303 	bic.w	r3, r3, #3
 800775e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	4313      	orrs	r3, r2
 8007768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	021b      	lsls	r3, r3, #8
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	4313      	orrs	r3, r2
 800777c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a21      	ldr	r2, [pc, #132]	@ (8007808 <TIM_OC3_SetConfig+0xe0>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d003      	beq.n	800778e <TIM_OC3_SetConfig+0x66>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4a20      	ldr	r2, [pc, #128]	@ (800780c <TIM_OC3_SetConfig+0xe4>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d10d      	bne.n	80077aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	021b      	lsls	r3, r3, #8
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	4313      	orrs	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80077a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a16      	ldr	r2, [pc, #88]	@ (8007808 <TIM_OC3_SetConfig+0xe0>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d003      	beq.n	80077ba <TIM_OC3_SetConfig+0x92>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a15      	ldr	r2, [pc, #84]	@ (800780c <TIM_OC3_SetConfig+0xe4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d113      	bne.n	80077e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80077c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	693a      	ldr	r2, [r7, #16]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	011b      	lsls	r3, r3, #4
 80077dc:	693a      	ldr	r2, [r7, #16]
 80077de:	4313      	orrs	r3, r2
 80077e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	697a      	ldr	r2, [r7, #20]
 80077fa:	621a      	str	r2, [r3, #32]
}
 80077fc:	bf00      	nop
 80077fe:	371c      	adds	r7, #28
 8007800:	46bd      	mov	sp, r7
 8007802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007806:	4770      	bx	lr
 8007808:	40010000 	.word	0x40010000
 800780c:	40010400 	.word	0x40010400

08007810 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007810:	b480      	push	{r7}
 8007812:	b087      	sub	sp, #28
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800783e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007846:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	4313      	orrs	r3, r2
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800785a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	031b      	lsls	r3, r3, #12
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a12      	ldr	r2, [pc, #72]	@ (80078b4 <TIM_OC4_SetConfig+0xa4>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d003      	beq.n	8007878 <TIM_OC4_SetConfig+0x68>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a11      	ldr	r2, [pc, #68]	@ (80078b8 <TIM_OC4_SetConfig+0xa8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d109      	bne.n	800788c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800787e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	695b      	ldr	r3, [r3, #20]
 8007884:	019b      	lsls	r3, r3, #6
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	4313      	orrs	r3, r2
 800788a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	621a      	str	r2, [r3, #32]
}
 80078a6:	bf00      	nop
 80078a8:	371c      	adds	r7, #28
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40010000 	.word	0x40010000
 80078b8:	40010400 	.word	0x40010400

080078bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078bc:	b480      	push	{r7}
 80078be:	b087      	sub	sp, #28
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6a1b      	ldr	r3, [r3, #32]
 80078d2:	f023 0201 	bic.w	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f023 030a 	bic.w	r3, r3, #10
 80078f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	4313      	orrs	r3, r2
 8007900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	621a      	str	r2, [r3, #32]
}
 800790e:	bf00      	nop
 8007910:	371c      	adds	r7, #28
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800791a:	b480      	push	{r7}
 800791c:	b087      	sub	sp, #28
 800791e:	af00      	add	r7, sp, #0
 8007920:	60f8      	str	r0, [r7, #12]
 8007922:	60b9      	str	r1, [r7, #8]
 8007924:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6a1b      	ldr	r3, [r3, #32]
 800792a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	f023 0210 	bic.w	r2, r3, #16
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	699b      	ldr	r3, [r3, #24]
 800793c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	031b      	lsls	r3, r3, #12
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	4313      	orrs	r3, r2
 800794e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007956:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	011b      	lsls	r3, r3, #4
 800795c:	697a      	ldr	r2, [r7, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	697a      	ldr	r2, [r7, #20]
 800796c:	621a      	str	r2, [r3, #32]
}
 800796e:	bf00      	nop
 8007970:	371c      	adds	r7, #28
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr

0800797a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800797a:	b480      	push	{r7}
 800797c:	b085      	sub	sp, #20
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007990:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	4313      	orrs	r3, r2
 8007998:	f043 0307 	orr.w	r3, r3, #7
 800799c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	609a      	str	r2, [r3, #8]
}
 80079a4:	bf00      	nop
 80079a6:	3714      	adds	r7, #20
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b087      	sub	sp, #28
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80079ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	021a      	lsls	r2, r3, #8
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	4313      	orrs	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	609a      	str	r2, [r3, #8]
}
 80079e4:	bf00      	nop
 80079e6:	371c      	adds	r7, #28
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b087      	sub	sp, #28
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	f003 031f 	and.w	r3, r3, #31
 8007a02:	2201      	movs	r2, #1
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6a1a      	ldr	r2, [r3, #32]
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	43db      	mvns	r3, r3
 8007a12:	401a      	ands	r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6a1a      	ldr	r2, [r3, #32]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	f003 031f 	and.w	r3, r3, #31
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	fa01 f303 	lsl.w	r3, r1, r3
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	621a      	str	r2, [r3, #32]
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
	...

08007a3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	b085      	sub	sp, #20
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d101      	bne.n	8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a50:	2302      	movs	r3, #2
 8007a52:	e05a      	b.n	8007b0a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a21      	ldr	r2, [pc, #132]	@ (8007b18 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d022      	beq.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa0:	d01d      	beq.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d018      	beq.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d013      	beq.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1a      	ldr	r2, [pc, #104]	@ (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00e      	beq.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a18      	ldr	r2, [pc, #96]	@ (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d009      	beq.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a17      	ldr	r2, [pc, #92]	@ (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d004      	beq.n	8007ade <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a15      	ldr	r2, [pc, #84]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d10c      	bne.n	8007af8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ae4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2201      	movs	r2, #1
 8007afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3714      	adds	r7, #20
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	40010000 	.word	0x40010000
 8007b1c:	40000400 	.word	0x40000400
 8007b20:	40000800 	.word	0x40000800
 8007b24:	40000c00 	.word	0x40000c00
 8007b28:	40010400 	.word	0x40010400
 8007b2c:	40014000 	.word	0x40014000
 8007b30:	40001800 	.word	0x40001800

08007b34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d101      	bne.n	8007b50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	e03d      	b.n	8007bcc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	4313      	orrs	r3, r2
 8007b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	69db      	ldr	r3, [r3, #28]
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3714      	adds	r7, #20
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd6:	4770      	bx	lr

08007bd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e042      	b.n	8007c70 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f7fb fc08 	bl	8003414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2224      	movs	r2, #36	@ 0x24
 8007c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007c1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 f973 	bl	8007f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691a      	ldr	r2, [r3, #16]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007c30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	695a      	ldr	r2, [r3, #20]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007c40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2220      	movs	r2, #32
 8007c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2220      	movs	r2, #32
 8007c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08a      	sub	sp, #40	@ 0x28
 8007c7c:	af02      	add	r7, sp, #8
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4613      	mov	r3, r2
 8007c86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b20      	cmp	r3, #32
 8007c96:	d175      	bne.n	8007d84 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d002      	beq.n	8007ca4 <HAL_UART_Transmit+0x2c>
 8007c9e:	88fb      	ldrh	r3, [r7, #6]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e06e      	b.n	8007d86 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	2200      	movs	r2, #0
 8007cac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2221      	movs	r2, #33	@ 0x21
 8007cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007cb6:	f7fb fd85 	bl	80037c4 <HAL_GetTick>
 8007cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	88fa      	ldrh	r2, [r7, #6]
 8007cc0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	88fa      	ldrh	r2, [r7, #6]
 8007cc6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cd0:	d108      	bne.n	8007ce4 <HAL_UART_Transmit+0x6c>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d104      	bne.n	8007ce4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	61bb      	str	r3, [r7, #24]
 8007ce2:	e003      	b.n	8007cec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007cec:	e02e      	b.n	8007d4c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	2180      	movs	r1, #128	@ 0x80
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f000 f848 	bl	8007d8e <UART_WaitOnFlagUntilTimeout>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d005      	beq.n	8007d10 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2220      	movs	r2, #32
 8007d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e03a      	b.n	8007d86 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007d10:	69fb      	ldr	r3, [r7, #28]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10b      	bne.n	8007d2e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	3302      	adds	r3, #2
 8007d2a:	61bb      	str	r3, [r7, #24]
 8007d2c:	e007      	b.n	8007d3e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	781a      	ldrb	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	3b01      	subs	r3, #1
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007d50:	b29b      	uxth	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1cb      	bne.n	8007cee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2140      	movs	r1, #64	@ 0x40
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f000 f814 	bl	8007d8e <UART_WaitOnFlagUntilTimeout>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007d74:	2303      	movs	r3, #3
 8007d76:	e006      	b.n	8007d86 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2220      	movs	r2, #32
 8007d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3720      	adds	r7, #32
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b086      	sub	sp, #24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	60f8      	str	r0, [r7, #12]
 8007d96:	60b9      	str	r1, [r7, #8]
 8007d98:	603b      	str	r3, [r7, #0]
 8007d9a:	4613      	mov	r3, r2
 8007d9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d9e:	e03b      	b.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da6:	d037      	beq.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007da8:	f7fb fd0c 	bl	80037c4 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	6a3a      	ldr	r2, [r7, #32]
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d302      	bcc.n	8007dbe <UART_WaitOnFlagUntilTimeout+0x30>
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e03a      	b.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	f003 0304 	and.w	r3, r3, #4
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d023      	beq.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	2b80      	cmp	r3, #128	@ 0x80
 8007dd4:	d020      	beq.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b40      	cmp	r3, #64	@ 0x40
 8007dda:	d01d      	beq.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	2b08      	cmp	r3, #8
 8007de8:	d116      	bne.n	8007e18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	617b      	str	r3, [r7, #20]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	617b      	str	r3, [r7, #20]
 8007dfe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 f81d 	bl	8007e40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2208      	movs	r2, #8
 8007e0a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e00f      	b.n	8007e38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4013      	ands	r3, r2
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	429a      	cmp	r2, r3
 8007e26:	bf0c      	ite	eq
 8007e28:	2301      	moveq	r3, #1
 8007e2a:	2300      	movne	r3, #0
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	461a      	mov	r2, r3
 8007e30:	79fb      	ldrb	r3, [r7, #7]
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d0b4      	beq.n	8007da0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e36:	2300      	movs	r3, #0
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3718      	adds	r7, #24
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b095      	sub	sp, #84	@ 0x54
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007e58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	330c      	adds	r3, #12
 8007e66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007e68:	643a      	str	r2, [r7, #64]	@ 0x40
 8007e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007e6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e5      	bne.n	8007e48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3314      	adds	r3, #20
 8007e82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e84:	6a3b      	ldr	r3, [r7, #32]
 8007e86:	e853 3f00 	ldrex	r3, [r3]
 8007e8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	f023 0301 	bic.w	r3, r3, #1
 8007e92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	3314      	adds	r3, #20
 8007e9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ea2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ea4:	e841 2300 	strex	r3, r2, [r1]
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d1e5      	bne.n	8007e7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d119      	bne.n	8007eec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	e853 3f00 	ldrex	r3, [r3]
 8007ec6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f023 0310 	bic.w	r3, r3, #16
 8007ece:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	330c      	adds	r3, #12
 8007ed6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ed8:	61ba      	str	r2, [r7, #24]
 8007eda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007edc:	6979      	ldr	r1, [r7, #20]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	e841 2300 	strex	r3, r2, [r1]
 8007ee4:	613b      	str	r3, [r7, #16]
   return(result);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d1e5      	bne.n	8007eb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007efa:	bf00      	nop
 8007efc:	3754      	adds	r7, #84	@ 0x54
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f0c:	b0c0      	sub	sp, #256	@ 0x100
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f24:	68d9      	ldr	r1, [r3, #12]
 8007f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	ea40 0301 	orr.w	r3, r0, r1
 8007f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	431a      	orrs	r2, r3
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f44:	695b      	ldr	r3, [r3, #20]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f4c:	69db      	ldr	r3, [r3, #28]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007f60:	f021 010c 	bic.w	r1, r1, #12
 8007f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f6e:	430b      	orrs	r3, r1
 8007f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f82:	6999      	ldr	r1, [r3, #24]
 8007f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	ea40 0301 	orr.w	r3, r0, r1
 8007f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	4b8f      	ldr	r3, [pc, #572]	@ (80081d4 <UART_SetConfig+0x2cc>)
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d005      	beq.n	8007fa8 <UART_SetConfig+0xa0>
 8007f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80081d8 <UART_SetConfig+0x2d0>)
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d104      	bne.n	8007fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007fa8:	f7fe f88e 	bl	80060c8 <HAL_RCC_GetPCLK2Freq>
 8007fac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007fb0:	e003      	b.n	8007fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007fb2:	f7fe f875 	bl	80060a0 <HAL_RCC_GetPCLK1Freq>
 8007fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fbe:	69db      	ldr	r3, [r3, #28]
 8007fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fc4:	f040 810c 	bne.w	80081e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007fda:	4622      	mov	r2, r4
 8007fdc:	462b      	mov	r3, r5
 8007fde:	1891      	adds	r1, r2, r2
 8007fe0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007fe2:	415b      	adcs	r3, r3
 8007fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007fea:	4621      	mov	r1, r4
 8007fec:	eb12 0801 	adds.w	r8, r2, r1
 8007ff0:	4629      	mov	r1, r5
 8007ff2:	eb43 0901 	adc.w	r9, r3, r1
 8007ff6:	f04f 0200 	mov.w	r2, #0
 8007ffa:	f04f 0300 	mov.w	r3, #0
 8007ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800800a:	4690      	mov	r8, r2
 800800c:	4699      	mov	r9, r3
 800800e:	4623      	mov	r3, r4
 8008010:	eb18 0303 	adds.w	r3, r8, r3
 8008014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008018:	462b      	mov	r3, r5
 800801a:	eb49 0303 	adc.w	r3, r9, r3
 800801e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800802e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008036:	460b      	mov	r3, r1
 8008038:	18db      	adds	r3, r3, r3
 800803a:	653b      	str	r3, [r7, #80]	@ 0x50
 800803c:	4613      	mov	r3, r2
 800803e:	eb42 0303 	adc.w	r3, r2, r3
 8008042:	657b      	str	r3, [r7, #84]	@ 0x54
 8008044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800804c:	f7f8 fe3c 	bl	8000cc8 <__aeabi_uldivmod>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	4b61      	ldr	r3, [pc, #388]	@ (80081dc <UART_SetConfig+0x2d4>)
 8008056:	fba3 2302 	umull	r2, r3, r3, r2
 800805a:	095b      	lsrs	r3, r3, #5
 800805c:	011c      	lsls	r4, r3, #4
 800805e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008062:	2200      	movs	r2, #0
 8008064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008068:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800806c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008070:	4642      	mov	r2, r8
 8008072:	464b      	mov	r3, r9
 8008074:	1891      	adds	r1, r2, r2
 8008076:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008078:	415b      	adcs	r3, r3
 800807a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800807c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008080:	4641      	mov	r1, r8
 8008082:	eb12 0a01 	adds.w	sl, r2, r1
 8008086:	4649      	mov	r1, r9
 8008088:	eb43 0b01 	adc.w	fp, r3, r1
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800809c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080a0:	4692      	mov	sl, r2
 80080a2:	469b      	mov	fp, r3
 80080a4:	4643      	mov	r3, r8
 80080a6:	eb1a 0303 	adds.w	r3, sl, r3
 80080aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80080ae:	464b      	mov	r3, r9
 80080b0:	eb4b 0303 	adc.w	r3, fp, r3
 80080b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80080b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80080c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80080c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80080cc:	460b      	mov	r3, r1
 80080ce:	18db      	adds	r3, r3, r3
 80080d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80080d2:	4613      	mov	r3, r2
 80080d4:	eb42 0303 	adc.w	r3, r2, r3
 80080d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80080da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80080de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80080e2:	f7f8 fdf1 	bl	8000cc8 <__aeabi_uldivmod>
 80080e6:	4602      	mov	r2, r0
 80080e8:	460b      	mov	r3, r1
 80080ea:	4611      	mov	r1, r2
 80080ec:	4b3b      	ldr	r3, [pc, #236]	@ (80081dc <UART_SetConfig+0x2d4>)
 80080ee:	fba3 2301 	umull	r2, r3, r3, r1
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	2264      	movs	r2, #100	@ 0x64
 80080f6:	fb02 f303 	mul.w	r3, r2, r3
 80080fa:	1acb      	subs	r3, r1, r3
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008102:	4b36      	ldr	r3, [pc, #216]	@ (80081dc <UART_SetConfig+0x2d4>)
 8008104:	fba3 2302 	umull	r2, r3, r3, r2
 8008108:	095b      	lsrs	r3, r3, #5
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008110:	441c      	add	r4, r3
 8008112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008116:	2200      	movs	r2, #0
 8008118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800811c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008124:	4642      	mov	r2, r8
 8008126:	464b      	mov	r3, r9
 8008128:	1891      	adds	r1, r2, r2
 800812a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800812c:	415b      	adcs	r3, r3
 800812e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008134:	4641      	mov	r1, r8
 8008136:	1851      	adds	r1, r2, r1
 8008138:	6339      	str	r1, [r7, #48]	@ 0x30
 800813a:	4649      	mov	r1, r9
 800813c:	414b      	adcs	r3, r1
 800813e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	f04f 0300 	mov.w	r3, #0
 8008148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800814c:	4659      	mov	r1, fp
 800814e:	00cb      	lsls	r3, r1, #3
 8008150:	4651      	mov	r1, sl
 8008152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008156:	4651      	mov	r1, sl
 8008158:	00ca      	lsls	r2, r1, #3
 800815a:	4610      	mov	r0, r2
 800815c:	4619      	mov	r1, r3
 800815e:	4603      	mov	r3, r0
 8008160:	4642      	mov	r2, r8
 8008162:	189b      	adds	r3, r3, r2
 8008164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008168:	464b      	mov	r3, r9
 800816a:	460a      	mov	r2, r1
 800816c:	eb42 0303 	adc.w	r3, r2, r3
 8008170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008180:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008188:	460b      	mov	r3, r1
 800818a:	18db      	adds	r3, r3, r3
 800818c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800818e:	4613      	mov	r3, r2
 8008190:	eb42 0303 	adc.w	r3, r2, r3
 8008194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800819a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800819e:	f7f8 fd93 	bl	8000cc8 <__aeabi_uldivmod>
 80081a2:	4602      	mov	r2, r0
 80081a4:	460b      	mov	r3, r1
 80081a6:	4b0d      	ldr	r3, [pc, #52]	@ (80081dc <UART_SetConfig+0x2d4>)
 80081a8:	fba3 1302 	umull	r1, r3, r3, r2
 80081ac:	095b      	lsrs	r3, r3, #5
 80081ae:	2164      	movs	r1, #100	@ 0x64
 80081b0:	fb01 f303 	mul.w	r3, r1, r3
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	00db      	lsls	r3, r3, #3
 80081b8:	3332      	adds	r3, #50	@ 0x32
 80081ba:	4a08      	ldr	r2, [pc, #32]	@ (80081dc <UART_SetConfig+0x2d4>)
 80081bc:	fba2 2303 	umull	r2, r3, r2, r3
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	f003 0207 	and.w	r2, r3, #7
 80081c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4422      	add	r2, r4
 80081ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80081d0:	e106      	b.n	80083e0 <UART_SetConfig+0x4d8>
 80081d2:	bf00      	nop
 80081d4:	40011000 	.word	0x40011000
 80081d8:	40011400 	.word	0x40011400
 80081dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80081e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081e4:	2200      	movs	r2, #0
 80081e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80081ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80081ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80081f2:	4642      	mov	r2, r8
 80081f4:	464b      	mov	r3, r9
 80081f6:	1891      	adds	r1, r2, r2
 80081f8:	6239      	str	r1, [r7, #32]
 80081fa:	415b      	adcs	r3, r3
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80081fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008202:	4641      	mov	r1, r8
 8008204:	1854      	adds	r4, r2, r1
 8008206:	4649      	mov	r1, r9
 8008208:	eb43 0501 	adc.w	r5, r3, r1
 800820c:	f04f 0200 	mov.w	r2, #0
 8008210:	f04f 0300 	mov.w	r3, #0
 8008214:	00eb      	lsls	r3, r5, #3
 8008216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800821a:	00e2      	lsls	r2, r4, #3
 800821c:	4614      	mov	r4, r2
 800821e:	461d      	mov	r5, r3
 8008220:	4643      	mov	r3, r8
 8008222:	18e3      	adds	r3, r4, r3
 8008224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008228:	464b      	mov	r3, r9
 800822a:	eb45 0303 	adc.w	r3, r5, r3
 800822e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800823e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008242:	f04f 0200 	mov.w	r2, #0
 8008246:	f04f 0300 	mov.w	r3, #0
 800824a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800824e:	4629      	mov	r1, r5
 8008250:	008b      	lsls	r3, r1, #2
 8008252:	4621      	mov	r1, r4
 8008254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008258:	4621      	mov	r1, r4
 800825a:	008a      	lsls	r2, r1, #2
 800825c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008260:	f7f8 fd32 	bl	8000cc8 <__aeabi_uldivmod>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	4b60      	ldr	r3, [pc, #384]	@ (80083ec <UART_SetConfig+0x4e4>)
 800826a:	fba3 2302 	umull	r2, r3, r3, r2
 800826e:	095b      	lsrs	r3, r3, #5
 8008270:	011c      	lsls	r4, r3, #4
 8008272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008276:	2200      	movs	r2, #0
 8008278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800827c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008284:	4642      	mov	r2, r8
 8008286:	464b      	mov	r3, r9
 8008288:	1891      	adds	r1, r2, r2
 800828a:	61b9      	str	r1, [r7, #24]
 800828c:	415b      	adcs	r3, r3
 800828e:	61fb      	str	r3, [r7, #28]
 8008290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008294:	4641      	mov	r1, r8
 8008296:	1851      	adds	r1, r2, r1
 8008298:	6139      	str	r1, [r7, #16]
 800829a:	4649      	mov	r1, r9
 800829c:	414b      	adcs	r3, r1
 800829e:	617b      	str	r3, [r7, #20]
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80082ac:	4659      	mov	r1, fp
 80082ae:	00cb      	lsls	r3, r1, #3
 80082b0:	4651      	mov	r1, sl
 80082b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082b6:	4651      	mov	r1, sl
 80082b8:	00ca      	lsls	r2, r1, #3
 80082ba:	4610      	mov	r0, r2
 80082bc:	4619      	mov	r1, r3
 80082be:	4603      	mov	r3, r0
 80082c0:	4642      	mov	r2, r8
 80082c2:	189b      	adds	r3, r3, r2
 80082c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80082c8:	464b      	mov	r3, r9
 80082ca:	460a      	mov	r2, r1
 80082cc:	eb42 0303 	adc.w	r3, r2, r3
 80082d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80082d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80082de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80082e0:	f04f 0200 	mov.w	r2, #0
 80082e4:	f04f 0300 	mov.w	r3, #0
 80082e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80082ec:	4649      	mov	r1, r9
 80082ee:	008b      	lsls	r3, r1, #2
 80082f0:	4641      	mov	r1, r8
 80082f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082f6:	4641      	mov	r1, r8
 80082f8:	008a      	lsls	r2, r1, #2
 80082fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80082fe:	f7f8 fce3 	bl	8000cc8 <__aeabi_uldivmod>
 8008302:	4602      	mov	r2, r0
 8008304:	460b      	mov	r3, r1
 8008306:	4611      	mov	r1, r2
 8008308:	4b38      	ldr	r3, [pc, #224]	@ (80083ec <UART_SetConfig+0x4e4>)
 800830a:	fba3 2301 	umull	r2, r3, r3, r1
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	2264      	movs	r2, #100	@ 0x64
 8008312:	fb02 f303 	mul.w	r3, r2, r3
 8008316:	1acb      	subs	r3, r1, r3
 8008318:	011b      	lsls	r3, r3, #4
 800831a:	3332      	adds	r3, #50	@ 0x32
 800831c:	4a33      	ldr	r2, [pc, #204]	@ (80083ec <UART_SetConfig+0x4e4>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	095b      	lsrs	r3, r3, #5
 8008324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008328:	441c      	add	r4, r3
 800832a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800832e:	2200      	movs	r2, #0
 8008330:	673b      	str	r3, [r7, #112]	@ 0x70
 8008332:	677a      	str	r2, [r7, #116]	@ 0x74
 8008334:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008338:	4642      	mov	r2, r8
 800833a:	464b      	mov	r3, r9
 800833c:	1891      	adds	r1, r2, r2
 800833e:	60b9      	str	r1, [r7, #8]
 8008340:	415b      	adcs	r3, r3
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008348:	4641      	mov	r1, r8
 800834a:	1851      	adds	r1, r2, r1
 800834c:	6039      	str	r1, [r7, #0]
 800834e:	4649      	mov	r1, r9
 8008350:	414b      	adcs	r3, r1
 8008352:	607b      	str	r3, [r7, #4]
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008360:	4659      	mov	r1, fp
 8008362:	00cb      	lsls	r3, r1, #3
 8008364:	4651      	mov	r1, sl
 8008366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800836a:	4651      	mov	r1, sl
 800836c:	00ca      	lsls	r2, r1, #3
 800836e:	4610      	mov	r0, r2
 8008370:	4619      	mov	r1, r3
 8008372:	4603      	mov	r3, r0
 8008374:	4642      	mov	r2, r8
 8008376:	189b      	adds	r3, r3, r2
 8008378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800837a:	464b      	mov	r3, r9
 800837c:	460a      	mov	r2, r1
 800837e:	eb42 0303 	adc.w	r3, r2, r3
 8008382:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	663b      	str	r3, [r7, #96]	@ 0x60
 800838e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008390:	f04f 0200 	mov.w	r2, #0
 8008394:	f04f 0300 	mov.w	r3, #0
 8008398:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800839c:	4649      	mov	r1, r9
 800839e:	008b      	lsls	r3, r1, #2
 80083a0:	4641      	mov	r1, r8
 80083a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083a6:	4641      	mov	r1, r8
 80083a8:	008a      	lsls	r2, r1, #2
 80083aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80083ae:	f7f8 fc8b 	bl	8000cc8 <__aeabi_uldivmod>
 80083b2:	4602      	mov	r2, r0
 80083b4:	460b      	mov	r3, r1
 80083b6:	4b0d      	ldr	r3, [pc, #52]	@ (80083ec <UART_SetConfig+0x4e4>)
 80083b8:	fba3 1302 	umull	r1, r3, r3, r2
 80083bc:	095b      	lsrs	r3, r3, #5
 80083be:	2164      	movs	r1, #100	@ 0x64
 80083c0:	fb01 f303 	mul.w	r3, r1, r3
 80083c4:	1ad3      	subs	r3, r2, r3
 80083c6:	011b      	lsls	r3, r3, #4
 80083c8:	3332      	adds	r3, #50	@ 0x32
 80083ca:	4a08      	ldr	r2, [pc, #32]	@ (80083ec <UART_SetConfig+0x4e4>)
 80083cc:	fba2 2303 	umull	r2, r3, r2, r3
 80083d0:	095b      	lsrs	r3, r3, #5
 80083d2:	f003 020f 	and.w	r2, r3, #15
 80083d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4422      	add	r2, r4
 80083de:	609a      	str	r2, [r3, #8]
}
 80083e0:	bf00      	nop
 80083e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80083e6:	46bd      	mov	sp, r7
 80083e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083ec:	51eb851f 	.word	0x51eb851f

080083f0 <__cvt>:
 80083f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80083f4:	ec57 6b10 	vmov	r6, r7, d0
 80083f8:	2f00      	cmp	r7, #0
 80083fa:	460c      	mov	r4, r1
 80083fc:	4619      	mov	r1, r3
 80083fe:	463b      	mov	r3, r7
 8008400:	bfbb      	ittet	lt
 8008402:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008406:	461f      	movlt	r7, r3
 8008408:	2300      	movge	r3, #0
 800840a:	232d      	movlt	r3, #45	@ 0x2d
 800840c:	700b      	strb	r3, [r1, #0]
 800840e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008410:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008414:	4691      	mov	r9, r2
 8008416:	f023 0820 	bic.w	r8, r3, #32
 800841a:	bfbc      	itt	lt
 800841c:	4632      	movlt	r2, r6
 800841e:	4616      	movlt	r6, r2
 8008420:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008424:	d005      	beq.n	8008432 <__cvt+0x42>
 8008426:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800842a:	d100      	bne.n	800842e <__cvt+0x3e>
 800842c:	3401      	adds	r4, #1
 800842e:	2102      	movs	r1, #2
 8008430:	e000      	b.n	8008434 <__cvt+0x44>
 8008432:	2103      	movs	r1, #3
 8008434:	ab03      	add	r3, sp, #12
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	ab02      	add	r3, sp, #8
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	ec47 6b10 	vmov	d0, r6, r7
 8008440:	4653      	mov	r3, sl
 8008442:	4622      	mov	r2, r4
 8008444:	f001 f978 	bl	8009738 <_dtoa_r>
 8008448:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800844c:	4605      	mov	r5, r0
 800844e:	d119      	bne.n	8008484 <__cvt+0x94>
 8008450:	f019 0f01 	tst.w	r9, #1
 8008454:	d00e      	beq.n	8008474 <__cvt+0x84>
 8008456:	eb00 0904 	add.w	r9, r0, r4
 800845a:	2200      	movs	r2, #0
 800845c:	2300      	movs	r3, #0
 800845e:	4630      	mov	r0, r6
 8008460:	4639      	mov	r1, r7
 8008462:	f7f8 fb51 	bl	8000b08 <__aeabi_dcmpeq>
 8008466:	b108      	cbz	r0, 800846c <__cvt+0x7c>
 8008468:	f8cd 900c 	str.w	r9, [sp, #12]
 800846c:	2230      	movs	r2, #48	@ 0x30
 800846e:	9b03      	ldr	r3, [sp, #12]
 8008470:	454b      	cmp	r3, r9
 8008472:	d31e      	bcc.n	80084b2 <__cvt+0xc2>
 8008474:	9b03      	ldr	r3, [sp, #12]
 8008476:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008478:	1b5b      	subs	r3, r3, r5
 800847a:	4628      	mov	r0, r5
 800847c:	6013      	str	r3, [r2, #0]
 800847e:	b004      	add	sp, #16
 8008480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008484:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008488:	eb00 0904 	add.w	r9, r0, r4
 800848c:	d1e5      	bne.n	800845a <__cvt+0x6a>
 800848e:	7803      	ldrb	r3, [r0, #0]
 8008490:	2b30      	cmp	r3, #48	@ 0x30
 8008492:	d10a      	bne.n	80084aa <__cvt+0xba>
 8008494:	2200      	movs	r2, #0
 8008496:	2300      	movs	r3, #0
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 fb34 	bl	8000b08 <__aeabi_dcmpeq>
 80084a0:	b918      	cbnz	r0, 80084aa <__cvt+0xba>
 80084a2:	f1c4 0401 	rsb	r4, r4, #1
 80084a6:	f8ca 4000 	str.w	r4, [sl]
 80084aa:	f8da 3000 	ldr.w	r3, [sl]
 80084ae:	4499      	add	r9, r3
 80084b0:	e7d3      	b.n	800845a <__cvt+0x6a>
 80084b2:	1c59      	adds	r1, r3, #1
 80084b4:	9103      	str	r1, [sp, #12]
 80084b6:	701a      	strb	r2, [r3, #0]
 80084b8:	e7d9      	b.n	800846e <__cvt+0x7e>

080084ba <__exponent>:
 80084ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084bc:	2900      	cmp	r1, #0
 80084be:	bfba      	itte	lt
 80084c0:	4249      	neglt	r1, r1
 80084c2:	232d      	movlt	r3, #45	@ 0x2d
 80084c4:	232b      	movge	r3, #43	@ 0x2b
 80084c6:	2909      	cmp	r1, #9
 80084c8:	7002      	strb	r2, [r0, #0]
 80084ca:	7043      	strb	r3, [r0, #1]
 80084cc:	dd29      	ble.n	8008522 <__exponent+0x68>
 80084ce:	f10d 0307 	add.w	r3, sp, #7
 80084d2:	461d      	mov	r5, r3
 80084d4:	270a      	movs	r7, #10
 80084d6:	461a      	mov	r2, r3
 80084d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80084dc:	fb07 1416 	mls	r4, r7, r6, r1
 80084e0:	3430      	adds	r4, #48	@ 0x30
 80084e2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80084e6:	460c      	mov	r4, r1
 80084e8:	2c63      	cmp	r4, #99	@ 0x63
 80084ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80084ee:	4631      	mov	r1, r6
 80084f0:	dcf1      	bgt.n	80084d6 <__exponent+0x1c>
 80084f2:	3130      	adds	r1, #48	@ 0x30
 80084f4:	1e94      	subs	r4, r2, #2
 80084f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80084fa:	1c41      	adds	r1, r0, #1
 80084fc:	4623      	mov	r3, r4
 80084fe:	42ab      	cmp	r3, r5
 8008500:	d30a      	bcc.n	8008518 <__exponent+0x5e>
 8008502:	f10d 0309 	add.w	r3, sp, #9
 8008506:	1a9b      	subs	r3, r3, r2
 8008508:	42ac      	cmp	r4, r5
 800850a:	bf88      	it	hi
 800850c:	2300      	movhi	r3, #0
 800850e:	3302      	adds	r3, #2
 8008510:	4403      	add	r3, r0
 8008512:	1a18      	subs	r0, r3, r0
 8008514:	b003      	add	sp, #12
 8008516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008518:	f813 6b01 	ldrb.w	r6, [r3], #1
 800851c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008520:	e7ed      	b.n	80084fe <__exponent+0x44>
 8008522:	2330      	movs	r3, #48	@ 0x30
 8008524:	3130      	adds	r1, #48	@ 0x30
 8008526:	7083      	strb	r3, [r0, #2]
 8008528:	70c1      	strb	r1, [r0, #3]
 800852a:	1d03      	adds	r3, r0, #4
 800852c:	e7f1      	b.n	8008512 <__exponent+0x58>
	...

08008530 <_printf_float>:
 8008530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008534:	b08d      	sub	sp, #52	@ 0x34
 8008536:	460c      	mov	r4, r1
 8008538:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800853c:	4616      	mov	r6, r2
 800853e:	461f      	mov	r7, r3
 8008540:	4605      	mov	r5, r0
 8008542:	f000 fff3 	bl	800952c <_localeconv_r>
 8008546:	6803      	ldr	r3, [r0, #0]
 8008548:	9304      	str	r3, [sp, #16]
 800854a:	4618      	mov	r0, r3
 800854c:	f7f7 feb0 	bl	80002b0 <strlen>
 8008550:	2300      	movs	r3, #0
 8008552:	930a      	str	r3, [sp, #40]	@ 0x28
 8008554:	f8d8 3000 	ldr.w	r3, [r8]
 8008558:	9005      	str	r0, [sp, #20]
 800855a:	3307      	adds	r3, #7
 800855c:	f023 0307 	bic.w	r3, r3, #7
 8008560:	f103 0208 	add.w	r2, r3, #8
 8008564:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008568:	f8d4 b000 	ldr.w	fp, [r4]
 800856c:	f8c8 2000 	str.w	r2, [r8]
 8008570:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008574:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008578:	9307      	str	r3, [sp, #28]
 800857a:	f8cd 8018 	str.w	r8, [sp, #24]
 800857e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008586:	4b9c      	ldr	r3, [pc, #624]	@ (80087f8 <_printf_float+0x2c8>)
 8008588:	f04f 32ff 	mov.w	r2, #4294967295
 800858c:	f7f8 faee 	bl	8000b6c <__aeabi_dcmpun>
 8008590:	bb70      	cbnz	r0, 80085f0 <_printf_float+0xc0>
 8008592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008596:	4b98      	ldr	r3, [pc, #608]	@ (80087f8 <_printf_float+0x2c8>)
 8008598:	f04f 32ff 	mov.w	r2, #4294967295
 800859c:	f7f8 fac8 	bl	8000b30 <__aeabi_dcmple>
 80085a0:	bb30      	cbnz	r0, 80085f0 <_printf_float+0xc0>
 80085a2:	2200      	movs	r2, #0
 80085a4:	2300      	movs	r3, #0
 80085a6:	4640      	mov	r0, r8
 80085a8:	4649      	mov	r1, r9
 80085aa:	f7f8 fab7 	bl	8000b1c <__aeabi_dcmplt>
 80085ae:	b110      	cbz	r0, 80085b6 <_printf_float+0x86>
 80085b0:	232d      	movs	r3, #45	@ 0x2d
 80085b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085b6:	4a91      	ldr	r2, [pc, #580]	@ (80087fc <_printf_float+0x2cc>)
 80085b8:	4b91      	ldr	r3, [pc, #580]	@ (8008800 <_printf_float+0x2d0>)
 80085ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80085be:	bf94      	ite	ls
 80085c0:	4690      	movls	r8, r2
 80085c2:	4698      	movhi	r8, r3
 80085c4:	2303      	movs	r3, #3
 80085c6:	6123      	str	r3, [r4, #16]
 80085c8:	f02b 0304 	bic.w	r3, fp, #4
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	f04f 0900 	mov.w	r9, #0
 80085d2:	9700      	str	r7, [sp, #0]
 80085d4:	4633      	mov	r3, r6
 80085d6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80085d8:	4621      	mov	r1, r4
 80085da:	4628      	mov	r0, r5
 80085dc:	f000 f9d2 	bl	8008984 <_printf_common>
 80085e0:	3001      	adds	r0, #1
 80085e2:	f040 808d 	bne.w	8008700 <_printf_float+0x1d0>
 80085e6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ea:	b00d      	add	sp, #52	@ 0x34
 80085ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f0:	4642      	mov	r2, r8
 80085f2:	464b      	mov	r3, r9
 80085f4:	4640      	mov	r0, r8
 80085f6:	4649      	mov	r1, r9
 80085f8:	f7f8 fab8 	bl	8000b6c <__aeabi_dcmpun>
 80085fc:	b140      	cbz	r0, 8008610 <_printf_float+0xe0>
 80085fe:	464b      	mov	r3, r9
 8008600:	2b00      	cmp	r3, #0
 8008602:	bfbc      	itt	lt
 8008604:	232d      	movlt	r3, #45	@ 0x2d
 8008606:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800860a:	4a7e      	ldr	r2, [pc, #504]	@ (8008804 <_printf_float+0x2d4>)
 800860c:	4b7e      	ldr	r3, [pc, #504]	@ (8008808 <_printf_float+0x2d8>)
 800860e:	e7d4      	b.n	80085ba <_printf_float+0x8a>
 8008610:	6863      	ldr	r3, [r4, #4]
 8008612:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008616:	9206      	str	r2, [sp, #24]
 8008618:	1c5a      	adds	r2, r3, #1
 800861a:	d13b      	bne.n	8008694 <_printf_float+0x164>
 800861c:	2306      	movs	r3, #6
 800861e:	6063      	str	r3, [r4, #4]
 8008620:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008624:	2300      	movs	r3, #0
 8008626:	6022      	str	r2, [r4, #0]
 8008628:	9303      	str	r3, [sp, #12]
 800862a:	ab0a      	add	r3, sp, #40	@ 0x28
 800862c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008630:	ab09      	add	r3, sp, #36	@ 0x24
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	6861      	ldr	r1, [r4, #4]
 8008636:	ec49 8b10 	vmov	d0, r8, r9
 800863a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800863e:	4628      	mov	r0, r5
 8008640:	f7ff fed6 	bl	80083f0 <__cvt>
 8008644:	9b06      	ldr	r3, [sp, #24]
 8008646:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008648:	2b47      	cmp	r3, #71	@ 0x47
 800864a:	4680      	mov	r8, r0
 800864c:	d129      	bne.n	80086a2 <_printf_float+0x172>
 800864e:	1cc8      	adds	r0, r1, #3
 8008650:	db02      	blt.n	8008658 <_printf_float+0x128>
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	4299      	cmp	r1, r3
 8008656:	dd41      	ble.n	80086dc <_printf_float+0x1ac>
 8008658:	f1aa 0a02 	sub.w	sl, sl, #2
 800865c:	fa5f fa8a 	uxtb.w	sl, sl
 8008660:	3901      	subs	r1, #1
 8008662:	4652      	mov	r2, sl
 8008664:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008668:	9109      	str	r1, [sp, #36]	@ 0x24
 800866a:	f7ff ff26 	bl	80084ba <__exponent>
 800866e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008670:	1813      	adds	r3, r2, r0
 8008672:	2a01      	cmp	r2, #1
 8008674:	4681      	mov	r9, r0
 8008676:	6123      	str	r3, [r4, #16]
 8008678:	dc02      	bgt.n	8008680 <_printf_float+0x150>
 800867a:	6822      	ldr	r2, [r4, #0]
 800867c:	07d2      	lsls	r2, r2, #31
 800867e:	d501      	bpl.n	8008684 <_printf_float+0x154>
 8008680:	3301      	adds	r3, #1
 8008682:	6123      	str	r3, [r4, #16]
 8008684:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0a2      	beq.n	80085d2 <_printf_float+0xa2>
 800868c:	232d      	movs	r3, #45	@ 0x2d
 800868e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008692:	e79e      	b.n	80085d2 <_printf_float+0xa2>
 8008694:	9a06      	ldr	r2, [sp, #24]
 8008696:	2a47      	cmp	r2, #71	@ 0x47
 8008698:	d1c2      	bne.n	8008620 <_printf_float+0xf0>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d1c0      	bne.n	8008620 <_printf_float+0xf0>
 800869e:	2301      	movs	r3, #1
 80086a0:	e7bd      	b.n	800861e <_printf_float+0xee>
 80086a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80086a6:	d9db      	bls.n	8008660 <_printf_float+0x130>
 80086a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80086ac:	d118      	bne.n	80086e0 <_printf_float+0x1b0>
 80086ae:	2900      	cmp	r1, #0
 80086b0:	6863      	ldr	r3, [r4, #4]
 80086b2:	dd0b      	ble.n	80086cc <_printf_float+0x19c>
 80086b4:	6121      	str	r1, [r4, #16]
 80086b6:	b913      	cbnz	r3, 80086be <_printf_float+0x18e>
 80086b8:	6822      	ldr	r2, [r4, #0]
 80086ba:	07d0      	lsls	r0, r2, #31
 80086bc:	d502      	bpl.n	80086c4 <_printf_float+0x194>
 80086be:	3301      	adds	r3, #1
 80086c0:	440b      	add	r3, r1
 80086c2:	6123      	str	r3, [r4, #16]
 80086c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80086c6:	f04f 0900 	mov.w	r9, #0
 80086ca:	e7db      	b.n	8008684 <_printf_float+0x154>
 80086cc:	b913      	cbnz	r3, 80086d4 <_printf_float+0x1a4>
 80086ce:	6822      	ldr	r2, [r4, #0]
 80086d0:	07d2      	lsls	r2, r2, #31
 80086d2:	d501      	bpl.n	80086d8 <_printf_float+0x1a8>
 80086d4:	3302      	adds	r3, #2
 80086d6:	e7f4      	b.n	80086c2 <_printf_float+0x192>
 80086d8:	2301      	movs	r3, #1
 80086da:	e7f2      	b.n	80086c2 <_printf_float+0x192>
 80086dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80086e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086e2:	4299      	cmp	r1, r3
 80086e4:	db05      	blt.n	80086f2 <_printf_float+0x1c2>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	6121      	str	r1, [r4, #16]
 80086ea:	07d8      	lsls	r0, r3, #31
 80086ec:	d5ea      	bpl.n	80086c4 <_printf_float+0x194>
 80086ee:	1c4b      	adds	r3, r1, #1
 80086f0:	e7e7      	b.n	80086c2 <_printf_float+0x192>
 80086f2:	2900      	cmp	r1, #0
 80086f4:	bfd4      	ite	le
 80086f6:	f1c1 0202 	rsble	r2, r1, #2
 80086fa:	2201      	movgt	r2, #1
 80086fc:	4413      	add	r3, r2
 80086fe:	e7e0      	b.n	80086c2 <_printf_float+0x192>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	055a      	lsls	r2, r3, #21
 8008704:	d407      	bmi.n	8008716 <_printf_float+0x1e6>
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	4642      	mov	r2, r8
 800870a:	4631      	mov	r1, r6
 800870c:	4628      	mov	r0, r5
 800870e:	47b8      	blx	r7
 8008710:	3001      	adds	r0, #1
 8008712:	d12b      	bne.n	800876c <_printf_float+0x23c>
 8008714:	e767      	b.n	80085e6 <_printf_float+0xb6>
 8008716:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800871a:	f240 80dd 	bls.w	80088d8 <_printf_float+0x3a8>
 800871e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008722:	2200      	movs	r2, #0
 8008724:	2300      	movs	r3, #0
 8008726:	f7f8 f9ef 	bl	8000b08 <__aeabi_dcmpeq>
 800872a:	2800      	cmp	r0, #0
 800872c:	d033      	beq.n	8008796 <_printf_float+0x266>
 800872e:	4a37      	ldr	r2, [pc, #220]	@ (800880c <_printf_float+0x2dc>)
 8008730:	2301      	movs	r3, #1
 8008732:	4631      	mov	r1, r6
 8008734:	4628      	mov	r0, r5
 8008736:	47b8      	blx	r7
 8008738:	3001      	adds	r0, #1
 800873a:	f43f af54 	beq.w	80085e6 <_printf_float+0xb6>
 800873e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008742:	4543      	cmp	r3, r8
 8008744:	db02      	blt.n	800874c <_printf_float+0x21c>
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	07d8      	lsls	r0, r3, #31
 800874a:	d50f      	bpl.n	800876c <_printf_float+0x23c>
 800874c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008750:	4631      	mov	r1, r6
 8008752:	4628      	mov	r0, r5
 8008754:	47b8      	blx	r7
 8008756:	3001      	adds	r0, #1
 8008758:	f43f af45 	beq.w	80085e6 <_printf_float+0xb6>
 800875c:	f04f 0900 	mov.w	r9, #0
 8008760:	f108 38ff 	add.w	r8, r8, #4294967295
 8008764:	f104 0a1a 	add.w	sl, r4, #26
 8008768:	45c8      	cmp	r8, r9
 800876a:	dc09      	bgt.n	8008780 <_printf_float+0x250>
 800876c:	6823      	ldr	r3, [r4, #0]
 800876e:	079b      	lsls	r3, r3, #30
 8008770:	f100 8103 	bmi.w	800897a <_printf_float+0x44a>
 8008774:	68e0      	ldr	r0, [r4, #12]
 8008776:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008778:	4298      	cmp	r0, r3
 800877a:	bfb8      	it	lt
 800877c:	4618      	movlt	r0, r3
 800877e:	e734      	b.n	80085ea <_printf_float+0xba>
 8008780:	2301      	movs	r3, #1
 8008782:	4652      	mov	r2, sl
 8008784:	4631      	mov	r1, r6
 8008786:	4628      	mov	r0, r5
 8008788:	47b8      	blx	r7
 800878a:	3001      	adds	r0, #1
 800878c:	f43f af2b 	beq.w	80085e6 <_printf_float+0xb6>
 8008790:	f109 0901 	add.w	r9, r9, #1
 8008794:	e7e8      	b.n	8008768 <_printf_float+0x238>
 8008796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008798:	2b00      	cmp	r3, #0
 800879a:	dc39      	bgt.n	8008810 <_printf_float+0x2e0>
 800879c:	4a1b      	ldr	r2, [pc, #108]	@ (800880c <_printf_float+0x2dc>)
 800879e:	2301      	movs	r3, #1
 80087a0:	4631      	mov	r1, r6
 80087a2:	4628      	mov	r0, r5
 80087a4:	47b8      	blx	r7
 80087a6:	3001      	adds	r0, #1
 80087a8:	f43f af1d 	beq.w	80085e6 <_printf_float+0xb6>
 80087ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80087b0:	ea59 0303 	orrs.w	r3, r9, r3
 80087b4:	d102      	bne.n	80087bc <_printf_float+0x28c>
 80087b6:	6823      	ldr	r3, [r4, #0]
 80087b8:	07d9      	lsls	r1, r3, #31
 80087ba:	d5d7      	bpl.n	800876c <_printf_float+0x23c>
 80087bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087c0:	4631      	mov	r1, r6
 80087c2:	4628      	mov	r0, r5
 80087c4:	47b8      	blx	r7
 80087c6:	3001      	adds	r0, #1
 80087c8:	f43f af0d 	beq.w	80085e6 <_printf_float+0xb6>
 80087cc:	f04f 0a00 	mov.w	sl, #0
 80087d0:	f104 0b1a 	add.w	fp, r4, #26
 80087d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d6:	425b      	negs	r3, r3
 80087d8:	4553      	cmp	r3, sl
 80087da:	dc01      	bgt.n	80087e0 <_printf_float+0x2b0>
 80087dc:	464b      	mov	r3, r9
 80087de:	e793      	b.n	8008708 <_printf_float+0x1d8>
 80087e0:	2301      	movs	r3, #1
 80087e2:	465a      	mov	r2, fp
 80087e4:	4631      	mov	r1, r6
 80087e6:	4628      	mov	r0, r5
 80087e8:	47b8      	blx	r7
 80087ea:	3001      	adds	r0, #1
 80087ec:	f43f aefb 	beq.w	80085e6 <_printf_float+0xb6>
 80087f0:	f10a 0a01 	add.w	sl, sl, #1
 80087f4:	e7ee      	b.n	80087d4 <_printf_float+0x2a4>
 80087f6:	bf00      	nop
 80087f8:	7fefffff 	.word	0x7fefffff
 80087fc:	0800e438 	.word	0x0800e438
 8008800:	0800e43c 	.word	0x0800e43c
 8008804:	0800e440 	.word	0x0800e440
 8008808:	0800e444 	.word	0x0800e444
 800880c:	0800e448 	.word	0x0800e448
 8008810:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008812:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008816:	4553      	cmp	r3, sl
 8008818:	bfa8      	it	ge
 800881a:	4653      	movge	r3, sl
 800881c:	2b00      	cmp	r3, #0
 800881e:	4699      	mov	r9, r3
 8008820:	dc36      	bgt.n	8008890 <_printf_float+0x360>
 8008822:	f04f 0b00 	mov.w	fp, #0
 8008826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800882a:	f104 021a 	add.w	r2, r4, #26
 800882e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008830:	9306      	str	r3, [sp, #24]
 8008832:	eba3 0309 	sub.w	r3, r3, r9
 8008836:	455b      	cmp	r3, fp
 8008838:	dc31      	bgt.n	800889e <_printf_float+0x36e>
 800883a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883c:	459a      	cmp	sl, r3
 800883e:	dc3a      	bgt.n	80088b6 <_printf_float+0x386>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	07da      	lsls	r2, r3, #31
 8008844:	d437      	bmi.n	80088b6 <_printf_float+0x386>
 8008846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008848:	ebaa 0903 	sub.w	r9, sl, r3
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	ebaa 0303 	sub.w	r3, sl, r3
 8008852:	4599      	cmp	r9, r3
 8008854:	bfa8      	it	ge
 8008856:	4699      	movge	r9, r3
 8008858:	f1b9 0f00 	cmp.w	r9, #0
 800885c:	dc33      	bgt.n	80088c6 <_printf_float+0x396>
 800885e:	f04f 0800 	mov.w	r8, #0
 8008862:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008866:	f104 0b1a 	add.w	fp, r4, #26
 800886a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886c:	ebaa 0303 	sub.w	r3, sl, r3
 8008870:	eba3 0309 	sub.w	r3, r3, r9
 8008874:	4543      	cmp	r3, r8
 8008876:	f77f af79 	ble.w	800876c <_printf_float+0x23c>
 800887a:	2301      	movs	r3, #1
 800887c:	465a      	mov	r2, fp
 800887e:	4631      	mov	r1, r6
 8008880:	4628      	mov	r0, r5
 8008882:	47b8      	blx	r7
 8008884:	3001      	adds	r0, #1
 8008886:	f43f aeae 	beq.w	80085e6 <_printf_float+0xb6>
 800888a:	f108 0801 	add.w	r8, r8, #1
 800888e:	e7ec      	b.n	800886a <_printf_float+0x33a>
 8008890:	4642      	mov	r2, r8
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	47b8      	blx	r7
 8008898:	3001      	adds	r0, #1
 800889a:	d1c2      	bne.n	8008822 <_printf_float+0x2f2>
 800889c:	e6a3      	b.n	80085e6 <_printf_float+0xb6>
 800889e:	2301      	movs	r3, #1
 80088a0:	4631      	mov	r1, r6
 80088a2:	4628      	mov	r0, r5
 80088a4:	9206      	str	r2, [sp, #24]
 80088a6:	47b8      	blx	r7
 80088a8:	3001      	adds	r0, #1
 80088aa:	f43f ae9c 	beq.w	80085e6 <_printf_float+0xb6>
 80088ae:	9a06      	ldr	r2, [sp, #24]
 80088b0:	f10b 0b01 	add.w	fp, fp, #1
 80088b4:	e7bb      	b.n	800882e <_printf_float+0x2fe>
 80088b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ba:	4631      	mov	r1, r6
 80088bc:	4628      	mov	r0, r5
 80088be:	47b8      	blx	r7
 80088c0:	3001      	adds	r0, #1
 80088c2:	d1c0      	bne.n	8008846 <_printf_float+0x316>
 80088c4:	e68f      	b.n	80085e6 <_printf_float+0xb6>
 80088c6:	9a06      	ldr	r2, [sp, #24]
 80088c8:	464b      	mov	r3, r9
 80088ca:	4442      	add	r2, r8
 80088cc:	4631      	mov	r1, r6
 80088ce:	4628      	mov	r0, r5
 80088d0:	47b8      	blx	r7
 80088d2:	3001      	adds	r0, #1
 80088d4:	d1c3      	bne.n	800885e <_printf_float+0x32e>
 80088d6:	e686      	b.n	80085e6 <_printf_float+0xb6>
 80088d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80088dc:	f1ba 0f01 	cmp.w	sl, #1
 80088e0:	dc01      	bgt.n	80088e6 <_printf_float+0x3b6>
 80088e2:	07db      	lsls	r3, r3, #31
 80088e4:	d536      	bpl.n	8008954 <_printf_float+0x424>
 80088e6:	2301      	movs	r3, #1
 80088e8:	4642      	mov	r2, r8
 80088ea:	4631      	mov	r1, r6
 80088ec:	4628      	mov	r0, r5
 80088ee:	47b8      	blx	r7
 80088f0:	3001      	adds	r0, #1
 80088f2:	f43f ae78 	beq.w	80085e6 <_printf_float+0xb6>
 80088f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f ae70 	beq.w	80085e6 <_printf_float+0xb6>
 8008906:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800890a:	2200      	movs	r2, #0
 800890c:	2300      	movs	r3, #0
 800890e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008912:	f7f8 f8f9 	bl	8000b08 <__aeabi_dcmpeq>
 8008916:	b9c0      	cbnz	r0, 800894a <_printf_float+0x41a>
 8008918:	4653      	mov	r3, sl
 800891a:	f108 0201 	add.w	r2, r8, #1
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	d10c      	bne.n	8008942 <_printf_float+0x412>
 8008928:	e65d      	b.n	80085e6 <_printf_float+0xb6>
 800892a:	2301      	movs	r3, #1
 800892c:	465a      	mov	r2, fp
 800892e:	4631      	mov	r1, r6
 8008930:	4628      	mov	r0, r5
 8008932:	47b8      	blx	r7
 8008934:	3001      	adds	r0, #1
 8008936:	f43f ae56 	beq.w	80085e6 <_printf_float+0xb6>
 800893a:	f108 0801 	add.w	r8, r8, #1
 800893e:	45d0      	cmp	r8, sl
 8008940:	dbf3      	blt.n	800892a <_printf_float+0x3fa>
 8008942:	464b      	mov	r3, r9
 8008944:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008948:	e6df      	b.n	800870a <_printf_float+0x1da>
 800894a:	f04f 0800 	mov.w	r8, #0
 800894e:	f104 0b1a 	add.w	fp, r4, #26
 8008952:	e7f4      	b.n	800893e <_printf_float+0x40e>
 8008954:	2301      	movs	r3, #1
 8008956:	4642      	mov	r2, r8
 8008958:	e7e1      	b.n	800891e <_printf_float+0x3ee>
 800895a:	2301      	movs	r3, #1
 800895c:	464a      	mov	r2, r9
 800895e:	4631      	mov	r1, r6
 8008960:	4628      	mov	r0, r5
 8008962:	47b8      	blx	r7
 8008964:	3001      	adds	r0, #1
 8008966:	f43f ae3e 	beq.w	80085e6 <_printf_float+0xb6>
 800896a:	f108 0801 	add.w	r8, r8, #1
 800896e:	68e3      	ldr	r3, [r4, #12]
 8008970:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008972:	1a5b      	subs	r3, r3, r1
 8008974:	4543      	cmp	r3, r8
 8008976:	dcf0      	bgt.n	800895a <_printf_float+0x42a>
 8008978:	e6fc      	b.n	8008774 <_printf_float+0x244>
 800897a:	f04f 0800 	mov.w	r8, #0
 800897e:	f104 0919 	add.w	r9, r4, #25
 8008982:	e7f4      	b.n	800896e <_printf_float+0x43e>

08008984 <_printf_common>:
 8008984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	4616      	mov	r6, r2
 800898a:	4698      	mov	r8, r3
 800898c:	688a      	ldr	r2, [r1, #8]
 800898e:	690b      	ldr	r3, [r1, #16]
 8008990:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008994:	4293      	cmp	r3, r2
 8008996:	bfb8      	it	lt
 8008998:	4613      	movlt	r3, r2
 800899a:	6033      	str	r3, [r6, #0]
 800899c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089a0:	4607      	mov	r7, r0
 80089a2:	460c      	mov	r4, r1
 80089a4:	b10a      	cbz	r2, 80089aa <_printf_common+0x26>
 80089a6:	3301      	adds	r3, #1
 80089a8:	6033      	str	r3, [r6, #0]
 80089aa:	6823      	ldr	r3, [r4, #0]
 80089ac:	0699      	lsls	r1, r3, #26
 80089ae:	bf42      	ittt	mi
 80089b0:	6833      	ldrmi	r3, [r6, #0]
 80089b2:	3302      	addmi	r3, #2
 80089b4:	6033      	strmi	r3, [r6, #0]
 80089b6:	6825      	ldr	r5, [r4, #0]
 80089b8:	f015 0506 	ands.w	r5, r5, #6
 80089bc:	d106      	bne.n	80089cc <_printf_common+0x48>
 80089be:	f104 0a19 	add.w	sl, r4, #25
 80089c2:	68e3      	ldr	r3, [r4, #12]
 80089c4:	6832      	ldr	r2, [r6, #0]
 80089c6:	1a9b      	subs	r3, r3, r2
 80089c8:	42ab      	cmp	r3, r5
 80089ca:	dc26      	bgt.n	8008a1a <_printf_common+0x96>
 80089cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089d0:	6822      	ldr	r2, [r4, #0]
 80089d2:	3b00      	subs	r3, #0
 80089d4:	bf18      	it	ne
 80089d6:	2301      	movne	r3, #1
 80089d8:	0692      	lsls	r2, r2, #26
 80089da:	d42b      	bmi.n	8008a34 <_printf_common+0xb0>
 80089dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80089e0:	4641      	mov	r1, r8
 80089e2:	4638      	mov	r0, r7
 80089e4:	47c8      	blx	r9
 80089e6:	3001      	adds	r0, #1
 80089e8:	d01e      	beq.n	8008a28 <_printf_common+0xa4>
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	6922      	ldr	r2, [r4, #16]
 80089ee:	f003 0306 	and.w	r3, r3, #6
 80089f2:	2b04      	cmp	r3, #4
 80089f4:	bf02      	ittt	eq
 80089f6:	68e5      	ldreq	r5, [r4, #12]
 80089f8:	6833      	ldreq	r3, [r6, #0]
 80089fa:	1aed      	subeq	r5, r5, r3
 80089fc:	68a3      	ldr	r3, [r4, #8]
 80089fe:	bf0c      	ite	eq
 8008a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a04:	2500      	movne	r5, #0
 8008a06:	4293      	cmp	r3, r2
 8008a08:	bfc4      	itt	gt
 8008a0a:	1a9b      	subgt	r3, r3, r2
 8008a0c:	18ed      	addgt	r5, r5, r3
 8008a0e:	2600      	movs	r6, #0
 8008a10:	341a      	adds	r4, #26
 8008a12:	42b5      	cmp	r5, r6
 8008a14:	d11a      	bne.n	8008a4c <_printf_common+0xc8>
 8008a16:	2000      	movs	r0, #0
 8008a18:	e008      	b.n	8008a2c <_printf_common+0xa8>
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	4652      	mov	r2, sl
 8008a1e:	4641      	mov	r1, r8
 8008a20:	4638      	mov	r0, r7
 8008a22:	47c8      	blx	r9
 8008a24:	3001      	adds	r0, #1
 8008a26:	d103      	bne.n	8008a30 <_printf_common+0xac>
 8008a28:	f04f 30ff 	mov.w	r0, #4294967295
 8008a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a30:	3501      	adds	r5, #1
 8008a32:	e7c6      	b.n	80089c2 <_printf_common+0x3e>
 8008a34:	18e1      	adds	r1, r4, r3
 8008a36:	1c5a      	adds	r2, r3, #1
 8008a38:	2030      	movs	r0, #48	@ 0x30
 8008a3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a3e:	4422      	add	r2, r4
 8008a40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a48:	3302      	adds	r3, #2
 8008a4a:	e7c7      	b.n	80089dc <_printf_common+0x58>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4622      	mov	r2, r4
 8008a50:	4641      	mov	r1, r8
 8008a52:	4638      	mov	r0, r7
 8008a54:	47c8      	blx	r9
 8008a56:	3001      	adds	r0, #1
 8008a58:	d0e6      	beq.n	8008a28 <_printf_common+0xa4>
 8008a5a:	3601      	adds	r6, #1
 8008a5c:	e7d9      	b.n	8008a12 <_printf_common+0x8e>
	...

08008a60 <_printf_i>:
 8008a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a64:	7e0f      	ldrb	r7, [r1, #24]
 8008a66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a68:	2f78      	cmp	r7, #120	@ 0x78
 8008a6a:	4691      	mov	r9, r2
 8008a6c:	4680      	mov	r8, r0
 8008a6e:	460c      	mov	r4, r1
 8008a70:	469a      	mov	sl, r3
 8008a72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008a76:	d807      	bhi.n	8008a88 <_printf_i+0x28>
 8008a78:	2f62      	cmp	r7, #98	@ 0x62
 8008a7a:	d80a      	bhi.n	8008a92 <_printf_i+0x32>
 8008a7c:	2f00      	cmp	r7, #0
 8008a7e:	f000 80d2 	beq.w	8008c26 <_printf_i+0x1c6>
 8008a82:	2f58      	cmp	r7, #88	@ 0x58
 8008a84:	f000 80b9 	beq.w	8008bfa <_printf_i+0x19a>
 8008a88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008a90:	e03a      	b.n	8008b08 <_printf_i+0xa8>
 8008a92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008a96:	2b15      	cmp	r3, #21
 8008a98:	d8f6      	bhi.n	8008a88 <_printf_i+0x28>
 8008a9a:	a101      	add	r1, pc, #4	@ (adr r1, 8008aa0 <_printf_i+0x40>)
 8008a9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008aa0:	08008af9 	.word	0x08008af9
 8008aa4:	08008b0d 	.word	0x08008b0d
 8008aa8:	08008a89 	.word	0x08008a89
 8008aac:	08008a89 	.word	0x08008a89
 8008ab0:	08008a89 	.word	0x08008a89
 8008ab4:	08008a89 	.word	0x08008a89
 8008ab8:	08008b0d 	.word	0x08008b0d
 8008abc:	08008a89 	.word	0x08008a89
 8008ac0:	08008a89 	.word	0x08008a89
 8008ac4:	08008a89 	.word	0x08008a89
 8008ac8:	08008a89 	.word	0x08008a89
 8008acc:	08008c0d 	.word	0x08008c0d
 8008ad0:	08008b37 	.word	0x08008b37
 8008ad4:	08008bc7 	.word	0x08008bc7
 8008ad8:	08008a89 	.word	0x08008a89
 8008adc:	08008a89 	.word	0x08008a89
 8008ae0:	08008c2f 	.word	0x08008c2f
 8008ae4:	08008a89 	.word	0x08008a89
 8008ae8:	08008b37 	.word	0x08008b37
 8008aec:	08008a89 	.word	0x08008a89
 8008af0:	08008a89 	.word	0x08008a89
 8008af4:	08008bcf 	.word	0x08008bcf
 8008af8:	6833      	ldr	r3, [r6, #0]
 8008afa:	1d1a      	adds	r2, r3, #4
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	6032      	str	r2, [r6, #0]
 8008b00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e09d      	b.n	8008c48 <_printf_i+0x1e8>
 8008b0c:	6833      	ldr	r3, [r6, #0]
 8008b0e:	6820      	ldr	r0, [r4, #0]
 8008b10:	1d19      	adds	r1, r3, #4
 8008b12:	6031      	str	r1, [r6, #0]
 8008b14:	0606      	lsls	r6, r0, #24
 8008b16:	d501      	bpl.n	8008b1c <_printf_i+0xbc>
 8008b18:	681d      	ldr	r5, [r3, #0]
 8008b1a:	e003      	b.n	8008b24 <_printf_i+0xc4>
 8008b1c:	0645      	lsls	r5, r0, #25
 8008b1e:	d5fb      	bpl.n	8008b18 <_printf_i+0xb8>
 8008b20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b24:	2d00      	cmp	r5, #0
 8008b26:	da03      	bge.n	8008b30 <_printf_i+0xd0>
 8008b28:	232d      	movs	r3, #45	@ 0x2d
 8008b2a:	426d      	negs	r5, r5
 8008b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b30:	4859      	ldr	r0, [pc, #356]	@ (8008c98 <_printf_i+0x238>)
 8008b32:	230a      	movs	r3, #10
 8008b34:	e011      	b.n	8008b5a <_printf_i+0xfa>
 8008b36:	6821      	ldr	r1, [r4, #0]
 8008b38:	6833      	ldr	r3, [r6, #0]
 8008b3a:	0608      	lsls	r0, r1, #24
 8008b3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b40:	d402      	bmi.n	8008b48 <_printf_i+0xe8>
 8008b42:	0649      	lsls	r1, r1, #25
 8008b44:	bf48      	it	mi
 8008b46:	b2ad      	uxthmi	r5, r5
 8008b48:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b4a:	4853      	ldr	r0, [pc, #332]	@ (8008c98 <_printf_i+0x238>)
 8008b4c:	6033      	str	r3, [r6, #0]
 8008b4e:	bf14      	ite	ne
 8008b50:	230a      	movne	r3, #10
 8008b52:	2308      	moveq	r3, #8
 8008b54:	2100      	movs	r1, #0
 8008b56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b5a:	6866      	ldr	r6, [r4, #4]
 8008b5c:	60a6      	str	r6, [r4, #8]
 8008b5e:	2e00      	cmp	r6, #0
 8008b60:	bfa2      	ittt	ge
 8008b62:	6821      	ldrge	r1, [r4, #0]
 8008b64:	f021 0104 	bicge.w	r1, r1, #4
 8008b68:	6021      	strge	r1, [r4, #0]
 8008b6a:	b90d      	cbnz	r5, 8008b70 <_printf_i+0x110>
 8008b6c:	2e00      	cmp	r6, #0
 8008b6e:	d04b      	beq.n	8008c08 <_printf_i+0x1a8>
 8008b70:	4616      	mov	r6, r2
 8008b72:	fbb5 f1f3 	udiv	r1, r5, r3
 8008b76:	fb03 5711 	mls	r7, r3, r1, r5
 8008b7a:	5dc7      	ldrb	r7, [r0, r7]
 8008b7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008b80:	462f      	mov	r7, r5
 8008b82:	42bb      	cmp	r3, r7
 8008b84:	460d      	mov	r5, r1
 8008b86:	d9f4      	bls.n	8008b72 <_printf_i+0x112>
 8008b88:	2b08      	cmp	r3, #8
 8008b8a:	d10b      	bne.n	8008ba4 <_printf_i+0x144>
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	07df      	lsls	r7, r3, #31
 8008b90:	d508      	bpl.n	8008ba4 <_printf_i+0x144>
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	6861      	ldr	r1, [r4, #4]
 8008b96:	4299      	cmp	r1, r3
 8008b98:	bfde      	ittt	le
 8008b9a:	2330      	movle	r3, #48	@ 0x30
 8008b9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ba0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ba4:	1b92      	subs	r2, r2, r6
 8008ba6:	6122      	str	r2, [r4, #16]
 8008ba8:	f8cd a000 	str.w	sl, [sp]
 8008bac:	464b      	mov	r3, r9
 8008bae:	aa03      	add	r2, sp, #12
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	f7ff fee6 	bl	8008984 <_printf_common>
 8008bb8:	3001      	adds	r0, #1
 8008bba:	d14a      	bne.n	8008c52 <_printf_i+0x1f2>
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	b004      	add	sp, #16
 8008bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc6:	6823      	ldr	r3, [r4, #0]
 8008bc8:	f043 0320 	orr.w	r3, r3, #32
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	4833      	ldr	r0, [pc, #204]	@ (8008c9c <_printf_i+0x23c>)
 8008bd0:	2778      	movs	r7, #120	@ 0x78
 8008bd2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008bd6:	6823      	ldr	r3, [r4, #0]
 8008bd8:	6831      	ldr	r1, [r6, #0]
 8008bda:	061f      	lsls	r7, r3, #24
 8008bdc:	f851 5b04 	ldr.w	r5, [r1], #4
 8008be0:	d402      	bmi.n	8008be8 <_printf_i+0x188>
 8008be2:	065f      	lsls	r7, r3, #25
 8008be4:	bf48      	it	mi
 8008be6:	b2ad      	uxthmi	r5, r5
 8008be8:	6031      	str	r1, [r6, #0]
 8008bea:	07d9      	lsls	r1, r3, #31
 8008bec:	bf44      	itt	mi
 8008bee:	f043 0320 	orrmi.w	r3, r3, #32
 8008bf2:	6023      	strmi	r3, [r4, #0]
 8008bf4:	b11d      	cbz	r5, 8008bfe <_printf_i+0x19e>
 8008bf6:	2310      	movs	r3, #16
 8008bf8:	e7ac      	b.n	8008b54 <_printf_i+0xf4>
 8008bfa:	4827      	ldr	r0, [pc, #156]	@ (8008c98 <_printf_i+0x238>)
 8008bfc:	e7e9      	b.n	8008bd2 <_printf_i+0x172>
 8008bfe:	6823      	ldr	r3, [r4, #0]
 8008c00:	f023 0320 	bic.w	r3, r3, #32
 8008c04:	6023      	str	r3, [r4, #0]
 8008c06:	e7f6      	b.n	8008bf6 <_printf_i+0x196>
 8008c08:	4616      	mov	r6, r2
 8008c0a:	e7bd      	b.n	8008b88 <_printf_i+0x128>
 8008c0c:	6833      	ldr	r3, [r6, #0]
 8008c0e:	6825      	ldr	r5, [r4, #0]
 8008c10:	6961      	ldr	r1, [r4, #20]
 8008c12:	1d18      	adds	r0, r3, #4
 8008c14:	6030      	str	r0, [r6, #0]
 8008c16:	062e      	lsls	r6, r5, #24
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	d501      	bpl.n	8008c20 <_printf_i+0x1c0>
 8008c1c:	6019      	str	r1, [r3, #0]
 8008c1e:	e002      	b.n	8008c26 <_printf_i+0x1c6>
 8008c20:	0668      	lsls	r0, r5, #25
 8008c22:	d5fb      	bpl.n	8008c1c <_printf_i+0x1bc>
 8008c24:	8019      	strh	r1, [r3, #0]
 8008c26:	2300      	movs	r3, #0
 8008c28:	6123      	str	r3, [r4, #16]
 8008c2a:	4616      	mov	r6, r2
 8008c2c:	e7bc      	b.n	8008ba8 <_printf_i+0x148>
 8008c2e:	6833      	ldr	r3, [r6, #0]
 8008c30:	1d1a      	adds	r2, r3, #4
 8008c32:	6032      	str	r2, [r6, #0]
 8008c34:	681e      	ldr	r6, [r3, #0]
 8008c36:	6862      	ldr	r2, [r4, #4]
 8008c38:	2100      	movs	r1, #0
 8008c3a:	4630      	mov	r0, r6
 8008c3c:	f7f7 fae8 	bl	8000210 <memchr>
 8008c40:	b108      	cbz	r0, 8008c46 <_printf_i+0x1e6>
 8008c42:	1b80      	subs	r0, r0, r6
 8008c44:	6060      	str	r0, [r4, #4]
 8008c46:	6863      	ldr	r3, [r4, #4]
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c50:	e7aa      	b.n	8008ba8 <_printf_i+0x148>
 8008c52:	6923      	ldr	r3, [r4, #16]
 8008c54:	4632      	mov	r2, r6
 8008c56:	4649      	mov	r1, r9
 8008c58:	4640      	mov	r0, r8
 8008c5a:	47d0      	blx	sl
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d0ad      	beq.n	8008bbc <_printf_i+0x15c>
 8008c60:	6823      	ldr	r3, [r4, #0]
 8008c62:	079b      	lsls	r3, r3, #30
 8008c64:	d413      	bmi.n	8008c8e <_printf_i+0x22e>
 8008c66:	68e0      	ldr	r0, [r4, #12]
 8008c68:	9b03      	ldr	r3, [sp, #12]
 8008c6a:	4298      	cmp	r0, r3
 8008c6c:	bfb8      	it	lt
 8008c6e:	4618      	movlt	r0, r3
 8008c70:	e7a6      	b.n	8008bc0 <_printf_i+0x160>
 8008c72:	2301      	movs	r3, #1
 8008c74:	4632      	mov	r2, r6
 8008c76:	4649      	mov	r1, r9
 8008c78:	4640      	mov	r0, r8
 8008c7a:	47d0      	blx	sl
 8008c7c:	3001      	adds	r0, #1
 8008c7e:	d09d      	beq.n	8008bbc <_printf_i+0x15c>
 8008c80:	3501      	adds	r5, #1
 8008c82:	68e3      	ldr	r3, [r4, #12]
 8008c84:	9903      	ldr	r1, [sp, #12]
 8008c86:	1a5b      	subs	r3, r3, r1
 8008c88:	42ab      	cmp	r3, r5
 8008c8a:	dcf2      	bgt.n	8008c72 <_printf_i+0x212>
 8008c8c:	e7eb      	b.n	8008c66 <_printf_i+0x206>
 8008c8e:	2500      	movs	r5, #0
 8008c90:	f104 0619 	add.w	r6, r4, #25
 8008c94:	e7f5      	b.n	8008c82 <_printf_i+0x222>
 8008c96:	bf00      	nop
 8008c98:	0800e44a 	.word	0x0800e44a
 8008c9c:	0800e45b 	.word	0x0800e45b

08008ca0 <_scanf_float>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	b087      	sub	sp, #28
 8008ca6:	4617      	mov	r7, r2
 8008ca8:	9303      	str	r3, [sp, #12]
 8008caa:	688b      	ldr	r3, [r1, #8]
 8008cac:	1e5a      	subs	r2, r3, #1
 8008cae:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008cb2:	bf81      	itttt	hi
 8008cb4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008cb8:	eb03 0b05 	addhi.w	fp, r3, r5
 8008cbc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008cc0:	608b      	strhi	r3, [r1, #8]
 8008cc2:	680b      	ldr	r3, [r1, #0]
 8008cc4:	460a      	mov	r2, r1
 8008cc6:	f04f 0500 	mov.w	r5, #0
 8008cca:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008cce:	f842 3b1c 	str.w	r3, [r2], #28
 8008cd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008cd6:	4680      	mov	r8, r0
 8008cd8:	460c      	mov	r4, r1
 8008cda:	bf98      	it	ls
 8008cdc:	f04f 0b00 	movls.w	fp, #0
 8008ce0:	9201      	str	r2, [sp, #4]
 8008ce2:	4616      	mov	r6, r2
 8008ce4:	46aa      	mov	sl, r5
 8008ce6:	46a9      	mov	r9, r5
 8008ce8:	9502      	str	r5, [sp, #8]
 8008cea:	68a2      	ldr	r2, [r4, #8]
 8008cec:	b152      	cbz	r2, 8008d04 <_scanf_float+0x64>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	781b      	ldrb	r3, [r3, #0]
 8008cf2:	2b4e      	cmp	r3, #78	@ 0x4e
 8008cf4:	d864      	bhi.n	8008dc0 <_scanf_float+0x120>
 8008cf6:	2b40      	cmp	r3, #64	@ 0x40
 8008cf8:	d83c      	bhi.n	8008d74 <_scanf_float+0xd4>
 8008cfa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008cfe:	b2c8      	uxtb	r0, r1
 8008d00:	280e      	cmp	r0, #14
 8008d02:	d93a      	bls.n	8008d7a <_scanf_float+0xda>
 8008d04:	f1b9 0f00 	cmp.w	r9, #0
 8008d08:	d003      	beq.n	8008d12 <_scanf_float+0x72>
 8008d0a:	6823      	ldr	r3, [r4, #0]
 8008d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d16:	f1ba 0f01 	cmp.w	sl, #1
 8008d1a:	f200 8117 	bhi.w	8008f4c <_scanf_float+0x2ac>
 8008d1e:	9b01      	ldr	r3, [sp, #4]
 8008d20:	429e      	cmp	r6, r3
 8008d22:	f200 8108 	bhi.w	8008f36 <_scanf_float+0x296>
 8008d26:	2001      	movs	r0, #1
 8008d28:	b007      	add	sp, #28
 8008d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d2e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008d32:	2a0d      	cmp	r2, #13
 8008d34:	d8e6      	bhi.n	8008d04 <_scanf_float+0x64>
 8008d36:	a101      	add	r1, pc, #4	@ (adr r1, 8008d3c <_scanf_float+0x9c>)
 8008d38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008d3c:	08008e83 	.word	0x08008e83
 8008d40:	08008d05 	.word	0x08008d05
 8008d44:	08008d05 	.word	0x08008d05
 8008d48:	08008d05 	.word	0x08008d05
 8008d4c:	08008ee3 	.word	0x08008ee3
 8008d50:	08008ebb 	.word	0x08008ebb
 8008d54:	08008d05 	.word	0x08008d05
 8008d58:	08008d05 	.word	0x08008d05
 8008d5c:	08008e91 	.word	0x08008e91
 8008d60:	08008d05 	.word	0x08008d05
 8008d64:	08008d05 	.word	0x08008d05
 8008d68:	08008d05 	.word	0x08008d05
 8008d6c:	08008d05 	.word	0x08008d05
 8008d70:	08008e49 	.word	0x08008e49
 8008d74:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008d78:	e7db      	b.n	8008d32 <_scanf_float+0x92>
 8008d7a:	290e      	cmp	r1, #14
 8008d7c:	d8c2      	bhi.n	8008d04 <_scanf_float+0x64>
 8008d7e:	a001      	add	r0, pc, #4	@ (adr r0, 8008d84 <_scanf_float+0xe4>)
 8008d80:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008d84:	08008e39 	.word	0x08008e39
 8008d88:	08008d05 	.word	0x08008d05
 8008d8c:	08008e39 	.word	0x08008e39
 8008d90:	08008ecf 	.word	0x08008ecf
 8008d94:	08008d05 	.word	0x08008d05
 8008d98:	08008de1 	.word	0x08008de1
 8008d9c:	08008e1f 	.word	0x08008e1f
 8008da0:	08008e1f 	.word	0x08008e1f
 8008da4:	08008e1f 	.word	0x08008e1f
 8008da8:	08008e1f 	.word	0x08008e1f
 8008dac:	08008e1f 	.word	0x08008e1f
 8008db0:	08008e1f 	.word	0x08008e1f
 8008db4:	08008e1f 	.word	0x08008e1f
 8008db8:	08008e1f 	.word	0x08008e1f
 8008dbc:	08008e1f 	.word	0x08008e1f
 8008dc0:	2b6e      	cmp	r3, #110	@ 0x6e
 8008dc2:	d809      	bhi.n	8008dd8 <_scanf_float+0x138>
 8008dc4:	2b60      	cmp	r3, #96	@ 0x60
 8008dc6:	d8b2      	bhi.n	8008d2e <_scanf_float+0x8e>
 8008dc8:	2b54      	cmp	r3, #84	@ 0x54
 8008dca:	d07b      	beq.n	8008ec4 <_scanf_float+0x224>
 8008dcc:	2b59      	cmp	r3, #89	@ 0x59
 8008dce:	d199      	bne.n	8008d04 <_scanf_float+0x64>
 8008dd0:	2d07      	cmp	r5, #7
 8008dd2:	d197      	bne.n	8008d04 <_scanf_float+0x64>
 8008dd4:	2508      	movs	r5, #8
 8008dd6:	e02c      	b.n	8008e32 <_scanf_float+0x192>
 8008dd8:	2b74      	cmp	r3, #116	@ 0x74
 8008dda:	d073      	beq.n	8008ec4 <_scanf_float+0x224>
 8008ddc:	2b79      	cmp	r3, #121	@ 0x79
 8008dde:	e7f6      	b.n	8008dce <_scanf_float+0x12e>
 8008de0:	6821      	ldr	r1, [r4, #0]
 8008de2:	05c8      	lsls	r0, r1, #23
 8008de4:	d51b      	bpl.n	8008e1e <_scanf_float+0x17e>
 8008de6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008dea:	6021      	str	r1, [r4, #0]
 8008dec:	f109 0901 	add.w	r9, r9, #1
 8008df0:	f1bb 0f00 	cmp.w	fp, #0
 8008df4:	d003      	beq.n	8008dfe <_scanf_float+0x15e>
 8008df6:	3201      	adds	r2, #1
 8008df8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008dfc:	60a2      	str	r2, [r4, #8]
 8008dfe:	68a3      	ldr	r3, [r4, #8]
 8008e00:	3b01      	subs	r3, #1
 8008e02:	60a3      	str	r3, [r4, #8]
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	3301      	adds	r3, #1
 8008e08:	6123      	str	r3, [r4, #16]
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	3b01      	subs	r3, #1
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
 8008e12:	f340 8087 	ble.w	8008f24 <_scanf_float+0x284>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	603b      	str	r3, [r7, #0]
 8008e1c:	e765      	b.n	8008cea <_scanf_float+0x4a>
 8008e1e:	eb1a 0105 	adds.w	r1, sl, r5
 8008e22:	f47f af6f 	bne.w	8008d04 <_scanf_float+0x64>
 8008e26:	6822      	ldr	r2, [r4, #0]
 8008e28:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008e2c:	6022      	str	r2, [r4, #0]
 8008e2e:	460d      	mov	r5, r1
 8008e30:	468a      	mov	sl, r1
 8008e32:	f806 3b01 	strb.w	r3, [r6], #1
 8008e36:	e7e2      	b.n	8008dfe <_scanf_float+0x15e>
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	0610      	lsls	r0, r2, #24
 8008e3c:	f57f af62 	bpl.w	8008d04 <_scanf_float+0x64>
 8008e40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008e44:	6022      	str	r2, [r4, #0]
 8008e46:	e7f4      	b.n	8008e32 <_scanf_float+0x192>
 8008e48:	f1ba 0f00 	cmp.w	sl, #0
 8008e4c:	d10e      	bne.n	8008e6c <_scanf_float+0x1cc>
 8008e4e:	f1b9 0f00 	cmp.w	r9, #0
 8008e52:	d10e      	bne.n	8008e72 <_scanf_float+0x1d2>
 8008e54:	6822      	ldr	r2, [r4, #0]
 8008e56:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008e5a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008e5e:	d108      	bne.n	8008e72 <_scanf_float+0x1d2>
 8008e60:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e64:	6022      	str	r2, [r4, #0]
 8008e66:	f04f 0a01 	mov.w	sl, #1
 8008e6a:	e7e2      	b.n	8008e32 <_scanf_float+0x192>
 8008e6c:	f1ba 0f02 	cmp.w	sl, #2
 8008e70:	d055      	beq.n	8008f1e <_scanf_float+0x27e>
 8008e72:	2d01      	cmp	r5, #1
 8008e74:	d002      	beq.n	8008e7c <_scanf_float+0x1dc>
 8008e76:	2d04      	cmp	r5, #4
 8008e78:	f47f af44 	bne.w	8008d04 <_scanf_float+0x64>
 8008e7c:	3501      	adds	r5, #1
 8008e7e:	b2ed      	uxtb	r5, r5
 8008e80:	e7d7      	b.n	8008e32 <_scanf_float+0x192>
 8008e82:	f1ba 0f01 	cmp.w	sl, #1
 8008e86:	f47f af3d 	bne.w	8008d04 <_scanf_float+0x64>
 8008e8a:	f04f 0a02 	mov.w	sl, #2
 8008e8e:	e7d0      	b.n	8008e32 <_scanf_float+0x192>
 8008e90:	b97d      	cbnz	r5, 8008eb2 <_scanf_float+0x212>
 8008e92:	f1b9 0f00 	cmp.w	r9, #0
 8008e96:	f47f af38 	bne.w	8008d0a <_scanf_float+0x6a>
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008ea0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008ea4:	f040 8108 	bne.w	80090b8 <_scanf_float+0x418>
 8008ea8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	2501      	movs	r5, #1
 8008eb0:	e7bf      	b.n	8008e32 <_scanf_float+0x192>
 8008eb2:	2d03      	cmp	r5, #3
 8008eb4:	d0e2      	beq.n	8008e7c <_scanf_float+0x1dc>
 8008eb6:	2d05      	cmp	r5, #5
 8008eb8:	e7de      	b.n	8008e78 <_scanf_float+0x1d8>
 8008eba:	2d02      	cmp	r5, #2
 8008ebc:	f47f af22 	bne.w	8008d04 <_scanf_float+0x64>
 8008ec0:	2503      	movs	r5, #3
 8008ec2:	e7b6      	b.n	8008e32 <_scanf_float+0x192>
 8008ec4:	2d06      	cmp	r5, #6
 8008ec6:	f47f af1d 	bne.w	8008d04 <_scanf_float+0x64>
 8008eca:	2507      	movs	r5, #7
 8008ecc:	e7b1      	b.n	8008e32 <_scanf_float+0x192>
 8008ece:	6822      	ldr	r2, [r4, #0]
 8008ed0:	0591      	lsls	r1, r2, #22
 8008ed2:	f57f af17 	bpl.w	8008d04 <_scanf_float+0x64>
 8008ed6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008eda:	6022      	str	r2, [r4, #0]
 8008edc:	f8cd 9008 	str.w	r9, [sp, #8]
 8008ee0:	e7a7      	b.n	8008e32 <_scanf_float+0x192>
 8008ee2:	6822      	ldr	r2, [r4, #0]
 8008ee4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008ee8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008eec:	d006      	beq.n	8008efc <_scanf_float+0x25c>
 8008eee:	0550      	lsls	r0, r2, #21
 8008ef0:	f57f af08 	bpl.w	8008d04 <_scanf_float+0x64>
 8008ef4:	f1b9 0f00 	cmp.w	r9, #0
 8008ef8:	f000 80de 	beq.w	80090b8 <_scanf_float+0x418>
 8008efc:	0591      	lsls	r1, r2, #22
 8008efe:	bf58      	it	pl
 8008f00:	9902      	ldrpl	r1, [sp, #8]
 8008f02:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f06:	bf58      	it	pl
 8008f08:	eba9 0101 	subpl.w	r1, r9, r1
 8008f0c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008f10:	bf58      	it	pl
 8008f12:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008f16:	6022      	str	r2, [r4, #0]
 8008f18:	f04f 0900 	mov.w	r9, #0
 8008f1c:	e789      	b.n	8008e32 <_scanf_float+0x192>
 8008f1e:	f04f 0a03 	mov.w	sl, #3
 8008f22:	e786      	b.n	8008e32 <_scanf_float+0x192>
 8008f24:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008f28:	4639      	mov	r1, r7
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4798      	blx	r3
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f aedb 	beq.w	8008cea <_scanf_float+0x4a>
 8008f34:	e6e6      	b.n	8008d04 <_scanf_float+0x64>
 8008f36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f3e:	463a      	mov	r2, r7
 8008f40:	4640      	mov	r0, r8
 8008f42:	4798      	blx	r3
 8008f44:	6923      	ldr	r3, [r4, #16]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	6123      	str	r3, [r4, #16]
 8008f4a:	e6e8      	b.n	8008d1e <_scanf_float+0x7e>
 8008f4c:	1e6b      	subs	r3, r5, #1
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	d824      	bhi.n	8008f9c <_scanf_float+0x2fc>
 8008f52:	2d02      	cmp	r5, #2
 8008f54:	d836      	bhi.n	8008fc4 <_scanf_float+0x324>
 8008f56:	9b01      	ldr	r3, [sp, #4]
 8008f58:	429e      	cmp	r6, r3
 8008f5a:	f67f aee4 	bls.w	8008d26 <_scanf_float+0x86>
 8008f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f66:	463a      	mov	r2, r7
 8008f68:	4640      	mov	r0, r8
 8008f6a:	4798      	blx	r3
 8008f6c:	6923      	ldr	r3, [r4, #16]
 8008f6e:	3b01      	subs	r3, #1
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	e7f0      	b.n	8008f56 <_scanf_float+0x2b6>
 8008f74:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f78:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008f7c:	463a      	mov	r2, r7
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4798      	blx	r3
 8008f82:	6923      	ldr	r3, [r4, #16]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	6123      	str	r3, [r4, #16]
 8008f88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f8c:	fa5f fa8a 	uxtb.w	sl, sl
 8008f90:	f1ba 0f02 	cmp.w	sl, #2
 8008f94:	d1ee      	bne.n	8008f74 <_scanf_float+0x2d4>
 8008f96:	3d03      	subs	r5, #3
 8008f98:	b2ed      	uxtb	r5, r5
 8008f9a:	1b76      	subs	r6, r6, r5
 8008f9c:	6823      	ldr	r3, [r4, #0]
 8008f9e:	05da      	lsls	r2, r3, #23
 8008fa0:	d530      	bpl.n	8009004 <_scanf_float+0x364>
 8008fa2:	055b      	lsls	r3, r3, #21
 8008fa4:	d511      	bpl.n	8008fca <_scanf_float+0x32a>
 8008fa6:	9b01      	ldr	r3, [sp, #4]
 8008fa8:	429e      	cmp	r6, r3
 8008faa:	f67f aebc 	bls.w	8008d26 <_scanf_float+0x86>
 8008fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008fb6:	463a      	mov	r2, r7
 8008fb8:	4640      	mov	r0, r8
 8008fba:	4798      	blx	r3
 8008fbc:	6923      	ldr	r3, [r4, #16]
 8008fbe:	3b01      	subs	r3, #1
 8008fc0:	6123      	str	r3, [r4, #16]
 8008fc2:	e7f0      	b.n	8008fa6 <_scanf_float+0x306>
 8008fc4:	46aa      	mov	sl, r5
 8008fc6:	46b3      	mov	fp, r6
 8008fc8:	e7de      	b.n	8008f88 <_scanf_float+0x2e8>
 8008fca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	2965      	cmp	r1, #101	@ 0x65
 8008fd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008fd6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008fda:	6123      	str	r3, [r4, #16]
 8008fdc:	d00c      	beq.n	8008ff8 <_scanf_float+0x358>
 8008fde:	2945      	cmp	r1, #69	@ 0x45
 8008fe0:	d00a      	beq.n	8008ff8 <_scanf_float+0x358>
 8008fe2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008fe6:	463a      	mov	r2, r7
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4798      	blx	r3
 8008fec:	6923      	ldr	r3, [r4, #16]
 8008fee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	1eb5      	subs	r5, r6, #2
 8008ff6:	6123      	str	r3, [r4, #16]
 8008ff8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ffc:	463a      	mov	r2, r7
 8008ffe:	4640      	mov	r0, r8
 8009000:	4798      	blx	r3
 8009002:	462e      	mov	r6, r5
 8009004:	6822      	ldr	r2, [r4, #0]
 8009006:	f012 0210 	ands.w	r2, r2, #16
 800900a:	d001      	beq.n	8009010 <_scanf_float+0x370>
 800900c:	2000      	movs	r0, #0
 800900e:	e68b      	b.n	8008d28 <_scanf_float+0x88>
 8009010:	7032      	strb	r2, [r6, #0]
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800901c:	d11c      	bne.n	8009058 <_scanf_float+0x3b8>
 800901e:	9b02      	ldr	r3, [sp, #8]
 8009020:	454b      	cmp	r3, r9
 8009022:	eba3 0209 	sub.w	r2, r3, r9
 8009026:	d123      	bne.n	8009070 <_scanf_float+0x3d0>
 8009028:	9901      	ldr	r1, [sp, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	4640      	mov	r0, r8
 800902e:	f002 fcfb 	bl	800ba28 <_strtod_r>
 8009032:	9b03      	ldr	r3, [sp, #12]
 8009034:	6821      	ldr	r1, [r4, #0]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f011 0f02 	tst.w	r1, #2
 800903c:	ec57 6b10 	vmov	r6, r7, d0
 8009040:	f103 0204 	add.w	r2, r3, #4
 8009044:	d01f      	beq.n	8009086 <_scanf_float+0x3e6>
 8009046:	9903      	ldr	r1, [sp, #12]
 8009048:	600a      	str	r2, [r1, #0]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	e9c3 6700 	strd	r6, r7, [r3]
 8009050:	68e3      	ldr	r3, [r4, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60e3      	str	r3, [r4, #12]
 8009056:	e7d9      	b.n	800900c <_scanf_float+0x36c>
 8009058:	9b04      	ldr	r3, [sp, #16]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d0e4      	beq.n	8009028 <_scanf_float+0x388>
 800905e:	9905      	ldr	r1, [sp, #20]
 8009060:	230a      	movs	r3, #10
 8009062:	3101      	adds	r1, #1
 8009064:	4640      	mov	r0, r8
 8009066:	f002 fd5f 	bl	800bb28 <_strtol_r>
 800906a:	9b04      	ldr	r3, [sp, #16]
 800906c:	9e05      	ldr	r6, [sp, #20]
 800906e:	1ac2      	subs	r2, r0, r3
 8009070:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009074:	429e      	cmp	r6, r3
 8009076:	bf28      	it	cs
 8009078:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800907c:	4910      	ldr	r1, [pc, #64]	@ (80090c0 <_scanf_float+0x420>)
 800907e:	4630      	mov	r0, r6
 8009080:	f000 f954 	bl	800932c <siprintf>
 8009084:	e7d0      	b.n	8009028 <_scanf_float+0x388>
 8009086:	f011 0f04 	tst.w	r1, #4
 800908a:	9903      	ldr	r1, [sp, #12]
 800908c:	600a      	str	r2, [r1, #0]
 800908e:	d1dc      	bne.n	800904a <_scanf_float+0x3aa>
 8009090:	681d      	ldr	r5, [r3, #0]
 8009092:	4632      	mov	r2, r6
 8009094:	463b      	mov	r3, r7
 8009096:	4630      	mov	r0, r6
 8009098:	4639      	mov	r1, r7
 800909a:	f7f7 fd67 	bl	8000b6c <__aeabi_dcmpun>
 800909e:	b128      	cbz	r0, 80090ac <_scanf_float+0x40c>
 80090a0:	4808      	ldr	r0, [pc, #32]	@ (80090c4 <_scanf_float+0x424>)
 80090a2:	f000 fabb 	bl	800961c <nanf>
 80090a6:	ed85 0a00 	vstr	s0, [r5]
 80090aa:	e7d1      	b.n	8009050 <_scanf_float+0x3b0>
 80090ac:	4630      	mov	r0, r6
 80090ae:	4639      	mov	r1, r7
 80090b0:	f7f7 fdba 	bl	8000c28 <__aeabi_d2f>
 80090b4:	6028      	str	r0, [r5, #0]
 80090b6:	e7cb      	b.n	8009050 <_scanf_float+0x3b0>
 80090b8:	f04f 0900 	mov.w	r9, #0
 80090bc:	e629      	b.n	8008d12 <_scanf_float+0x72>
 80090be:	bf00      	nop
 80090c0:	0800e46c 	.word	0x0800e46c
 80090c4:	0800e805 	.word	0x0800e805

080090c8 <std>:
 80090c8:	2300      	movs	r3, #0
 80090ca:	b510      	push	{r4, lr}
 80090cc:	4604      	mov	r4, r0
 80090ce:	e9c0 3300 	strd	r3, r3, [r0]
 80090d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090d6:	6083      	str	r3, [r0, #8]
 80090d8:	8181      	strh	r1, [r0, #12]
 80090da:	6643      	str	r3, [r0, #100]	@ 0x64
 80090dc:	81c2      	strh	r2, [r0, #14]
 80090de:	6183      	str	r3, [r0, #24]
 80090e0:	4619      	mov	r1, r3
 80090e2:	2208      	movs	r2, #8
 80090e4:	305c      	adds	r0, #92	@ 0x5c
 80090e6:	f000 fa19 	bl	800951c <memset>
 80090ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <std+0x58>)
 80090ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80090ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <std+0x5c>)
 80090f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80090f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009128 <std+0x60>)
 80090f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090f6:	4b0d      	ldr	r3, [pc, #52]	@ (800912c <std+0x64>)
 80090f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80090fa:	4b0d      	ldr	r3, [pc, #52]	@ (8009130 <std+0x68>)
 80090fc:	6224      	str	r4, [r4, #32]
 80090fe:	429c      	cmp	r4, r3
 8009100:	d006      	beq.n	8009110 <std+0x48>
 8009102:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009106:	4294      	cmp	r4, r2
 8009108:	d002      	beq.n	8009110 <std+0x48>
 800910a:	33d0      	adds	r3, #208	@ 0xd0
 800910c:	429c      	cmp	r4, r3
 800910e:	d105      	bne.n	800911c <std+0x54>
 8009110:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009118:	f000 ba7c 	b.w	8009614 <__retarget_lock_init_recursive>
 800911c:	bd10      	pop	{r4, pc}
 800911e:	bf00      	nop
 8009120:	0800936d 	.word	0x0800936d
 8009124:	0800938f 	.word	0x0800938f
 8009128:	080093c7 	.word	0x080093c7
 800912c:	080093eb 	.word	0x080093eb
 8009130:	200006ec 	.word	0x200006ec

08009134 <stdio_exit_handler>:
 8009134:	4a02      	ldr	r2, [pc, #8]	@ (8009140 <stdio_exit_handler+0xc>)
 8009136:	4903      	ldr	r1, [pc, #12]	@ (8009144 <stdio_exit_handler+0x10>)
 8009138:	4803      	ldr	r0, [pc, #12]	@ (8009148 <stdio_exit_handler+0x14>)
 800913a:	f000 b869 	b.w	8009210 <_fwalk_sglue>
 800913e:	bf00      	nop
 8009140:	2000001c 	.word	0x2000001c
 8009144:	0800c169 	.word	0x0800c169
 8009148:	2000002c 	.word	0x2000002c

0800914c <cleanup_stdio>:
 800914c:	6841      	ldr	r1, [r0, #4]
 800914e:	4b0c      	ldr	r3, [pc, #48]	@ (8009180 <cleanup_stdio+0x34>)
 8009150:	4299      	cmp	r1, r3
 8009152:	b510      	push	{r4, lr}
 8009154:	4604      	mov	r4, r0
 8009156:	d001      	beq.n	800915c <cleanup_stdio+0x10>
 8009158:	f003 f806 	bl	800c168 <_fflush_r>
 800915c:	68a1      	ldr	r1, [r4, #8]
 800915e:	4b09      	ldr	r3, [pc, #36]	@ (8009184 <cleanup_stdio+0x38>)
 8009160:	4299      	cmp	r1, r3
 8009162:	d002      	beq.n	800916a <cleanup_stdio+0x1e>
 8009164:	4620      	mov	r0, r4
 8009166:	f002 ffff 	bl	800c168 <_fflush_r>
 800916a:	68e1      	ldr	r1, [r4, #12]
 800916c:	4b06      	ldr	r3, [pc, #24]	@ (8009188 <cleanup_stdio+0x3c>)
 800916e:	4299      	cmp	r1, r3
 8009170:	d004      	beq.n	800917c <cleanup_stdio+0x30>
 8009172:	4620      	mov	r0, r4
 8009174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009178:	f002 bff6 	b.w	800c168 <_fflush_r>
 800917c:	bd10      	pop	{r4, pc}
 800917e:	bf00      	nop
 8009180:	200006ec 	.word	0x200006ec
 8009184:	20000754 	.word	0x20000754
 8009188:	200007bc 	.word	0x200007bc

0800918c <global_stdio_init.part.0>:
 800918c:	b510      	push	{r4, lr}
 800918e:	4b0b      	ldr	r3, [pc, #44]	@ (80091bc <global_stdio_init.part.0+0x30>)
 8009190:	4c0b      	ldr	r4, [pc, #44]	@ (80091c0 <global_stdio_init.part.0+0x34>)
 8009192:	4a0c      	ldr	r2, [pc, #48]	@ (80091c4 <global_stdio_init.part.0+0x38>)
 8009194:	601a      	str	r2, [r3, #0]
 8009196:	4620      	mov	r0, r4
 8009198:	2200      	movs	r2, #0
 800919a:	2104      	movs	r1, #4
 800919c:	f7ff ff94 	bl	80090c8 <std>
 80091a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091a4:	2201      	movs	r2, #1
 80091a6:	2109      	movs	r1, #9
 80091a8:	f7ff ff8e 	bl	80090c8 <std>
 80091ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091b0:	2202      	movs	r2, #2
 80091b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b6:	2112      	movs	r1, #18
 80091b8:	f7ff bf86 	b.w	80090c8 <std>
 80091bc:	20000824 	.word	0x20000824
 80091c0:	200006ec 	.word	0x200006ec
 80091c4:	08009135 	.word	0x08009135

080091c8 <__sfp_lock_acquire>:
 80091c8:	4801      	ldr	r0, [pc, #4]	@ (80091d0 <__sfp_lock_acquire+0x8>)
 80091ca:	f000 ba24 	b.w	8009616 <__retarget_lock_acquire_recursive>
 80091ce:	bf00      	nop
 80091d0:	2000082d 	.word	0x2000082d

080091d4 <__sfp_lock_release>:
 80091d4:	4801      	ldr	r0, [pc, #4]	@ (80091dc <__sfp_lock_release+0x8>)
 80091d6:	f000 ba1f 	b.w	8009618 <__retarget_lock_release_recursive>
 80091da:	bf00      	nop
 80091dc:	2000082d 	.word	0x2000082d

080091e0 <__sinit>:
 80091e0:	b510      	push	{r4, lr}
 80091e2:	4604      	mov	r4, r0
 80091e4:	f7ff fff0 	bl	80091c8 <__sfp_lock_acquire>
 80091e8:	6a23      	ldr	r3, [r4, #32]
 80091ea:	b11b      	cbz	r3, 80091f4 <__sinit+0x14>
 80091ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f0:	f7ff bff0 	b.w	80091d4 <__sfp_lock_release>
 80091f4:	4b04      	ldr	r3, [pc, #16]	@ (8009208 <__sinit+0x28>)
 80091f6:	6223      	str	r3, [r4, #32]
 80091f8:	4b04      	ldr	r3, [pc, #16]	@ (800920c <__sinit+0x2c>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1f5      	bne.n	80091ec <__sinit+0xc>
 8009200:	f7ff ffc4 	bl	800918c <global_stdio_init.part.0>
 8009204:	e7f2      	b.n	80091ec <__sinit+0xc>
 8009206:	bf00      	nop
 8009208:	0800914d 	.word	0x0800914d
 800920c:	20000824 	.word	0x20000824

08009210 <_fwalk_sglue>:
 8009210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009214:	4607      	mov	r7, r0
 8009216:	4688      	mov	r8, r1
 8009218:	4614      	mov	r4, r2
 800921a:	2600      	movs	r6, #0
 800921c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009220:	f1b9 0901 	subs.w	r9, r9, #1
 8009224:	d505      	bpl.n	8009232 <_fwalk_sglue+0x22>
 8009226:	6824      	ldr	r4, [r4, #0]
 8009228:	2c00      	cmp	r4, #0
 800922a:	d1f7      	bne.n	800921c <_fwalk_sglue+0xc>
 800922c:	4630      	mov	r0, r6
 800922e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009232:	89ab      	ldrh	r3, [r5, #12]
 8009234:	2b01      	cmp	r3, #1
 8009236:	d907      	bls.n	8009248 <_fwalk_sglue+0x38>
 8009238:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800923c:	3301      	adds	r3, #1
 800923e:	d003      	beq.n	8009248 <_fwalk_sglue+0x38>
 8009240:	4629      	mov	r1, r5
 8009242:	4638      	mov	r0, r7
 8009244:	47c0      	blx	r8
 8009246:	4306      	orrs	r6, r0
 8009248:	3568      	adds	r5, #104	@ 0x68
 800924a:	e7e9      	b.n	8009220 <_fwalk_sglue+0x10>

0800924c <iprintf>:
 800924c:	b40f      	push	{r0, r1, r2, r3}
 800924e:	b507      	push	{r0, r1, r2, lr}
 8009250:	4906      	ldr	r1, [pc, #24]	@ (800926c <iprintf+0x20>)
 8009252:	ab04      	add	r3, sp, #16
 8009254:	6808      	ldr	r0, [r1, #0]
 8009256:	f853 2b04 	ldr.w	r2, [r3], #4
 800925a:	6881      	ldr	r1, [r0, #8]
 800925c:	9301      	str	r3, [sp, #4]
 800925e:	f002 fde7 	bl	800be30 <_vfiprintf_r>
 8009262:	b003      	add	sp, #12
 8009264:	f85d eb04 	ldr.w	lr, [sp], #4
 8009268:	b004      	add	sp, #16
 800926a:	4770      	bx	lr
 800926c:	20000028 	.word	0x20000028

08009270 <_puts_r>:
 8009270:	6a03      	ldr	r3, [r0, #32]
 8009272:	b570      	push	{r4, r5, r6, lr}
 8009274:	6884      	ldr	r4, [r0, #8]
 8009276:	4605      	mov	r5, r0
 8009278:	460e      	mov	r6, r1
 800927a:	b90b      	cbnz	r3, 8009280 <_puts_r+0x10>
 800927c:	f7ff ffb0 	bl	80091e0 <__sinit>
 8009280:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009282:	07db      	lsls	r3, r3, #31
 8009284:	d405      	bmi.n	8009292 <_puts_r+0x22>
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	0598      	lsls	r0, r3, #22
 800928a:	d402      	bmi.n	8009292 <_puts_r+0x22>
 800928c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800928e:	f000 f9c2 	bl	8009616 <__retarget_lock_acquire_recursive>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	0719      	lsls	r1, r3, #28
 8009296:	d502      	bpl.n	800929e <_puts_r+0x2e>
 8009298:	6923      	ldr	r3, [r4, #16]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d135      	bne.n	800930a <_puts_r+0x9a>
 800929e:	4621      	mov	r1, r4
 80092a0:	4628      	mov	r0, r5
 80092a2:	f000 f8e5 	bl	8009470 <__swsetup_r>
 80092a6:	b380      	cbz	r0, 800930a <_puts_r+0x9a>
 80092a8:	f04f 35ff 	mov.w	r5, #4294967295
 80092ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80092ae:	07da      	lsls	r2, r3, #31
 80092b0:	d405      	bmi.n	80092be <_puts_r+0x4e>
 80092b2:	89a3      	ldrh	r3, [r4, #12]
 80092b4:	059b      	lsls	r3, r3, #22
 80092b6:	d402      	bmi.n	80092be <_puts_r+0x4e>
 80092b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80092ba:	f000 f9ad 	bl	8009618 <__retarget_lock_release_recursive>
 80092be:	4628      	mov	r0, r5
 80092c0:	bd70      	pop	{r4, r5, r6, pc}
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	da04      	bge.n	80092d0 <_puts_r+0x60>
 80092c6:	69a2      	ldr	r2, [r4, #24]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	dc17      	bgt.n	80092fc <_puts_r+0x8c>
 80092cc:	290a      	cmp	r1, #10
 80092ce:	d015      	beq.n	80092fc <_puts_r+0x8c>
 80092d0:	6823      	ldr	r3, [r4, #0]
 80092d2:	1c5a      	adds	r2, r3, #1
 80092d4:	6022      	str	r2, [r4, #0]
 80092d6:	7019      	strb	r1, [r3, #0]
 80092d8:	68a3      	ldr	r3, [r4, #8]
 80092da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80092de:	3b01      	subs	r3, #1
 80092e0:	60a3      	str	r3, [r4, #8]
 80092e2:	2900      	cmp	r1, #0
 80092e4:	d1ed      	bne.n	80092c2 <_puts_r+0x52>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	da11      	bge.n	800930e <_puts_r+0x9e>
 80092ea:	4622      	mov	r2, r4
 80092ec:	210a      	movs	r1, #10
 80092ee:	4628      	mov	r0, r5
 80092f0:	f000 f87f 	bl	80093f2 <__swbuf_r>
 80092f4:	3001      	adds	r0, #1
 80092f6:	d0d7      	beq.n	80092a8 <_puts_r+0x38>
 80092f8:	250a      	movs	r5, #10
 80092fa:	e7d7      	b.n	80092ac <_puts_r+0x3c>
 80092fc:	4622      	mov	r2, r4
 80092fe:	4628      	mov	r0, r5
 8009300:	f000 f877 	bl	80093f2 <__swbuf_r>
 8009304:	3001      	adds	r0, #1
 8009306:	d1e7      	bne.n	80092d8 <_puts_r+0x68>
 8009308:	e7ce      	b.n	80092a8 <_puts_r+0x38>
 800930a:	3e01      	subs	r6, #1
 800930c:	e7e4      	b.n	80092d8 <_puts_r+0x68>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	1c5a      	adds	r2, r3, #1
 8009312:	6022      	str	r2, [r4, #0]
 8009314:	220a      	movs	r2, #10
 8009316:	701a      	strb	r2, [r3, #0]
 8009318:	e7ee      	b.n	80092f8 <_puts_r+0x88>
	...

0800931c <puts>:
 800931c:	4b02      	ldr	r3, [pc, #8]	@ (8009328 <puts+0xc>)
 800931e:	4601      	mov	r1, r0
 8009320:	6818      	ldr	r0, [r3, #0]
 8009322:	f7ff bfa5 	b.w	8009270 <_puts_r>
 8009326:	bf00      	nop
 8009328:	20000028 	.word	0x20000028

0800932c <siprintf>:
 800932c:	b40e      	push	{r1, r2, r3}
 800932e:	b500      	push	{lr}
 8009330:	b09c      	sub	sp, #112	@ 0x70
 8009332:	ab1d      	add	r3, sp, #116	@ 0x74
 8009334:	9002      	str	r0, [sp, #8]
 8009336:	9006      	str	r0, [sp, #24]
 8009338:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800933c:	4809      	ldr	r0, [pc, #36]	@ (8009364 <siprintf+0x38>)
 800933e:	9107      	str	r1, [sp, #28]
 8009340:	9104      	str	r1, [sp, #16]
 8009342:	4909      	ldr	r1, [pc, #36]	@ (8009368 <siprintf+0x3c>)
 8009344:	f853 2b04 	ldr.w	r2, [r3], #4
 8009348:	9105      	str	r1, [sp, #20]
 800934a:	6800      	ldr	r0, [r0, #0]
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	a902      	add	r1, sp, #8
 8009350:	f002 fc48 	bl	800bbe4 <_svfiprintf_r>
 8009354:	9b02      	ldr	r3, [sp, #8]
 8009356:	2200      	movs	r2, #0
 8009358:	701a      	strb	r2, [r3, #0]
 800935a:	b01c      	add	sp, #112	@ 0x70
 800935c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009360:	b003      	add	sp, #12
 8009362:	4770      	bx	lr
 8009364:	20000028 	.word	0x20000028
 8009368:	ffff0208 	.word	0xffff0208

0800936c <__sread>:
 800936c:	b510      	push	{r4, lr}
 800936e:	460c      	mov	r4, r1
 8009370:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009374:	f000 f900 	bl	8009578 <_read_r>
 8009378:	2800      	cmp	r0, #0
 800937a:	bfab      	itete	ge
 800937c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800937e:	89a3      	ldrhlt	r3, [r4, #12]
 8009380:	181b      	addge	r3, r3, r0
 8009382:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009386:	bfac      	ite	ge
 8009388:	6563      	strge	r3, [r4, #84]	@ 0x54
 800938a:	81a3      	strhlt	r3, [r4, #12]
 800938c:	bd10      	pop	{r4, pc}

0800938e <__swrite>:
 800938e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009392:	461f      	mov	r7, r3
 8009394:	898b      	ldrh	r3, [r1, #12]
 8009396:	05db      	lsls	r3, r3, #23
 8009398:	4605      	mov	r5, r0
 800939a:	460c      	mov	r4, r1
 800939c:	4616      	mov	r6, r2
 800939e:	d505      	bpl.n	80093ac <__swrite+0x1e>
 80093a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a4:	2302      	movs	r3, #2
 80093a6:	2200      	movs	r2, #0
 80093a8:	f000 f8d4 	bl	8009554 <_lseek_r>
 80093ac:	89a3      	ldrh	r3, [r4, #12]
 80093ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093b6:	81a3      	strh	r3, [r4, #12]
 80093b8:	4632      	mov	r2, r6
 80093ba:	463b      	mov	r3, r7
 80093bc:	4628      	mov	r0, r5
 80093be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093c2:	f000 b8eb 	b.w	800959c <_write_r>

080093c6 <__sseek>:
 80093c6:	b510      	push	{r4, lr}
 80093c8:	460c      	mov	r4, r1
 80093ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ce:	f000 f8c1 	bl	8009554 <_lseek_r>
 80093d2:	1c43      	adds	r3, r0, #1
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	bf15      	itete	ne
 80093d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80093da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80093de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80093e2:	81a3      	strheq	r3, [r4, #12]
 80093e4:	bf18      	it	ne
 80093e6:	81a3      	strhne	r3, [r4, #12]
 80093e8:	bd10      	pop	{r4, pc}

080093ea <__sclose>:
 80093ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ee:	f000 b8a1 	b.w	8009534 <_close_r>

080093f2 <__swbuf_r>:
 80093f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f4:	460e      	mov	r6, r1
 80093f6:	4614      	mov	r4, r2
 80093f8:	4605      	mov	r5, r0
 80093fa:	b118      	cbz	r0, 8009404 <__swbuf_r+0x12>
 80093fc:	6a03      	ldr	r3, [r0, #32]
 80093fe:	b90b      	cbnz	r3, 8009404 <__swbuf_r+0x12>
 8009400:	f7ff feee 	bl	80091e0 <__sinit>
 8009404:	69a3      	ldr	r3, [r4, #24]
 8009406:	60a3      	str	r3, [r4, #8]
 8009408:	89a3      	ldrh	r3, [r4, #12]
 800940a:	071a      	lsls	r2, r3, #28
 800940c:	d501      	bpl.n	8009412 <__swbuf_r+0x20>
 800940e:	6923      	ldr	r3, [r4, #16]
 8009410:	b943      	cbnz	r3, 8009424 <__swbuf_r+0x32>
 8009412:	4621      	mov	r1, r4
 8009414:	4628      	mov	r0, r5
 8009416:	f000 f82b 	bl	8009470 <__swsetup_r>
 800941a:	b118      	cbz	r0, 8009424 <__swbuf_r+0x32>
 800941c:	f04f 37ff 	mov.w	r7, #4294967295
 8009420:	4638      	mov	r0, r7
 8009422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	6922      	ldr	r2, [r4, #16]
 8009428:	1a98      	subs	r0, r3, r2
 800942a:	6963      	ldr	r3, [r4, #20]
 800942c:	b2f6      	uxtb	r6, r6
 800942e:	4283      	cmp	r3, r0
 8009430:	4637      	mov	r7, r6
 8009432:	dc05      	bgt.n	8009440 <__swbuf_r+0x4e>
 8009434:	4621      	mov	r1, r4
 8009436:	4628      	mov	r0, r5
 8009438:	f002 fe96 	bl	800c168 <_fflush_r>
 800943c:	2800      	cmp	r0, #0
 800943e:	d1ed      	bne.n	800941c <__swbuf_r+0x2a>
 8009440:	68a3      	ldr	r3, [r4, #8]
 8009442:	3b01      	subs	r3, #1
 8009444:	60a3      	str	r3, [r4, #8]
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	1c5a      	adds	r2, r3, #1
 800944a:	6022      	str	r2, [r4, #0]
 800944c:	701e      	strb	r6, [r3, #0]
 800944e:	6962      	ldr	r2, [r4, #20]
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	429a      	cmp	r2, r3
 8009454:	d004      	beq.n	8009460 <__swbuf_r+0x6e>
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	07db      	lsls	r3, r3, #31
 800945a:	d5e1      	bpl.n	8009420 <__swbuf_r+0x2e>
 800945c:	2e0a      	cmp	r6, #10
 800945e:	d1df      	bne.n	8009420 <__swbuf_r+0x2e>
 8009460:	4621      	mov	r1, r4
 8009462:	4628      	mov	r0, r5
 8009464:	f002 fe80 	bl	800c168 <_fflush_r>
 8009468:	2800      	cmp	r0, #0
 800946a:	d0d9      	beq.n	8009420 <__swbuf_r+0x2e>
 800946c:	e7d6      	b.n	800941c <__swbuf_r+0x2a>
	...

08009470 <__swsetup_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4b29      	ldr	r3, [pc, #164]	@ (8009518 <__swsetup_r+0xa8>)
 8009474:	4605      	mov	r5, r0
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	460c      	mov	r4, r1
 800947a:	b118      	cbz	r0, 8009484 <__swsetup_r+0x14>
 800947c:	6a03      	ldr	r3, [r0, #32]
 800947e:	b90b      	cbnz	r3, 8009484 <__swsetup_r+0x14>
 8009480:	f7ff feae 	bl	80091e0 <__sinit>
 8009484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009488:	0719      	lsls	r1, r3, #28
 800948a:	d422      	bmi.n	80094d2 <__swsetup_r+0x62>
 800948c:	06da      	lsls	r2, r3, #27
 800948e:	d407      	bmi.n	80094a0 <__swsetup_r+0x30>
 8009490:	2209      	movs	r2, #9
 8009492:	602a      	str	r2, [r5, #0]
 8009494:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009498:	81a3      	strh	r3, [r4, #12]
 800949a:	f04f 30ff 	mov.w	r0, #4294967295
 800949e:	e033      	b.n	8009508 <__swsetup_r+0x98>
 80094a0:	0758      	lsls	r0, r3, #29
 80094a2:	d512      	bpl.n	80094ca <__swsetup_r+0x5a>
 80094a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80094a6:	b141      	cbz	r1, 80094ba <__swsetup_r+0x4a>
 80094a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094ac:	4299      	cmp	r1, r3
 80094ae:	d002      	beq.n	80094b6 <__swsetup_r+0x46>
 80094b0:	4628      	mov	r0, r5
 80094b2:	f000 ff05 	bl	800a2c0 <_free_r>
 80094b6:	2300      	movs	r3, #0
 80094b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80094ba:	89a3      	ldrh	r3, [r4, #12]
 80094bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094c0:	81a3      	strh	r3, [r4, #12]
 80094c2:	2300      	movs	r3, #0
 80094c4:	6063      	str	r3, [r4, #4]
 80094c6:	6923      	ldr	r3, [r4, #16]
 80094c8:	6023      	str	r3, [r4, #0]
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f043 0308 	orr.w	r3, r3, #8
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	6923      	ldr	r3, [r4, #16]
 80094d4:	b94b      	cbnz	r3, 80094ea <__swsetup_r+0x7a>
 80094d6:	89a3      	ldrh	r3, [r4, #12]
 80094d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094e0:	d003      	beq.n	80094ea <__swsetup_r+0x7a>
 80094e2:	4621      	mov	r1, r4
 80094e4:	4628      	mov	r0, r5
 80094e6:	f002 fe8d 	bl	800c204 <__smakebuf_r>
 80094ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094ee:	f013 0201 	ands.w	r2, r3, #1
 80094f2:	d00a      	beq.n	800950a <__swsetup_r+0x9a>
 80094f4:	2200      	movs	r2, #0
 80094f6:	60a2      	str	r2, [r4, #8]
 80094f8:	6962      	ldr	r2, [r4, #20]
 80094fa:	4252      	negs	r2, r2
 80094fc:	61a2      	str	r2, [r4, #24]
 80094fe:	6922      	ldr	r2, [r4, #16]
 8009500:	b942      	cbnz	r2, 8009514 <__swsetup_r+0xa4>
 8009502:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009506:	d1c5      	bne.n	8009494 <__swsetup_r+0x24>
 8009508:	bd38      	pop	{r3, r4, r5, pc}
 800950a:	0799      	lsls	r1, r3, #30
 800950c:	bf58      	it	pl
 800950e:	6962      	ldrpl	r2, [r4, #20]
 8009510:	60a2      	str	r2, [r4, #8]
 8009512:	e7f4      	b.n	80094fe <__swsetup_r+0x8e>
 8009514:	2000      	movs	r0, #0
 8009516:	e7f7      	b.n	8009508 <__swsetup_r+0x98>
 8009518:	20000028 	.word	0x20000028

0800951c <memset>:
 800951c:	4402      	add	r2, r0
 800951e:	4603      	mov	r3, r0
 8009520:	4293      	cmp	r3, r2
 8009522:	d100      	bne.n	8009526 <memset+0xa>
 8009524:	4770      	bx	lr
 8009526:	f803 1b01 	strb.w	r1, [r3], #1
 800952a:	e7f9      	b.n	8009520 <memset+0x4>

0800952c <_localeconv_r>:
 800952c:	4800      	ldr	r0, [pc, #0]	@ (8009530 <_localeconv_r+0x4>)
 800952e:	4770      	bx	lr
 8009530:	20000168 	.word	0x20000168

08009534 <_close_r>:
 8009534:	b538      	push	{r3, r4, r5, lr}
 8009536:	4d06      	ldr	r5, [pc, #24]	@ (8009550 <_close_r+0x1c>)
 8009538:	2300      	movs	r3, #0
 800953a:	4604      	mov	r4, r0
 800953c:	4608      	mov	r0, r1
 800953e:	602b      	str	r3, [r5, #0]
 8009540:	f7fa f834 	bl	80035ac <_close>
 8009544:	1c43      	adds	r3, r0, #1
 8009546:	d102      	bne.n	800954e <_close_r+0x1a>
 8009548:	682b      	ldr	r3, [r5, #0]
 800954a:	b103      	cbz	r3, 800954e <_close_r+0x1a>
 800954c:	6023      	str	r3, [r4, #0]
 800954e:	bd38      	pop	{r3, r4, r5, pc}
 8009550:	20000828 	.word	0x20000828

08009554 <_lseek_r>:
 8009554:	b538      	push	{r3, r4, r5, lr}
 8009556:	4d07      	ldr	r5, [pc, #28]	@ (8009574 <_lseek_r+0x20>)
 8009558:	4604      	mov	r4, r0
 800955a:	4608      	mov	r0, r1
 800955c:	4611      	mov	r1, r2
 800955e:	2200      	movs	r2, #0
 8009560:	602a      	str	r2, [r5, #0]
 8009562:	461a      	mov	r2, r3
 8009564:	f7fa f849 	bl	80035fa <_lseek>
 8009568:	1c43      	adds	r3, r0, #1
 800956a:	d102      	bne.n	8009572 <_lseek_r+0x1e>
 800956c:	682b      	ldr	r3, [r5, #0]
 800956e:	b103      	cbz	r3, 8009572 <_lseek_r+0x1e>
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	bd38      	pop	{r3, r4, r5, pc}
 8009574:	20000828 	.word	0x20000828

08009578 <_read_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d07      	ldr	r5, [pc, #28]	@ (8009598 <_read_r+0x20>)
 800957c:	4604      	mov	r4, r0
 800957e:	4608      	mov	r0, r1
 8009580:	4611      	mov	r1, r2
 8009582:	2200      	movs	r2, #0
 8009584:	602a      	str	r2, [r5, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f7f9 fff3 	bl	8003572 <_read>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_read_r+0x1e>
 8009590:	682b      	ldr	r3, [r5, #0]
 8009592:	b103      	cbz	r3, 8009596 <_read_r+0x1e>
 8009594:	6023      	str	r3, [r4, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	20000828 	.word	0x20000828

0800959c <_write_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d07      	ldr	r5, [pc, #28]	@ (80095bc <_write_r+0x20>)
 80095a0:	4604      	mov	r4, r0
 80095a2:	4608      	mov	r0, r1
 80095a4:	4611      	mov	r1, r2
 80095a6:	2200      	movs	r2, #0
 80095a8:	602a      	str	r2, [r5, #0]
 80095aa:	461a      	mov	r2, r3
 80095ac:	f7f9 fb30 	bl	8002c10 <_write>
 80095b0:	1c43      	adds	r3, r0, #1
 80095b2:	d102      	bne.n	80095ba <_write_r+0x1e>
 80095b4:	682b      	ldr	r3, [r5, #0]
 80095b6:	b103      	cbz	r3, 80095ba <_write_r+0x1e>
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	bd38      	pop	{r3, r4, r5, pc}
 80095bc:	20000828 	.word	0x20000828

080095c0 <__errno>:
 80095c0:	4b01      	ldr	r3, [pc, #4]	@ (80095c8 <__errno+0x8>)
 80095c2:	6818      	ldr	r0, [r3, #0]
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	20000028 	.word	0x20000028

080095cc <__libc_init_array>:
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	4d0d      	ldr	r5, [pc, #52]	@ (8009604 <__libc_init_array+0x38>)
 80095d0:	4c0d      	ldr	r4, [pc, #52]	@ (8009608 <__libc_init_array+0x3c>)
 80095d2:	1b64      	subs	r4, r4, r5
 80095d4:	10a4      	asrs	r4, r4, #2
 80095d6:	2600      	movs	r6, #0
 80095d8:	42a6      	cmp	r6, r4
 80095da:	d109      	bne.n	80095f0 <__libc_init_array+0x24>
 80095dc:	4d0b      	ldr	r5, [pc, #44]	@ (800960c <__libc_init_array+0x40>)
 80095de:	4c0c      	ldr	r4, [pc, #48]	@ (8009610 <__libc_init_array+0x44>)
 80095e0:	f004 fece 	bl	800e380 <_init>
 80095e4:	1b64      	subs	r4, r4, r5
 80095e6:	10a4      	asrs	r4, r4, #2
 80095e8:	2600      	movs	r6, #0
 80095ea:	42a6      	cmp	r6, r4
 80095ec:	d105      	bne.n	80095fa <__libc_init_array+0x2e>
 80095ee:	bd70      	pop	{r4, r5, r6, pc}
 80095f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80095f4:	4798      	blx	r3
 80095f6:	3601      	adds	r6, #1
 80095f8:	e7ee      	b.n	80095d8 <__libc_init_array+0xc>
 80095fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80095fe:	4798      	blx	r3
 8009600:	3601      	adds	r6, #1
 8009602:	e7f2      	b.n	80095ea <__libc_init_array+0x1e>
 8009604:	0800eab8 	.word	0x0800eab8
 8009608:	0800eab8 	.word	0x0800eab8
 800960c:	0800eab8 	.word	0x0800eab8
 8009610:	0800eabc 	.word	0x0800eabc

08009614 <__retarget_lock_init_recursive>:
 8009614:	4770      	bx	lr

08009616 <__retarget_lock_acquire_recursive>:
 8009616:	4770      	bx	lr

08009618 <__retarget_lock_release_recursive>:
 8009618:	4770      	bx	lr
	...

0800961c <nanf>:
 800961c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009624 <nanf+0x8>
 8009620:	4770      	bx	lr
 8009622:	bf00      	nop
 8009624:	7fc00000 	.word	0x7fc00000

08009628 <quorem>:
 8009628:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962c:	6903      	ldr	r3, [r0, #16]
 800962e:	690c      	ldr	r4, [r1, #16]
 8009630:	42a3      	cmp	r3, r4
 8009632:	4607      	mov	r7, r0
 8009634:	db7e      	blt.n	8009734 <quorem+0x10c>
 8009636:	3c01      	subs	r4, #1
 8009638:	f101 0814 	add.w	r8, r1, #20
 800963c:	00a3      	lsls	r3, r4, #2
 800963e:	f100 0514 	add.w	r5, r0, #20
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009648:	9301      	str	r3, [sp, #4]
 800964a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800964e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009652:	3301      	adds	r3, #1
 8009654:	429a      	cmp	r2, r3
 8009656:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800965a:	fbb2 f6f3 	udiv	r6, r2, r3
 800965e:	d32e      	bcc.n	80096be <quorem+0x96>
 8009660:	f04f 0a00 	mov.w	sl, #0
 8009664:	46c4      	mov	ip, r8
 8009666:	46ae      	mov	lr, r5
 8009668:	46d3      	mov	fp, sl
 800966a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800966e:	b298      	uxth	r0, r3
 8009670:	fb06 a000 	mla	r0, r6, r0, sl
 8009674:	0c02      	lsrs	r2, r0, #16
 8009676:	0c1b      	lsrs	r3, r3, #16
 8009678:	fb06 2303 	mla	r3, r6, r3, r2
 800967c:	f8de 2000 	ldr.w	r2, [lr]
 8009680:	b280      	uxth	r0, r0
 8009682:	b292      	uxth	r2, r2
 8009684:	1a12      	subs	r2, r2, r0
 8009686:	445a      	add	r2, fp
 8009688:	f8de 0000 	ldr.w	r0, [lr]
 800968c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009690:	b29b      	uxth	r3, r3
 8009692:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009696:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800969a:	b292      	uxth	r2, r2
 800969c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80096a0:	45e1      	cmp	r9, ip
 80096a2:	f84e 2b04 	str.w	r2, [lr], #4
 80096a6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80096aa:	d2de      	bcs.n	800966a <quorem+0x42>
 80096ac:	9b00      	ldr	r3, [sp, #0]
 80096ae:	58eb      	ldr	r3, [r5, r3]
 80096b0:	b92b      	cbnz	r3, 80096be <quorem+0x96>
 80096b2:	9b01      	ldr	r3, [sp, #4]
 80096b4:	3b04      	subs	r3, #4
 80096b6:	429d      	cmp	r5, r3
 80096b8:	461a      	mov	r2, r3
 80096ba:	d32f      	bcc.n	800971c <quorem+0xf4>
 80096bc:	613c      	str	r4, [r7, #16]
 80096be:	4638      	mov	r0, r7
 80096c0:	f001 f9c2 	bl	800aa48 <__mcmp>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	db25      	blt.n	8009714 <quorem+0xec>
 80096c8:	4629      	mov	r1, r5
 80096ca:	2000      	movs	r0, #0
 80096cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80096d0:	f8d1 c000 	ldr.w	ip, [r1]
 80096d4:	fa1f fe82 	uxth.w	lr, r2
 80096d8:	fa1f f38c 	uxth.w	r3, ip
 80096dc:	eba3 030e 	sub.w	r3, r3, lr
 80096e0:	4403      	add	r3, r0
 80096e2:	0c12      	lsrs	r2, r2, #16
 80096e4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80096e8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80096f2:	45c1      	cmp	r9, r8
 80096f4:	f841 3b04 	str.w	r3, [r1], #4
 80096f8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80096fc:	d2e6      	bcs.n	80096cc <quorem+0xa4>
 80096fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009706:	b922      	cbnz	r2, 8009712 <quorem+0xea>
 8009708:	3b04      	subs	r3, #4
 800970a:	429d      	cmp	r5, r3
 800970c:	461a      	mov	r2, r3
 800970e:	d30b      	bcc.n	8009728 <quorem+0x100>
 8009710:	613c      	str	r4, [r7, #16]
 8009712:	3601      	adds	r6, #1
 8009714:	4630      	mov	r0, r6
 8009716:	b003      	add	sp, #12
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971c:	6812      	ldr	r2, [r2, #0]
 800971e:	3b04      	subs	r3, #4
 8009720:	2a00      	cmp	r2, #0
 8009722:	d1cb      	bne.n	80096bc <quorem+0x94>
 8009724:	3c01      	subs	r4, #1
 8009726:	e7c6      	b.n	80096b6 <quorem+0x8e>
 8009728:	6812      	ldr	r2, [r2, #0]
 800972a:	3b04      	subs	r3, #4
 800972c:	2a00      	cmp	r2, #0
 800972e:	d1ef      	bne.n	8009710 <quorem+0xe8>
 8009730:	3c01      	subs	r4, #1
 8009732:	e7ea      	b.n	800970a <quorem+0xe2>
 8009734:	2000      	movs	r0, #0
 8009736:	e7ee      	b.n	8009716 <quorem+0xee>

08009738 <_dtoa_r>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	69c7      	ldr	r7, [r0, #28]
 800973e:	b099      	sub	sp, #100	@ 0x64
 8009740:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009744:	ec55 4b10 	vmov	r4, r5, d0
 8009748:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800974a:	9109      	str	r1, [sp, #36]	@ 0x24
 800974c:	4683      	mov	fp, r0
 800974e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009750:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009752:	b97f      	cbnz	r7, 8009774 <_dtoa_r+0x3c>
 8009754:	2010      	movs	r0, #16
 8009756:	f000 fdfd 	bl	800a354 <malloc>
 800975a:	4602      	mov	r2, r0
 800975c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009760:	b920      	cbnz	r0, 800976c <_dtoa_r+0x34>
 8009762:	4ba7      	ldr	r3, [pc, #668]	@ (8009a00 <_dtoa_r+0x2c8>)
 8009764:	21ef      	movs	r1, #239	@ 0xef
 8009766:	48a7      	ldr	r0, [pc, #668]	@ (8009a04 <_dtoa_r+0x2cc>)
 8009768:	f002 fdfe 	bl	800c368 <__assert_func>
 800976c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009770:	6007      	str	r7, [r0, #0]
 8009772:	60c7      	str	r7, [r0, #12]
 8009774:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009778:	6819      	ldr	r1, [r3, #0]
 800977a:	b159      	cbz	r1, 8009794 <_dtoa_r+0x5c>
 800977c:	685a      	ldr	r2, [r3, #4]
 800977e:	604a      	str	r2, [r1, #4]
 8009780:	2301      	movs	r3, #1
 8009782:	4093      	lsls	r3, r2
 8009784:	608b      	str	r3, [r1, #8]
 8009786:	4658      	mov	r0, fp
 8009788:	f000 feda 	bl	800a540 <_Bfree>
 800978c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009790:	2200      	movs	r2, #0
 8009792:	601a      	str	r2, [r3, #0]
 8009794:	1e2b      	subs	r3, r5, #0
 8009796:	bfb9      	ittee	lt
 8009798:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800979c:	9303      	strlt	r3, [sp, #12]
 800979e:	2300      	movge	r3, #0
 80097a0:	6033      	strge	r3, [r6, #0]
 80097a2:	9f03      	ldr	r7, [sp, #12]
 80097a4:	4b98      	ldr	r3, [pc, #608]	@ (8009a08 <_dtoa_r+0x2d0>)
 80097a6:	bfbc      	itt	lt
 80097a8:	2201      	movlt	r2, #1
 80097aa:	6032      	strlt	r2, [r6, #0]
 80097ac:	43bb      	bics	r3, r7
 80097ae:	d112      	bne.n	80097d6 <_dtoa_r+0x9e>
 80097b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097bc:	4323      	orrs	r3, r4
 80097be:	f000 854d 	beq.w	800a25c <_dtoa_r+0xb24>
 80097c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009a1c <_dtoa_r+0x2e4>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	f000 854f 	beq.w	800a26c <_dtoa_r+0xb34>
 80097ce:	f10a 0303 	add.w	r3, sl, #3
 80097d2:	f000 bd49 	b.w	800a268 <_dtoa_r+0xb30>
 80097d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097da:	2200      	movs	r2, #0
 80097dc:	ec51 0b17 	vmov	r0, r1, d7
 80097e0:	2300      	movs	r3, #0
 80097e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80097e6:	f7f7 f98f 	bl	8000b08 <__aeabi_dcmpeq>
 80097ea:	4680      	mov	r8, r0
 80097ec:	b158      	cbz	r0, 8009806 <_dtoa_r+0xce>
 80097ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80097f0:	2301      	movs	r3, #1
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80097f6:	b113      	cbz	r3, 80097fe <_dtoa_r+0xc6>
 80097f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80097fa:	4b84      	ldr	r3, [pc, #528]	@ (8009a0c <_dtoa_r+0x2d4>)
 80097fc:	6013      	str	r3, [r2, #0]
 80097fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009a20 <_dtoa_r+0x2e8>
 8009802:	f000 bd33 	b.w	800a26c <_dtoa_r+0xb34>
 8009806:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800980a:	aa16      	add	r2, sp, #88	@ 0x58
 800980c:	a917      	add	r1, sp, #92	@ 0x5c
 800980e:	4658      	mov	r0, fp
 8009810:	f001 fa3a 	bl	800ac88 <__d2b>
 8009814:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009818:	4681      	mov	r9, r0
 800981a:	2e00      	cmp	r6, #0
 800981c:	d077      	beq.n	800990e <_dtoa_r+0x1d6>
 800981e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009820:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009828:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800982c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009830:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009834:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009838:	4619      	mov	r1, r3
 800983a:	2200      	movs	r2, #0
 800983c:	4b74      	ldr	r3, [pc, #464]	@ (8009a10 <_dtoa_r+0x2d8>)
 800983e:	f7f6 fd43 	bl	80002c8 <__aeabi_dsub>
 8009842:	a369      	add	r3, pc, #420	@ (adr r3, 80099e8 <_dtoa_r+0x2b0>)
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f7f6 fef6 	bl	8000638 <__aeabi_dmul>
 800984c:	a368      	add	r3, pc, #416	@ (adr r3, 80099f0 <_dtoa_r+0x2b8>)
 800984e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009852:	f7f6 fd3b 	bl	80002cc <__adddf3>
 8009856:	4604      	mov	r4, r0
 8009858:	4630      	mov	r0, r6
 800985a:	460d      	mov	r5, r1
 800985c:	f7f6 fe82 	bl	8000564 <__aeabi_i2d>
 8009860:	a365      	add	r3, pc, #404	@ (adr r3, 80099f8 <_dtoa_r+0x2c0>)
 8009862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009866:	f7f6 fee7 	bl	8000638 <__aeabi_dmul>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4620      	mov	r0, r4
 8009870:	4629      	mov	r1, r5
 8009872:	f7f6 fd2b 	bl	80002cc <__adddf3>
 8009876:	4604      	mov	r4, r0
 8009878:	460d      	mov	r5, r1
 800987a:	f7f7 f98d 	bl	8000b98 <__aeabi_d2iz>
 800987e:	2200      	movs	r2, #0
 8009880:	4607      	mov	r7, r0
 8009882:	2300      	movs	r3, #0
 8009884:	4620      	mov	r0, r4
 8009886:	4629      	mov	r1, r5
 8009888:	f7f7 f948 	bl	8000b1c <__aeabi_dcmplt>
 800988c:	b140      	cbz	r0, 80098a0 <_dtoa_r+0x168>
 800988e:	4638      	mov	r0, r7
 8009890:	f7f6 fe68 	bl	8000564 <__aeabi_i2d>
 8009894:	4622      	mov	r2, r4
 8009896:	462b      	mov	r3, r5
 8009898:	f7f7 f936 	bl	8000b08 <__aeabi_dcmpeq>
 800989c:	b900      	cbnz	r0, 80098a0 <_dtoa_r+0x168>
 800989e:	3f01      	subs	r7, #1
 80098a0:	2f16      	cmp	r7, #22
 80098a2:	d851      	bhi.n	8009948 <_dtoa_r+0x210>
 80098a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009a14 <_dtoa_r+0x2dc>)
 80098a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098b2:	f7f7 f933 	bl	8000b1c <__aeabi_dcmplt>
 80098b6:	2800      	cmp	r0, #0
 80098b8:	d048      	beq.n	800994c <_dtoa_r+0x214>
 80098ba:	3f01      	subs	r7, #1
 80098bc:	2300      	movs	r3, #0
 80098be:	9312      	str	r3, [sp, #72]	@ 0x48
 80098c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098c2:	1b9b      	subs	r3, r3, r6
 80098c4:	1e5a      	subs	r2, r3, #1
 80098c6:	bf44      	itt	mi
 80098c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80098cc:	2300      	movmi	r3, #0
 80098ce:	9208      	str	r2, [sp, #32]
 80098d0:	bf54      	ite	pl
 80098d2:	f04f 0800 	movpl.w	r8, #0
 80098d6:	9308      	strmi	r3, [sp, #32]
 80098d8:	2f00      	cmp	r7, #0
 80098da:	db39      	blt.n	8009950 <_dtoa_r+0x218>
 80098dc:	9b08      	ldr	r3, [sp, #32]
 80098de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80098e0:	443b      	add	r3, r7
 80098e2:	9308      	str	r3, [sp, #32]
 80098e4:	2300      	movs	r3, #0
 80098e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80098e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ea:	2b09      	cmp	r3, #9
 80098ec:	d864      	bhi.n	80099b8 <_dtoa_r+0x280>
 80098ee:	2b05      	cmp	r3, #5
 80098f0:	bfc4      	itt	gt
 80098f2:	3b04      	subgt	r3, #4
 80098f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80098f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f8:	f1a3 0302 	sub.w	r3, r3, #2
 80098fc:	bfcc      	ite	gt
 80098fe:	2400      	movgt	r4, #0
 8009900:	2401      	movle	r4, #1
 8009902:	2b03      	cmp	r3, #3
 8009904:	d863      	bhi.n	80099ce <_dtoa_r+0x296>
 8009906:	e8df f003 	tbb	[pc, r3]
 800990a:	372a      	.short	0x372a
 800990c:	5535      	.short	0x5535
 800990e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009912:	441e      	add	r6, r3
 8009914:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009918:	2b20      	cmp	r3, #32
 800991a:	bfc1      	itttt	gt
 800991c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009920:	409f      	lslgt	r7, r3
 8009922:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009926:	fa24 f303 	lsrgt.w	r3, r4, r3
 800992a:	bfd6      	itet	le
 800992c:	f1c3 0320 	rsble	r3, r3, #32
 8009930:	ea47 0003 	orrgt.w	r0, r7, r3
 8009934:	fa04 f003 	lslle.w	r0, r4, r3
 8009938:	f7f6 fe04 	bl	8000544 <__aeabi_ui2d>
 800993c:	2201      	movs	r2, #1
 800993e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009942:	3e01      	subs	r6, #1
 8009944:	9214      	str	r2, [sp, #80]	@ 0x50
 8009946:	e777      	b.n	8009838 <_dtoa_r+0x100>
 8009948:	2301      	movs	r3, #1
 800994a:	e7b8      	b.n	80098be <_dtoa_r+0x186>
 800994c:	9012      	str	r0, [sp, #72]	@ 0x48
 800994e:	e7b7      	b.n	80098c0 <_dtoa_r+0x188>
 8009950:	427b      	negs	r3, r7
 8009952:	930a      	str	r3, [sp, #40]	@ 0x28
 8009954:	2300      	movs	r3, #0
 8009956:	eba8 0807 	sub.w	r8, r8, r7
 800995a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800995c:	e7c4      	b.n	80098e8 <_dtoa_r+0x1b0>
 800995e:	2300      	movs	r3, #0
 8009960:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009962:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009964:	2b00      	cmp	r3, #0
 8009966:	dc35      	bgt.n	80099d4 <_dtoa_r+0x29c>
 8009968:	2301      	movs	r3, #1
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	9307      	str	r3, [sp, #28]
 800996e:	461a      	mov	r2, r3
 8009970:	920e      	str	r2, [sp, #56]	@ 0x38
 8009972:	e00b      	b.n	800998c <_dtoa_r+0x254>
 8009974:	2301      	movs	r3, #1
 8009976:	e7f3      	b.n	8009960 <_dtoa_r+0x228>
 8009978:	2300      	movs	r3, #0
 800997a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800997c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800997e:	18fb      	adds	r3, r7, r3
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	3301      	adds	r3, #1
 8009984:	2b01      	cmp	r3, #1
 8009986:	9307      	str	r3, [sp, #28]
 8009988:	bfb8      	it	lt
 800998a:	2301      	movlt	r3, #1
 800998c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009990:	2100      	movs	r1, #0
 8009992:	2204      	movs	r2, #4
 8009994:	f102 0514 	add.w	r5, r2, #20
 8009998:	429d      	cmp	r5, r3
 800999a:	d91f      	bls.n	80099dc <_dtoa_r+0x2a4>
 800999c:	6041      	str	r1, [r0, #4]
 800999e:	4658      	mov	r0, fp
 80099a0:	f000 fd8e 	bl	800a4c0 <_Balloc>
 80099a4:	4682      	mov	sl, r0
 80099a6:	2800      	cmp	r0, #0
 80099a8:	d13c      	bne.n	8009a24 <_dtoa_r+0x2ec>
 80099aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009a18 <_dtoa_r+0x2e0>)
 80099ac:	4602      	mov	r2, r0
 80099ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80099b2:	e6d8      	b.n	8009766 <_dtoa_r+0x2e>
 80099b4:	2301      	movs	r3, #1
 80099b6:	e7e0      	b.n	800997a <_dtoa_r+0x242>
 80099b8:	2401      	movs	r4, #1
 80099ba:	2300      	movs	r3, #0
 80099bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80099be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80099c0:	f04f 33ff 	mov.w	r3, #4294967295
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	9307      	str	r3, [sp, #28]
 80099c8:	2200      	movs	r2, #0
 80099ca:	2312      	movs	r3, #18
 80099cc:	e7d0      	b.n	8009970 <_dtoa_r+0x238>
 80099ce:	2301      	movs	r3, #1
 80099d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099d2:	e7f5      	b.n	80099c0 <_dtoa_r+0x288>
 80099d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80099d6:	9300      	str	r3, [sp, #0]
 80099d8:	9307      	str	r3, [sp, #28]
 80099da:	e7d7      	b.n	800998c <_dtoa_r+0x254>
 80099dc:	3101      	adds	r1, #1
 80099de:	0052      	lsls	r2, r2, #1
 80099e0:	e7d8      	b.n	8009994 <_dtoa_r+0x25c>
 80099e2:	bf00      	nop
 80099e4:	f3af 8000 	nop.w
 80099e8:	636f4361 	.word	0x636f4361
 80099ec:	3fd287a7 	.word	0x3fd287a7
 80099f0:	8b60c8b3 	.word	0x8b60c8b3
 80099f4:	3fc68a28 	.word	0x3fc68a28
 80099f8:	509f79fb 	.word	0x509f79fb
 80099fc:	3fd34413 	.word	0x3fd34413
 8009a00:	0800e47e 	.word	0x0800e47e
 8009a04:	0800e495 	.word	0x0800e495
 8009a08:	7ff00000 	.word	0x7ff00000
 8009a0c:	0800e449 	.word	0x0800e449
 8009a10:	3ff80000 	.word	0x3ff80000
 8009a14:	0800e590 	.word	0x0800e590
 8009a18:	0800e4ed 	.word	0x0800e4ed
 8009a1c:	0800e47a 	.word	0x0800e47a
 8009a20:	0800e448 	.word	0x0800e448
 8009a24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009a28:	6018      	str	r0, [r3, #0]
 8009a2a:	9b07      	ldr	r3, [sp, #28]
 8009a2c:	2b0e      	cmp	r3, #14
 8009a2e:	f200 80a4 	bhi.w	8009b7a <_dtoa_r+0x442>
 8009a32:	2c00      	cmp	r4, #0
 8009a34:	f000 80a1 	beq.w	8009b7a <_dtoa_r+0x442>
 8009a38:	2f00      	cmp	r7, #0
 8009a3a:	dd33      	ble.n	8009aa4 <_dtoa_r+0x36c>
 8009a3c:	4bad      	ldr	r3, [pc, #692]	@ (8009cf4 <_dtoa_r+0x5bc>)
 8009a3e:	f007 020f 	and.w	r2, r7, #15
 8009a42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a46:	ed93 7b00 	vldr	d7, [r3]
 8009a4a:	05f8      	lsls	r0, r7, #23
 8009a4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009a50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009a54:	d516      	bpl.n	8009a84 <_dtoa_r+0x34c>
 8009a56:	4ba8      	ldr	r3, [pc, #672]	@ (8009cf8 <_dtoa_r+0x5c0>)
 8009a58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009a60:	f7f6 ff14 	bl	800088c <__aeabi_ddiv>
 8009a64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a68:	f004 040f 	and.w	r4, r4, #15
 8009a6c:	2603      	movs	r6, #3
 8009a6e:	4da2      	ldr	r5, [pc, #648]	@ (8009cf8 <_dtoa_r+0x5c0>)
 8009a70:	b954      	cbnz	r4, 8009a88 <_dtoa_r+0x350>
 8009a72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a7a:	f7f6 ff07 	bl	800088c <__aeabi_ddiv>
 8009a7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a82:	e028      	b.n	8009ad6 <_dtoa_r+0x39e>
 8009a84:	2602      	movs	r6, #2
 8009a86:	e7f2      	b.n	8009a6e <_dtoa_r+0x336>
 8009a88:	07e1      	lsls	r1, r4, #31
 8009a8a:	d508      	bpl.n	8009a9e <_dtoa_r+0x366>
 8009a8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a94:	f7f6 fdd0 	bl	8000638 <__aeabi_dmul>
 8009a98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a9c:	3601      	adds	r6, #1
 8009a9e:	1064      	asrs	r4, r4, #1
 8009aa0:	3508      	adds	r5, #8
 8009aa2:	e7e5      	b.n	8009a70 <_dtoa_r+0x338>
 8009aa4:	f000 80d2 	beq.w	8009c4c <_dtoa_r+0x514>
 8009aa8:	427c      	negs	r4, r7
 8009aaa:	4b92      	ldr	r3, [pc, #584]	@ (8009cf4 <_dtoa_r+0x5bc>)
 8009aac:	4d92      	ldr	r5, [pc, #584]	@ (8009cf8 <_dtoa_r+0x5c0>)
 8009aae:	f004 020f 	and.w	r2, r4, #15
 8009ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009abe:	f7f6 fdbb 	bl	8000638 <__aeabi_dmul>
 8009ac2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ac6:	1124      	asrs	r4, r4, #4
 8009ac8:	2300      	movs	r3, #0
 8009aca:	2602      	movs	r6, #2
 8009acc:	2c00      	cmp	r4, #0
 8009ace:	f040 80b2 	bne.w	8009c36 <_dtoa_r+0x4fe>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d1d3      	bne.n	8009a7e <_dtoa_r+0x346>
 8009ad6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009ad8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 80b7 	beq.w	8009c50 <_dtoa_r+0x518>
 8009ae2:	4b86      	ldr	r3, [pc, #536]	@ (8009cfc <_dtoa_r+0x5c4>)
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	4629      	mov	r1, r5
 8009aea:	f7f7 f817 	bl	8000b1c <__aeabi_dcmplt>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	f000 80ae 	beq.w	8009c50 <_dtoa_r+0x518>
 8009af4:	9b07      	ldr	r3, [sp, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f000 80aa 	beq.w	8009c50 <_dtoa_r+0x518>
 8009afc:	9b00      	ldr	r3, [sp, #0]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	dd37      	ble.n	8009b72 <_dtoa_r+0x43a>
 8009b02:	1e7b      	subs	r3, r7, #1
 8009b04:	9304      	str	r3, [sp, #16]
 8009b06:	4620      	mov	r0, r4
 8009b08:	4b7d      	ldr	r3, [pc, #500]	@ (8009d00 <_dtoa_r+0x5c8>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	4629      	mov	r1, r5
 8009b0e:	f7f6 fd93 	bl	8000638 <__aeabi_dmul>
 8009b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b16:	9c00      	ldr	r4, [sp, #0]
 8009b18:	3601      	adds	r6, #1
 8009b1a:	4630      	mov	r0, r6
 8009b1c:	f7f6 fd22 	bl	8000564 <__aeabi_i2d>
 8009b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b24:	f7f6 fd88 	bl	8000638 <__aeabi_dmul>
 8009b28:	4b76      	ldr	r3, [pc, #472]	@ (8009d04 <_dtoa_r+0x5cc>)
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f7f6 fbce 	bl	80002cc <__adddf3>
 8009b30:	4605      	mov	r5, r0
 8009b32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009b36:	2c00      	cmp	r4, #0
 8009b38:	f040 808d 	bne.w	8009c56 <_dtoa_r+0x51e>
 8009b3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b40:	4b71      	ldr	r3, [pc, #452]	@ (8009d08 <_dtoa_r+0x5d0>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	f7f6 fbc0 	bl	80002c8 <__aeabi_dsub>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009b50:	462a      	mov	r2, r5
 8009b52:	4633      	mov	r3, r6
 8009b54:	f7f7 f800 	bl	8000b58 <__aeabi_dcmpgt>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	f040 828b 	bne.w	800a074 <_dtoa_r+0x93c>
 8009b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b62:	462a      	mov	r2, r5
 8009b64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009b68:	f7f6 ffd8 	bl	8000b1c <__aeabi_dcmplt>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	f040 8128 	bne.w	8009dc2 <_dtoa_r+0x68a>
 8009b72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009b76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009b7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f2c0 815a 	blt.w	8009e36 <_dtoa_r+0x6fe>
 8009b82:	2f0e      	cmp	r7, #14
 8009b84:	f300 8157 	bgt.w	8009e36 <_dtoa_r+0x6fe>
 8009b88:	4b5a      	ldr	r3, [pc, #360]	@ (8009cf4 <_dtoa_r+0x5bc>)
 8009b8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b8e:	ed93 7b00 	vldr	d7, [r3]
 8009b92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	ed8d 7b00 	vstr	d7, [sp]
 8009b9a:	da03      	bge.n	8009ba4 <_dtoa_r+0x46c>
 8009b9c:	9b07      	ldr	r3, [sp, #28]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f340 8101 	ble.w	8009da6 <_dtoa_r+0x66e>
 8009ba4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ba8:	4656      	mov	r6, sl
 8009baa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bae:	4620      	mov	r0, r4
 8009bb0:	4629      	mov	r1, r5
 8009bb2:	f7f6 fe6b 	bl	800088c <__aeabi_ddiv>
 8009bb6:	f7f6 ffef 	bl	8000b98 <__aeabi_d2iz>
 8009bba:	4680      	mov	r8, r0
 8009bbc:	f7f6 fcd2 	bl	8000564 <__aeabi_i2d>
 8009bc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bc4:	f7f6 fd38 	bl	8000638 <__aeabi_dmul>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4620      	mov	r0, r4
 8009bce:	4629      	mov	r1, r5
 8009bd0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009bd4:	f7f6 fb78 	bl	80002c8 <__aeabi_dsub>
 8009bd8:	f806 4b01 	strb.w	r4, [r6], #1
 8009bdc:	9d07      	ldr	r5, [sp, #28]
 8009bde:	eba6 040a 	sub.w	r4, r6, sl
 8009be2:	42a5      	cmp	r5, r4
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	f040 8117 	bne.w	8009e1a <_dtoa_r+0x6e2>
 8009bec:	f7f6 fb6e 	bl	80002cc <__adddf3>
 8009bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	f7f6 ffae 	bl	8000b58 <__aeabi_dcmpgt>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	f040 80f9 	bne.w	8009df4 <_dtoa_r+0x6bc>
 8009c02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c06:	4620      	mov	r0, r4
 8009c08:	4629      	mov	r1, r5
 8009c0a:	f7f6 ff7d 	bl	8000b08 <__aeabi_dcmpeq>
 8009c0e:	b118      	cbz	r0, 8009c18 <_dtoa_r+0x4e0>
 8009c10:	f018 0f01 	tst.w	r8, #1
 8009c14:	f040 80ee 	bne.w	8009df4 <_dtoa_r+0x6bc>
 8009c18:	4649      	mov	r1, r9
 8009c1a:	4658      	mov	r0, fp
 8009c1c:	f000 fc90 	bl	800a540 <_Bfree>
 8009c20:	2300      	movs	r3, #0
 8009c22:	7033      	strb	r3, [r6, #0]
 8009c24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c26:	3701      	adds	r7, #1
 8009c28:	601f      	str	r7, [r3, #0]
 8009c2a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f000 831d 	beq.w	800a26c <_dtoa_r+0xb34>
 8009c32:	601e      	str	r6, [r3, #0]
 8009c34:	e31a      	b.n	800a26c <_dtoa_r+0xb34>
 8009c36:	07e2      	lsls	r2, r4, #31
 8009c38:	d505      	bpl.n	8009c46 <_dtoa_r+0x50e>
 8009c3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c3e:	f7f6 fcfb 	bl	8000638 <__aeabi_dmul>
 8009c42:	3601      	adds	r6, #1
 8009c44:	2301      	movs	r3, #1
 8009c46:	1064      	asrs	r4, r4, #1
 8009c48:	3508      	adds	r5, #8
 8009c4a:	e73f      	b.n	8009acc <_dtoa_r+0x394>
 8009c4c:	2602      	movs	r6, #2
 8009c4e:	e742      	b.n	8009ad6 <_dtoa_r+0x39e>
 8009c50:	9c07      	ldr	r4, [sp, #28]
 8009c52:	9704      	str	r7, [sp, #16]
 8009c54:	e761      	b.n	8009b1a <_dtoa_r+0x3e2>
 8009c56:	4b27      	ldr	r3, [pc, #156]	@ (8009cf4 <_dtoa_r+0x5bc>)
 8009c58:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c5a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009c5e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c62:	4454      	add	r4, sl
 8009c64:	2900      	cmp	r1, #0
 8009c66:	d053      	beq.n	8009d10 <_dtoa_r+0x5d8>
 8009c68:	4928      	ldr	r1, [pc, #160]	@ (8009d0c <_dtoa_r+0x5d4>)
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	f7f6 fe0e 	bl	800088c <__aeabi_ddiv>
 8009c70:	4633      	mov	r3, r6
 8009c72:	462a      	mov	r2, r5
 8009c74:	f7f6 fb28 	bl	80002c8 <__aeabi_dsub>
 8009c78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c7c:	4656      	mov	r6, sl
 8009c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c82:	f7f6 ff89 	bl	8000b98 <__aeabi_d2iz>
 8009c86:	4605      	mov	r5, r0
 8009c88:	f7f6 fc6c 	bl	8000564 <__aeabi_i2d>
 8009c8c:	4602      	mov	r2, r0
 8009c8e:	460b      	mov	r3, r1
 8009c90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c94:	f7f6 fb18 	bl	80002c8 <__aeabi_dsub>
 8009c98:	3530      	adds	r5, #48	@ 0x30
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ca2:	f806 5b01 	strb.w	r5, [r6], #1
 8009ca6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009caa:	f7f6 ff37 	bl	8000b1c <__aeabi_dcmplt>
 8009cae:	2800      	cmp	r0, #0
 8009cb0:	d171      	bne.n	8009d96 <_dtoa_r+0x65e>
 8009cb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cb6:	4911      	ldr	r1, [pc, #68]	@ (8009cfc <_dtoa_r+0x5c4>)
 8009cb8:	2000      	movs	r0, #0
 8009cba:	f7f6 fb05 	bl	80002c8 <__aeabi_dsub>
 8009cbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009cc2:	f7f6 ff2b 	bl	8000b1c <__aeabi_dcmplt>
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f040 8095 	bne.w	8009df6 <_dtoa_r+0x6be>
 8009ccc:	42a6      	cmp	r6, r4
 8009cce:	f43f af50 	beq.w	8009b72 <_dtoa_r+0x43a>
 8009cd2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8009d00 <_dtoa_r+0x5c8>)
 8009cd8:	2200      	movs	r2, #0
 8009cda:	f7f6 fcad 	bl	8000638 <__aeabi_dmul>
 8009cde:	4b08      	ldr	r3, [pc, #32]	@ (8009d00 <_dtoa_r+0x5c8>)
 8009ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009cea:	f7f6 fca5 	bl	8000638 <__aeabi_dmul>
 8009cee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cf2:	e7c4      	b.n	8009c7e <_dtoa_r+0x546>
 8009cf4:	0800e590 	.word	0x0800e590
 8009cf8:	0800e568 	.word	0x0800e568
 8009cfc:	3ff00000 	.word	0x3ff00000
 8009d00:	40240000 	.word	0x40240000
 8009d04:	401c0000 	.word	0x401c0000
 8009d08:	40140000 	.word	0x40140000
 8009d0c:	3fe00000 	.word	0x3fe00000
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	f7f6 fc90 	bl	8000638 <__aeabi_dmul>
 8009d18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009d1c:	9415      	str	r4, [sp, #84]	@ 0x54
 8009d1e:	4656      	mov	r6, sl
 8009d20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d24:	f7f6 ff38 	bl	8000b98 <__aeabi_d2iz>
 8009d28:	4605      	mov	r5, r0
 8009d2a:	f7f6 fc1b 	bl	8000564 <__aeabi_i2d>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d36:	f7f6 fac7 	bl	80002c8 <__aeabi_dsub>
 8009d3a:	3530      	adds	r5, #48	@ 0x30
 8009d3c:	f806 5b01 	strb.w	r5, [r6], #1
 8009d40:	4602      	mov	r2, r0
 8009d42:	460b      	mov	r3, r1
 8009d44:	42a6      	cmp	r6, r4
 8009d46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d4a:	f04f 0200 	mov.w	r2, #0
 8009d4e:	d124      	bne.n	8009d9a <_dtoa_r+0x662>
 8009d50:	4bac      	ldr	r3, [pc, #688]	@ (800a004 <_dtoa_r+0x8cc>)
 8009d52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009d56:	f7f6 fab9 	bl	80002cc <__adddf3>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d62:	f7f6 fef9 	bl	8000b58 <__aeabi_dcmpgt>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d145      	bne.n	8009df6 <_dtoa_r+0x6be>
 8009d6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009d6e:	49a5      	ldr	r1, [pc, #660]	@ (800a004 <_dtoa_r+0x8cc>)
 8009d70:	2000      	movs	r0, #0
 8009d72:	f7f6 faa9 	bl	80002c8 <__aeabi_dsub>
 8009d76:	4602      	mov	r2, r0
 8009d78:	460b      	mov	r3, r1
 8009d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d7e:	f7f6 fecd 	bl	8000b1c <__aeabi_dcmplt>
 8009d82:	2800      	cmp	r0, #0
 8009d84:	f43f aef5 	beq.w	8009b72 <_dtoa_r+0x43a>
 8009d88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009d8a:	1e73      	subs	r3, r6, #1
 8009d8c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d92:	2b30      	cmp	r3, #48	@ 0x30
 8009d94:	d0f8      	beq.n	8009d88 <_dtoa_r+0x650>
 8009d96:	9f04      	ldr	r7, [sp, #16]
 8009d98:	e73e      	b.n	8009c18 <_dtoa_r+0x4e0>
 8009d9a:	4b9b      	ldr	r3, [pc, #620]	@ (800a008 <_dtoa_r+0x8d0>)
 8009d9c:	f7f6 fc4c 	bl	8000638 <__aeabi_dmul>
 8009da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009da4:	e7bc      	b.n	8009d20 <_dtoa_r+0x5e8>
 8009da6:	d10c      	bne.n	8009dc2 <_dtoa_r+0x68a>
 8009da8:	4b98      	ldr	r3, [pc, #608]	@ (800a00c <_dtoa_r+0x8d4>)
 8009daa:	2200      	movs	r2, #0
 8009dac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009db0:	f7f6 fc42 	bl	8000638 <__aeabi_dmul>
 8009db4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009db8:	f7f6 fec4 	bl	8000b44 <__aeabi_dcmpge>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f000 8157 	beq.w	800a070 <_dtoa_r+0x938>
 8009dc2:	2400      	movs	r4, #0
 8009dc4:	4625      	mov	r5, r4
 8009dc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009dc8:	43db      	mvns	r3, r3
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	4656      	mov	r6, sl
 8009dce:	2700      	movs	r7, #0
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	4658      	mov	r0, fp
 8009dd4:	f000 fbb4 	bl	800a540 <_Bfree>
 8009dd8:	2d00      	cmp	r5, #0
 8009dda:	d0dc      	beq.n	8009d96 <_dtoa_r+0x65e>
 8009ddc:	b12f      	cbz	r7, 8009dea <_dtoa_r+0x6b2>
 8009dde:	42af      	cmp	r7, r5
 8009de0:	d003      	beq.n	8009dea <_dtoa_r+0x6b2>
 8009de2:	4639      	mov	r1, r7
 8009de4:	4658      	mov	r0, fp
 8009de6:	f000 fbab 	bl	800a540 <_Bfree>
 8009dea:	4629      	mov	r1, r5
 8009dec:	4658      	mov	r0, fp
 8009dee:	f000 fba7 	bl	800a540 <_Bfree>
 8009df2:	e7d0      	b.n	8009d96 <_dtoa_r+0x65e>
 8009df4:	9704      	str	r7, [sp, #16]
 8009df6:	4633      	mov	r3, r6
 8009df8:	461e      	mov	r6, r3
 8009dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dfe:	2a39      	cmp	r2, #57	@ 0x39
 8009e00:	d107      	bne.n	8009e12 <_dtoa_r+0x6da>
 8009e02:	459a      	cmp	sl, r3
 8009e04:	d1f8      	bne.n	8009df8 <_dtoa_r+0x6c0>
 8009e06:	9a04      	ldr	r2, [sp, #16]
 8009e08:	3201      	adds	r2, #1
 8009e0a:	9204      	str	r2, [sp, #16]
 8009e0c:	2230      	movs	r2, #48	@ 0x30
 8009e0e:	f88a 2000 	strb.w	r2, [sl]
 8009e12:	781a      	ldrb	r2, [r3, #0]
 8009e14:	3201      	adds	r2, #1
 8009e16:	701a      	strb	r2, [r3, #0]
 8009e18:	e7bd      	b.n	8009d96 <_dtoa_r+0x65e>
 8009e1a:	4b7b      	ldr	r3, [pc, #492]	@ (800a008 <_dtoa_r+0x8d0>)
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f7f6 fc0b 	bl	8000638 <__aeabi_dmul>
 8009e22:	2200      	movs	r2, #0
 8009e24:	2300      	movs	r3, #0
 8009e26:	4604      	mov	r4, r0
 8009e28:	460d      	mov	r5, r1
 8009e2a:	f7f6 fe6d 	bl	8000b08 <__aeabi_dcmpeq>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f43f aebb 	beq.w	8009baa <_dtoa_r+0x472>
 8009e34:	e6f0      	b.n	8009c18 <_dtoa_r+0x4e0>
 8009e36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009e38:	2a00      	cmp	r2, #0
 8009e3a:	f000 80db 	beq.w	8009ff4 <_dtoa_r+0x8bc>
 8009e3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e40:	2a01      	cmp	r2, #1
 8009e42:	f300 80bf 	bgt.w	8009fc4 <_dtoa_r+0x88c>
 8009e46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009e48:	2a00      	cmp	r2, #0
 8009e4a:	f000 80b7 	beq.w	8009fbc <_dtoa_r+0x884>
 8009e4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009e52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009e54:	4646      	mov	r6, r8
 8009e56:	9a08      	ldr	r2, [sp, #32]
 8009e58:	2101      	movs	r1, #1
 8009e5a:	441a      	add	r2, r3
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	4498      	add	r8, r3
 8009e60:	9208      	str	r2, [sp, #32]
 8009e62:	f000 fc6b 	bl	800a73c <__i2b>
 8009e66:	4605      	mov	r5, r0
 8009e68:	b15e      	cbz	r6, 8009e82 <_dtoa_r+0x74a>
 8009e6a:	9b08      	ldr	r3, [sp, #32]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	dd08      	ble.n	8009e82 <_dtoa_r+0x74a>
 8009e70:	42b3      	cmp	r3, r6
 8009e72:	9a08      	ldr	r2, [sp, #32]
 8009e74:	bfa8      	it	ge
 8009e76:	4633      	movge	r3, r6
 8009e78:	eba8 0803 	sub.w	r8, r8, r3
 8009e7c:	1af6      	subs	r6, r6, r3
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	9308      	str	r3, [sp, #32]
 8009e82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e84:	b1f3      	cbz	r3, 8009ec4 <_dtoa_r+0x78c>
 8009e86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	f000 80b7 	beq.w	8009ffc <_dtoa_r+0x8c4>
 8009e8e:	b18c      	cbz	r4, 8009eb4 <_dtoa_r+0x77c>
 8009e90:	4629      	mov	r1, r5
 8009e92:	4622      	mov	r2, r4
 8009e94:	4658      	mov	r0, fp
 8009e96:	f000 fd11 	bl	800a8bc <__pow5mult>
 8009e9a:	464a      	mov	r2, r9
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	4605      	mov	r5, r0
 8009ea0:	4658      	mov	r0, fp
 8009ea2:	f000 fc61 	bl	800a768 <__multiply>
 8009ea6:	4649      	mov	r1, r9
 8009ea8:	9004      	str	r0, [sp, #16]
 8009eaa:	4658      	mov	r0, fp
 8009eac:	f000 fb48 	bl	800a540 <_Bfree>
 8009eb0:	9b04      	ldr	r3, [sp, #16]
 8009eb2:	4699      	mov	r9, r3
 8009eb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009eb6:	1b1a      	subs	r2, r3, r4
 8009eb8:	d004      	beq.n	8009ec4 <_dtoa_r+0x78c>
 8009eba:	4649      	mov	r1, r9
 8009ebc:	4658      	mov	r0, fp
 8009ebe:	f000 fcfd 	bl	800a8bc <__pow5mult>
 8009ec2:	4681      	mov	r9, r0
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	4658      	mov	r0, fp
 8009ec8:	f000 fc38 	bl	800a73c <__i2b>
 8009ecc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ece:	4604      	mov	r4, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 81cf 	beq.w	800a274 <_dtoa_r+0xb3c>
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	4601      	mov	r1, r0
 8009eda:	4658      	mov	r0, fp
 8009edc:	f000 fcee 	bl	800a8bc <__pow5mult>
 8009ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	f300 8095 	bgt.w	800a014 <_dtoa_r+0x8dc>
 8009eea:	9b02      	ldr	r3, [sp, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f040 8087 	bne.w	800a000 <_dtoa_r+0x8c8>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f040 8089 	bne.w	800a010 <_dtoa_r+0x8d8>
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f04:	0d1b      	lsrs	r3, r3, #20
 8009f06:	051b      	lsls	r3, r3, #20
 8009f08:	b12b      	cbz	r3, 8009f16 <_dtoa_r+0x7de>
 8009f0a:	9b08      	ldr	r3, [sp, #32]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	9308      	str	r3, [sp, #32]
 8009f10:	f108 0801 	add.w	r8, r8, #1
 8009f14:	2301      	movs	r3, #1
 8009f16:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	f000 81b0 	beq.w	800a280 <_dtoa_r+0xb48>
 8009f20:	6923      	ldr	r3, [r4, #16]
 8009f22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f26:	6918      	ldr	r0, [r3, #16]
 8009f28:	f000 fbbc 	bl	800a6a4 <__hi0bits>
 8009f2c:	f1c0 0020 	rsb	r0, r0, #32
 8009f30:	9b08      	ldr	r3, [sp, #32]
 8009f32:	4418      	add	r0, r3
 8009f34:	f010 001f 	ands.w	r0, r0, #31
 8009f38:	d077      	beq.n	800a02a <_dtoa_r+0x8f2>
 8009f3a:	f1c0 0320 	rsb	r3, r0, #32
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	dd6b      	ble.n	800a01a <_dtoa_r+0x8e2>
 8009f42:	9b08      	ldr	r3, [sp, #32]
 8009f44:	f1c0 001c 	rsb	r0, r0, #28
 8009f48:	4403      	add	r3, r0
 8009f4a:	4480      	add	r8, r0
 8009f4c:	4406      	add	r6, r0
 8009f4e:	9308      	str	r3, [sp, #32]
 8009f50:	f1b8 0f00 	cmp.w	r8, #0
 8009f54:	dd05      	ble.n	8009f62 <_dtoa_r+0x82a>
 8009f56:	4649      	mov	r1, r9
 8009f58:	4642      	mov	r2, r8
 8009f5a:	4658      	mov	r0, fp
 8009f5c:	f000 fd08 	bl	800a970 <__lshift>
 8009f60:	4681      	mov	r9, r0
 8009f62:	9b08      	ldr	r3, [sp, #32]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	dd05      	ble.n	8009f74 <_dtoa_r+0x83c>
 8009f68:	4621      	mov	r1, r4
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	4658      	mov	r0, fp
 8009f6e:	f000 fcff 	bl	800a970 <__lshift>
 8009f72:	4604      	mov	r4, r0
 8009f74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d059      	beq.n	800a02e <_dtoa_r+0x8f6>
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4648      	mov	r0, r9
 8009f7e:	f000 fd63 	bl	800aa48 <__mcmp>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	da53      	bge.n	800a02e <_dtoa_r+0x8f6>
 8009f86:	1e7b      	subs	r3, r7, #1
 8009f88:	9304      	str	r3, [sp, #16]
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	220a      	movs	r2, #10
 8009f90:	4658      	mov	r0, fp
 8009f92:	f000 faf7 	bl	800a584 <__multadd>
 8009f96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f98:	4681      	mov	r9, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 8172 	beq.w	800a284 <_dtoa_r+0xb4c>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	220a      	movs	r2, #10
 8009fa6:	4658      	mov	r0, fp
 8009fa8:	f000 faec 	bl	800a584 <__multadd>
 8009fac:	9b00      	ldr	r3, [sp, #0]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	4605      	mov	r5, r0
 8009fb2:	dc67      	bgt.n	800a084 <_dtoa_r+0x94c>
 8009fb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb6:	2b02      	cmp	r3, #2
 8009fb8:	dc41      	bgt.n	800a03e <_dtoa_r+0x906>
 8009fba:	e063      	b.n	800a084 <_dtoa_r+0x94c>
 8009fbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009fbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009fc2:	e746      	b.n	8009e52 <_dtoa_r+0x71a>
 8009fc4:	9b07      	ldr	r3, [sp, #28]
 8009fc6:	1e5c      	subs	r4, r3, #1
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fca:	42a3      	cmp	r3, r4
 8009fcc:	bfbf      	itttt	lt
 8009fce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009fd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009fd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009fd4:	1ae3      	sublt	r3, r4, r3
 8009fd6:	bfb4      	ite	lt
 8009fd8:	18d2      	addlt	r2, r2, r3
 8009fda:	1b1c      	subge	r4, r3, r4
 8009fdc:	9b07      	ldr	r3, [sp, #28]
 8009fde:	bfbc      	itt	lt
 8009fe0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009fe2:	2400      	movlt	r4, #0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	bfb5      	itete	lt
 8009fe8:	eba8 0603 	sublt.w	r6, r8, r3
 8009fec:	9b07      	ldrge	r3, [sp, #28]
 8009fee:	2300      	movlt	r3, #0
 8009ff0:	4646      	movge	r6, r8
 8009ff2:	e730      	b.n	8009e56 <_dtoa_r+0x71e>
 8009ff4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ff6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009ff8:	4646      	mov	r6, r8
 8009ffa:	e735      	b.n	8009e68 <_dtoa_r+0x730>
 8009ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009ffe:	e75c      	b.n	8009eba <_dtoa_r+0x782>
 800a000:	2300      	movs	r3, #0
 800a002:	e788      	b.n	8009f16 <_dtoa_r+0x7de>
 800a004:	3fe00000 	.word	0x3fe00000
 800a008:	40240000 	.word	0x40240000
 800a00c:	40140000 	.word	0x40140000
 800a010:	9b02      	ldr	r3, [sp, #8]
 800a012:	e780      	b.n	8009f16 <_dtoa_r+0x7de>
 800a014:	2300      	movs	r3, #0
 800a016:	930a      	str	r3, [sp, #40]	@ 0x28
 800a018:	e782      	b.n	8009f20 <_dtoa_r+0x7e8>
 800a01a:	d099      	beq.n	8009f50 <_dtoa_r+0x818>
 800a01c:	9a08      	ldr	r2, [sp, #32]
 800a01e:	331c      	adds	r3, #28
 800a020:	441a      	add	r2, r3
 800a022:	4498      	add	r8, r3
 800a024:	441e      	add	r6, r3
 800a026:	9208      	str	r2, [sp, #32]
 800a028:	e792      	b.n	8009f50 <_dtoa_r+0x818>
 800a02a:	4603      	mov	r3, r0
 800a02c:	e7f6      	b.n	800a01c <_dtoa_r+0x8e4>
 800a02e:	9b07      	ldr	r3, [sp, #28]
 800a030:	9704      	str	r7, [sp, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	dc20      	bgt.n	800a078 <_dtoa_r+0x940>
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03a:	2b02      	cmp	r3, #2
 800a03c:	dd1e      	ble.n	800a07c <_dtoa_r+0x944>
 800a03e:	9b00      	ldr	r3, [sp, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	f47f aec0 	bne.w	8009dc6 <_dtoa_r+0x68e>
 800a046:	4621      	mov	r1, r4
 800a048:	2205      	movs	r2, #5
 800a04a:	4658      	mov	r0, fp
 800a04c:	f000 fa9a 	bl	800a584 <__multadd>
 800a050:	4601      	mov	r1, r0
 800a052:	4604      	mov	r4, r0
 800a054:	4648      	mov	r0, r9
 800a056:	f000 fcf7 	bl	800aa48 <__mcmp>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f77f aeb3 	ble.w	8009dc6 <_dtoa_r+0x68e>
 800a060:	4656      	mov	r6, sl
 800a062:	2331      	movs	r3, #49	@ 0x31
 800a064:	f806 3b01 	strb.w	r3, [r6], #1
 800a068:	9b04      	ldr	r3, [sp, #16]
 800a06a:	3301      	adds	r3, #1
 800a06c:	9304      	str	r3, [sp, #16]
 800a06e:	e6ae      	b.n	8009dce <_dtoa_r+0x696>
 800a070:	9c07      	ldr	r4, [sp, #28]
 800a072:	9704      	str	r7, [sp, #16]
 800a074:	4625      	mov	r5, r4
 800a076:	e7f3      	b.n	800a060 <_dtoa_r+0x928>
 800a078:	9b07      	ldr	r3, [sp, #28]
 800a07a:	9300      	str	r3, [sp, #0]
 800a07c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 8104 	beq.w	800a28c <_dtoa_r+0xb54>
 800a084:	2e00      	cmp	r6, #0
 800a086:	dd05      	ble.n	800a094 <_dtoa_r+0x95c>
 800a088:	4629      	mov	r1, r5
 800a08a:	4632      	mov	r2, r6
 800a08c:	4658      	mov	r0, fp
 800a08e:	f000 fc6f 	bl	800a970 <__lshift>
 800a092:	4605      	mov	r5, r0
 800a094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a096:	2b00      	cmp	r3, #0
 800a098:	d05a      	beq.n	800a150 <_dtoa_r+0xa18>
 800a09a:	6869      	ldr	r1, [r5, #4]
 800a09c:	4658      	mov	r0, fp
 800a09e:	f000 fa0f 	bl	800a4c0 <_Balloc>
 800a0a2:	4606      	mov	r6, r0
 800a0a4:	b928      	cbnz	r0, 800a0b2 <_dtoa_r+0x97a>
 800a0a6:	4b84      	ldr	r3, [pc, #528]	@ (800a2b8 <_dtoa_r+0xb80>)
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a0ae:	f7ff bb5a 	b.w	8009766 <_dtoa_r+0x2e>
 800a0b2:	692a      	ldr	r2, [r5, #16]
 800a0b4:	3202      	adds	r2, #2
 800a0b6:	0092      	lsls	r2, r2, #2
 800a0b8:	f105 010c 	add.w	r1, r5, #12
 800a0bc:	300c      	adds	r0, #12
 800a0be:	f002 f93b 	bl	800c338 <memcpy>
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	4631      	mov	r1, r6
 800a0c6:	4658      	mov	r0, fp
 800a0c8:	f000 fc52 	bl	800a970 <__lshift>
 800a0cc:	f10a 0301 	add.w	r3, sl, #1
 800a0d0:	9307      	str	r3, [sp, #28]
 800a0d2:	9b00      	ldr	r3, [sp, #0]
 800a0d4:	4453      	add	r3, sl
 800a0d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0d8:	9b02      	ldr	r3, [sp, #8]
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	462f      	mov	r7, r5
 800a0e0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0e2:	4605      	mov	r5, r0
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	4621      	mov	r1, r4
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	4648      	mov	r0, r9
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	f7ff fa9b 	bl	8009628 <quorem>
 800a0f2:	4639      	mov	r1, r7
 800a0f4:	9002      	str	r0, [sp, #8]
 800a0f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a0fa:	4648      	mov	r0, r9
 800a0fc:	f000 fca4 	bl	800aa48 <__mcmp>
 800a100:	462a      	mov	r2, r5
 800a102:	9008      	str	r0, [sp, #32]
 800a104:	4621      	mov	r1, r4
 800a106:	4658      	mov	r0, fp
 800a108:	f000 fcba 	bl	800aa80 <__mdiff>
 800a10c:	68c2      	ldr	r2, [r0, #12]
 800a10e:	4606      	mov	r6, r0
 800a110:	bb02      	cbnz	r2, 800a154 <_dtoa_r+0xa1c>
 800a112:	4601      	mov	r1, r0
 800a114:	4648      	mov	r0, r9
 800a116:	f000 fc97 	bl	800aa48 <__mcmp>
 800a11a:	4602      	mov	r2, r0
 800a11c:	4631      	mov	r1, r6
 800a11e:	4658      	mov	r0, fp
 800a120:	920e      	str	r2, [sp, #56]	@ 0x38
 800a122:	f000 fa0d 	bl	800a540 <_Bfree>
 800a126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a128:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a12a:	9e07      	ldr	r6, [sp, #28]
 800a12c:	ea43 0102 	orr.w	r1, r3, r2
 800a130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a132:	4319      	orrs	r1, r3
 800a134:	d110      	bne.n	800a158 <_dtoa_r+0xa20>
 800a136:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a13a:	d029      	beq.n	800a190 <_dtoa_r+0xa58>
 800a13c:	9b08      	ldr	r3, [sp, #32]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	dd02      	ble.n	800a148 <_dtoa_r+0xa10>
 800a142:	9b02      	ldr	r3, [sp, #8]
 800a144:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a148:	9b00      	ldr	r3, [sp, #0]
 800a14a:	f883 8000 	strb.w	r8, [r3]
 800a14e:	e63f      	b.n	8009dd0 <_dtoa_r+0x698>
 800a150:	4628      	mov	r0, r5
 800a152:	e7bb      	b.n	800a0cc <_dtoa_r+0x994>
 800a154:	2201      	movs	r2, #1
 800a156:	e7e1      	b.n	800a11c <_dtoa_r+0x9e4>
 800a158:	9b08      	ldr	r3, [sp, #32]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	db04      	blt.n	800a168 <_dtoa_r+0xa30>
 800a15e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a160:	430b      	orrs	r3, r1
 800a162:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a164:	430b      	orrs	r3, r1
 800a166:	d120      	bne.n	800a1aa <_dtoa_r+0xa72>
 800a168:	2a00      	cmp	r2, #0
 800a16a:	dded      	ble.n	800a148 <_dtoa_r+0xa10>
 800a16c:	4649      	mov	r1, r9
 800a16e:	2201      	movs	r2, #1
 800a170:	4658      	mov	r0, fp
 800a172:	f000 fbfd 	bl	800a970 <__lshift>
 800a176:	4621      	mov	r1, r4
 800a178:	4681      	mov	r9, r0
 800a17a:	f000 fc65 	bl	800aa48 <__mcmp>
 800a17e:	2800      	cmp	r0, #0
 800a180:	dc03      	bgt.n	800a18a <_dtoa_r+0xa52>
 800a182:	d1e1      	bne.n	800a148 <_dtoa_r+0xa10>
 800a184:	f018 0f01 	tst.w	r8, #1
 800a188:	d0de      	beq.n	800a148 <_dtoa_r+0xa10>
 800a18a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a18e:	d1d8      	bne.n	800a142 <_dtoa_r+0xa0a>
 800a190:	9a00      	ldr	r2, [sp, #0]
 800a192:	2339      	movs	r3, #57	@ 0x39
 800a194:	7013      	strb	r3, [r2, #0]
 800a196:	4633      	mov	r3, r6
 800a198:	461e      	mov	r6, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a1a0:	2a39      	cmp	r2, #57	@ 0x39
 800a1a2:	d052      	beq.n	800a24a <_dtoa_r+0xb12>
 800a1a4:	3201      	adds	r2, #1
 800a1a6:	701a      	strb	r2, [r3, #0]
 800a1a8:	e612      	b.n	8009dd0 <_dtoa_r+0x698>
 800a1aa:	2a00      	cmp	r2, #0
 800a1ac:	dd07      	ble.n	800a1be <_dtoa_r+0xa86>
 800a1ae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a1b2:	d0ed      	beq.n	800a190 <_dtoa_r+0xa58>
 800a1b4:	9a00      	ldr	r2, [sp, #0]
 800a1b6:	f108 0301 	add.w	r3, r8, #1
 800a1ba:	7013      	strb	r3, [r2, #0]
 800a1bc:	e608      	b.n	8009dd0 <_dtoa_r+0x698>
 800a1be:	9b07      	ldr	r3, [sp, #28]
 800a1c0:	9a07      	ldr	r2, [sp, #28]
 800a1c2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a1c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d028      	beq.n	800a21e <_dtoa_r+0xae6>
 800a1cc:	4649      	mov	r1, r9
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	4658      	mov	r0, fp
 800a1d4:	f000 f9d6 	bl	800a584 <__multadd>
 800a1d8:	42af      	cmp	r7, r5
 800a1da:	4681      	mov	r9, r0
 800a1dc:	f04f 0300 	mov.w	r3, #0
 800a1e0:	f04f 020a 	mov.w	r2, #10
 800a1e4:	4639      	mov	r1, r7
 800a1e6:	4658      	mov	r0, fp
 800a1e8:	d107      	bne.n	800a1fa <_dtoa_r+0xac2>
 800a1ea:	f000 f9cb 	bl	800a584 <__multadd>
 800a1ee:	4607      	mov	r7, r0
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	9b07      	ldr	r3, [sp, #28]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	9307      	str	r3, [sp, #28]
 800a1f8:	e774      	b.n	800a0e4 <_dtoa_r+0x9ac>
 800a1fa:	f000 f9c3 	bl	800a584 <__multadd>
 800a1fe:	4629      	mov	r1, r5
 800a200:	4607      	mov	r7, r0
 800a202:	2300      	movs	r3, #0
 800a204:	220a      	movs	r2, #10
 800a206:	4658      	mov	r0, fp
 800a208:	f000 f9bc 	bl	800a584 <__multadd>
 800a20c:	4605      	mov	r5, r0
 800a20e:	e7f0      	b.n	800a1f2 <_dtoa_r+0xaba>
 800a210:	9b00      	ldr	r3, [sp, #0]
 800a212:	2b00      	cmp	r3, #0
 800a214:	bfcc      	ite	gt
 800a216:	461e      	movgt	r6, r3
 800a218:	2601      	movle	r6, #1
 800a21a:	4456      	add	r6, sl
 800a21c:	2700      	movs	r7, #0
 800a21e:	4649      	mov	r1, r9
 800a220:	2201      	movs	r2, #1
 800a222:	4658      	mov	r0, fp
 800a224:	f000 fba4 	bl	800a970 <__lshift>
 800a228:	4621      	mov	r1, r4
 800a22a:	4681      	mov	r9, r0
 800a22c:	f000 fc0c 	bl	800aa48 <__mcmp>
 800a230:	2800      	cmp	r0, #0
 800a232:	dcb0      	bgt.n	800a196 <_dtoa_r+0xa5e>
 800a234:	d102      	bne.n	800a23c <_dtoa_r+0xb04>
 800a236:	f018 0f01 	tst.w	r8, #1
 800a23a:	d1ac      	bne.n	800a196 <_dtoa_r+0xa5e>
 800a23c:	4633      	mov	r3, r6
 800a23e:	461e      	mov	r6, r3
 800a240:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a244:	2a30      	cmp	r2, #48	@ 0x30
 800a246:	d0fa      	beq.n	800a23e <_dtoa_r+0xb06>
 800a248:	e5c2      	b.n	8009dd0 <_dtoa_r+0x698>
 800a24a:	459a      	cmp	sl, r3
 800a24c:	d1a4      	bne.n	800a198 <_dtoa_r+0xa60>
 800a24e:	9b04      	ldr	r3, [sp, #16]
 800a250:	3301      	adds	r3, #1
 800a252:	9304      	str	r3, [sp, #16]
 800a254:	2331      	movs	r3, #49	@ 0x31
 800a256:	f88a 3000 	strb.w	r3, [sl]
 800a25a:	e5b9      	b.n	8009dd0 <_dtoa_r+0x698>
 800a25c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a25e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a2bc <_dtoa_r+0xb84>
 800a262:	b11b      	cbz	r3, 800a26c <_dtoa_r+0xb34>
 800a264:	f10a 0308 	add.w	r3, sl, #8
 800a268:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a26a:	6013      	str	r3, [r2, #0]
 800a26c:	4650      	mov	r0, sl
 800a26e:	b019      	add	sp, #100	@ 0x64
 800a270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a276:	2b01      	cmp	r3, #1
 800a278:	f77f ae37 	ble.w	8009eea <_dtoa_r+0x7b2>
 800a27c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a27e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a280:	2001      	movs	r0, #1
 800a282:	e655      	b.n	8009f30 <_dtoa_r+0x7f8>
 800a284:	9b00      	ldr	r3, [sp, #0]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f77f aed6 	ble.w	800a038 <_dtoa_r+0x900>
 800a28c:	4656      	mov	r6, sl
 800a28e:	4621      	mov	r1, r4
 800a290:	4648      	mov	r0, r9
 800a292:	f7ff f9c9 	bl	8009628 <quorem>
 800a296:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a29a:	f806 8b01 	strb.w	r8, [r6], #1
 800a29e:	9b00      	ldr	r3, [sp, #0]
 800a2a0:	eba6 020a 	sub.w	r2, r6, sl
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	ddb3      	ble.n	800a210 <_dtoa_r+0xad8>
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	220a      	movs	r2, #10
 800a2ae:	4658      	mov	r0, fp
 800a2b0:	f000 f968 	bl	800a584 <__multadd>
 800a2b4:	4681      	mov	r9, r0
 800a2b6:	e7ea      	b.n	800a28e <_dtoa_r+0xb56>
 800a2b8:	0800e4ed 	.word	0x0800e4ed
 800a2bc:	0800e471 	.word	0x0800e471

0800a2c0 <_free_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	4605      	mov	r5, r0
 800a2c4:	2900      	cmp	r1, #0
 800a2c6:	d041      	beq.n	800a34c <_free_r+0x8c>
 800a2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2cc:	1f0c      	subs	r4, r1, #4
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	bfb8      	it	lt
 800a2d2:	18e4      	addlt	r4, r4, r3
 800a2d4:	f000 f8e8 	bl	800a4a8 <__malloc_lock>
 800a2d8:	4a1d      	ldr	r2, [pc, #116]	@ (800a350 <_free_r+0x90>)
 800a2da:	6813      	ldr	r3, [r2, #0]
 800a2dc:	b933      	cbnz	r3, 800a2ec <_free_r+0x2c>
 800a2de:	6063      	str	r3, [r4, #4]
 800a2e0:	6014      	str	r4, [r2, #0]
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2e8:	f000 b8e4 	b.w	800a4b4 <__malloc_unlock>
 800a2ec:	42a3      	cmp	r3, r4
 800a2ee:	d908      	bls.n	800a302 <_free_r+0x42>
 800a2f0:	6820      	ldr	r0, [r4, #0]
 800a2f2:	1821      	adds	r1, r4, r0
 800a2f4:	428b      	cmp	r3, r1
 800a2f6:	bf01      	itttt	eq
 800a2f8:	6819      	ldreq	r1, [r3, #0]
 800a2fa:	685b      	ldreq	r3, [r3, #4]
 800a2fc:	1809      	addeq	r1, r1, r0
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	e7ed      	b.n	800a2de <_free_r+0x1e>
 800a302:	461a      	mov	r2, r3
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	b10b      	cbz	r3, 800a30c <_free_r+0x4c>
 800a308:	42a3      	cmp	r3, r4
 800a30a:	d9fa      	bls.n	800a302 <_free_r+0x42>
 800a30c:	6811      	ldr	r1, [r2, #0]
 800a30e:	1850      	adds	r0, r2, r1
 800a310:	42a0      	cmp	r0, r4
 800a312:	d10b      	bne.n	800a32c <_free_r+0x6c>
 800a314:	6820      	ldr	r0, [r4, #0]
 800a316:	4401      	add	r1, r0
 800a318:	1850      	adds	r0, r2, r1
 800a31a:	4283      	cmp	r3, r0
 800a31c:	6011      	str	r1, [r2, #0]
 800a31e:	d1e0      	bne.n	800a2e2 <_free_r+0x22>
 800a320:	6818      	ldr	r0, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	6053      	str	r3, [r2, #4]
 800a326:	4408      	add	r0, r1
 800a328:	6010      	str	r0, [r2, #0]
 800a32a:	e7da      	b.n	800a2e2 <_free_r+0x22>
 800a32c:	d902      	bls.n	800a334 <_free_r+0x74>
 800a32e:	230c      	movs	r3, #12
 800a330:	602b      	str	r3, [r5, #0]
 800a332:	e7d6      	b.n	800a2e2 <_free_r+0x22>
 800a334:	6820      	ldr	r0, [r4, #0]
 800a336:	1821      	adds	r1, r4, r0
 800a338:	428b      	cmp	r3, r1
 800a33a:	bf04      	itt	eq
 800a33c:	6819      	ldreq	r1, [r3, #0]
 800a33e:	685b      	ldreq	r3, [r3, #4]
 800a340:	6063      	str	r3, [r4, #4]
 800a342:	bf04      	itt	eq
 800a344:	1809      	addeq	r1, r1, r0
 800a346:	6021      	streq	r1, [r4, #0]
 800a348:	6054      	str	r4, [r2, #4]
 800a34a:	e7ca      	b.n	800a2e2 <_free_r+0x22>
 800a34c:	bd38      	pop	{r3, r4, r5, pc}
 800a34e:	bf00      	nop
 800a350:	20000834 	.word	0x20000834

0800a354 <malloc>:
 800a354:	4b02      	ldr	r3, [pc, #8]	@ (800a360 <malloc+0xc>)
 800a356:	4601      	mov	r1, r0
 800a358:	6818      	ldr	r0, [r3, #0]
 800a35a:	f000 b825 	b.w	800a3a8 <_malloc_r>
 800a35e:	bf00      	nop
 800a360:	20000028 	.word	0x20000028

0800a364 <sbrk_aligned>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	4e0f      	ldr	r6, [pc, #60]	@ (800a3a4 <sbrk_aligned+0x40>)
 800a368:	460c      	mov	r4, r1
 800a36a:	6831      	ldr	r1, [r6, #0]
 800a36c:	4605      	mov	r5, r0
 800a36e:	b911      	cbnz	r1, 800a376 <sbrk_aligned+0x12>
 800a370:	f001 ffd2 	bl	800c318 <_sbrk_r>
 800a374:	6030      	str	r0, [r6, #0]
 800a376:	4621      	mov	r1, r4
 800a378:	4628      	mov	r0, r5
 800a37a:	f001 ffcd 	bl	800c318 <_sbrk_r>
 800a37e:	1c43      	adds	r3, r0, #1
 800a380:	d103      	bne.n	800a38a <sbrk_aligned+0x26>
 800a382:	f04f 34ff 	mov.w	r4, #4294967295
 800a386:	4620      	mov	r0, r4
 800a388:	bd70      	pop	{r4, r5, r6, pc}
 800a38a:	1cc4      	adds	r4, r0, #3
 800a38c:	f024 0403 	bic.w	r4, r4, #3
 800a390:	42a0      	cmp	r0, r4
 800a392:	d0f8      	beq.n	800a386 <sbrk_aligned+0x22>
 800a394:	1a21      	subs	r1, r4, r0
 800a396:	4628      	mov	r0, r5
 800a398:	f001 ffbe 	bl	800c318 <_sbrk_r>
 800a39c:	3001      	adds	r0, #1
 800a39e:	d1f2      	bne.n	800a386 <sbrk_aligned+0x22>
 800a3a0:	e7ef      	b.n	800a382 <sbrk_aligned+0x1e>
 800a3a2:	bf00      	nop
 800a3a4:	20000830 	.word	0x20000830

0800a3a8 <_malloc_r>:
 800a3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3ac:	1ccd      	adds	r5, r1, #3
 800a3ae:	f025 0503 	bic.w	r5, r5, #3
 800a3b2:	3508      	adds	r5, #8
 800a3b4:	2d0c      	cmp	r5, #12
 800a3b6:	bf38      	it	cc
 800a3b8:	250c      	movcc	r5, #12
 800a3ba:	2d00      	cmp	r5, #0
 800a3bc:	4606      	mov	r6, r0
 800a3be:	db01      	blt.n	800a3c4 <_malloc_r+0x1c>
 800a3c0:	42a9      	cmp	r1, r5
 800a3c2:	d904      	bls.n	800a3ce <_malloc_r+0x26>
 800a3c4:	230c      	movs	r3, #12
 800a3c6:	6033      	str	r3, [r6, #0]
 800a3c8:	2000      	movs	r0, #0
 800a3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4a4 <_malloc_r+0xfc>
 800a3d2:	f000 f869 	bl	800a4a8 <__malloc_lock>
 800a3d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a3da:	461c      	mov	r4, r3
 800a3dc:	bb44      	cbnz	r4, 800a430 <_malloc_r+0x88>
 800a3de:	4629      	mov	r1, r5
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	f7ff ffbf 	bl	800a364 <sbrk_aligned>
 800a3e6:	1c43      	adds	r3, r0, #1
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	d158      	bne.n	800a49e <_malloc_r+0xf6>
 800a3ec:	f8d8 4000 	ldr.w	r4, [r8]
 800a3f0:	4627      	mov	r7, r4
 800a3f2:	2f00      	cmp	r7, #0
 800a3f4:	d143      	bne.n	800a47e <_malloc_r+0xd6>
 800a3f6:	2c00      	cmp	r4, #0
 800a3f8:	d04b      	beq.n	800a492 <_malloc_r+0xea>
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	4639      	mov	r1, r7
 800a3fe:	4630      	mov	r0, r6
 800a400:	eb04 0903 	add.w	r9, r4, r3
 800a404:	f001 ff88 	bl	800c318 <_sbrk_r>
 800a408:	4581      	cmp	r9, r0
 800a40a:	d142      	bne.n	800a492 <_malloc_r+0xea>
 800a40c:	6821      	ldr	r1, [r4, #0]
 800a40e:	1a6d      	subs	r5, r5, r1
 800a410:	4629      	mov	r1, r5
 800a412:	4630      	mov	r0, r6
 800a414:	f7ff ffa6 	bl	800a364 <sbrk_aligned>
 800a418:	3001      	adds	r0, #1
 800a41a:	d03a      	beq.n	800a492 <_malloc_r+0xea>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	442b      	add	r3, r5
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	f8d8 3000 	ldr.w	r3, [r8]
 800a426:	685a      	ldr	r2, [r3, #4]
 800a428:	bb62      	cbnz	r2, 800a484 <_malloc_r+0xdc>
 800a42a:	f8c8 7000 	str.w	r7, [r8]
 800a42e:	e00f      	b.n	800a450 <_malloc_r+0xa8>
 800a430:	6822      	ldr	r2, [r4, #0]
 800a432:	1b52      	subs	r2, r2, r5
 800a434:	d420      	bmi.n	800a478 <_malloc_r+0xd0>
 800a436:	2a0b      	cmp	r2, #11
 800a438:	d917      	bls.n	800a46a <_malloc_r+0xc2>
 800a43a:	1961      	adds	r1, r4, r5
 800a43c:	42a3      	cmp	r3, r4
 800a43e:	6025      	str	r5, [r4, #0]
 800a440:	bf18      	it	ne
 800a442:	6059      	strne	r1, [r3, #4]
 800a444:	6863      	ldr	r3, [r4, #4]
 800a446:	bf08      	it	eq
 800a448:	f8c8 1000 	streq.w	r1, [r8]
 800a44c:	5162      	str	r2, [r4, r5]
 800a44e:	604b      	str	r3, [r1, #4]
 800a450:	4630      	mov	r0, r6
 800a452:	f000 f82f 	bl	800a4b4 <__malloc_unlock>
 800a456:	f104 000b 	add.w	r0, r4, #11
 800a45a:	1d23      	adds	r3, r4, #4
 800a45c:	f020 0007 	bic.w	r0, r0, #7
 800a460:	1ac2      	subs	r2, r0, r3
 800a462:	bf1c      	itt	ne
 800a464:	1a1b      	subne	r3, r3, r0
 800a466:	50a3      	strne	r3, [r4, r2]
 800a468:	e7af      	b.n	800a3ca <_malloc_r+0x22>
 800a46a:	6862      	ldr	r2, [r4, #4]
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	bf0c      	ite	eq
 800a470:	f8c8 2000 	streq.w	r2, [r8]
 800a474:	605a      	strne	r2, [r3, #4]
 800a476:	e7eb      	b.n	800a450 <_malloc_r+0xa8>
 800a478:	4623      	mov	r3, r4
 800a47a:	6864      	ldr	r4, [r4, #4]
 800a47c:	e7ae      	b.n	800a3dc <_malloc_r+0x34>
 800a47e:	463c      	mov	r4, r7
 800a480:	687f      	ldr	r7, [r7, #4]
 800a482:	e7b6      	b.n	800a3f2 <_malloc_r+0x4a>
 800a484:	461a      	mov	r2, r3
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	42a3      	cmp	r3, r4
 800a48a:	d1fb      	bne.n	800a484 <_malloc_r+0xdc>
 800a48c:	2300      	movs	r3, #0
 800a48e:	6053      	str	r3, [r2, #4]
 800a490:	e7de      	b.n	800a450 <_malloc_r+0xa8>
 800a492:	230c      	movs	r3, #12
 800a494:	6033      	str	r3, [r6, #0]
 800a496:	4630      	mov	r0, r6
 800a498:	f000 f80c 	bl	800a4b4 <__malloc_unlock>
 800a49c:	e794      	b.n	800a3c8 <_malloc_r+0x20>
 800a49e:	6005      	str	r5, [r0, #0]
 800a4a0:	e7d6      	b.n	800a450 <_malloc_r+0xa8>
 800a4a2:	bf00      	nop
 800a4a4:	20000834 	.word	0x20000834

0800a4a8 <__malloc_lock>:
 800a4a8:	4801      	ldr	r0, [pc, #4]	@ (800a4b0 <__malloc_lock+0x8>)
 800a4aa:	f7ff b8b4 	b.w	8009616 <__retarget_lock_acquire_recursive>
 800a4ae:	bf00      	nop
 800a4b0:	2000082c 	.word	0x2000082c

0800a4b4 <__malloc_unlock>:
 800a4b4:	4801      	ldr	r0, [pc, #4]	@ (800a4bc <__malloc_unlock+0x8>)
 800a4b6:	f7ff b8af 	b.w	8009618 <__retarget_lock_release_recursive>
 800a4ba:	bf00      	nop
 800a4bc:	2000082c 	.word	0x2000082c

0800a4c0 <_Balloc>:
 800a4c0:	b570      	push	{r4, r5, r6, lr}
 800a4c2:	69c6      	ldr	r6, [r0, #28]
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460d      	mov	r5, r1
 800a4c8:	b976      	cbnz	r6, 800a4e8 <_Balloc+0x28>
 800a4ca:	2010      	movs	r0, #16
 800a4cc:	f7ff ff42 	bl	800a354 <malloc>
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	61e0      	str	r0, [r4, #28]
 800a4d4:	b920      	cbnz	r0, 800a4e0 <_Balloc+0x20>
 800a4d6:	4b18      	ldr	r3, [pc, #96]	@ (800a538 <_Balloc+0x78>)
 800a4d8:	4818      	ldr	r0, [pc, #96]	@ (800a53c <_Balloc+0x7c>)
 800a4da:	216b      	movs	r1, #107	@ 0x6b
 800a4dc:	f001 ff44 	bl	800c368 <__assert_func>
 800a4e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a4e4:	6006      	str	r6, [r0, #0]
 800a4e6:	60c6      	str	r6, [r0, #12]
 800a4e8:	69e6      	ldr	r6, [r4, #28]
 800a4ea:	68f3      	ldr	r3, [r6, #12]
 800a4ec:	b183      	cbz	r3, 800a510 <_Balloc+0x50>
 800a4ee:	69e3      	ldr	r3, [r4, #28]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4f6:	b9b8      	cbnz	r0, 800a528 <_Balloc+0x68>
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	fa01 f605 	lsl.w	r6, r1, r5
 800a4fe:	1d72      	adds	r2, r6, #5
 800a500:	0092      	lsls	r2, r2, #2
 800a502:	4620      	mov	r0, r4
 800a504:	f001 ff4e 	bl	800c3a4 <_calloc_r>
 800a508:	b160      	cbz	r0, 800a524 <_Balloc+0x64>
 800a50a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a50e:	e00e      	b.n	800a52e <_Balloc+0x6e>
 800a510:	2221      	movs	r2, #33	@ 0x21
 800a512:	2104      	movs	r1, #4
 800a514:	4620      	mov	r0, r4
 800a516:	f001 ff45 	bl	800c3a4 <_calloc_r>
 800a51a:	69e3      	ldr	r3, [r4, #28]
 800a51c:	60f0      	str	r0, [r6, #12]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	d1e4      	bne.n	800a4ee <_Balloc+0x2e>
 800a524:	2000      	movs	r0, #0
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	6802      	ldr	r2, [r0, #0]
 800a52a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a52e:	2300      	movs	r3, #0
 800a530:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a534:	e7f7      	b.n	800a526 <_Balloc+0x66>
 800a536:	bf00      	nop
 800a538:	0800e47e 	.word	0x0800e47e
 800a53c:	0800e4fe 	.word	0x0800e4fe

0800a540 <_Bfree>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	69c6      	ldr	r6, [r0, #28]
 800a544:	4605      	mov	r5, r0
 800a546:	460c      	mov	r4, r1
 800a548:	b976      	cbnz	r6, 800a568 <_Bfree+0x28>
 800a54a:	2010      	movs	r0, #16
 800a54c:	f7ff ff02 	bl	800a354 <malloc>
 800a550:	4602      	mov	r2, r0
 800a552:	61e8      	str	r0, [r5, #28]
 800a554:	b920      	cbnz	r0, 800a560 <_Bfree+0x20>
 800a556:	4b09      	ldr	r3, [pc, #36]	@ (800a57c <_Bfree+0x3c>)
 800a558:	4809      	ldr	r0, [pc, #36]	@ (800a580 <_Bfree+0x40>)
 800a55a:	218f      	movs	r1, #143	@ 0x8f
 800a55c:	f001 ff04 	bl	800c368 <__assert_func>
 800a560:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a564:	6006      	str	r6, [r0, #0]
 800a566:	60c6      	str	r6, [r0, #12]
 800a568:	b13c      	cbz	r4, 800a57a <_Bfree+0x3a>
 800a56a:	69eb      	ldr	r3, [r5, #28]
 800a56c:	6862      	ldr	r2, [r4, #4]
 800a56e:	68db      	ldr	r3, [r3, #12]
 800a570:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a574:	6021      	str	r1, [r4, #0]
 800a576:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a57a:	bd70      	pop	{r4, r5, r6, pc}
 800a57c:	0800e47e 	.word	0x0800e47e
 800a580:	0800e4fe 	.word	0x0800e4fe

0800a584 <__multadd>:
 800a584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a588:	690d      	ldr	r5, [r1, #16]
 800a58a:	4607      	mov	r7, r0
 800a58c:	460c      	mov	r4, r1
 800a58e:	461e      	mov	r6, r3
 800a590:	f101 0c14 	add.w	ip, r1, #20
 800a594:	2000      	movs	r0, #0
 800a596:	f8dc 3000 	ldr.w	r3, [ip]
 800a59a:	b299      	uxth	r1, r3
 800a59c:	fb02 6101 	mla	r1, r2, r1, r6
 800a5a0:	0c1e      	lsrs	r6, r3, #16
 800a5a2:	0c0b      	lsrs	r3, r1, #16
 800a5a4:	fb02 3306 	mla	r3, r2, r6, r3
 800a5a8:	b289      	uxth	r1, r1
 800a5aa:	3001      	adds	r0, #1
 800a5ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a5b0:	4285      	cmp	r5, r0
 800a5b2:	f84c 1b04 	str.w	r1, [ip], #4
 800a5b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a5ba:	dcec      	bgt.n	800a596 <__multadd+0x12>
 800a5bc:	b30e      	cbz	r6, 800a602 <__multadd+0x7e>
 800a5be:	68a3      	ldr	r3, [r4, #8]
 800a5c0:	42ab      	cmp	r3, r5
 800a5c2:	dc19      	bgt.n	800a5f8 <__multadd+0x74>
 800a5c4:	6861      	ldr	r1, [r4, #4]
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	3101      	adds	r1, #1
 800a5ca:	f7ff ff79 	bl	800a4c0 <_Balloc>
 800a5ce:	4680      	mov	r8, r0
 800a5d0:	b928      	cbnz	r0, 800a5de <__multadd+0x5a>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	@ (800a608 <__multadd+0x84>)
 800a5d6:	480d      	ldr	r0, [pc, #52]	@ (800a60c <__multadd+0x88>)
 800a5d8:	21ba      	movs	r1, #186	@ 0xba
 800a5da:	f001 fec5 	bl	800c368 <__assert_func>
 800a5de:	6922      	ldr	r2, [r4, #16]
 800a5e0:	3202      	adds	r2, #2
 800a5e2:	f104 010c 	add.w	r1, r4, #12
 800a5e6:	0092      	lsls	r2, r2, #2
 800a5e8:	300c      	adds	r0, #12
 800a5ea:	f001 fea5 	bl	800c338 <memcpy>
 800a5ee:	4621      	mov	r1, r4
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	f7ff ffa5 	bl	800a540 <_Bfree>
 800a5f6:	4644      	mov	r4, r8
 800a5f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5fc:	3501      	adds	r5, #1
 800a5fe:	615e      	str	r6, [r3, #20]
 800a600:	6125      	str	r5, [r4, #16]
 800a602:	4620      	mov	r0, r4
 800a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a608:	0800e4ed 	.word	0x0800e4ed
 800a60c:	0800e4fe 	.word	0x0800e4fe

0800a610 <__s2b>:
 800a610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a614:	460c      	mov	r4, r1
 800a616:	4615      	mov	r5, r2
 800a618:	461f      	mov	r7, r3
 800a61a:	2209      	movs	r2, #9
 800a61c:	3308      	adds	r3, #8
 800a61e:	4606      	mov	r6, r0
 800a620:	fb93 f3f2 	sdiv	r3, r3, r2
 800a624:	2100      	movs	r1, #0
 800a626:	2201      	movs	r2, #1
 800a628:	429a      	cmp	r2, r3
 800a62a:	db09      	blt.n	800a640 <__s2b+0x30>
 800a62c:	4630      	mov	r0, r6
 800a62e:	f7ff ff47 	bl	800a4c0 <_Balloc>
 800a632:	b940      	cbnz	r0, 800a646 <__s2b+0x36>
 800a634:	4602      	mov	r2, r0
 800a636:	4b19      	ldr	r3, [pc, #100]	@ (800a69c <__s2b+0x8c>)
 800a638:	4819      	ldr	r0, [pc, #100]	@ (800a6a0 <__s2b+0x90>)
 800a63a:	21d3      	movs	r1, #211	@ 0xd3
 800a63c:	f001 fe94 	bl	800c368 <__assert_func>
 800a640:	0052      	lsls	r2, r2, #1
 800a642:	3101      	adds	r1, #1
 800a644:	e7f0      	b.n	800a628 <__s2b+0x18>
 800a646:	9b08      	ldr	r3, [sp, #32]
 800a648:	6143      	str	r3, [r0, #20]
 800a64a:	2d09      	cmp	r5, #9
 800a64c:	f04f 0301 	mov.w	r3, #1
 800a650:	6103      	str	r3, [r0, #16]
 800a652:	dd16      	ble.n	800a682 <__s2b+0x72>
 800a654:	f104 0909 	add.w	r9, r4, #9
 800a658:	46c8      	mov	r8, r9
 800a65a:	442c      	add	r4, r5
 800a65c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a660:	4601      	mov	r1, r0
 800a662:	3b30      	subs	r3, #48	@ 0x30
 800a664:	220a      	movs	r2, #10
 800a666:	4630      	mov	r0, r6
 800a668:	f7ff ff8c 	bl	800a584 <__multadd>
 800a66c:	45a0      	cmp	r8, r4
 800a66e:	d1f5      	bne.n	800a65c <__s2b+0x4c>
 800a670:	f1a5 0408 	sub.w	r4, r5, #8
 800a674:	444c      	add	r4, r9
 800a676:	1b2d      	subs	r5, r5, r4
 800a678:	1963      	adds	r3, r4, r5
 800a67a:	42bb      	cmp	r3, r7
 800a67c:	db04      	blt.n	800a688 <__s2b+0x78>
 800a67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a682:	340a      	adds	r4, #10
 800a684:	2509      	movs	r5, #9
 800a686:	e7f6      	b.n	800a676 <__s2b+0x66>
 800a688:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a68c:	4601      	mov	r1, r0
 800a68e:	3b30      	subs	r3, #48	@ 0x30
 800a690:	220a      	movs	r2, #10
 800a692:	4630      	mov	r0, r6
 800a694:	f7ff ff76 	bl	800a584 <__multadd>
 800a698:	e7ee      	b.n	800a678 <__s2b+0x68>
 800a69a:	bf00      	nop
 800a69c:	0800e4ed 	.word	0x0800e4ed
 800a6a0:	0800e4fe 	.word	0x0800e4fe

0800a6a4 <__hi0bits>:
 800a6a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a6a8:	4603      	mov	r3, r0
 800a6aa:	bf36      	itet	cc
 800a6ac:	0403      	lslcc	r3, r0, #16
 800a6ae:	2000      	movcs	r0, #0
 800a6b0:	2010      	movcc	r0, #16
 800a6b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a6b6:	bf3c      	itt	cc
 800a6b8:	021b      	lslcc	r3, r3, #8
 800a6ba:	3008      	addcc	r0, #8
 800a6bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6c0:	bf3c      	itt	cc
 800a6c2:	011b      	lslcc	r3, r3, #4
 800a6c4:	3004      	addcc	r0, #4
 800a6c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6ca:	bf3c      	itt	cc
 800a6cc:	009b      	lslcc	r3, r3, #2
 800a6ce:	3002      	addcc	r0, #2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	db05      	blt.n	800a6e0 <__hi0bits+0x3c>
 800a6d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6d8:	f100 0001 	add.w	r0, r0, #1
 800a6dc:	bf08      	it	eq
 800a6de:	2020      	moveq	r0, #32
 800a6e0:	4770      	bx	lr

0800a6e2 <__lo0bits>:
 800a6e2:	6803      	ldr	r3, [r0, #0]
 800a6e4:	4602      	mov	r2, r0
 800a6e6:	f013 0007 	ands.w	r0, r3, #7
 800a6ea:	d00b      	beq.n	800a704 <__lo0bits+0x22>
 800a6ec:	07d9      	lsls	r1, r3, #31
 800a6ee:	d421      	bmi.n	800a734 <__lo0bits+0x52>
 800a6f0:	0798      	lsls	r0, r3, #30
 800a6f2:	bf49      	itett	mi
 800a6f4:	085b      	lsrmi	r3, r3, #1
 800a6f6:	089b      	lsrpl	r3, r3, #2
 800a6f8:	2001      	movmi	r0, #1
 800a6fa:	6013      	strmi	r3, [r2, #0]
 800a6fc:	bf5c      	itt	pl
 800a6fe:	6013      	strpl	r3, [r2, #0]
 800a700:	2002      	movpl	r0, #2
 800a702:	4770      	bx	lr
 800a704:	b299      	uxth	r1, r3
 800a706:	b909      	cbnz	r1, 800a70c <__lo0bits+0x2a>
 800a708:	0c1b      	lsrs	r3, r3, #16
 800a70a:	2010      	movs	r0, #16
 800a70c:	b2d9      	uxtb	r1, r3
 800a70e:	b909      	cbnz	r1, 800a714 <__lo0bits+0x32>
 800a710:	3008      	adds	r0, #8
 800a712:	0a1b      	lsrs	r3, r3, #8
 800a714:	0719      	lsls	r1, r3, #28
 800a716:	bf04      	itt	eq
 800a718:	091b      	lsreq	r3, r3, #4
 800a71a:	3004      	addeq	r0, #4
 800a71c:	0799      	lsls	r1, r3, #30
 800a71e:	bf04      	itt	eq
 800a720:	089b      	lsreq	r3, r3, #2
 800a722:	3002      	addeq	r0, #2
 800a724:	07d9      	lsls	r1, r3, #31
 800a726:	d403      	bmi.n	800a730 <__lo0bits+0x4e>
 800a728:	085b      	lsrs	r3, r3, #1
 800a72a:	f100 0001 	add.w	r0, r0, #1
 800a72e:	d003      	beq.n	800a738 <__lo0bits+0x56>
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	4770      	bx	lr
 800a734:	2000      	movs	r0, #0
 800a736:	4770      	bx	lr
 800a738:	2020      	movs	r0, #32
 800a73a:	4770      	bx	lr

0800a73c <__i2b>:
 800a73c:	b510      	push	{r4, lr}
 800a73e:	460c      	mov	r4, r1
 800a740:	2101      	movs	r1, #1
 800a742:	f7ff febd 	bl	800a4c0 <_Balloc>
 800a746:	4602      	mov	r2, r0
 800a748:	b928      	cbnz	r0, 800a756 <__i2b+0x1a>
 800a74a:	4b05      	ldr	r3, [pc, #20]	@ (800a760 <__i2b+0x24>)
 800a74c:	4805      	ldr	r0, [pc, #20]	@ (800a764 <__i2b+0x28>)
 800a74e:	f240 1145 	movw	r1, #325	@ 0x145
 800a752:	f001 fe09 	bl	800c368 <__assert_func>
 800a756:	2301      	movs	r3, #1
 800a758:	6144      	str	r4, [r0, #20]
 800a75a:	6103      	str	r3, [r0, #16]
 800a75c:	bd10      	pop	{r4, pc}
 800a75e:	bf00      	nop
 800a760:	0800e4ed 	.word	0x0800e4ed
 800a764:	0800e4fe 	.word	0x0800e4fe

0800a768 <__multiply>:
 800a768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76c:	4614      	mov	r4, r2
 800a76e:	690a      	ldr	r2, [r1, #16]
 800a770:	6923      	ldr	r3, [r4, #16]
 800a772:	429a      	cmp	r2, r3
 800a774:	bfa8      	it	ge
 800a776:	4623      	movge	r3, r4
 800a778:	460f      	mov	r7, r1
 800a77a:	bfa4      	itt	ge
 800a77c:	460c      	movge	r4, r1
 800a77e:	461f      	movge	r7, r3
 800a780:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a784:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a788:	68a3      	ldr	r3, [r4, #8]
 800a78a:	6861      	ldr	r1, [r4, #4]
 800a78c:	eb0a 0609 	add.w	r6, sl, r9
 800a790:	42b3      	cmp	r3, r6
 800a792:	b085      	sub	sp, #20
 800a794:	bfb8      	it	lt
 800a796:	3101      	addlt	r1, #1
 800a798:	f7ff fe92 	bl	800a4c0 <_Balloc>
 800a79c:	b930      	cbnz	r0, 800a7ac <__multiply+0x44>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	4b44      	ldr	r3, [pc, #272]	@ (800a8b4 <__multiply+0x14c>)
 800a7a2:	4845      	ldr	r0, [pc, #276]	@ (800a8b8 <__multiply+0x150>)
 800a7a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a7a8:	f001 fdde 	bl	800c368 <__assert_func>
 800a7ac:	f100 0514 	add.w	r5, r0, #20
 800a7b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a7b4:	462b      	mov	r3, r5
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	4543      	cmp	r3, r8
 800a7ba:	d321      	bcc.n	800a800 <__multiply+0x98>
 800a7bc:	f107 0114 	add.w	r1, r7, #20
 800a7c0:	f104 0214 	add.w	r2, r4, #20
 800a7c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a7c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a7cc:	9302      	str	r3, [sp, #8]
 800a7ce:	1b13      	subs	r3, r2, r4
 800a7d0:	3b15      	subs	r3, #21
 800a7d2:	f023 0303 	bic.w	r3, r3, #3
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	f104 0715 	add.w	r7, r4, #21
 800a7dc:	42ba      	cmp	r2, r7
 800a7de:	bf38      	it	cc
 800a7e0:	2304      	movcc	r3, #4
 800a7e2:	9301      	str	r3, [sp, #4]
 800a7e4:	9b02      	ldr	r3, [sp, #8]
 800a7e6:	9103      	str	r1, [sp, #12]
 800a7e8:	428b      	cmp	r3, r1
 800a7ea:	d80c      	bhi.n	800a806 <__multiply+0x9e>
 800a7ec:	2e00      	cmp	r6, #0
 800a7ee:	dd03      	ble.n	800a7f8 <__multiply+0x90>
 800a7f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d05b      	beq.n	800a8b0 <__multiply+0x148>
 800a7f8:	6106      	str	r6, [r0, #16]
 800a7fa:	b005      	add	sp, #20
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	f843 2b04 	str.w	r2, [r3], #4
 800a804:	e7d8      	b.n	800a7b8 <__multiply+0x50>
 800a806:	f8b1 a000 	ldrh.w	sl, [r1]
 800a80a:	f1ba 0f00 	cmp.w	sl, #0
 800a80e:	d024      	beq.n	800a85a <__multiply+0xf2>
 800a810:	f104 0e14 	add.w	lr, r4, #20
 800a814:	46a9      	mov	r9, r5
 800a816:	f04f 0c00 	mov.w	ip, #0
 800a81a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a81e:	f8d9 3000 	ldr.w	r3, [r9]
 800a822:	fa1f fb87 	uxth.w	fp, r7
 800a826:	b29b      	uxth	r3, r3
 800a828:	fb0a 330b 	mla	r3, sl, fp, r3
 800a82c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a830:	f8d9 7000 	ldr.w	r7, [r9]
 800a834:	4463      	add	r3, ip
 800a836:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a83a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a83e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a842:	b29b      	uxth	r3, r3
 800a844:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a848:	4572      	cmp	r2, lr
 800a84a:	f849 3b04 	str.w	r3, [r9], #4
 800a84e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a852:	d8e2      	bhi.n	800a81a <__multiply+0xb2>
 800a854:	9b01      	ldr	r3, [sp, #4]
 800a856:	f845 c003 	str.w	ip, [r5, r3]
 800a85a:	9b03      	ldr	r3, [sp, #12]
 800a85c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a860:	3104      	adds	r1, #4
 800a862:	f1b9 0f00 	cmp.w	r9, #0
 800a866:	d021      	beq.n	800a8ac <__multiply+0x144>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	f104 0c14 	add.w	ip, r4, #20
 800a86e:	46ae      	mov	lr, r5
 800a870:	f04f 0a00 	mov.w	sl, #0
 800a874:	f8bc b000 	ldrh.w	fp, [ip]
 800a878:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a87c:	fb09 770b 	mla	r7, r9, fp, r7
 800a880:	4457      	add	r7, sl
 800a882:	b29b      	uxth	r3, r3
 800a884:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a888:	f84e 3b04 	str.w	r3, [lr], #4
 800a88c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a890:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a894:	f8be 3000 	ldrh.w	r3, [lr]
 800a898:	fb09 330a 	mla	r3, r9, sl, r3
 800a89c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a8a0:	4562      	cmp	r2, ip
 800a8a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a8a6:	d8e5      	bhi.n	800a874 <__multiply+0x10c>
 800a8a8:	9f01      	ldr	r7, [sp, #4]
 800a8aa:	51eb      	str	r3, [r5, r7]
 800a8ac:	3504      	adds	r5, #4
 800a8ae:	e799      	b.n	800a7e4 <__multiply+0x7c>
 800a8b0:	3e01      	subs	r6, #1
 800a8b2:	e79b      	b.n	800a7ec <__multiply+0x84>
 800a8b4:	0800e4ed 	.word	0x0800e4ed
 800a8b8:	0800e4fe 	.word	0x0800e4fe

0800a8bc <__pow5mult>:
 800a8bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8c0:	4615      	mov	r5, r2
 800a8c2:	f012 0203 	ands.w	r2, r2, #3
 800a8c6:	4607      	mov	r7, r0
 800a8c8:	460e      	mov	r6, r1
 800a8ca:	d007      	beq.n	800a8dc <__pow5mult+0x20>
 800a8cc:	4c25      	ldr	r4, [pc, #148]	@ (800a964 <__pow5mult+0xa8>)
 800a8ce:	3a01      	subs	r2, #1
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a8d6:	f7ff fe55 	bl	800a584 <__multadd>
 800a8da:	4606      	mov	r6, r0
 800a8dc:	10ad      	asrs	r5, r5, #2
 800a8de:	d03d      	beq.n	800a95c <__pow5mult+0xa0>
 800a8e0:	69fc      	ldr	r4, [r7, #28]
 800a8e2:	b97c      	cbnz	r4, 800a904 <__pow5mult+0x48>
 800a8e4:	2010      	movs	r0, #16
 800a8e6:	f7ff fd35 	bl	800a354 <malloc>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	61f8      	str	r0, [r7, #28]
 800a8ee:	b928      	cbnz	r0, 800a8fc <__pow5mult+0x40>
 800a8f0:	4b1d      	ldr	r3, [pc, #116]	@ (800a968 <__pow5mult+0xac>)
 800a8f2:	481e      	ldr	r0, [pc, #120]	@ (800a96c <__pow5mult+0xb0>)
 800a8f4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8f8:	f001 fd36 	bl	800c368 <__assert_func>
 800a8fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a900:	6004      	str	r4, [r0, #0]
 800a902:	60c4      	str	r4, [r0, #12]
 800a904:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a908:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a90c:	b94c      	cbnz	r4, 800a922 <__pow5mult+0x66>
 800a90e:	f240 2171 	movw	r1, #625	@ 0x271
 800a912:	4638      	mov	r0, r7
 800a914:	f7ff ff12 	bl	800a73c <__i2b>
 800a918:	2300      	movs	r3, #0
 800a91a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a91e:	4604      	mov	r4, r0
 800a920:	6003      	str	r3, [r0, #0]
 800a922:	f04f 0900 	mov.w	r9, #0
 800a926:	07eb      	lsls	r3, r5, #31
 800a928:	d50a      	bpl.n	800a940 <__pow5mult+0x84>
 800a92a:	4631      	mov	r1, r6
 800a92c:	4622      	mov	r2, r4
 800a92e:	4638      	mov	r0, r7
 800a930:	f7ff ff1a 	bl	800a768 <__multiply>
 800a934:	4631      	mov	r1, r6
 800a936:	4680      	mov	r8, r0
 800a938:	4638      	mov	r0, r7
 800a93a:	f7ff fe01 	bl	800a540 <_Bfree>
 800a93e:	4646      	mov	r6, r8
 800a940:	106d      	asrs	r5, r5, #1
 800a942:	d00b      	beq.n	800a95c <__pow5mult+0xa0>
 800a944:	6820      	ldr	r0, [r4, #0]
 800a946:	b938      	cbnz	r0, 800a958 <__pow5mult+0x9c>
 800a948:	4622      	mov	r2, r4
 800a94a:	4621      	mov	r1, r4
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7ff ff0b 	bl	800a768 <__multiply>
 800a952:	6020      	str	r0, [r4, #0]
 800a954:	f8c0 9000 	str.w	r9, [r0]
 800a958:	4604      	mov	r4, r0
 800a95a:	e7e4      	b.n	800a926 <__pow5mult+0x6a>
 800a95c:	4630      	mov	r0, r6
 800a95e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a962:	bf00      	nop
 800a964:	0800e558 	.word	0x0800e558
 800a968:	0800e47e 	.word	0x0800e47e
 800a96c:	0800e4fe 	.word	0x0800e4fe

0800a970 <__lshift>:
 800a970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a974:	460c      	mov	r4, r1
 800a976:	6849      	ldr	r1, [r1, #4]
 800a978:	6923      	ldr	r3, [r4, #16]
 800a97a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a97e:	68a3      	ldr	r3, [r4, #8]
 800a980:	4607      	mov	r7, r0
 800a982:	4691      	mov	r9, r2
 800a984:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a988:	f108 0601 	add.w	r6, r8, #1
 800a98c:	42b3      	cmp	r3, r6
 800a98e:	db0b      	blt.n	800a9a8 <__lshift+0x38>
 800a990:	4638      	mov	r0, r7
 800a992:	f7ff fd95 	bl	800a4c0 <_Balloc>
 800a996:	4605      	mov	r5, r0
 800a998:	b948      	cbnz	r0, 800a9ae <__lshift+0x3e>
 800a99a:	4602      	mov	r2, r0
 800a99c:	4b28      	ldr	r3, [pc, #160]	@ (800aa40 <__lshift+0xd0>)
 800a99e:	4829      	ldr	r0, [pc, #164]	@ (800aa44 <__lshift+0xd4>)
 800a9a0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a9a4:	f001 fce0 	bl	800c368 <__assert_func>
 800a9a8:	3101      	adds	r1, #1
 800a9aa:	005b      	lsls	r3, r3, #1
 800a9ac:	e7ee      	b.n	800a98c <__lshift+0x1c>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f100 0114 	add.w	r1, r0, #20
 800a9b4:	f100 0210 	add.w	r2, r0, #16
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	4553      	cmp	r3, sl
 800a9bc:	db33      	blt.n	800aa26 <__lshift+0xb6>
 800a9be:	6920      	ldr	r0, [r4, #16]
 800a9c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a9c4:	f104 0314 	add.w	r3, r4, #20
 800a9c8:	f019 091f 	ands.w	r9, r9, #31
 800a9cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a9d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a9d4:	d02b      	beq.n	800aa2e <__lshift+0xbe>
 800a9d6:	f1c9 0e20 	rsb	lr, r9, #32
 800a9da:	468a      	mov	sl, r1
 800a9dc:	2200      	movs	r2, #0
 800a9de:	6818      	ldr	r0, [r3, #0]
 800a9e0:	fa00 f009 	lsl.w	r0, r0, r9
 800a9e4:	4310      	orrs	r0, r2
 800a9e6:	f84a 0b04 	str.w	r0, [sl], #4
 800a9ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9ee:	459c      	cmp	ip, r3
 800a9f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9f4:	d8f3      	bhi.n	800a9de <__lshift+0x6e>
 800a9f6:	ebac 0304 	sub.w	r3, ip, r4
 800a9fa:	3b15      	subs	r3, #21
 800a9fc:	f023 0303 	bic.w	r3, r3, #3
 800aa00:	3304      	adds	r3, #4
 800aa02:	f104 0015 	add.w	r0, r4, #21
 800aa06:	4584      	cmp	ip, r0
 800aa08:	bf38      	it	cc
 800aa0a:	2304      	movcc	r3, #4
 800aa0c:	50ca      	str	r2, [r1, r3]
 800aa0e:	b10a      	cbz	r2, 800aa14 <__lshift+0xa4>
 800aa10:	f108 0602 	add.w	r6, r8, #2
 800aa14:	3e01      	subs	r6, #1
 800aa16:	4638      	mov	r0, r7
 800aa18:	612e      	str	r6, [r5, #16]
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	f7ff fd90 	bl	800a540 <_Bfree>
 800aa20:	4628      	mov	r0, r5
 800aa22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa26:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa2a:	3301      	adds	r3, #1
 800aa2c:	e7c5      	b.n	800a9ba <__lshift+0x4a>
 800aa2e:	3904      	subs	r1, #4
 800aa30:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa34:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa38:	459c      	cmp	ip, r3
 800aa3a:	d8f9      	bhi.n	800aa30 <__lshift+0xc0>
 800aa3c:	e7ea      	b.n	800aa14 <__lshift+0xa4>
 800aa3e:	bf00      	nop
 800aa40:	0800e4ed 	.word	0x0800e4ed
 800aa44:	0800e4fe 	.word	0x0800e4fe

0800aa48 <__mcmp>:
 800aa48:	690a      	ldr	r2, [r1, #16]
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6900      	ldr	r0, [r0, #16]
 800aa4e:	1a80      	subs	r0, r0, r2
 800aa50:	b530      	push	{r4, r5, lr}
 800aa52:	d10e      	bne.n	800aa72 <__mcmp+0x2a>
 800aa54:	3314      	adds	r3, #20
 800aa56:	3114      	adds	r1, #20
 800aa58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa68:	4295      	cmp	r5, r2
 800aa6a:	d003      	beq.n	800aa74 <__mcmp+0x2c>
 800aa6c:	d205      	bcs.n	800aa7a <__mcmp+0x32>
 800aa6e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa72:	bd30      	pop	{r4, r5, pc}
 800aa74:	42a3      	cmp	r3, r4
 800aa76:	d3f3      	bcc.n	800aa60 <__mcmp+0x18>
 800aa78:	e7fb      	b.n	800aa72 <__mcmp+0x2a>
 800aa7a:	2001      	movs	r0, #1
 800aa7c:	e7f9      	b.n	800aa72 <__mcmp+0x2a>
	...

0800aa80 <__mdiff>:
 800aa80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	4689      	mov	r9, r1
 800aa86:	4606      	mov	r6, r0
 800aa88:	4611      	mov	r1, r2
 800aa8a:	4648      	mov	r0, r9
 800aa8c:	4614      	mov	r4, r2
 800aa8e:	f7ff ffdb 	bl	800aa48 <__mcmp>
 800aa92:	1e05      	subs	r5, r0, #0
 800aa94:	d112      	bne.n	800aabc <__mdiff+0x3c>
 800aa96:	4629      	mov	r1, r5
 800aa98:	4630      	mov	r0, r6
 800aa9a:	f7ff fd11 	bl	800a4c0 <_Balloc>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	b928      	cbnz	r0, 800aaae <__mdiff+0x2e>
 800aaa2:	4b3f      	ldr	r3, [pc, #252]	@ (800aba0 <__mdiff+0x120>)
 800aaa4:	f240 2137 	movw	r1, #567	@ 0x237
 800aaa8:	483e      	ldr	r0, [pc, #248]	@ (800aba4 <__mdiff+0x124>)
 800aaaa:	f001 fc5d 	bl	800c368 <__assert_func>
 800aaae:	2301      	movs	r3, #1
 800aab0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aab4:	4610      	mov	r0, r2
 800aab6:	b003      	add	sp, #12
 800aab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aabc:	bfbc      	itt	lt
 800aabe:	464b      	movlt	r3, r9
 800aac0:	46a1      	movlt	r9, r4
 800aac2:	4630      	mov	r0, r6
 800aac4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aac8:	bfba      	itte	lt
 800aaca:	461c      	movlt	r4, r3
 800aacc:	2501      	movlt	r5, #1
 800aace:	2500      	movge	r5, #0
 800aad0:	f7ff fcf6 	bl	800a4c0 <_Balloc>
 800aad4:	4602      	mov	r2, r0
 800aad6:	b918      	cbnz	r0, 800aae0 <__mdiff+0x60>
 800aad8:	4b31      	ldr	r3, [pc, #196]	@ (800aba0 <__mdiff+0x120>)
 800aada:	f240 2145 	movw	r1, #581	@ 0x245
 800aade:	e7e3      	b.n	800aaa8 <__mdiff+0x28>
 800aae0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aae4:	6926      	ldr	r6, [r4, #16]
 800aae6:	60c5      	str	r5, [r0, #12]
 800aae8:	f109 0310 	add.w	r3, r9, #16
 800aaec:	f109 0514 	add.w	r5, r9, #20
 800aaf0:	f104 0e14 	add.w	lr, r4, #20
 800aaf4:	f100 0b14 	add.w	fp, r0, #20
 800aaf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aafc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ab00:	9301      	str	r3, [sp, #4]
 800ab02:	46d9      	mov	r9, fp
 800ab04:	f04f 0c00 	mov.w	ip, #0
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ab0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	fa1f f38a 	uxth.w	r3, sl
 800ab18:	4619      	mov	r1, r3
 800ab1a:	b283      	uxth	r3, r0
 800ab1c:	1acb      	subs	r3, r1, r3
 800ab1e:	0c00      	lsrs	r0, r0, #16
 800ab20:	4463      	add	r3, ip
 800ab22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ab26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ab30:	4576      	cmp	r6, lr
 800ab32:	f849 3b04 	str.w	r3, [r9], #4
 800ab36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab3a:	d8e5      	bhi.n	800ab08 <__mdiff+0x88>
 800ab3c:	1b33      	subs	r3, r6, r4
 800ab3e:	3b15      	subs	r3, #21
 800ab40:	f023 0303 	bic.w	r3, r3, #3
 800ab44:	3415      	adds	r4, #21
 800ab46:	3304      	adds	r3, #4
 800ab48:	42a6      	cmp	r6, r4
 800ab4a:	bf38      	it	cc
 800ab4c:	2304      	movcc	r3, #4
 800ab4e:	441d      	add	r5, r3
 800ab50:	445b      	add	r3, fp
 800ab52:	461e      	mov	r6, r3
 800ab54:	462c      	mov	r4, r5
 800ab56:	4544      	cmp	r4, r8
 800ab58:	d30e      	bcc.n	800ab78 <__mdiff+0xf8>
 800ab5a:	f108 0103 	add.w	r1, r8, #3
 800ab5e:	1b49      	subs	r1, r1, r5
 800ab60:	f021 0103 	bic.w	r1, r1, #3
 800ab64:	3d03      	subs	r5, #3
 800ab66:	45a8      	cmp	r8, r5
 800ab68:	bf38      	it	cc
 800ab6a:	2100      	movcc	r1, #0
 800ab6c:	440b      	add	r3, r1
 800ab6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab72:	b191      	cbz	r1, 800ab9a <__mdiff+0x11a>
 800ab74:	6117      	str	r7, [r2, #16]
 800ab76:	e79d      	b.n	800aab4 <__mdiff+0x34>
 800ab78:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab7c:	46e6      	mov	lr, ip
 800ab7e:	0c08      	lsrs	r0, r1, #16
 800ab80:	fa1c fc81 	uxtah	ip, ip, r1
 800ab84:	4471      	add	r1, lr
 800ab86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab8a:	b289      	uxth	r1, r1
 800ab8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab90:	f846 1b04 	str.w	r1, [r6], #4
 800ab94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab98:	e7dd      	b.n	800ab56 <__mdiff+0xd6>
 800ab9a:	3f01      	subs	r7, #1
 800ab9c:	e7e7      	b.n	800ab6e <__mdiff+0xee>
 800ab9e:	bf00      	nop
 800aba0:	0800e4ed 	.word	0x0800e4ed
 800aba4:	0800e4fe 	.word	0x0800e4fe

0800aba8 <__ulp>:
 800aba8:	b082      	sub	sp, #8
 800abaa:	ed8d 0b00 	vstr	d0, [sp]
 800abae:	9a01      	ldr	r2, [sp, #4]
 800abb0:	4b0f      	ldr	r3, [pc, #60]	@ (800abf0 <__ulp+0x48>)
 800abb2:	4013      	ands	r3, r2
 800abb4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800abb8:	2b00      	cmp	r3, #0
 800abba:	dc08      	bgt.n	800abce <__ulp+0x26>
 800abbc:	425b      	negs	r3, r3
 800abbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800abc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800abc6:	da04      	bge.n	800abd2 <__ulp+0x2a>
 800abc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800abcc:	4113      	asrs	r3, r2
 800abce:	2200      	movs	r2, #0
 800abd0:	e008      	b.n	800abe4 <__ulp+0x3c>
 800abd2:	f1a2 0314 	sub.w	r3, r2, #20
 800abd6:	2b1e      	cmp	r3, #30
 800abd8:	bfda      	itte	le
 800abda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800abde:	40da      	lsrle	r2, r3
 800abe0:	2201      	movgt	r2, #1
 800abe2:	2300      	movs	r3, #0
 800abe4:	4619      	mov	r1, r3
 800abe6:	4610      	mov	r0, r2
 800abe8:	ec41 0b10 	vmov	d0, r0, r1
 800abec:	b002      	add	sp, #8
 800abee:	4770      	bx	lr
 800abf0:	7ff00000 	.word	0x7ff00000

0800abf4 <__b2d>:
 800abf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abf8:	6906      	ldr	r6, [r0, #16]
 800abfa:	f100 0814 	add.w	r8, r0, #20
 800abfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ac02:	1f37      	subs	r7, r6, #4
 800ac04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ac08:	4610      	mov	r0, r2
 800ac0a:	f7ff fd4b 	bl	800a6a4 <__hi0bits>
 800ac0e:	f1c0 0320 	rsb	r3, r0, #32
 800ac12:	280a      	cmp	r0, #10
 800ac14:	600b      	str	r3, [r1, #0]
 800ac16:	491b      	ldr	r1, [pc, #108]	@ (800ac84 <__b2d+0x90>)
 800ac18:	dc15      	bgt.n	800ac46 <__b2d+0x52>
 800ac1a:	f1c0 0c0b 	rsb	ip, r0, #11
 800ac1e:	fa22 f30c 	lsr.w	r3, r2, ip
 800ac22:	45b8      	cmp	r8, r7
 800ac24:	ea43 0501 	orr.w	r5, r3, r1
 800ac28:	bf34      	ite	cc
 800ac2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac2e:	2300      	movcs	r3, #0
 800ac30:	3015      	adds	r0, #21
 800ac32:	fa02 f000 	lsl.w	r0, r2, r0
 800ac36:	fa23 f30c 	lsr.w	r3, r3, ip
 800ac3a:	4303      	orrs	r3, r0
 800ac3c:	461c      	mov	r4, r3
 800ac3e:	ec45 4b10 	vmov	d0, r4, r5
 800ac42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac46:	45b8      	cmp	r8, r7
 800ac48:	bf3a      	itte	cc
 800ac4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ac4e:	f1a6 0708 	subcc.w	r7, r6, #8
 800ac52:	2300      	movcs	r3, #0
 800ac54:	380b      	subs	r0, #11
 800ac56:	d012      	beq.n	800ac7e <__b2d+0x8a>
 800ac58:	f1c0 0120 	rsb	r1, r0, #32
 800ac5c:	fa23 f401 	lsr.w	r4, r3, r1
 800ac60:	4082      	lsls	r2, r0
 800ac62:	4322      	orrs	r2, r4
 800ac64:	4547      	cmp	r7, r8
 800ac66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ac6a:	bf8c      	ite	hi
 800ac6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ac70:	2200      	movls	r2, #0
 800ac72:	4083      	lsls	r3, r0
 800ac74:	40ca      	lsrs	r2, r1
 800ac76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ac7a:	4313      	orrs	r3, r2
 800ac7c:	e7de      	b.n	800ac3c <__b2d+0x48>
 800ac7e:	ea42 0501 	orr.w	r5, r2, r1
 800ac82:	e7db      	b.n	800ac3c <__b2d+0x48>
 800ac84:	3ff00000 	.word	0x3ff00000

0800ac88 <__d2b>:
 800ac88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac8c:	460f      	mov	r7, r1
 800ac8e:	2101      	movs	r1, #1
 800ac90:	ec59 8b10 	vmov	r8, r9, d0
 800ac94:	4616      	mov	r6, r2
 800ac96:	f7ff fc13 	bl	800a4c0 <_Balloc>
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	b930      	cbnz	r0, 800acac <__d2b+0x24>
 800ac9e:	4602      	mov	r2, r0
 800aca0:	4b23      	ldr	r3, [pc, #140]	@ (800ad30 <__d2b+0xa8>)
 800aca2:	4824      	ldr	r0, [pc, #144]	@ (800ad34 <__d2b+0xac>)
 800aca4:	f240 310f 	movw	r1, #783	@ 0x30f
 800aca8:	f001 fb5e 	bl	800c368 <__assert_func>
 800acac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acb4:	b10d      	cbz	r5, 800acba <__d2b+0x32>
 800acb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acba:	9301      	str	r3, [sp, #4]
 800acbc:	f1b8 0300 	subs.w	r3, r8, #0
 800acc0:	d023      	beq.n	800ad0a <__d2b+0x82>
 800acc2:	4668      	mov	r0, sp
 800acc4:	9300      	str	r3, [sp, #0]
 800acc6:	f7ff fd0c 	bl	800a6e2 <__lo0bits>
 800acca:	e9dd 1200 	ldrd	r1, r2, [sp]
 800acce:	b1d0      	cbz	r0, 800ad06 <__d2b+0x7e>
 800acd0:	f1c0 0320 	rsb	r3, r0, #32
 800acd4:	fa02 f303 	lsl.w	r3, r2, r3
 800acd8:	430b      	orrs	r3, r1
 800acda:	40c2      	lsrs	r2, r0
 800acdc:	6163      	str	r3, [r4, #20]
 800acde:	9201      	str	r2, [sp, #4]
 800ace0:	9b01      	ldr	r3, [sp, #4]
 800ace2:	61a3      	str	r3, [r4, #24]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	bf0c      	ite	eq
 800ace8:	2201      	moveq	r2, #1
 800acea:	2202      	movne	r2, #2
 800acec:	6122      	str	r2, [r4, #16]
 800acee:	b1a5      	cbz	r5, 800ad1a <__d2b+0x92>
 800acf0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800acf4:	4405      	add	r5, r0
 800acf6:	603d      	str	r5, [r7, #0]
 800acf8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acfc:	6030      	str	r0, [r6, #0]
 800acfe:	4620      	mov	r0, r4
 800ad00:	b003      	add	sp, #12
 800ad02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad06:	6161      	str	r1, [r4, #20]
 800ad08:	e7ea      	b.n	800ace0 <__d2b+0x58>
 800ad0a:	a801      	add	r0, sp, #4
 800ad0c:	f7ff fce9 	bl	800a6e2 <__lo0bits>
 800ad10:	9b01      	ldr	r3, [sp, #4]
 800ad12:	6163      	str	r3, [r4, #20]
 800ad14:	3020      	adds	r0, #32
 800ad16:	2201      	movs	r2, #1
 800ad18:	e7e8      	b.n	800acec <__d2b+0x64>
 800ad1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad22:	6038      	str	r0, [r7, #0]
 800ad24:	6918      	ldr	r0, [r3, #16]
 800ad26:	f7ff fcbd 	bl	800a6a4 <__hi0bits>
 800ad2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad2e:	e7e5      	b.n	800acfc <__d2b+0x74>
 800ad30:	0800e4ed 	.word	0x0800e4ed
 800ad34:	0800e4fe 	.word	0x0800e4fe

0800ad38 <__ratio>:
 800ad38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad3c:	b085      	sub	sp, #20
 800ad3e:	e9cd 1000 	strd	r1, r0, [sp]
 800ad42:	a902      	add	r1, sp, #8
 800ad44:	f7ff ff56 	bl	800abf4 <__b2d>
 800ad48:	9800      	ldr	r0, [sp, #0]
 800ad4a:	a903      	add	r1, sp, #12
 800ad4c:	ec55 4b10 	vmov	r4, r5, d0
 800ad50:	f7ff ff50 	bl	800abf4 <__b2d>
 800ad54:	9b01      	ldr	r3, [sp, #4]
 800ad56:	6919      	ldr	r1, [r3, #16]
 800ad58:	9b00      	ldr	r3, [sp, #0]
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	1ac9      	subs	r1, r1, r3
 800ad5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ad62:	1a9b      	subs	r3, r3, r2
 800ad64:	ec5b ab10 	vmov	sl, fp, d0
 800ad68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	bfce      	itee	gt
 800ad70:	462a      	movgt	r2, r5
 800ad72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ad76:	465a      	movle	r2, fp
 800ad78:	462f      	mov	r7, r5
 800ad7a:	46d9      	mov	r9, fp
 800ad7c:	bfcc      	ite	gt
 800ad7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ad82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ad86:	464b      	mov	r3, r9
 800ad88:	4652      	mov	r2, sl
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	4639      	mov	r1, r7
 800ad8e:	f7f5 fd7d 	bl	800088c <__aeabi_ddiv>
 800ad92:	ec41 0b10 	vmov	d0, r0, r1
 800ad96:	b005      	add	sp, #20
 800ad98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ad9c <__copybits>:
 800ad9c:	3901      	subs	r1, #1
 800ad9e:	b570      	push	{r4, r5, r6, lr}
 800ada0:	1149      	asrs	r1, r1, #5
 800ada2:	6914      	ldr	r4, [r2, #16]
 800ada4:	3101      	adds	r1, #1
 800ada6:	f102 0314 	add.w	r3, r2, #20
 800adaa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800adae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800adb2:	1f05      	subs	r5, r0, #4
 800adb4:	42a3      	cmp	r3, r4
 800adb6:	d30c      	bcc.n	800add2 <__copybits+0x36>
 800adb8:	1aa3      	subs	r3, r4, r2
 800adba:	3b11      	subs	r3, #17
 800adbc:	f023 0303 	bic.w	r3, r3, #3
 800adc0:	3211      	adds	r2, #17
 800adc2:	42a2      	cmp	r2, r4
 800adc4:	bf88      	it	hi
 800adc6:	2300      	movhi	r3, #0
 800adc8:	4418      	add	r0, r3
 800adca:	2300      	movs	r3, #0
 800adcc:	4288      	cmp	r0, r1
 800adce:	d305      	bcc.n	800addc <__copybits+0x40>
 800add0:	bd70      	pop	{r4, r5, r6, pc}
 800add2:	f853 6b04 	ldr.w	r6, [r3], #4
 800add6:	f845 6f04 	str.w	r6, [r5, #4]!
 800adda:	e7eb      	b.n	800adb4 <__copybits+0x18>
 800addc:	f840 3b04 	str.w	r3, [r0], #4
 800ade0:	e7f4      	b.n	800adcc <__copybits+0x30>

0800ade2 <__any_on>:
 800ade2:	f100 0214 	add.w	r2, r0, #20
 800ade6:	6900      	ldr	r0, [r0, #16]
 800ade8:	114b      	asrs	r3, r1, #5
 800adea:	4298      	cmp	r0, r3
 800adec:	b510      	push	{r4, lr}
 800adee:	db11      	blt.n	800ae14 <__any_on+0x32>
 800adf0:	dd0a      	ble.n	800ae08 <__any_on+0x26>
 800adf2:	f011 011f 	ands.w	r1, r1, #31
 800adf6:	d007      	beq.n	800ae08 <__any_on+0x26>
 800adf8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800adfc:	fa24 f001 	lsr.w	r0, r4, r1
 800ae00:	fa00 f101 	lsl.w	r1, r0, r1
 800ae04:	428c      	cmp	r4, r1
 800ae06:	d10b      	bne.n	800ae20 <__any_on+0x3e>
 800ae08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d803      	bhi.n	800ae18 <__any_on+0x36>
 800ae10:	2000      	movs	r0, #0
 800ae12:	bd10      	pop	{r4, pc}
 800ae14:	4603      	mov	r3, r0
 800ae16:	e7f7      	b.n	800ae08 <__any_on+0x26>
 800ae18:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ae1c:	2900      	cmp	r1, #0
 800ae1e:	d0f5      	beq.n	800ae0c <__any_on+0x2a>
 800ae20:	2001      	movs	r0, #1
 800ae22:	e7f6      	b.n	800ae12 <__any_on+0x30>

0800ae24 <sulp>:
 800ae24:	b570      	push	{r4, r5, r6, lr}
 800ae26:	4604      	mov	r4, r0
 800ae28:	460d      	mov	r5, r1
 800ae2a:	ec45 4b10 	vmov	d0, r4, r5
 800ae2e:	4616      	mov	r6, r2
 800ae30:	f7ff feba 	bl	800aba8 <__ulp>
 800ae34:	ec51 0b10 	vmov	r0, r1, d0
 800ae38:	b17e      	cbz	r6, 800ae5a <sulp+0x36>
 800ae3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ae3e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dd09      	ble.n	800ae5a <sulp+0x36>
 800ae46:	051b      	lsls	r3, r3, #20
 800ae48:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ae4c:	2400      	movs	r4, #0
 800ae4e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ae52:	4622      	mov	r2, r4
 800ae54:	462b      	mov	r3, r5
 800ae56:	f7f5 fbef 	bl	8000638 <__aeabi_dmul>
 800ae5a:	ec41 0b10 	vmov	d0, r0, r1
 800ae5e:	bd70      	pop	{r4, r5, r6, pc}

0800ae60 <_strtod_l>:
 800ae60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	b09f      	sub	sp, #124	@ 0x7c
 800ae66:	460c      	mov	r4, r1
 800ae68:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	921a      	str	r2, [sp, #104]	@ 0x68
 800ae6e:	9005      	str	r0, [sp, #20]
 800ae70:	f04f 0a00 	mov.w	sl, #0
 800ae74:	f04f 0b00 	mov.w	fp, #0
 800ae78:	460a      	mov	r2, r1
 800ae7a:	9219      	str	r2, [sp, #100]	@ 0x64
 800ae7c:	7811      	ldrb	r1, [r2, #0]
 800ae7e:	292b      	cmp	r1, #43	@ 0x2b
 800ae80:	d04a      	beq.n	800af18 <_strtod_l+0xb8>
 800ae82:	d838      	bhi.n	800aef6 <_strtod_l+0x96>
 800ae84:	290d      	cmp	r1, #13
 800ae86:	d832      	bhi.n	800aeee <_strtod_l+0x8e>
 800ae88:	2908      	cmp	r1, #8
 800ae8a:	d832      	bhi.n	800aef2 <_strtod_l+0x92>
 800ae8c:	2900      	cmp	r1, #0
 800ae8e:	d03b      	beq.n	800af08 <_strtod_l+0xa8>
 800ae90:	2200      	movs	r2, #0
 800ae92:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ae94:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ae96:	782a      	ldrb	r2, [r5, #0]
 800ae98:	2a30      	cmp	r2, #48	@ 0x30
 800ae9a:	f040 80b3 	bne.w	800b004 <_strtod_l+0x1a4>
 800ae9e:	786a      	ldrb	r2, [r5, #1]
 800aea0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aea4:	2a58      	cmp	r2, #88	@ 0x58
 800aea6:	d16e      	bne.n	800af86 <_strtod_l+0x126>
 800aea8:	9302      	str	r3, [sp, #8]
 800aeaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	ab1a      	add	r3, sp, #104	@ 0x68
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	4a8e      	ldr	r2, [pc, #568]	@ (800b0ec <_strtod_l+0x28c>)
 800aeb4:	9805      	ldr	r0, [sp, #20]
 800aeb6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800aeb8:	a919      	add	r1, sp, #100	@ 0x64
 800aeba:	f001 faef 	bl	800c49c <__gethex>
 800aebe:	f010 060f 	ands.w	r6, r0, #15
 800aec2:	4604      	mov	r4, r0
 800aec4:	d005      	beq.n	800aed2 <_strtod_l+0x72>
 800aec6:	2e06      	cmp	r6, #6
 800aec8:	d128      	bne.n	800af1c <_strtod_l+0xbc>
 800aeca:	3501      	adds	r5, #1
 800aecc:	2300      	movs	r3, #0
 800aece:	9519      	str	r5, [sp, #100]	@ 0x64
 800aed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aed2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	f040 858e 	bne.w	800b9f6 <_strtod_l+0xb96>
 800aeda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800aedc:	b1cb      	cbz	r3, 800af12 <_strtod_l+0xb2>
 800aede:	4652      	mov	r2, sl
 800aee0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800aee4:	ec43 2b10 	vmov	d0, r2, r3
 800aee8:	b01f      	add	sp, #124	@ 0x7c
 800aeea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeee:	2920      	cmp	r1, #32
 800aef0:	d1ce      	bne.n	800ae90 <_strtod_l+0x30>
 800aef2:	3201      	adds	r2, #1
 800aef4:	e7c1      	b.n	800ae7a <_strtod_l+0x1a>
 800aef6:	292d      	cmp	r1, #45	@ 0x2d
 800aef8:	d1ca      	bne.n	800ae90 <_strtod_l+0x30>
 800aefa:	2101      	movs	r1, #1
 800aefc:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aefe:	1c51      	adds	r1, r2, #1
 800af00:	9119      	str	r1, [sp, #100]	@ 0x64
 800af02:	7852      	ldrb	r2, [r2, #1]
 800af04:	2a00      	cmp	r2, #0
 800af06:	d1c5      	bne.n	800ae94 <_strtod_l+0x34>
 800af08:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800af0a:	9419      	str	r4, [sp, #100]	@ 0x64
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f040 8570 	bne.w	800b9f2 <_strtod_l+0xb92>
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	e7e5      	b.n	800aee4 <_strtod_l+0x84>
 800af18:	2100      	movs	r1, #0
 800af1a:	e7ef      	b.n	800aefc <_strtod_l+0x9c>
 800af1c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800af1e:	b13a      	cbz	r2, 800af30 <_strtod_l+0xd0>
 800af20:	2135      	movs	r1, #53	@ 0x35
 800af22:	a81c      	add	r0, sp, #112	@ 0x70
 800af24:	f7ff ff3a 	bl	800ad9c <__copybits>
 800af28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800af2a:	9805      	ldr	r0, [sp, #20]
 800af2c:	f7ff fb08 	bl	800a540 <_Bfree>
 800af30:	3e01      	subs	r6, #1
 800af32:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800af34:	2e04      	cmp	r6, #4
 800af36:	d806      	bhi.n	800af46 <_strtod_l+0xe6>
 800af38:	e8df f006 	tbb	[pc, r6]
 800af3c:	201d0314 	.word	0x201d0314
 800af40:	14          	.byte	0x14
 800af41:	00          	.byte	0x00
 800af42:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800af46:	05e1      	lsls	r1, r4, #23
 800af48:	bf48      	it	mi
 800af4a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800af4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af52:	0d1b      	lsrs	r3, r3, #20
 800af54:	051b      	lsls	r3, r3, #20
 800af56:	2b00      	cmp	r3, #0
 800af58:	d1bb      	bne.n	800aed2 <_strtod_l+0x72>
 800af5a:	f7fe fb31 	bl	80095c0 <__errno>
 800af5e:	2322      	movs	r3, #34	@ 0x22
 800af60:	6003      	str	r3, [r0, #0]
 800af62:	e7b6      	b.n	800aed2 <_strtod_l+0x72>
 800af64:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800af68:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800af6c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800af70:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800af74:	e7e7      	b.n	800af46 <_strtod_l+0xe6>
 800af76:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b0f4 <_strtod_l+0x294>
 800af7a:	e7e4      	b.n	800af46 <_strtod_l+0xe6>
 800af7c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800af80:	f04f 3aff 	mov.w	sl, #4294967295
 800af84:	e7df      	b.n	800af46 <_strtod_l+0xe6>
 800af86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	9219      	str	r2, [sp, #100]	@ 0x64
 800af8c:	785b      	ldrb	r3, [r3, #1]
 800af8e:	2b30      	cmp	r3, #48	@ 0x30
 800af90:	d0f9      	beq.n	800af86 <_strtod_l+0x126>
 800af92:	2b00      	cmp	r3, #0
 800af94:	d09d      	beq.n	800aed2 <_strtod_l+0x72>
 800af96:	2301      	movs	r3, #1
 800af98:	9309      	str	r3, [sp, #36]	@ 0x24
 800af9a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af9c:	930c      	str	r3, [sp, #48]	@ 0x30
 800af9e:	2300      	movs	r3, #0
 800afa0:	9308      	str	r3, [sp, #32]
 800afa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa4:	461f      	mov	r7, r3
 800afa6:	220a      	movs	r2, #10
 800afa8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800afaa:	7805      	ldrb	r5, [r0, #0]
 800afac:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800afb0:	b2d9      	uxtb	r1, r3
 800afb2:	2909      	cmp	r1, #9
 800afb4:	d928      	bls.n	800b008 <_strtod_l+0x1a8>
 800afb6:	494e      	ldr	r1, [pc, #312]	@ (800b0f0 <_strtod_l+0x290>)
 800afb8:	2201      	movs	r2, #1
 800afba:	f001 f979 	bl	800c2b0 <strncmp>
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d032      	beq.n	800b028 <_strtod_l+0x1c8>
 800afc2:	2000      	movs	r0, #0
 800afc4:	462a      	mov	r2, r5
 800afc6:	4681      	mov	r9, r0
 800afc8:	463d      	mov	r5, r7
 800afca:	4603      	mov	r3, r0
 800afcc:	2a65      	cmp	r2, #101	@ 0x65
 800afce:	d001      	beq.n	800afd4 <_strtod_l+0x174>
 800afd0:	2a45      	cmp	r2, #69	@ 0x45
 800afd2:	d114      	bne.n	800affe <_strtod_l+0x19e>
 800afd4:	b91d      	cbnz	r5, 800afde <_strtod_l+0x17e>
 800afd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800afd8:	4302      	orrs	r2, r0
 800afda:	d095      	beq.n	800af08 <_strtod_l+0xa8>
 800afdc:	2500      	movs	r5, #0
 800afde:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800afe0:	1c62      	adds	r2, r4, #1
 800afe2:	9219      	str	r2, [sp, #100]	@ 0x64
 800afe4:	7862      	ldrb	r2, [r4, #1]
 800afe6:	2a2b      	cmp	r2, #43	@ 0x2b
 800afe8:	d077      	beq.n	800b0da <_strtod_l+0x27a>
 800afea:	2a2d      	cmp	r2, #45	@ 0x2d
 800afec:	d07b      	beq.n	800b0e6 <_strtod_l+0x286>
 800afee:	f04f 0c00 	mov.w	ip, #0
 800aff2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800aff6:	2909      	cmp	r1, #9
 800aff8:	f240 8082 	bls.w	800b100 <_strtod_l+0x2a0>
 800affc:	9419      	str	r4, [sp, #100]	@ 0x64
 800affe:	f04f 0800 	mov.w	r8, #0
 800b002:	e0a2      	b.n	800b14a <_strtod_l+0x2ea>
 800b004:	2300      	movs	r3, #0
 800b006:	e7c7      	b.n	800af98 <_strtod_l+0x138>
 800b008:	2f08      	cmp	r7, #8
 800b00a:	bfd5      	itete	le
 800b00c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800b00e:	9908      	ldrgt	r1, [sp, #32]
 800b010:	fb02 3301 	mlale	r3, r2, r1, r3
 800b014:	fb02 3301 	mlagt	r3, r2, r1, r3
 800b018:	f100 0001 	add.w	r0, r0, #1
 800b01c:	bfd4      	ite	le
 800b01e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800b020:	9308      	strgt	r3, [sp, #32]
 800b022:	3701      	adds	r7, #1
 800b024:	9019      	str	r0, [sp, #100]	@ 0x64
 800b026:	e7bf      	b.n	800afa8 <_strtod_l+0x148>
 800b028:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	9219      	str	r2, [sp, #100]	@ 0x64
 800b02e:	785a      	ldrb	r2, [r3, #1]
 800b030:	b37f      	cbz	r7, 800b092 <_strtod_l+0x232>
 800b032:	4681      	mov	r9, r0
 800b034:	463d      	mov	r5, r7
 800b036:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800b03a:	2b09      	cmp	r3, #9
 800b03c:	d912      	bls.n	800b064 <_strtod_l+0x204>
 800b03e:	2301      	movs	r3, #1
 800b040:	e7c4      	b.n	800afcc <_strtod_l+0x16c>
 800b042:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b044:	1c5a      	adds	r2, r3, #1
 800b046:	9219      	str	r2, [sp, #100]	@ 0x64
 800b048:	785a      	ldrb	r2, [r3, #1]
 800b04a:	3001      	adds	r0, #1
 800b04c:	2a30      	cmp	r2, #48	@ 0x30
 800b04e:	d0f8      	beq.n	800b042 <_strtod_l+0x1e2>
 800b050:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b054:	2b08      	cmp	r3, #8
 800b056:	f200 84d3 	bhi.w	800ba00 <_strtod_l+0xba0>
 800b05a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b05c:	930c      	str	r3, [sp, #48]	@ 0x30
 800b05e:	4681      	mov	r9, r0
 800b060:	2000      	movs	r0, #0
 800b062:	4605      	mov	r5, r0
 800b064:	3a30      	subs	r2, #48	@ 0x30
 800b066:	f100 0301 	add.w	r3, r0, #1
 800b06a:	d02a      	beq.n	800b0c2 <_strtod_l+0x262>
 800b06c:	4499      	add	r9, r3
 800b06e:	eb00 0c05 	add.w	ip, r0, r5
 800b072:	462b      	mov	r3, r5
 800b074:	210a      	movs	r1, #10
 800b076:	4563      	cmp	r3, ip
 800b078:	d10d      	bne.n	800b096 <_strtod_l+0x236>
 800b07a:	1c69      	adds	r1, r5, #1
 800b07c:	4401      	add	r1, r0
 800b07e:	4428      	add	r0, r5
 800b080:	2808      	cmp	r0, #8
 800b082:	dc16      	bgt.n	800b0b2 <_strtod_l+0x252>
 800b084:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b086:	230a      	movs	r3, #10
 800b088:	fb03 2300 	mla	r3, r3, r0, r2
 800b08c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b08e:	2300      	movs	r3, #0
 800b090:	e018      	b.n	800b0c4 <_strtod_l+0x264>
 800b092:	4638      	mov	r0, r7
 800b094:	e7da      	b.n	800b04c <_strtod_l+0x1ec>
 800b096:	2b08      	cmp	r3, #8
 800b098:	f103 0301 	add.w	r3, r3, #1
 800b09c:	dc03      	bgt.n	800b0a6 <_strtod_l+0x246>
 800b09e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800b0a0:	434e      	muls	r6, r1
 800b0a2:	960a      	str	r6, [sp, #40]	@ 0x28
 800b0a4:	e7e7      	b.n	800b076 <_strtod_l+0x216>
 800b0a6:	2b10      	cmp	r3, #16
 800b0a8:	bfde      	ittt	le
 800b0aa:	9e08      	ldrle	r6, [sp, #32]
 800b0ac:	434e      	mulle	r6, r1
 800b0ae:	9608      	strle	r6, [sp, #32]
 800b0b0:	e7e1      	b.n	800b076 <_strtod_l+0x216>
 800b0b2:	280f      	cmp	r0, #15
 800b0b4:	dceb      	bgt.n	800b08e <_strtod_l+0x22e>
 800b0b6:	9808      	ldr	r0, [sp, #32]
 800b0b8:	230a      	movs	r3, #10
 800b0ba:	fb03 2300 	mla	r3, r3, r0, r2
 800b0be:	9308      	str	r3, [sp, #32]
 800b0c0:	e7e5      	b.n	800b08e <_strtod_l+0x22e>
 800b0c2:	4629      	mov	r1, r5
 800b0c4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0c6:	1c50      	adds	r0, r2, #1
 800b0c8:	9019      	str	r0, [sp, #100]	@ 0x64
 800b0ca:	7852      	ldrb	r2, [r2, #1]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	e7b1      	b.n	800b036 <_strtod_l+0x1d6>
 800b0d2:	f04f 0900 	mov.w	r9, #0
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	e77d      	b.n	800afd6 <_strtod_l+0x176>
 800b0da:	f04f 0c00 	mov.w	ip, #0
 800b0de:	1ca2      	adds	r2, r4, #2
 800b0e0:	9219      	str	r2, [sp, #100]	@ 0x64
 800b0e2:	78a2      	ldrb	r2, [r4, #2]
 800b0e4:	e785      	b.n	800aff2 <_strtod_l+0x192>
 800b0e6:	f04f 0c01 	mov.w	ip, #1
 800b0ea:	e7f8      	b.n	800b0de <_strtod_l+0x27e>
 800b0ec:	0800e670 	.word	0x0800e670
 800b0f0:	0800e658 	.word	0x0800e658
 800b0f4:	7ff00000 	.word	0x7ff00000
 800b0f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b0fa:	1c51      	adds	r1, r2, #1
 800b0fc:	9119      	str	r1, [sp, #100]	@ 0x64
 800b0fe:	7852      	ldrb	r2, [r2, #1]
 800b100:	2a30      	cmp	r2, #48	@ 0x30
 800b102:	d0f9      	beq.n	800b0f8 <_strtod_l+0x298>
 800b104:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b108:	2908      	cmp	r1, #8
 800b10a:	f63f af78 	bhi.w	800affe <_strtod_l+0x19e>
 800b10e:	3a30      	subs	r2, #48	@ 0x30
 800b110:	920e      	str	r2, [sp, #56]	@ 0x38
 800b112:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b114:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b116:	f04f 080a 	mov.w	r8, #10
 800b11a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b11c:	1c56      	adds	r6, r2, #1
 800b11e:	9619      	str	r6, [sp, #100]	@ 0x64
 800b120:	7852      	ldrb	r2, [r2, #1]
 800b122:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b126:	f1be 0f09 	cmp.w	lr, #9
 800b12a:	d939      	bls.n	800b1a0 <_strtod_l+0x340>
 800b12c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b12e:	1a76      	subs	r6, r6, r1
 800b130:	2e08      	cmp	r6, #8
 800b132:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b136:	dc03      	bgt.n	800b140 <_strtod_l+0x2e0>
 800b138:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b13a:	4588      	cmp	r8, r1
 800b13c:	bfa8      	it	ge
 800b13e:	4688      	movge	r8, r1
 800b140:	f1bc 0f00 	cmp.w	ip, #0
 800b144:	d001      	beq.n	800b14a <_strtod_l+0x2ea>
 800b146:	f1c8 0800 	rsb	r8, r8, #0
 800b14a:	2d00      	cmp	r5, #0
 800b14c:	d14e      	bne.n	800b1ec <_strtod_l+0x38c>
 800b14e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b150:	4308      	orrs	r0, r1
 800b152:	f47f aebe 	bne.w	800aed2 <_strtod_l+0x72>
 800b156:	2b00      	cmp	r3, #0
 800b158:	f47f aed6 	bne.w	800af08 <_strtod_l+0xa8>
 800b15c:	2a69      	cmp	r2, #105	@ 0x69
 800b15e:	d028      	beq.n	800b1b2 <_strtod_l+0x352>
 800b160:	dc25      	bgt.n	800b1ae <_strtod_l+0x34e>
 800b162:	2a49      	cmp	r2, #73	@ 0x49
 800b164:	d025      	beq.n	800b1b2 <_strtod_l+0x352>
 800b166:	2a4e      	cmp	r2, #78	@ 0x4e
 800b168:	f47f aece 	bne.w	800af08 <_strtod_l+0xa8>
 800b16c:	499b      	ldr	r1, [pc, #620]	@ (800b3dc <_strtod_l+0x57c>)
 800b16e:	a819      	add	r0, sp, #100	@ 0x64
 800b170:	f001 fbb6 	bl	800c8e0 <__match>
 800b174:	2800      	cmp	r0, #0
 800b176:	f43f aec7 	beq.w	800af08 <_strtod_l+0xa8>
 800b17a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b28      	cmp	r3, #40	@ 0x28
 800b180:	d12e      	bne.n	800b1e0 <_strtod_l+0x380>
 800b182:	4997      	ldr	r1, [pc, #604]	@ (800b3e0 <_strtod_l+0x580>)
 800b184:	aa1c      	add	r2, sp, #112	@ 0x70
 800b186:	a819      	add	r0, sp, #100	@ 0x64
 800b188:	f001 fbbe 	bl	800c908 <__hexnan>
 800b18c:	2805      	cmp	r0, #5
 800b18e:	d127      	bne.n	800b1e0 <_strtod_l+0x380>
 800b190:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b192:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b196:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b19a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b19e:	e698      	b.n	800aed2 <_strtod_l+0x72>
 800b1a0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b1a2:	fb08 2101 	mla	r1, r8, r1, r2
 800b1a6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b1aa:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1ac:	e7b5      	b.n	800b11a <_strtod_l+0x2ba>
 800b1ae:	2a6e      	cmp	r2, #110	@ 0x6e
 800b1b0:	e7da      	b.n	800b168 <_strtod_l+0x308>
 800b1b2:	498c      	ldr	r1, [pc, #560]	@ (800b3e4 <_strtod_l+0x584>)
 800b1b4:	a819      	add	r0, sp, #100	@ 0x64
 800b1b6:	f001 fb93 	bl	800c8e0 <__match>
 800b1ba:	2800      	cmp	r0, #0
 800b1bc:	f43f aea4 	beq.w	800af08 <_strtod_l+0xa8>
 800b1c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1c2:	4989      	ldr	r1, [pc, #548]	@ (800b3e8 <_strtod_l+0x588>)
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	a819      	add	r0, sp, #100	@ 0x64
 800b1c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800b1ca:	f001 fb89 	bl	800c8e0 <__match>
 800b1ce:	b910      	cbnz	r0, 800b1d6 <_strtod_l+0x376>
 800b1d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	9319      	str	r3, [sp, #100]	@ 0x64
 800b1d6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b3f8 <_strtod_l+0x598>
 800b1da:	f04f 0a00 	mov.w	sl, #0
 800b1de:	e678      	b.n	800aed2 <_strtod_l+0x72>
 800b1e0:	4882      	ldr	r0, [pc, #520]	@ (800b3ec <_strtod_l+0x58c>)
 800b1e2:	f001 f8b9 	bl	800c358 <nan>
 800b1e6:	ec5b ab10 	vmov	sl, fp, d0
 800b1ea:	e672      	b.n	800aed2 <_strtod_l+0x72>
 800b1ec:	eba8 0309 	sub.w	r3, r8, r9
 800b1f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b1f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1f4:	2f00      	cmp	r7, #0
 800b1f6:	bf08      	it	eq
 800b1f8:	462f      	moveq	r7, r5
 800b1fa:	2d10      	cmp	r5, #16
 800b1fc:	462c      	mov	r4, r5
 800b1fe:	bfa8      	it	ge
 800b200:	2410      	movge	r4, #16
 800b202:	f7f5 f99f 	bl	8000544 <__aeabi_ui2d>
 800b206:	2d09      	cmp	r5, #9
 800b208:	4682      	mov	sl, r0
 800b20a:	468b      	mov	fp, r1
 800b20c:	dc13      	bgt.n	800b236 <_strtod_l+0x3d6>
 800b20e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b210:	2b00      	cmp	r3, #0
 800b212:	f43f ae5e 	beq.w	800aed2 <_strtod_l+0x72>
 800b216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b218:	dd78      	ble.n	800b30c <_strtod_l+0x4ac>
 800b21a:	2b16      	cmp	r3, #22
 800b21c:	dc5f      	bgt.n	800b2de <_strtod_l+0x47e>
 800b21e:	4974      	ldr	r1, [pc, #464]	@ (800b3f0 <_strtod_l+0x590>)
 800b220:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b228:	4652      	mov	r2, sl
 800b22a:	465b      	mov	r3, fp
 800b22c:	f7f5 fa04 	bl	8000638 <__aeabi_dmul>
 800b230:	4682      	mov	sl, r0
 800b232:	468b      	mov	fp, r1
 800b234:	e64d      	b.n	800aed2 <_strtod_l+0x72>
 800b236:	4b6e      	ldr	r3, [pc, #440]	@ (800b3f0 <_strtod_l+0x590>)
 800b238:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b23c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b240:	f7f5 f9fa 	bl	8000638 <__aeabi_dmul>
 800b244:	4682      	mov	sl, r0
 800b246:	9808      	ldr	r0, [sp, #32]
 800b248:	468b      	mov	fp, r1
 800b24a:	f7f5 f97b 	bl	8000544 <__aeabi_ui2d>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	4650      	mov	r0, sl
 800b254:	4659      	mov	r1, fp
 800b256:	f7f5 f839 	bl	80002cc <__adddf3>
 800b25a:	2d0f      	cmp	r5, #15
 800b25c:	4682      	mov	sl, r0
 800b25e:	468b      	mov	fp, r1
 800b260:	ddd5      	ble.n	800b20e <_strtod_l+0x3ae>
 800b262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b264:	1b2c      	subs	r4, r5, r4
 800b266:	441c      	add	r4, r3
 800b268:	2c00      	cmp	r4, #0
 800b26a:	f340 8096 	ble.w	800b39a <_strtod_l+0x53a>
 800b26e:	f014 030f 	ands.w	r3, r4, #15
 800b272:	d00a      	beq.n	800b28a <_strtod_l+0x42a>
 800b274:	495e      	ldr	r1, [pc, #376]	@ (800b3f0 <_strtod_l+0x590>)
 800b276:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b27a:	4652      	mov	r2, sl
 800b27c:	465b      	mov	r3, fp
 800b27e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b282:	f7f5 f9d9 	bl	8000638 <__aeabi_dmul>
 800b286:	4682      	mov	sl, r0
 800b288:	468b      	mov	fp, r1
 800b28a:	f034 040f 	bics.w	r4, r4, #15
 800b28e:	d073      	beq.n	800b378 <_strtod_l+0x518>
 800b290:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b294:	dd48      	ble.n	800b328 <_strtod_l+0x4c8>
 800b296:	2400      	movs	r4, #0
 800b298:	46a0      	mov	r8, r4
 800b29a:	940a      	str	r4, [sp, #40]	@ 0x28
 800b29c:	46a1      	mov	r9, r4
 800b29e:	9a05      	ldr	r2, [sp, #20]
 800b2a0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b3f8 <_strtod_l+0x598>
 800b2a4:	2322      	movs	r3, #34	@ 0x22
 800b2a6:	6013      	str	r3, [r2, #0]
 800b2a8:	f04f 0a00 	mov.w	sl, #0
 800b2ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	f43f ae0f 	beq.w	800aed2 <_strtod_l+0x72>
 800b2b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b2b6:	9805      	ldr	r0, [sp, #20]
 800b2b8:	f7ff f942 	bl	800a540 <_Bfree>
 800b2bc:	9805      	ldr	r0, [sp, #20]
 800b2be:	4649      	mov	r1, r9
 800b2c0:	f7ff f93e 	bl	800a540 <_Bfree>
 800b2c4:	9805      	ldr	r0, [sp, #20]
 800b2c6:	4641      	mov	r1, r8
 800b2c8:	f7ff f93a 	bl	800a540 <_Bfree>
 800b2cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b2ce:	9805      	ldr	r0, [sp, #20]
 800b2d0:	f7ff f936 	bl	800a540 <_Bfree>
 800b2d4:	9805      	ldr	r0, [sp, #20]
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	f7ff f932 	bl	800a540 <_Bfree>
 800b2dc:	e5f9      	b.n	800aed2 <_strtod_l+0x72>
 800b2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	dbbc      	blt.n	800b262 <_strtod_l+0x402>
 800b2e8:	4c41      	ldr	r4, [pc, #260]	@ (800b3f0 <_strtod_l+0x590>)
 800b2ea:	f1c5 050f 	rsb	r5, r5, #15
 800b2ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	465b      	mov	r3, fp
 800b2f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2fa:	f7f5 f99d 	bl	8000638 <__aeabi_dmul>
 800b2fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b300:	1b5d      	subs	r5, r3, r5
 800b302:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b306:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b30a:	e78f      	b.n	800b22c <_strtod_l+0x3cc>
 800b30c:	3316      	adds	r3, #22
 800b30e:	dba8      	blt.n	800b262 <_strtod_l+0x402>
 800b310:	4b37      	ldr	r3, [pc, #220]	@ (800b3f0 <_strtod_l+0x590>)
 800b312:	eba9 0808 	sub.w	r8, r9, r8
 800b316:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b31a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b31e:	4650      	mov	r0, sl
 800b320:	4659      	mov	r1, fp
 800b322:	f7f5 fab3 	bl	800088c <__aeabi_ddiv>
 800b326:	e783      	b.n	800b230 <_strtod_l+0x3d0>
 800b328:	4b32      	ldr	r3, [pc, #200]	@ (800b3f4 <_strtod_l+0x594>)
 800b32a:	9308      	str	r3, [sp, #32]
 800b32c:	2300      	movs	r3, #0
 800b32e:	1124      	asrs	r4, r4, #4
 800b330:	4650      	mov	r0, sl
 800b332:	4659      	mov	r1, fp
 800b334:	461e      	mov	r6, r3
 800b336:	2c01      	cmp	r4, #1
 800b338:	dc21      	bgt.n	800b37e <_strtod_l+0x51e>
 800b33a:	b10b      	cbz	r3, 800b340 <_strtod_l+0x4e0>
 800b33c:	4682      	mov	sl, r0
 800b33e:	468b      	mov	fp, r1
 800b340:	492c      	ldr	r1, [pc, #176]	@ (800b3f4 <_strtod_l+0x594>)
 800b342:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b346:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b34a:	4652      	mov	r2, sl
 800b34c:	465b      	mov	r3, fp
 800b34e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b352:	f7f5 f971 	bl	8000638 <__aeabi_dmul>
 800b356:	4b28      	ldr	r3, [pc, #160]	@ (800b3f8 <_strtod_l+0x598>)
 800b358:	460a      	mov	r2, r1
 800b35a:	400b      	ands	r3, r1
 800b35c:	4927      	ldr	r1, [pc, #156]	@ (800b3fc <_strtod_l+0x59c>)
 800b35e:	428b      	cmp	r3, r1
 800b360:	4682      	mov	sl, r0
 800b362:	d898      	bhi.n	800b296 <_strtod_l+0x436>
 800b364:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b368:	428b      	cmp	r3, r1
 800b36a:	bf86      	itte	hi
 800b36c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b400 <_strtod_l+0x5a0>
 800b370:	f04f 3aff 	movhi.w	sl, #4294967295
 800b374:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b378:	2300      	movs	r3, #0
 800b37a:	9308      	str	r3, [sp, #32]
 800b37c:	e07a      	b.n	800b474 <_strtod_l+0x614>
 800b37e:	07e2      	lsls	r2, r4, #31
 800b380:	d505      	bpl.n	800b38e <_strtod_l+0x52e>
 800b382:	9b08      	ldr	r3, [sp, #32]
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	f7f5 f956 	bl	8000638 <__aeabi_dmul>
 800b38c:	2301      	movs	r3, #1
 800b38e:	9a08      	ldr	r2, [sp, #32]
 800b390:	3208      	adds	r2, #8
 800b392:	3601      	adds	r6, #1
 800b394:	1064      	asrs	r4, r4, #1
 800b396:	9208      	str	r2, [sp, #32]
 800b398:	e7cd      	b.n	800b336 <_strtod_l+0x4d6>
 800b39a:	d0ed      	beq.n	800b378 <_strtod_l+0x518>
 800b39c:	4264      	negs	r4, r4
 800b39e:	f014 020f 	ands.w	r2, r4, #15
 800b3a2:	d00a      	beq.n	800b3ba <_strtod_l+0x55a>
 800b3a4:	4b12      	ldr	r3, [pc, #72]	@ (800b3f0 <_strtod_l+0x590>)
 800b3a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3aa:	4650      	mov	r0, sl
 800b3ac:	4659      	mov	r1, fp
 800b3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b2:	f7f5 fa6b 	bl	800088c <__aeabi_ddiv>
 800b3b6:	4682      	mov	sl, r0
 800b3b8:	468b      	mov	fp, r1
 800b3ba:	1124      	asrs	r4, r4, #4
 800b3bc:	d0dc      	beq.n	800b378 <_strtod_l+0x518>
 800b3be:	2c1f      	cmp	r4, #31
 800b3c0:	dd20      	ble.n	800b404 <_strtod_l+0x5a4>
 800b3c2:	2400      	movs	r4, #0
 800b3c4:	46a0      	mov	r8, r4
 800b3c6:	940a      	str	r4, [sp, #40]	@ 0x28
 800b3c8:	46a1      	mov	r9, r4
 800b3ca:	9a05      	ldr	r2, [sp, #20]
 800b3cc:	2322      	movs	r3, #34	@ 0x22
 800b3ce:	f04f 0a00 	mov.w	sl, #0
 800b3d2:	f04f 0b00 	mov.w	fp, #0
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	e768      	b.n	800b2ac <_strtod_l+0x44c>
 800b3da:	bf00      	nop
 800b3dc:	0800e445 	.word	0x0800e445
 800b3e0:	0800e65c 	.word	0x0800e65c
 800b3e4:	0800e43d 	.word	0x0800e43d
 800b3e8:	0800e474 	.word	0x0800e474
 800b3ec:	0800e805 	.word	0x0800e805
 800b3f0:	0800e590 	.word	0x0800e590
 800b3f4:	0800e568 	.word	0x0800e568
 800b3f8:	7ff00000 	.word	0x7ff00000
 800b3fc:	7ca00000 	.word	0x7ca00000
 800b400:	7fefffff 	.word	0x7fefffff
 800b404:	f014 0310 	ands.w	r3, r4, #16
 800b408:	bf18      	it	ne
 800b40a:	236a      	movne	r3, #106	@ 0x6a
 800b40c:	4ea9      	ldr	r6, [pc, #676]	@ (800b6b4 <_strtod_l+0x854>)
 800b40e:	9308      	str	r3, [sp, #32]
 800b410:	4650      	mov	r0, sl
 800b412:	4659      	mov	r1, fp
 800b414:	2300      	movs	r3, #0
 800b416:	07e2      	lsls	r2, r4, #31
 800b418:	d504      	bpl.n	800b424 <_strtod_l+0x5c4>
 800b41a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b41e:	f7f5 f90b 	bl	8000638 <__aeabi_dmul>
 800b422:	2301      	movs	r3, #1
 800b424:	1064      	asrs	r4, r4, #1
 800b426:	f106 0608 	add.w	r6, r6, #8
 800b42a:	d1f4      	bne.n	800b416 <_strtod_l+0x5b6>
 800b42c:	b10b      	cbz	r3, 800b432 <_strtod_l+0x5d2>
 800b42e:	4682      	mov	sl, r0
 800b430:	468b      	mov	fp, r1
 800b432:	9b08      	ldr	r3, [sp, #32]
 800b434:	b1b3      	cbz	r3, 800b464 <_strtod_l+0x604>
 800b436:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b43a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b43e:	2b00      	cmp	r3, #0
 800b440:	4659      	mov	r1, fp
 800b442:	dd0f      	ble.n	800b464 <_strtod_l+0x604>
 800b444:	2b1f      	cmp	r3, #31
 800b446:	dd55      	ble.n	800b4f4 <_strtod_l+0x694>
 800b448:	2b34      	cmp	r3, #52	@ 0x34
 800b44a:	bfde      	ittt	le
 800b44c:	f04f 33ff 	movle.w	r3, #4294967295
 800b450:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b454:	4093      	lslle	r3, r2
 800b456:	f04f 0a00 	mov.w	sl, #0
 800b45a:	bfcc      	ite	gt
 800b45c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b460:	ea03 0b01 	andle.w	fp, r3, r1
 800b464:	2200      	movs	r2, #0
 800b466:	2300      	movs	r3, #0
 800b468:	4650      	mov	r0, sl
 800b46a:	4659      	mov	r1, fp
 800b46c:	f7f5 fb4c 	bl	8000b08 <__aeabi_dcmpeq>
 800b470:	2800      	cmp	r0, #0
 800b472:	d1a6      	bne.n	800b3c2 <_strtod_l+0x562>
 800b474:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b476:	9300      	str	r3, [sp, #0]
 800b478:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b47a:	9805      	ldr	r0, [sp, #20]
 800b47c:	462b      	mov	r3, r5
 800b47e:	463a      	mov	r2, r7
 800b480:	f7ff f8c6 	bl	800a610 <__s2b>
 800b484:	900a      	str	r0, [sp, #40]	@ 0x28
 800b486:	2800      	cmp	r0, #0
 800b488:	f43f af05 	beq.w	800b296 <_strtod_l+0x436>
 800b48c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b48e:	2a00      	cmp	r2, #0
 800b490:	eba9 0308 	sub.w	r3, r9, r8
 800b494:	bfa8      	it	ge
 800b496:	2300      	movge	r3, #0
 800b498:	9312      	str	r3, [sp, #72]	@ 0x48
 800b49a:	2400      	movs	r4, #0
 800b49c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b4a0:	9316      	str	r3, [sp, #88]	@ 0x58
 800b4a2:	46a0      	mov	r8, r4
 800b4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4a6:	9805      	ldr	r0, [sp, #20]
 800b4a8:	6859      	ldr	r1, [r3, #4]
 800b4aa:	f7ff f809 	bl	800a4c0 <_Balloc>
 800b4ae:	4681      	mov	r9, r0
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	f43f aef4 	beq.w	800b29e <_strtod_l+0x43e>
 800b4b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b4b8:	691a      	ldr	r2, [r3, #16]
 800b4ba:	3202      	adds	r2, #2
 800b4bc:	f103 010c 	add.w	r1, r3, #12
 800b4c0:	0092      	lsls	r2, r2, #2
 800b4c2:	300c      	adds	r0, #12
 800b4c4:	f000 ff38 	bl	800c338 <memcpy>
 800b4c8:	ec4b ab10 	vmov	d0, sl, fp
 800b4cc:	9805      	ldr	r0, [sp, #20]
 800b4ce:	aa1c      	add	r2, sp, #112	@ 0x70
 800b4d0:	a91b      	add	r1, sp, #108	@ 0x6c
 800b4d2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b4d6:	f7ff fbd7 	bl	800ac88 <__d2b>
 800b4da:	901a      	str	r0, [sp, #104]	@ 0x68
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f43f aede 	beq.w	800b29e <_strtod_l+0x43e>
 800b4e2:	9805      	ldr	r0, [sp, #20]
 800b4e4:	2101      	movs	r1, #1
 800b4e6:	f7ff f929 	bl	800a73c <__i2b>
 800b4ea:	4680      	mov	r8, r0
 800b4ec:	b948      	cbnz	r0, 800b502 <_strtod_l+0x6a2>
 800b4ee:	f04f 0800 	mov.w	r8, #0
 800b4f2:	e6d4      	b.n	800b29e <_strtod_l+0x43e>
 800b4f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4fc:	ea03 0a0a 	and.w	sl, r3, sl
 800b500:	e7b0      	b.n	800b464 <_strtod_l+0x604>
 800b502:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b504:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b506:	2d00      	cmp	r5, #0
 800b508:	bfab      	itete	ge
 800b50a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b50c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b50e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b510:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b512:	bfac      	ite	ge
 800b514:	18ef      	addge	r7, r5, r3
 800b516:	1b5e      	sublt	r6, r3, r5
 800b518:	9b08      	ldr	r3, [sp, #32]
 800b51a:	1aed      	subs	r5, r5, r3
 800b51c:	4415      	add	r5, r2
 800b51e:	4b66      	ldr	r3, [pc, #408]	@ (800b6b8 <_strtod_l+0x858>)
 800b520:	3d01      	subs	r5, #1
 800b522:	429d      	cmp	r5, r3
 800b524:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b528:	da50      	bge.n	800b5cc <_strtod_l+0x76c>
 800b52a:	1b5b      	subs	r3, r3, r5
 800b52c:	2b1f      	cmp	r3, #31
 800b52e:	eba2 0203 	sub.w	r2, r2, r3
 800b532:	f04f 0101 	mov.w	r1, #1
 800b536:	dc3d      	bgt.n	800b5b4 <_strtod_l+0x754>
 800b538:	fa01 f303 	lsl.w	r3, r1, r3
 800b53c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b53e:	2300      	movs	r3, #0
 800b540:	9310      	str	r3, [sp, #64]	@ 0x40
 800b542:	18bd      	adds	r5, r7, r2
 800b544:	9b08      	ldr	r3, [sp, #32]
 800b546:	42af      	cmp	r7, r5
 800b548:	4416      	add	r6, r2
 800b54a:	441e      	add	r6, r3
 800b54c:	463b      	mov	r3, r7
 800b54e:	bfa8      	it	ge
 800b550:	462b      	movge	r3, r5
 800b552:	42b3      	cmp	r3, r6
 800b554:	bfa8      	it	ge
 800b556:	4633      	movge	r3, r6
 800b558:	2b00      	cmp	r3, #0
 800b55a:	bfc2      	ittt	gt
 800b55c:	1aed      	subgt	r5, r5, r3
 800b55e:	1af6      	subgt	r6, r6, r3
 800b560:	1aff      	subgt	r7, r7, r3
 800b562:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b564:	2b00      	cmp	r3, #0
 800b566:	dd16      	ble.n	800b596 <_strtod_l+0x736>
 800b568:	4641      	mov	r1, r8
 800b56a:	9805      	ldr	r0, [sp, #20]
 800b56c:	461a      	mov	r2, r3
 800b56e:	f7ff f9a5 	bl	800a8bc <__pow5mult>
 800b572:	4680      	mov	r8, r0
 800b574:	2800      	cmp	r0, #0
 800b576:	d0ba      	beq.n	800b4ee <_strtod_l+0x68e>
 800b578:	4601      	mov	r1, r0
 800b57a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b57c:	9805      	ldr	r0, [sp, #20]
 800b57e:	f7ff f8f3 	bl	800a768 <__multiply>
 800b582:	900e      	str	r0, [sp, #56]	@ 0x38
 800b584:	2800      	cmp	r0, #0
 800b586:	f43f ae8a 	beq.w	800b29e <_strtod_l+0x43e>
 800b58a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b58c:	9805      	ldr	r0, [sp, #20]
 800b58e:	f7fe ffd7 	bl	800a540 <_Bfree>
 800b592:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b594:	931a      	str	r3, [sp, #104]	@ 0x68
 800b596:	2d00      	cmp	r5, #0
 800b598:	dc1d      	bgt.n	800b5d6 <_strtod_l+0x776>
 800b59a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	dd23      	ble.n	800b5e8 <_strtod_l+0x788>
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b5a4:	9805      	ldr	r0, [sp, #20]
 800b5a6:	f7ff f989 	bl	800a8bc <__pow5mult>
 800b5aa:	4681      	mov	r9, r0
 800b5ac:	b9e0      	cbnz	r0, 800b5e8 <_strtod_l+0x788>
 800b5ae:	f04f 0900 	mov.w	r9, #0
 800b5b2:	e674      	b.n	800b29e <_strtod_l+0x43e>
 800b5b4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b5b8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b5bc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b5c0:	35e2      	adds	r5, #226	@ 0xe2
 800b5c2:	fa01 f305 	lsl.w	r3, r1, r5
 800b5c6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b5ca:	e7ba      	b.n	800b542 <_strtod_l+0x6e2>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b5d4:	e7b5      	b.n	800b542 <_strtod_l+0x6e2>
 800b5d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b5d8:	9805      	ldr	r0, [sp, #20]
 800b5da:	462a      	mov	r2, r5
 800b5dc:	f7ff f9c8 	bl	800a970 <__lshift>
 800b5e0:	901a      	str	r0, [sp, #104]	@ 0x68
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	d1d9      	bne.n	800b59a <_strtod_l+0x73a>
 800b5e6:	e65a      	b.n	800b29e <_strtod_l+0x43e>
 800b5e8:	2e00      	cmp	r6, #0
 800b5ea:	dd07      	ble.n	800b5fc <_strtod_l+0x79c>
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	9805      	ldr	r0, [sp, #20]
 800b5f0:	4632      	mov	r2, r6
 800b5f2:	f7ff f9bd 	bl	800a970 <__lshift>
 800b5f6:	4681      	mov	r9, r0
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d0d8      	beq.n	800b5ae <_strtod_l+0x74e>
 800b5fc:	2f00      	cmp	r7, #0
 800b5fe:	dd08      	ble.n	800b612 <_strtod_l+0x7b2>
 800b600:	4641      	mov	r1, r8
 800b602:	9805      	ldr	r0, [sp, #20]
 800b604:	463a      	mov	r2, r7
 800b606:	f7ff f9b3 	bl	800a970 <__lshift>
 800b60a:	4680      	mov	r8, r0
 800b60c:	2800      	cmp	r0, #0
 800b60e:	f43f ae46 	beq.w	800b29e <_strtod_l+0x43e>
 800b612:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b614:	9805      	ldr	r0, [sp, #20]
 800b616:	464a      	mov	r2, r9
 800b618:	f7ff fa32 	bl	800aa80 <__mdiff>
 800b61c:	4604      	mov	r4, r0
 800b61e:	2800      	cmp	r0, #0
 800b620:	f43f ae3d 	beq.w	800b29e <_strtod_l+0x43e>
 800b624:	68c3      	ldr	r3, [r0, #12]
 800b626:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b628:	2300      	movs	r3, #0
 800b62a:	60c3      	str	r3, [r0, #12]
 800b62c:	4641      	mov	r1, r8
 800b62e:	f7ff fa0b 	bl	800aa48 <__mcmp>
 800b632:	2800      	cmp	r0, #0
 800b634:	da46      	bge.n	800b6c4 <_strtod_l+0x864>
 800b636:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b638:	ea53 030a 	orrs.w	r3, r3, sl
 800b63c:	d16c      	bne.n	800b718 <_strtod_l+0x8b8>
 800b63e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b642:	2b00      	cmp	r3, #0
 800b644:	d168      	bne.n	800b718 <_strtod_l+0x8b8>
 800b646:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b64a:	0d1b      	lsrs	r3, r3, #20
 800b64c:	051b      	lsls	r3, r3, #20
 800b64e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b652:	d961      	bls.n	800b718 <_strtod_l+0x8b8>
 800b654:	6963      	ldr	r3, [r4, #20]
 800b656:	b913      	cbnz	r3, 800b65e <_strtod_l+0x7fe>
 800b658:	6923      	ldr	r3, [r4, #16]
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	dd5c      	ble.n	800b718 <_strtod_l+0x8b8>
 800b65e:	4621      	mov	r1, r4
 800b660:	2201      	movs	r2, #1
 800b662:	9805      	ldr	r0, [sp, #20]
 800b664:	f7ff f984 	bl	800a970 <__lshift>
 800b668:	4641      	mov	r1, r8
 800b66a:	4604      	mov	r4, r0
 800b66c:	f7ff f9ec 	bl	800aa48 <__mcmp>
 800b670:	2800      	cmp	r0, #0
 800b672:	dd51      	ble.n	800b718 <_strtod_l+0x8b8>
 800b674:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b678:	9a08      	ldr	r2, [sp, #32]
 800b67a:	0d1b      	lsrs	r3, r3, #20
 800b67c:	051b      	lsls	r3, r3, #20
 800b67e:	2a00      	cmp	r2, #0
 800b680:	d06b      	beq.n	800b75a <_strtod_l+0x8fa>
 800b682:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b686:	d868      	bhi.n	800b75a <_strtod_l+0x8fa>
 800b688:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b68c:	f67f ae9d 	bls.w	800b3ca <_strtod_l+0x56a>
 800b690:	4b0a      	ldr	r3, [pc, #40]	@ (800b6bc <_strtod_l+0x85c>)
 800b692:	4650      	mov	r0, sl
 800b694:	4659      	mov	r1, fp
 800b696:	2200      	movs	r2, #0
 800b698:	f7f4 ffce 	bl	8000638 <__aeabi_dmul>
 800b69c:	4b08      	ldr	r3, [pc, #32]	@ (800b6c0 <_strtod_l+0x860>)
 800b69e:	400b      	ands	r3, r1
 800b6a0:	4682      	mov	sl, r0
 800b6a2:	468b      	mov	fp, r1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f47f ae05 	bne.w	800b2b4 <_strtod_l+0x454>
 800b6aa:	9a05      	ldr	r2, [sp, #20]
 800b6ac:	2322      	movs	r3, #34	@ 0x22
 800b6ae:	6013      	str	r3, [r2, #0]
 800b6b0:	e600      	b.n	800b2b4 <_strtod_l+0x454>
 800b6b2:	bf00      	nop
 800b6b4:	0800e688 	.word	0x0800e688
 800b6b8:	fffffc02 	.word	0xfffffc02
 800b6bc:	39500000 	.word	0x39500000
 800b6c0:	7ff00000 	.word	0x7ff00000
 800b6c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b6c8:	d165      	bne.n	800b796 <_strtod_l+0x936>
 800b6ca:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b6cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6d0:	b35a      	cbz	r2, 800b72a <_strtod_l+0x8ca>
 800b6d2:	4a9f      	ldr	r2, [pc, #636]	@ (800b950 <_strtod_l+0xaf0>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d12b      	bne.n	800b730 <_strtod_l+0x8d0>
 800b6d8:	9b08      	ldr	r3, [sp, #32]
 800b6da:	4651      	mov	r1, sl
 800b6dc:	b303      	cbz	r3, 800b720 <_strtod_l+0x8c0>
 800b6de:	4b9d      	ldr	r3, [pc, #628]	@ (800b954 <_strtod_l+0xaf4>)
 800b6e0:	465a      	mov	r2, fp
 800b6e2:	4013      	ands	r3, r2
 800b6e4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b6e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b6ec:	d81b      	bhi.n	800b726 <_strtod_l+0x8c6>
 800b6ee:	0d1b      	lsrs	r3, r3, #20
 800b6f0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b6f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f8:	4299      	cmp	r1, r3
 800b6fa:	d119      	bne.n	800b730 <_strtod_l+0x8d0>
 800b6fc:	4b96      	ldr	r3, [pc, #600]	@ (800b958 <_strtod_l+0xaf8>)
 800b6fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b700:	429a      	cmp	r2, r3
 800b702:	d102      	bne.n	800b70a <_strtod_l+0x8aa>
 800b704:	3101      	adds	r1, #1
 800b706:	f43f adca 	beq.w	800b29e <_strtod_l+0x43e>
 800b70a:	4b92      	ldr	r3, [pc, #584]	@ (800b954 <_strtod_l+0xaf4>)
 800b70c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b70e:	401a      	ands	r2, r3
 800b710:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b714:	f04f 0a00 	mov.w	sl, #0
 800b718:	9b08      	ldr	r3, [sp, #32]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1b8      	bne.n	800b690 <_strtod_l+0x830>
 800b71e:	e5c9      	b.n	800b2b4 <_strtod_l+0x454>
 800b720:	f04f 33ff 	mov.w	r3, #4294967295
 800b724:	e7e8      	b.n	800b6f8 <_strtod_l+0x898>
 800b726:	4613      	mov	r3, r2
 800b728:	e7e6      	b.n	800b6f8 <_strtod_l+0x898>
 800b72a:	ea53 030a 	orrs.w	r3, r3, sl
 800b72e:	d0a1      	beq.n	800b674 <_strtod_l+0x814>
 800b730:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b732:	b1db      	cbz	r3, 800b76c <_strtod_l+0x90c>
 800b734:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b736:	4213      	tst	r3, r2
 800b738:	d0ee      	beq.n	800b718 <_strtod_l+0x8b8>
 800b73a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b73c:	9a08      	ldr	r2, [sp, #32]
 800b73e:	4650      	mov	r0, sl
 800b740:	4659      	mov	r1, fp
 800b742:	b1bb      	cbz	r3, 800b774 <_strtod_l+0x914>
 800b744:	f7ff fb6e 	bl	800ae24 <sulp>
 800b748:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b74c:	ec53 2b10 	vmov	r2, r3, d0
 800b750:	f7f4 fdbc 	bl	80002cc <__adddf3>
 800b754:	4682      	mov	sl, r0
 800b756:	468b      	mov	fp, r1
 800b758:	e7de      	b.n	800b718 <_strtod_l+0x8b8>
 800b75a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b75e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b762:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b766:	f04f 3aff 	mov.w	sl, #4294967295
 800b76a:	e7d5      	b.n	800b718 <_strtod_l+0x8b8>
 800b76c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b76e:	ea13 0f0a 	tst.w	r3, sl
 800b772:	e7e1      	b.n	800b738 <_strtod_l+0x8d8>
 800b774:	f7ff fb56 	bl	800ae24 <sulp>
 800b778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b77c:	ec53 2b10 	vmov	r2, r3, d0
 800b780:	f7f4 fda2 	bl	80002c8 <__aeabi_dsub>
 800b784:	2200      	movs	r2, #0
 800b786:	2300      	movs	r3, #0
 800b788:	4682      	mov	sl, r0
 800b78a:	468b      	mov	fp, r1
 800b78c:	f7f5 f9bc 	bl	8000b08 <__aeabi_dcmpeq>
 800b790:	2800      	cmp	r0, #0
 800b792:	d0c1      	beq.n	800b718 <_strtod_l+0x8b8>
 800b794:	e619      	b.n	800b3ca <_strtod_l+0x56a>
 800b796:	4641      	mov	r1, r8
 800b798:	4620      	mov	r0, r4
 800b79a:	f7ff facd 	bl	800ad38 <__ratio>
 800b79e:	ec57 6b10 	vmov	r6, r7, d0
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b7a8:	4630      	mov	r0, r6
 800b7aa:	4639      	mov	r1, r7
 800b7ac:	f7f5 f9c0 	bl	8000b30 <__aeabi_dcmple>
 800b7b0:	2800      	cmp	r0, #0
 800b7b2:	d06f      	beq.n	800b894 <_strtod_l+0xa34>
 800b7b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d17a      	bne.n	800b8b0 <_strtod_l+0xa50>
 800b7ba:	f1ba 0f00 	cmp.w	sl, #0
 800b7be:	d158      	bne.n	800b872 <_strtod_l+0xa12>
 800b7c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d15a      	bne.n	800b880 <_strtod_l+0xa20>
 800b7ca:	4b64      	ldr	r3, [pc, #400]	@ (800b95c <_strtod_l+0xafc>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	4630      	mov	r0, r6
 800b7d0:	4639      	mov	r1, r7
 800b7d2:	f7f5 f9a3 	bl	8000b1c <__aeabi_dcmplt>
 800b7d6:	2800      	cmp	r0, #0
 800b7d8:	d159      	bne.n	800b88e <_strtod_l+0xa2e>
 800b7da:	4630      	mov	r0, r6
 800b7dc:	4639      	mov	r1, r7
 800b7de:	4b60      	ldr	r3, [pc, #384]	@ (800b960 <_strtod_l+0xb00>)
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f7f4 ff29 	bl	8000638 <__aeabi_dmul>
 800b7e6:	4606      	mov	r6, r0
 800b7e8:	460f      	mov	r7, r1
 800b7ea:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b7ee:	9606      	str	r6, [sp, #24]
 800b7f0:	9307      	str	r3, [sp, #28]
 800b7f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b7f6:	4d57      	ldr	r5, [pc, #348]	@ (800b954 <_strtod_l+0xaf4>)
 800b7f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b7fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7fe:	401d      	ands	r5, r3
 800b800:	4b58      	ldr	r3, [pc, #352]	@ (800b964 <_strtod_l+0xb04>)
 800b802:	429d      	cmp	r5, r3
 800b804:	f040 80b2 	bne.w	800b96c <_strtod_l+0xb0c>
 800b808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b80a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b80e:	ec4b ab10 	vmov	d0, sl, fp
 800b812:	f7ff f9c9 	bl	800aba8 <__ulp>
 800b816:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b81a:	ec51 0b10 	vmov	r0, r1, d0
 800b81e:	f7f4 ff0b 	bl	8000638 <__aeabi_dmul>
 800b822:	4652      	mov	r2, sl
 800b824:	465b      	mov	r3, fp
 800b826:	f7f4 fd51 	bl	80002cc <__adddf3>
 800b82a:	460b      	mov	r3, r1
 800b82c:	4949      	ldr	r1, [pc, #292]	@ (800b954 <_strtod_l+0xaf4>)
 800b82e:	4a4e      	ldr	r2, [pc, #312]	@ (800b968 <_strtod_l+0xb08>)
 800b830:	4019      	ands	r1, r3
 800b832:	4291      	cmp	r1, r2
 800b834:	4682      	mov	sl, r0
 800b836:	d942      	bls.n	800b8be <_strtod_l+0xa5e>
 800b838:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b83a:	4b47      	ldr	r3, [pc, #284]	@ (800b958 <_strtod_l+0xaf8>)
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d103      	bne.n	800b848 <_strtod_l+0x9e8>
 800b840:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b842:	3301      	adds	r3, #1
 800b844:	f43f ad2b 	beq.w	800b29e <_strtod_l+0x43e>
 800b848:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b958 <_strtod_l+0xaf8>
 800b84c:	f04f 3aff 	mov.w	sl, #4294967295
 800b850:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b852:	9805      	ldr	r0, [sp, #20]
 800b854:	f7fe fe74 	bl	800a540 <_Bfree>
 800b858:	9805      	ldr	r0, [sp, #20]
 800b85a:	4649      	mov	r1, r9
 800b85c:	f7fe fe70 	bl	800a540 <_Bfree>
 800b860:	9805      	ldr	r0, [sp, #20]
 800b862:	4641      	mov	r1, r8
 800b864:	f7fe fe6c 	bl	800a540 <_Bfree>
 800b868:	9805      	ldr	r0, [sp, #20]
 800b86a:	4621      	mov	r1, r4
 800b86c:	f7fe fe68 	bl	800a540 <_Bfree>
 800b870:	e618      	b.n	800b4a4 <_strtod_l+0x644>
 800b872:	f1ba 0f01 	cmp.w	sl, #1
 800b876:	d103      	bne.n	800b880 <_strtod_l+0xa20>
 800b878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f43f ada5 	beq.w	800b3ca <_strtod_l+0x56a>
 800b880:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b930 <_strtod_l+0xad0>
 800b884:	4f35      	ldr	r7, [pc, #212]	@ (800b95c <_strtod_l+0xafc>)
 800b886:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b88a:	2600      	movs	r6, #0
 800b88c:	e7b1      	b.n	800b7f2 <_strtod_l+0x992>
 800b88e:	4f34      	ldr	r7, [pc, #208]	@ (800b960 <_strtod_l+0xb00>)
 800b890:	2600      	movs	r6, #0
 800b892:	e7aa      	b.n	800b7ea <_strtod_l+0x98a>
 800b894:	4b32      	ldr	r3, [pc, #200]	@ (800b960 <_strtod_l+0xb00>)
 800b896:	4630      	mov	r0, r6
 800b898:	4639      	mov	r1, r7
 800b89a:	2200      	movs	r2, #0
 800b89c:	f7f4 fecc 	bl	8000638 <__aeabi_dmul>
 800b8a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d09f      	beq.n	800b7ea <_strtod_l+0x98a>
 800b8aa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b8ae:	e7a0      	b.n	800b7f2 <_strtod_l+0x992>
 800b8b0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b938 <_strtod_l+0xad8>
 800b8b4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b8b8:	ec57 6b17 	vmov	r6, r7, d7
 800b8bc:	e799      	b.n	800b7f2 <_strtod_l+0x992>
 800b8be:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b8c2:	9b08      	ldr	r3, [sp, #32]
 800b8c4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d1c1      	bne.n	800b850 <_strtod_l+0x9f0>
 800b8cc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b8d0:	0d1b      	lsrs	r3, r3, #20
 800b8d2:	051b      	lsls	r3, r3, #20
 800b8d4:	429d      	cmp	r5, r3
 800b8d6:	d1bb      	bne.n	800b850 <_strtod_l+0x9f0>
 800b8d8:	4630      	mov	r0, r6
 800b8da:	4639      	mov	r1, r7
 800b8dc:	f7f5 fa0c 	bl	8000cf8 <__aeabi_d2lz>
 800b8e0:	f7f4 fe7c 	bl	80005dc <__aeabi_l2d>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	460b      	mov	r3, r1
 800b8e8:	4630      	mov	r0, r6
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	f7f4 fcec 	bl	80002c8 <__aeabi_dsub>
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b8f8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b8fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8fe:	ea46 060a 	orr.w	r6, r6, sl
 800b902:	431e      	orrs	r6, r3
 800b904:	d06f      	beq.n	800b9e6 <_strtod_l+0xb86>
 800b906:	a30e      	add	r3, pc, #56	@ (adr r3, 800b940 <_strtod_l+0xae0>)
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f7f5 f906 	bl	8000b1c <__aeabi_dcmplt>
 800b910:	2800      	cmp	r0, #0
 800b912:	f47f accf 	bne.w	800b2b4 <_strtod_l+0x454>
 800b916:	a30c      	add	r3, pc, #48	@ (adr r3, 800b948 <_strtod_l+0xae8>)
 800b918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b920:	f7f5 f91a 	bl	8000b58 <__aeabi_dcmpgt>
 800b924:	2800      	cmp	r0, #0
 800b926:	d093      	beq.n	800b850 <_strtod_l+0x9f0>
 800b928:	e4c4      	b.n	800b2b4 <_strtod_l+0x454>
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w
 800b930:	00000000 	.word	0x00000000
 800b934:	bff00000 	.word	0xbff00000
 800b938:	00000000 	.word	0x00000000
 800b93c:	3ff00000 	.word	0x3ff00000
 800b940:	94a03595 	.word	0x94a03595
 800b944:	3fdfffff 	.word	0x3fdfffff
 800b948:	35afe535 	.word	0x35afe535
 800b94c:	3fe00000 	.word	0x3fe00000
 800b950:	000fffff 	.word	0x000fffff
 800b954:	7ff00000 	.word	0x7ff00000
 800b958:	7fefffff 	.word	0x7fefffff
 800b95c:	3ff00000 	.word	0x3ff00000
 800b960:	3fe00000 	.word	0x3fe00000
 800b964:	7fe00000 	.word	0x7fe00000
 800b968:	7c9fffff 	.word	0x7c9fffff
 800b96c:	9b08      	ldr	r3, [sp, #32]
 800b96e:	b323      	cbz	r3, 800b9ba <_strtod_l+0xb5a>
 800b970:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b974:	d821      	bhi.n	800b9ba <_strtod_l+0xb5a>
 800b976:	a328      	add	r3, pc, #160	@ (adr r3, 800ba18 <_strtod_l+0xbb8>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	4630      	mov	r0, r6
 800b97e:	4639      	mov	r1, r7
 800b980:	f7f5 f8d6 	bl	8000b30 <__aeabi_dcmple>
 800b984:	b1a0      	cbz	r0, 800b9b0 <_strtod_l+0xb50>
 800b986:	4639      	mov	r1, r7
 800b988:	4630      	mov	r0, r6
 800b98a:	f7f5 f92d 	bl	8000be8 <__aeabi_d2uiz>
 800b98e:	2801      	cmp	r0, #1
 800b990:	bf38      	it	cc
 800b992:	2001      	movcc	r0, #1
 800b994:	f7f4 fdd6 	bl	8000544 <__aeabi_ui2d>
 800b998:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b99a:	4606      	mov	r6, r0
 800b99c:	460f      	mov	r7, r1
 800b99e:	b9fb      	cbnz	r3, 800b9e0 <_strtod_l+0xb80>
 800b9a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b9a4:	9014      	str	r0, [sp, #80]	@ 0x50
 800b9a6:	9315      	str	r3, [sp, #84]	@ 0x54
 800b9a8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b9ac:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b9b0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b9b2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b9b6:	1b5b      	subs	r3, r3, r5
 800b9b8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b9ba:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b9be:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b9c2:	f7ff f8f1 	bl	800aba8 <__ulp>
 800b9c6:	4650      	mov	r0, sl
 800b9c8:	ec53 2b10 	vmov	r2, r3, d0
 800b9cc:	4659      	mov	r1, fp
 800b9ce:	f7f4 fe33 	bl	8000638 <__aeabi_dmul>
 800b9d2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b9d6:	f7f4 fc79 	bl	80002cc <__adddf3>
 800b9da:	4682      	mov	sl, r0
 800b9dc:	468b      	mov	fp, r1
 800b9de:	e770      	b.n	800b8c2 <_strtod_l+0xa62>
 800b9e0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b9e4:	e7e0      	b.n	800b9a8 <_strtod_l+0xb48>
 800b9e6:	a30e      	add	r3, pc, #56	@ (adr r3, 800ba20 <_strtod_l+0xbc0>)
 800b9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ec:	f7f5 f896 	bl	8000b1c <__aeabi_dcmplt>
 800b9f0:	e798      	b.n	800b924 <_strtod_l+0xac4>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b9f6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b9f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	f7ff ba6d 	b.w	800aeda <_strtod_l+0x7a>
 800ba00:	2a65      	cmp	r2, #101	@ 0x65
 800ba02:	f43f ab66 	beq.w	800b0d2 <_strtod_l+0x272>
 800ba06:	2a45      	cmp	r2, #69	@ 0x45
 800ba08:	f43f ab63 	beq.w	800b0d2 <_strtod_l+0x272>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	f7ff bb9e 	b.w	800b14e <_strtod_l+0x2ee>
 800ba12:	bf00      	nop
 800ba14:	f3af 8000 	nop.w
 800ba18:	ffc00000 	.word	0xffc00000
 800ba1c:	41dfffff 	.word	0x41dfffff
 800ba20:	94a03595 	.word	0x94a03595
 800ba24:	3fcfffff 	.word	0x3fcfffff

0800ba28 <_strtod_r>:
 800ba28:	4b01      	ldr	r3, [pc, #4]	@ (800ba30 <_strtod_r+0x8>)
 800ba2a:	f7ff ba19 	b.w	800ae60 <_strtod_l>
 800ba2e:	bf00      	nop
 800ba30:	20000078 	.word	0x20000078

0800ba34 <_strtol_l.constprop.0>:
 800ba34:	2b24      	cmp	r3, #36	@ 0x24
 800ba36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba3a:	4686      	mov	lr, r0
 800ba3c:	4690      	mov	r8, r2
 800ba3e:	d801      	bhi.n	800ba44 <_strtol_l.constprop.0+0x10>
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	d106      	bne.n	800ba52 <_strtol_l.constprop.0+0x1e>
 800ba44:	f7fd fdbc 	bl	80095c0 <__errno>
 800ba48:	2316      	movs	r3, #22
 800ba4a:	6003      	str	r3, [r0, #0]
 800ba4c:	2000      	movs	r0, #0
 800ba4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba52:	4834      	ldr	r0, [pc, #208]	@ (800bb24 <_strtol_l.constprop.0+0xf0>)
 800ba54:	460d      	mov	r5, r1
 800ba56:	462a      	mov	r2, r5
 800ba58:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba5c:	5d06      	ldrb	r6, [r0, r4]
 800ba5e:	f016 0608 	ands.w	r6, r6, #8
 800ba62:	d1f8      	bne.n	800ba56 <_strtol_l.constprop.0+0x22>
 800ba64:	2c2d      	cmp	r4, #45	@ 0x2d
 800ba66:	d12d      	bne.n	800bac4 <_strtol_l.constprop.0+0x90>
 800ba68:	782c      	ldrb	r4, [r5, #0]
 800ba6a:	2601      	movs	r6, #1
 800ba6c:	1c95      	adds	r5, r2, #2
 800ba6e:	f033 0210 	bics.w	r2, r3, #16
 800ba72:	d109      	bne.n	800ba88 <_strtol_l.constprop.0+0x54>
 800ba74:	2c30      	cmp	r4, #48	@ 0x30
 800ba76:	d12a      	bne.n	800bace <_strtol_l.constprop.0+0x9a>
 800ba78:	782a      	ldrb	r2, [r5, #0]
 800ba7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ba7e:	2a58      	cmp	r2, #88	@ 0x58
 800ba80:	d125      	bne.n	800bace <_strtol_l.constprop.0+0x9a>
 800ba82:	786c      	ldrb	r4, [r5, #1]
 800ba84:	2310      	movs	r3, #16
 800ba86:	3502      	adds	r5, #2
 800ba88:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800ba8c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800ba90:	2200      	movs	r2, #0
 800ba92:	fbbc f9f3 	udiv	r9, ip, r3
 800ba96:	4610      	mov	r0, r2
 800ba98:	fb03 ca19 	mls	sl, r3, r9, ip
 800ba9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800baa0:	2f09      	cmp	r7, #9
 800baa2:	d81b      	bhi.n	800badc <_strtol_l.constprop.0+0xa8>
 800baa4:	463c      	mov	r4, r7
 800baa6:	42a3      	cmp	r3, r4
 800baa8:	dd27      	ble.n	800bafa <_strtol_l.constprop.0+0xc6>
 800baaa:	1c57      	adds	r7, r2, #1
 800baac:	d007      	beq.n	800babe <_strtol_l.constprop.0+0x8a>
 800baae:	4581      	cmp	r9, r0
 800bab0:	d320      	bcc.n	800baf4 <_strtol_l.constprop.0+0xc0>
 800bab2:	d101      	bne.n	800bab8 <_strtol_l.constprop.0+0x84>
 800bab4:	45a2      	cmp	sl, r4
 800bab6:	db1d      	blt.n	800baf4 <_strtol_l.constprop.0+0xc0>
 800bab8:	fb00 4003 	mla	r0, r0, r3, r4
 800babc:	2201      	movs	r2, #1
 800babe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bac2:	e7eb      	b.n	800ba9c <_strtol_l.constprop.0+0x68>
 800bac4:	2c2b      	cmp	r4, #43	@ 0x2b
 800bac6:	bf04      	itt	eq
 800bac8:	782c      	ldrbeq	r4, [r5, #0]
 800baca:	1c95      	addeq	r5, r2, #2
 800bacc:	e7cf      	b.n	800ba6e <_strtol_l.constprop.0+0x3a>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d1da      	bne.n	800ba88 <_strtol_l.constprop.0+0x54>
 800bad2:	2c30      	cmp	r4, #48	@ 0x30
 800bad4:	bf0c      	ite	eq
 800bad6:	2308      	moveq	r3, #8
 800bad8:	230a      	movne	r3, #10
 800bada:	e7d5      	b.n	800ba88 <_strtol_l.constprop.0+0x54>
 800badc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bae0:	2f19      	cmp	r7, #25
 800bae2:	d801      	bhi.n	800bae8 <_strtol_l.constprop.0+0xb4>
 800bae4:	3c37      	subs	r4, #55	@ 0x37
 800bae6:	e7de      	b.n	800baa6 <_strtol_l.constprop.0+0x72>
 800bae8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800baec:	2f19      	cmp	r7, #25
 800baee:	d804      	bhi.n	800bafa <_strtol_l.constprop.0+0xc6>
 800baf0:	3c57      	subs	r4, #87	@ 0x57
 800baf2:	e7d8      	b.n	800baa6 <_strtol_l.constprop.0+0x72>
 800baf4:	f04f 32ff 	mov.w	r2, #4294967295
 800baf8:	e7e1      	b.n	800babe <_strtol_l.constprop.0+0x8a>
 800bafa:	1c53      	adds	r3, r2, #1
 800bafc:	d108      	bne.n	800bb10 <_strtol_l.constprop.0+0xdc>
 800bafe:	2322      	movs	r3, #34	@ 0x22
 800bb00:	f8ce 3000 	str.w	r3, [lr]
 800bb04:	4660      	mov	r0, ip
 800bb06:	f1b8 0f00 	cmp.w	r8, #0
 800bb0a:	d0a0      	beq.n	800ba4e <_strtol_l.constprop.0+0x1a>
 800bb0c:	1e69      	subs	r1, r5, #1
 800bb0e:	e006      	b.n	800bb1e <_strtol_l.constprop.0+0xea>
 800bb10:	b106      	cbz	r6, 800bb14 <_strtol_l.constprop.0+0xe0>
 800bb12:	4240      	negs	r0, r0
 800bb14:	f1b8 0f00 	cmp.w	r8, #0
 800bb18:	d099      	beq.n	800ba4e <_strtol_l.constprop.0+0x1a>
 800bb1a:	2a00      	cmp	r2, #0
 800bb1c:	d1f6      	bne.n	800bb0c <_strtol_l.constprop.0+0xd8>
 800bb1e:	f8c8 1000 	str.w	r1, [r8]
 800bb22:	e794      	b.n	800ba4e <_strtol_l.constprop.0+0x1a>
 800bb24:	0800e6b1 	.word	0x0800e6b1

0800bb28 <_strtol_r>:
 800bb28:	f7ff bf84 	b.w	800ba34 <_strtol_l.constprop.0>

0800bb2c <__ssputs_r>:
 800bb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb30:	688e      	ldr	r6, [r1, #8]
 800bb32:	461f      	mov	r7, r3
 800bb34:	42be      	cmp	r6, r7
 800bb36:	680b      	ldr	r3, [r1, #0]
 800bb38:	4682      	mov	sl, r0
 800bb3a:	460c      	mov	r4, r1
 800bb3c:	4690      	mov	r8, r2
 800bb3e:	d82d      	bhi.n	800bb9c <__ssputs_r+0x70>
 800bb40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bb44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bb48:	d026      	beq.n	800bb98 <__ssputs_r+0x6c>
 800bb4a:	6965      	ldr	r5, [r4, #20]
 800bb4c:	6909      	ldr	r1, [r1, #16]
 800bb4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bb52:	eba3 0901 	sub.w	r9, r3, r1
 800bb56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bb5a:	1c7b      	adds	r3, r7, #1
 800bb5c:	444b      	add	r3, r9
 800bb5e:	106d      	asrs	r5, r5, #1
 800bb60:	429d      	cmp	r5, r3
 800bb62:	bf38      	it	cc
 800bb64:	461d      	movcc	r5, r3
 800bb66:	0553      	lsls	r3, r2, #21
 800bb68:	d527      	bpl.n	800bbba <__ssputs_r+0x8e>
 800bb6a:	4629      	mov	r1, r5
 800bb6c:	f7fe fc1c 	bl	800a3a8 <_malloc_r>
 800bb70:	4606      	mov	r6, r0
 800bb72:	b360      	cbz	r0, 800bbce <__ssputs_r+0xa2>
 800bb74:	6921      	ldr	r1, [r4, #16]
 800bb76:	464a      	mov	r2, r9
 800bb78:	f000 fbde 	bl	800c338 <memcpy>
 800bb7c:	89a3      	ldrh	r3, [r4, #12]
 800bb7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb86:	81a3      	strh	r3, [r4, #12]
 800bb88:	6126      	str	r6, [r4, #16]
 800bb8a:	6165      	str	r5, [r4, #20]
 800bb8c:	444e      	add	r6, r9
 800bb8e:	eba5 0509 	sub.w	r5, r5, r9
 800bb92:	6026      	str	r6, [r4, #0]
 800bb94:	60a5      	str	r5, [r4, #8]
 800bb96:	463e      	mov	r6, r7
 800bb98:	42be      	cmp	r6, r7
 800bb9a:	d900      	bls.n	800bb9e <__ssputs_r+0x72>
 800bb9c:	463e      	mov	r6, r7
 800bb9e:	6820      	ldr	r0, [r4, #0]
 800bba0:	4632      	mov	r2, r6
 800bba2:	4641      	mov	r1, r8
 800bba4:	f000 fb6a 	bl	800c27c <memmove>
 800bba8:	68a3      	ldr	r3, [r4, #8]
 800bbaa:	1b9b      	subs	r3, r3, r6
 800bbac:	60a3      	str	r3, [r4, #8]
 800bbae:	6823      	ldr	r3, [r4, #0]
 800bbb0:	4433      	add	r3, r6
 800bbb2:	6023      	str	r3, [r4, #0]
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbba:	462a      	mov	r2, r5
 800bbbc:	f000 ff51 	bl	800ca62 <_realloc_r>
 800bbc0:	4606      	mov	r6, r0
 800bbc2:	2800      	cmp	r0, #0
 800bbc4:	d1e0      	bne.n	800bb88 <__ssputs_r+0x5c>
 800bbc6:	6921      	ldr	r1, [r4, #16]
 800bbc8:	4650      	mov	r0, sl
 800bbca:	f7fe fb79 	bl	800a2c0 <_free_r>
 800bbce:	230c      	movs	r3, #12
 800bbd0:	f8ca 3000 	str.w	r3, [sl]
 800bbd4:	89a3      	ldrh	r3, [r4, #12]
 800bbd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bbda:	81a3      	strh	r3, [r4, #12]
 800bbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe0:	e7e9      	b.n	800bbb6 <__ssputs_r+0x8a>
	...

0800bbe4 <_svfiprintf_r>:
 800bbe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe8:	4698      	mov	r8, r3
 800bbea:	898b      	ldrh	r3, [r1, #12]
 800bbec:	061b      	lsls	r3, r3, #24
 800bbee:	b09d      	sub	sp, #116	@ 0x74
 800bbf0:	4607      	mov	r7, r0
 800bbf2:	460d      	mov	r5, r1
 800bbf4:	4614      	mov	r4, r2
 800bbf6:	d510      	bpl.n	800bc1a <_svfiprintf_r+0x36>
 800bbf8:	690b      	ldr	r3, [r1, #16]
 800bbfa:	b973      	cbnz	r3, 800bc1a <_svfiprintf_r+0x36>
 800bbfc:	2140      	movs	r1, #64	@ 0x40
 800bbfe:	f7fe fbd3 	bl	800a3a8 <_malloc_r>
 800bc02:	6028      	str	r0, [r5, #0]
 800bc04:	6128      	str	r0, [r5, #16]
 800bc06:	b930      	cbnz	r0, 800bc16 <_svfiprintf_r+0x32>
 800bc08:	230c      	movs	r3, #12
 800bc0a:	603b      	str	r3, [r7, #0]
 800bc0c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc10:	b01d      	add	sp, #116	@ 0x74
 800bc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc16:	2340      	movs	r3, #64	@ 0x40
 800bc18:	616b      	str	r3, [r5, #20]
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc1e:	2320      	movs	r3, #32
 800bc20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bc24:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc28:	2330      	movs	r3, #48	@ 0x30
 800bc2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bdc8 <_svfiprintf_r+0x1e4>
 800bc2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bc32:	f04f 0901 	mov.w	r9, #1
 800bc36:	4623      	mov	r3, r4
 800bc38:	469a      	mov	sl, r3
 800bc3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc3e:	b10a      	cbz	r2, 800bc44 <_svfiprintf_r+0x60>
 800bc40:	2a25      	cmp	r2, #37	@ 0x25
 800bc42:	d1f9      	bne.n	800bc38 <_svfiprintf_r+0x54>
 800bc44:	ebba 0b04 	subs.w	fp, sl, r4
 800bc48:	d00b      	beq.n	800bc62 <_svfiprintf_r+0x7e>
 800bc4a:	465b      	mov	r3, fp
 800bc4c:	4622      	mov	r2, r4
 800bc4e:	4629      	mov	r1, r5
 800bc50:	4638      	mov	r0, r7
 800bc52:	f7ff ff6b 	bl	800bb2c <__ssputs_r>
 800bc56:	3001      	adds	r0, #1
 800bc58:	f000 80a7 	beq.w	800bdaa <_svfiprintf_r+0x1c6>
 800bc5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc5e:	445a      	add	r2, fp
 800bc60:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc62:	f89a 3000 	ldrb.w	r3, [sl]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f000 809f 	beq.w	800bdaa <_svfiprintf_r+0x1c6>
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	f04f 32ff 	mov.w	r2, #4294967295
 800bc72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc76:	f10a 0a01 	add.w	sl, sl, #1
 800bc7a:	9304      	str	r3, [sp, #16]
 800bc7c:	9307      	str	r3, [sp, #28]
 800bc7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc82:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc84:	4654      	mov	r4, sl
 800bc86:	2205      	movs	r2, #5
 800bc88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc8c:	484e      	ldr	r0, [pc, #312]	@ (800bdc8 <_svfiprintf_r+0x1e4>)
 800bc8e:	f7f4 fabf 	bl	8000210 <memchr>
 800bc92:	9a04      	ldr	r2, [sp, #16]
 800bc94:	b9d8      	cbnz	r0, 800bcce <_svfiprintf_r+0xea>
 800bc96:	06d0      	lsls	r0, r2, #27
 800bc98:	bf44      	itt	mi
 800bc9a:	2320      	movmi	r3, #32
 800bc9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bca0:	0711      	lsls	r1, r2, #28
 800bca2:	bf44      	itt	mi
 800bca4:	232b      	movmi	r3, #43	@ 0x2b
 800bca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bcaa:	f89a 3000 	ldrb.w	r3, [sl]
 800bcae:	2b2a      	cmp	r3, #42	@ 0x2a
 800bcb0:	d015      	beq.n	800bcde <_svfiprintf_r+0xfa>
 800bcb2:	9a07      	ldr	r2, [sp, #28]
 800bcb4:	4654      	mov	r4, sl
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	f04f 0c0a 	mov.w	ip, #10
 800bcbc:	4621      	mov	r1, r4
 800bcbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcc2:	3b30      	subs	r3, #48	@ 0x30
 800bcc4:	2b09      	cmp	r3, #9
 800bcc6:	d94b      	bls.n	800bd60 <_svfiprintf_r+0x17c>
 800bcc8:	b1b0      	cbz	r0, 800bcf8 <_svfiprintf_r+0x114>
 800bcca:	9207      	str	r2, [sp, #28]
 800bccc:	e014      	b.n	800bcf8 <_svfiprintf_r+0x114>
 800bcce:	eba0 0308 	sub.w	r3, r0, r8
 800bcd2:	fa09 f303 	lsl.w	r3, r9, r3
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	9304      	str	r3, [sp, #16]
 800bcda:	46a2      	mov	sl, r4
 800bcdc:	e7d2      	b.n	800bc84 <_svfiprintf_r+0xa0>
 800bcde:	9b03      	ldr	r3, [sp, #12]
 800bce0:	1d19      	adds	r1, r3, #4
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	9103      	str	r1, [sp, #12]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	bfbb      	ittet	lt
 800bcea:	425b      	neglt	r3, r3
 800bcec:	f042 0202 	orrlt.w	r2, r2, #2
 800bcf0:	9307      	strge	r3, [sp, #28]
 800bcf2:	9307      	strlt	r3, [sp, #28]
 800bcf4:	bfb8      	it	lt
 800bcf6:	9204      	strlt	r2, [sp, #16]
 800bcf8:	7823      	ldrb	r3, [r4, #0]
 800bcfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800bcfc:	d10a      	bne.n	800bd14 <_svfiprintf_r+0x130>
 800bcfe:	7863      	ldrb	r3, [r4, #1]
 800bd00:	2b2a      	cmp	r3, #42	@ 0x2a
 800bd02:	d132      	bne.n	800bd6a <_svfiprintf_r+0x186>
 800bd04:	9b03      	ldr	r3, [sp, #12]
 800bd06:	1d1a      	adds	r2, r3, #4
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	9203      	str	r2, [sp, #12]
 800bd0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bd10:	3402      	adds	r4, #2
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bdd8 <_svfiprintf_r+0x1f4>
 800bd18:	7821      	ldrb	r1, [r4, #0]
 800bd1a:	2203      	movs	r2, #3
 800bd1c:	4650      	mov	r0, sl
 800bd1e:	f7f4 fa77 	bl	8000210 <memchr>
 800bd22:	b138      	cbz	r0, 800bd34 <_svfiprintf_r+0x150>
 800bd24:	9b04      	ldr	r3, [sp, #16]
 800bd26:	eba0 000a 	sub.w	r0, r0, sl
 800bd2a:	2240      	movs	r2, #64	@ 0x40
 800bd2c:	4082      	lsls	r2, r0
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	3401      	adds	r4, #1
 800bd32:	9304      	str	r3, [sp, #16]
 800bd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd38:	4824      	ldr	r0, [pc, #144]	@ (800bdcc <_svfiprintf_r+0x1e8>)
 800bd3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bd3e:	2206      	movs	r2, #6
 800bd40:	f7f4 fa66 	bl	8000210 <memchr>
 800bd44:	2800      	cmp	r0, #0
 800bd46:	d036      	beq.n	800bdb6 <_svfiprintf_r+0x1d2>
 800bd48:	4b21      	ldr	r3, [pc, #132]	@ (800bdd0 <_svfiprintf_r+0x1ec>)
 800bd4a:	bb1b      	cbnz	r3, 800bd94 <_svfiprintf_r+0x1b0>
 800bd4c:	9b03      	ldr	r3, [sp, #12]
 800bd4e:	3307      	adds	r3, #7
 800bd50:	f023 0307 	bic.w	r3, r3, #7
 800bd54:	3308      	adds	r3, #8
 800bd56:	9303      	str	r3, [sp, #12]
 800bd58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bd5a:	4433      	add	r3, r6
 800bd5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd5e:	e76a      	b.n	800bc36 <_svfiprintf_r+0x52>
 800bd60:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd64:	460c      	mov	r4, r1
 800bd66:	2001      	movs	r0, #1
 800bd68:	e7a8      	b.n	800bcbc <_svfiprintf_r+0xd8>
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	3401      	adds	r4, #1
 800bd6e:	9305      	str	r3, [sp, #20]
 800bd70:	4619      	mov	r1, r3
 800bd72:	f04f 0c0a 	mov.w	ip, #10
 800bd76:	4620      	mov	r0, r4
 800bd78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd7c:	3a30      	subs	r2, #48	@ 0x30
 800bd7e:	2a09      	cmp	r2, #9
 800bd80:	d903      	bls.n	800bd8a <_svfiprintf_r+0x1a6>
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d0c6      	beq.n	800bd14 <_svfiprintf_r+0x130>
 800bd86:	9105      	str	r1, [sp, #20]
 800bd88:	e7c4      	b.n	800bd14 <_svfiprintf_r+0x130>
 800bd8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd8e:	4604      	mov	r4, r0
 800bd90:	2301      	movs	r3, #1
 800bd92:	e7f0      	b.n	800bd76 <_svfiprintf_r+0x192>
 800bd94:	ab03      	add	r3, sp, #12
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	462a      	mov	r2, r5
 800bd9a:	4b0e      	ldr	r3, [pc, #56]	@ (800bdd4 <_svfiprintf_r+0x1f0>)
 800bd9c:	a904      	add	r1, sp, #16
 800bd9e:	4638      	mov	r0, r7
 800bda0:	f7fc fbc6 	bl	8008530 <_printf_float>
 800bda4:	1c42      	adds	r2, r0, #1
 800bda6:	4606      	mov	r6, r0
 800bda8:	d1d6      	bne.n	800bd58 <_svfiprintf_r+0x174>
 800bdaa:	89ab      	ldrh	r3, [r5, #12]
 800bdac:	065b      	lsls	r3, r3, #25
 800bdae:	f53f af2d 	bmi.w	800bc0c <_svfiprintf_r+0x28>
 800bdb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bdb4:	e72c      	b.n	800bc10 <_svfiprintf_r+0x2c>
 800bdb6:	ab03      	add	r3, sp, #12
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	462a      	mov	r2, r5
 800bdbc:	4b05      	ldr	r3, [pc, #20]	@ (800bdd4 <_svfiprintf_r+0x1f0>)
 800bdbe:	a904      	add	r1, sp, #16
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f7fc fe4d 	bl	8008a60 <_printf_i>
 800bdc6:	e7ed      	b.n	800bda4 <_svfiprintf_r+0x1c0>
 800bdc8:	0800e7b1 	.word	0x0800e7b1
 800bdcc:	0800e7bb 	.word	0x0800e7bb
 800bdd0:	08008531 	.word	0x08008531
 800bdd4:	0800bb2d 	.word	0x0800bb2d
 800bdd8:	0800e7b7 	.word	0x0800e7b7

0800bddc <__sfputc_r>:
 800bddc:	6893      	ldr	r3, [r2, #8]
 800bdde:	3b01      	subs	r3, #1
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	b410      	push	{r4}
 800bde4:	6093      	str	r3, [r2, #8]
 800bde6:	da08      	bge.n	800bdfa <__sfputc_r+0x1e>
 800bde8:	6994      	ldr	r4, [r2, #24]
 800bdea:	42a3      	cmp	r3, r4
 800bdec:	db01      	blt.n	800bdf2 <__sfputc_r+0x16>
 800bdee:	290a      	cmp	r1, #10
 800bdf0:	d103      	bne.n	800bdfa <__sfputc_r+0x1e>
 800bdf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdf6:	f7fd bafc 	b.w	80093f2 <__swbuf_r>
 800bdfa:	6813      	ldr	r3, [r2, #0]
 800bdfc:	1c58      	adds	r0, r3, #1
 800bdfe:	6010      	str	r0, [r2, #0]
 800be00:	7019      	strb	r1, [r3, #0]
 800be02:	4608      	mov	r0, r1
 800be04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <__sfputs_r>:
 800be0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be0c:	4606      	mov	r6, r0
 800be0e:	460f      	mov	r7, r1
 800be10:	4614      	mov	r4, r2
 800be12:	18d5      	adds	r5, r2, r3
 800be14:	42ac      	cmp	r4, r5
 800be16:	d101      	bne.n	800be1c <__sfputs_r+0x12>
 800be18:	2000      	movs	r0, #0
 800be1a:	e007      	b.n	800be2c <__sfputs_r+0x22>
 800be1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be20:	463a      	mov	r2, r7
 800be22:	4630      	mov	r0, r6
 800be24:	f7ff ffda 	bl	800bddc <__sfputc_r>
 800be28:	1c43      	adds	r3, r0, #1
 800be2a:	d1f3      	bne.n	800be14 <__sfputs_r+0xa>
 800be2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800be30 <_vfiprintf_r>:
 800be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be34:	460d      	mov	r5, r1
 800be36:	b09d      	sub	sp, #116	@ 0x74
 800be38:	4614      	mov	r4, r2
 800be3a:	4698      	mov	r8, r3
 800be3c:	4606      	mov	r6, r0
 800be3e:	b118      	cbz	r0, 800be48 <_vfiprintf_r+0x18>
 800be40:	6a03      	ldr	r3, [r0, #32]
 800be42:	b90b      	cbnz	r3, 800be48 <_vfiprintf_r+0x18>
 800be44:	f7fd f9cc 	bl	80091e0 <__sinit>
 800be48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be4a:	07d9      	lsls	r1, r3, #31
 800be4c:	d405      	bmi.n	800be5a <_vfiprintf_r+0x2a>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	059a      	lsls	r2, r3, #22
 800be52:	d402      	bmi.n	800be5a <_vfiprintf_r+0x2a>
 800be54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be56:	f7fd fbde 	bl	8009616 <__retarget_lock_acquire_recursive>
 800be5a:	89ab      	ldrh	r3, [r5, #12]
 800be5c:	071b      	lsls	r3, r3, #28
 800be5e:	d501      	bpl.n	800be64 <_vfiprintf_r+0x34>
 800be60:	692b      	ldr	r3, [r5, #16]
 800be62:	b99b      	cbnz	r3, 800be8c <_vfiprintf_r+0x5c>
 800be64:	4629      	mov	r1, r5
 800be66:	4630      	mov	r0, r6
 800be68:	f7fd fb02 	bl	8009470 <__swsetup_r>
 800be6c:	b170      	cbz	r0, 800be8c <_vfiprintf_r+0x5c>
 800be6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800be70:	07dc      	lsls	r4, r3, #31
 800be72:	d504      	bpl.n	800be7e <_vfiprintf_r+0x4e>
 800be74:	f04f 30ff 	mov.w	r0, #4294967295
 800be78:	b01d      	add	sp, #116	@ 0x74
 800be7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be7e:	89ab      	ldrh	r3, [r5, #12]
 800be80:	0598      	lsls	r0, r3, #22
 800be82:	d4f7      	bmi.n	800be74 <_vfiprintf_r+0x44>
 800be84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800be86:	f7fd fbc7 	bl	8009618 <__retarget_lock_release_recursive>
 800be8a:	e7f3      	b.n	800be74 <_vfiprintf_r+0x44>
 800be8c:	2300      	movs	r3, #0
 800be8e:	9309      	str	r3, [sp, #36]	@ 0x24
 800be90:	2320      	movs	r3, #32
 800be92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be96:	f8cd 800c 	str.w	r8, [sp, #12]
 800be9a:	2330      	movs	r3, #48	@ 0x30
 800be9c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c04c <_vfiprintf_r+0x21c>
 800bea0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bea4:	f04f 0901 	mov.w	r9, #1
 800bea8:	4623      	mov	r3, r4
 800beaa:	469a      	mov	sl, r3
 800beac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beb0:	b10a      	cbz	r2, 800beb6 <_vfiprintf_r+0x86>
 800beb2:	2a25      	cmp	r2, #37	@ 0x25
 800beb4:	d1f9      	bne.n	800beaa <_vfiprintf_r+0x7a>
 800beb6:	ebba 0b04 	subs.w	fp, sl, r4
 800beba:	d00b      	beq.n	800bed4 <_vfiprintf_r+0xa4>
 800bebc:	465b      	mov	r3, fp
 800bebe:	4622      	mov	r2, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	4630      	mov	r0, r6
 800bec4:	f7ff ffa1 	bl	800be0a <__sfputs_r>
 800bec8:	3001      	adds	r0, #1
 800beca:	f000 80a7 	beq.w	800c01c <_vfiprintf_r+0x1ec>
 800bece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bed0:	445a      	add	r2, fp
 800bed2:	9209      	str	r2, [sp, #36]	@ 0x24
 800bed4:	f89a 3000 	ldrb.w	r3, [sl]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	f000 809f 	beq.w	800c01c <_vfiprintf_r+0x1ec>
 800bede:	2300      	movs	r3, #0
 800bee0:	f04f 32ff 	mov.w	r2, #4294967295
 800bee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bee8:	f10a 0a01 	add.w	sl, sl, #1
 800beec:	9304      	str	r3, [sp, #16]
 800beee:	9307      	str	r3, [sp, #28]
 800bef0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bef4:	931a      	str	r3, [sp, #104]	@ 0x68
 800bef6:	4654      	mov	r4, sl
 800bef8:	2205      	movs	r2, #5
 800befa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800befe:	4853      	ldr	r0, [pc, #332]	@ (800c04c <_vfiprintf_r+0x21c>)
 800bf00:	f7f4 f986 	bl	8000210 <memchr>
 800bf04:	9a04      	ldr	r2, [sp, #16]
 800bf06:	b9d8      	cbnz	r0, 800bf40 <_vfiprintf_r+0x110>
 800bf08:	06d1      	lsls	r1, r2, #27
 800bf0a:	bf44      	itt	mi
 800bf0c:	2320      	movmi	r3, #32
 800bf0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf12:	0713      	lsls	r3, r2, #28
 800bf14:	bf44      	itt	mi
 800bf16:	232b      	movmi	r3, #43	@ 0x2b
 800bf18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf1c:	f89a 3000 	ldrb.w	r3, [sl]
 800bf20:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf22:	d015      	beq.n	800bf50 <_vfiprintf_r+0x120>
 800bf24:	9a07      	ldr	r2, [sp, #28]
 800bf26:	4654      	mov	r4, sl
 800bf28:	2000      	movs	r0, #0
 800bf2a:	f04f 0c0a 	mov.w	ip, #10
 800bf2e:	4621      	mov	r1, r4
 800bf30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf34:	3b30      	subs	r3, #48	@ 0x30
 800bf36:	2b09      	cmp	r3, #9
 800bf38:	d94b      	bls.n	800bfd2 <_vfiprintf_r+0x1a2>
 800bf3a:	b1b0      	cbz	r0, 800bf6a <_vfiprintf_r+0x13a>
 800bf3c:	9207      	str	r2, [sp, #28]
 800bf3e:	e014      	b.n	800bf6a <_vfiprintf_r+0x13a>
 800bf40:	eba0 0308 	sub.w	r3, r0, r8
 800bf44:	fa09 f303 	lsl.w	r3, r9, r3
 800bf48:	4313      	orrs	r3, r2
 800bf4a:	9304      	str	r3, [sp, #16]
 800bf4c:	46a2      	mov	sl, r4
 800bf4e:	e7d2      	b.n	800bef6 <_vfiprintf_r+0xc6>
 800bf50:	9b03      	ldr	r3, [sp, #12]
 800bf52:	1d19      	adds	r1, r3, #4
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	9103      	str	r1, [sp, #12]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	bfbb      	ittet	lt
 800bf5c:	425b      	neglt	r3, r3
 800bf5e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf62:	9307      	strge	r3, [sp, #28]
 800bf64:	9307      	strlt	r3, [sp, #28]
 800bf66:	bfb8      	it	lt
 800bf68:	9204      	strlt	r2, [sp, #16]
 800bf6a:	7823      	ldrb	r3, [r4, #0]
 800bf6c:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf6e:	d10a      	bne.n	800bf86 <_vfiprintf_r+0x156>
 800bf70:	7863      	ldrb	r3, [r4, #1]
 800bf72:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf74:	d132      	bne.n	800bfdc <_vfiprintf_r+0x1ac>
 800bf76:	9b03      	ldr	r3, [sp, #12]
 800bf78:	1d1a      	adds	r2, r3, #4
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	9203      	str	r2, [sp, #12]
 800bf7e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf82:	3402      	adds	r4, #2
 800bf84:	9305      	str	r3, [sp, #20]
 800bf86:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c05c <_vfiprintf_r+0x22c>
 800bf8a:	7821      	ldrb	r1, [r4, #0]
 800bf8c:	2203      	movs	r2, #3
 800bf8e:	4650      	mov	r0, sl
 800bf90:	f7f4 f93e 	bl	8000210 <memchr>
 800bf94:	b138      	cbz	r0, 800bfa6 <_vfiprintf_r+0x176>
 800bf96:	9b04      	ldr	r3, [sp, #16]
 800bf98:	eba0 000a 	sub.w	r0, r0, sl
 800bf9c:	2240      	movs	r2, #64	@ 0x40
 800bf9e:	4082      	lsls	r2, r0
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	3401      	adds	r4, #1
 800bfa4:	9304      	str	r3, [sp, #16]
 800bfa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfaa:	4829      	ldr	r0, [pc, #164]	@ (800c050 <_vfiprintf_r+0x220>)
 800bfac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfb0:	2206      	movs	r2, #6
 800bfb2:	f7f4 f92d 	bl	8000210 <memchr>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	d03f      	beq.n	800c03a <_vfiprintf_r+0x20a>
 800bfba:	4b26      	ldr	r3, [pc, #152]	@ (800c054 <_vfiprintf_r+0x224>)
 800bfbc:	bb1b      	cbnz	r3, 800c006 <_vfiprintf_r+0x1d6>
 800bfbe:	9b03      	ldr	r3, [sp, #12]
 800bfc0:	3307      	adds	r3, #7
 800bfc2:	f023 0307 	bic.w	r3, r3, #7
 800bfc6:	3308      	adds	r3, #8
 800bfc8:	9303      	str	r3, [sp, #12]
 800bfca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfcc:	443b      	add	r3, r7
 800bfce:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfd0:	e76a      	b.n	800bea8 <_vfiprintf_r+0x78>
 800bfd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	2001      	movs	r0, #1
 800bfda:	e7a8      	b.n	800bf2e <_vfiprintf_r+0xfe>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	3401      	adds	r4, #1
 800bfe0:	9305      	str	r3, [sp, #20]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	f04f 0c0a 	mov.w	ip, #10
 800bfe8:	4620      	mov	r0, r4
 800bfea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfee:	3a30      	subs	r2, #48	@ 0x30
 800bff0:	2a09      	cmp	r2, #9
 800bff2:	d903      	bls.n	800bffc <_vfiprintf_r+0x1cc>
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d0c6      	beq.n	800bf86 <_vfiprintf_r+0x156>
 800bff8:	9105      	str	r1, [sp, #20]
 800bffa:	e7c4      	b.n	800bf86 <_vfiprintf_r+0x156>
 800bffc:	fb0c 2101 	mla	r1, ip, r1, r2
 800c000:	4604      	mov	r4, r0
 800c002:	2301      	movs	r3, #1
 800c004:	e7f0      	b.n	800bfe8 <_vfiprintf_r+0x1b8>
 800c006:	ab03      	add	r3, sp, #12
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	462a      	mov	r2, r5
 800c00c:	4b12      	ldr	r3, [pc, #72]	@ (800c058 <_vfiprintf_r+0x228>)
 800c00e:	a904      	add	r1, sp, #16
 800c010:	4630      	mov	r0, r6
 800c012:	f7fc fa8d 	bl	8008530 <_printf_float>
 800c016:	4607      	mov	r7, r0
 800c018:	1c78      	adds	r0, r7, #1
 800c01a:	d1d6      	bne.n	800bfca <_vfiprintf_r+0x19a>
 800c01c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c01e:	07d9      	lsls	r1, r3, #31
 800c020:	d405      	bmi.n	800c02e <_vfiprintf_r+0x1fe>
 800c022:	89ab      	ldrh	r3, [r5, #12]
 800c024:	059a      	lsls	r2, r3, #22
 800c026:	d402      	bmi.n	800c02e <_vfiprintf_r+0x1fe>
 800c028:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c02a:	f7fd faf5 	bl	8009618 <__retarget_lock_release_recursive>
 800c02e:	89ab      	ldrh	r3, [r5, #12]
 800c030:	065b      	lsls	r3, r3, #25
 800c032:	f53f af1f 	bmi.w	800be74 <_vfiprintf_r+0x44>
 800c036:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c038:	e71e      	b.n	800be78 <_vfiprintf_r+0x48>
 800c03a:	ab03      	add	r3, sp, #12
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	462a      	mov	r2, r5
 800c040:	4b05      	ldr	r3, [pc, #20]	@ (800c058 <_vfiprintf_r+0x228>)
 800c042:	a904      	add	r1, sp, #16
 800c044:	4630      	mov	r0, r6
 800c046:	f7fc fd0b 	bl	8008a60 <_printf_i>
 800c04a:	e7e4      	b.n	800c016 <_vfiprintf_r+0x1e6>
 800c04c:	0800e7b1 	.word	0x0800e7b1
 800c050:	0800e7bb 	.word	0x0800e7bb
 800c054:	08008531 	.word	0x08008531
 800c058:	0800be0b 	.word	0x0800be0b
 800c05c:	0800e7b7 	.word	0x0800e7b7

0800c060 <__sflush_r>:
 800c060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c068:	0716      	lsls	r6, r2, #28
 800c06a:	4605      	mov	r5, r0
 800c06c:	460c      	mov	r4, r1
 800c06e:	d454      	bmi.n	800c11a <__sflush_r+0xba>
 800c070:	684b      	ldr	r3, [r1, #4]
 800c072:	2b00      	cmp	r3, #0
 800c074:	dc02      	bgt.n	800c07c <__sflush_r+0x1c>
 800c076:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dd48      	ble.n	800c10e <__sflush_r+0xae>
 800c07c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c07e:	2e00      	cmp	r6, #0
 800c080:	d045      	beq.n	800c10e <__sflush_r+0xae>
 800c082:	2300      	movs	r3, #0
 800c084:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c088:	682f      	ldr	r7, [r5, #0]
 800c08a:	6a21      	ldr	r1, [r4, #32]
 800c08c:	602b      	str	r3, [r5, #0]
 800c08e:	d030      	beq.n	800c0f2 <__sflush_r+0x92>
 800c090:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c092:	89a3      	ldrh	r3, [r4, #12]
 800c094:	0759      	lsls	r1, r3, #29
 800c096:	d505      	bpl.n	800c0a4 <__sflush_r+0x44>
 800c098:	6863      	ldr	r3, [r4, #4]
 800c09a:	1ad2      	subs	r2, r2, r3
 800c09c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c09e:	b10b      	cbz	r3, 800c0a4 <__sflush_r+0x44>
 800c0a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0a2:	1ad2      	subs	r2, r2, r3
 800c0a4:	2300      	movs	r3, #0
 800c0a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0a8:	6a21      	ldr	r1, [r4, #32]
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	47b0      	blx	r6
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	89a3      	ldrh	r3, [r4, #12]
 800c0b2:	d106      	bne.n	800c0c2 <__sflush_r+0x62>
 800c0b4:	6829      	ldr	r1, [r5, #0]
 800c0b6:	291d      	cmp	r1, #29
 800c0b8:	d82b      	bhi.n	800c112 <__sflush_r+0xb2>
 800c0ba:	4a2a      	ldr	r2, [pc, #168]	@ (800c164 <__sflush_r+0x104>)
 800c0bc:	410a      	asrs	r2, r1
 800c0be:	07d6      	lsls	r6, r2, #31
 800c0c0:	d427      	bmi.n	800c112 <__sflush_r+0xb2>
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	6062      	str	r2, [r4, #4]
 800c0c6:	04d9      	lsls	r1, r3, #19
 800c0c8:	6922      	ldr	r2, [r4, #16]
 800c0ca:	6022      	str	r2, [r4, #0]
 800c0cc:	d504      	bpl.n	800c0d8 <__sflush_r+0x78>
 800c0ce:	1c42      	adds	r2, r0, #1
 800c0d0:	d101      	bne.n	800c0d6 <__sflush_r+0x76>
 800c0d2:	682b      	ldr	r3, [r5, #0]
 800c0d4:	b903      	cbnz	r3, 800c0d8 <__sflush_r+0x78>
 800c0d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0da:	602f      	str	r7, [r5, #0]
 800c0dc:	b1b9      	cbz	r1, 800c10e <__sflush_r+0xae>
 800c0de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0e2:	4299      	cmp	r1, r3
 800c0e4:	d002      	beq.n	800c0ec <__sflush_r+0x8c>
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	f7fe f8ea 	bl	800a2c0 <_free_r>
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800c0f0:	e00d      	b.n	800c10e <__sflush_r+0xae>
 800c0f2:	2301      	movs	r3, #1
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	47b0      	blx	r6
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	1c50      	adds	r0, r2, #1
 800c0fc:	d1c9      	bne.n	800c092 <__sflush_r+0x32>
 800c0fe:	682b      	ldr	r3, [r5, #0]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d0c6      	beq.n	800c092 <__sflush_r+0x32>
 800c104:	2b1d      	cmp	r3, #29
 800c106:	d001      	beq.n	800c10c <__sflush_r+0xac>
 800c108:	2b16      	cmp	r3, #22
 800c10a:	d11e      	bne.n	800c14a <__sflush_r+0xea>
 800c10c:	602f      	str	r7, [r5, #0]
 800c10e:	2000      	movs	r0, #0
 800c110:	e022      	b.n	800c158 <__sflush_r+0xf8>
 800c112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c116:	b21b      	sxth	r3, r3
 800c118:	e01b      	b.n	800c152 <__sflush_r+0xf2>
 800c11a:	690f      	ldr	r7, [r1, #16]
 800c11c:	2f00      	cmp	r7, #0
 800c11e:	d0f6      	beq.n	800c10e <__sflush_r+0xae>
 800c120:	0793      	lsls	r3, r2, #30
 800c122:	680e      	ldr	r6, [r1, #0]
 800c124:	bf08      	it	eq
 800c126:	694b      	ldreq	r3, [r1, #20]
 800c128:	600f      	str	r7, [r1, #0]
 800c12a:	bf18      	it	ne
 800c12c:	2300      	movne	r3, #0
 800c12e:	eba6 0807 	sub.w	r8, r6, r7
 800c132:	608b      	str	r3, [r1, #8]
 800c134:	f1b8 0f00 	cmp.w	r8, #0
 800c138:	dde9      	ble.n	800c10e <__sflush_r+0xae>
 800c13a:	6a21      	ldr	r1, [r4, #32]
 800c13c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c13e:	4643      	mov	r3, r8
 800c140:	463a      	mov	r2, r7
 800c142:	4628      	mov	r0, r5
 800c144:	47b0      	blx	r6
 800c146:	2800      	cmp	r0, #0
 800c148:	dc08      	bgt.n	800c15c <__sflush_r+0xfc>
 800c14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c14e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c152:	81a3      	strh	r3, [r4, #12]
 800c154:	f04f 30ff 	mov.w	r0, #4294967295
 800c158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15c:	4407      	add	r7, r0
 800c15e:	eba8 0800 	sub.w	r8, r8, r0
 800c162:	e7e7      	b.n	800c134 <__sflush_r+0xd4>
 800c164:	dfbffffe 	.word	0xdfbffffe

0800c168 <_fflush_r>:
 800c168:	b538      	push	{r3, r4, r5, lr}
 800c16a:	690b      	ldr	r3, [r1, #16]
 800c16c:	4605      	mov	r5, r0
 800c16e:	460c      	mov	r4, r1
 800c170:	b913      	cbnz	r3, 800c178 <_fflush_r+0x10>
 800c172:	2500      	movs	r5, #0
 800c174:	4628      	mov	r0, r5
 800c176:	bd38      	pop	{r3, r4, r5, pc}
 800c178:	b118      	cbz	r0, 800c182 <_fflush_r+0x1a>
 800c17a:	6a03      	ldr	r3, [r0, #32]
 800c17c:	b90b      	cbnz	r3, 800c182 <_fflush_r+0x1a>
 800c17e:	f7fd f82f 	bl	80091e0 <__sinit>
 800c182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d0f3      	beq.n	800c172 <_fflush_r+0xa>
 800c18a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c18c:	07d0      	lsls	r0, r2, #31
 800c18e:	d404      	bmi.n	800c19a <_fflush_r+0x32>
 800c190:	0599      	lsls	r1, r3, #22
 800c192:	d402      	bmi.n	800c19a <_fflush_r+0x32>
 800c194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c196:	f7fd fa3e 	bl	8009616 <__retarget_lock_acquire_recursive>
 800c19a:	4628      	mov	r0, r5
 800c19c:	4621      	mov	r1, r4
 800c19e:	f7ff ff5f 	bl	800c060 <__sflush_r>
 800c1a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1a4:	07da      	lsls	r2, r3, #31
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	d4e4      	bmi.n	800c174 <_fflush_r+0xc>
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	059b      	lsls	r3, r3, #22
 800c1ae:	d4e1      	bmi.n	800c174 <_fflush_r+0xc>
 800c1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1b2:	f7fd fa31 	bl	8009618 <__retarget_lock_release_recursive>
 800c1b6:	e7dd      	b.n	800c174 <_fflush_r+0xc>

0800c1b8 <__swhatbuf_r>:
 800c1b8:	b570      	push	{r4, r5, r6, lr}
 800c1ba:	460c      	mov	r4, r1
 800c1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1c0:	2900      	cmp	r1, #0
 800c1c2:	b096      	sub	sp, #88	@ 0x58
 800c1c4:	4615      	mov	r5, r2
 800c1c6:	461e      	mov	r6, r3
 800c1c8:	da0d      	bge.n	800c1e6 <__swhatbuf_r+0x2e>
 800c1ca:	89a3      	ldrh	r3, [r4, #12]
 800c1cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c1d0:	f04f 0100 	mov.w	r1, #0
 800c1d4:	bf14      	ite	ne
 800c1d6:	2340      	movne	r3, #64	@ 0x40
 800c1d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c1dc:	2000      	movs	r0, #0
 800c1de:	6031      	str	r1, [r6, #0]
 800c1e0:	602b      	str	r3, [r5, #0]
 800c1e2:	b016      	add	sp, #88	@ 0x58
 800c1e4:	bd70      	pop	{r4, r5, r6, pc}
 800c1e6:	466a      	mov	r2, sp
 800c1e8:	f000 f874 	bl	800c2d4 <_fstat_r>
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	dbec      	blt.n	800c1ca <__swhatbuf_r+0x12>
 800c1f0:	9901      	ldr	r1, [sp, #4]
 800c1f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c1f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c1fa:	4259      	negs	r1, r3
 800c1fc:	4159      	adcs	r1, r3
 800c1fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c202:	e7eb      	b.n	800c1dc <__swhatbuf_r+0x24>

0800c204 <__smakebuf_r>:
 800c204:	898b      	ldrh	r3, [r1, #12]
 800c206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c208:	079d      	lsls	r5, r3, #30
 800c20a:	4606      	mov	r6, r0
 800c20c:	460c      	mov	r4, r1
 800c20e:	d507      	bpl.n	800c220 <__smakebuf_r+0x1c>
 800c210:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c214:	6023      	str	r3, [r4, #0]
 800c216:	6123      	str	r3, [r4, #16]
 800c218:	2301      	movs	r3, #1
 800c21a:	6163      	str	r3, [r4, #20]
 800c21c:	b003      	add	sp, #12
 800c21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c220:	ab01      	add	r3, sp, #4
 800c222:	466a      	mov	r2, sp
 800c224:	f7ff ffc8 	bl	800c1b8 <__swhatbuf_r>
 800c228:	9f00      	ldr	r7, [sp, #0]
 800c22a:	4605      	mov	r5, r0
 800c22c:	4639      	mov	r1, r7
 800c22e:	4630      	mov	r0, r6
 800c230:	f7fe f8ba 	bl	800a3a8 <_malloc_r>
 800c234:	b948      	cbnz	r0, 800c24a <__smakebuf_r+0x46>
 800c236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23a:	059a      	lsls	r2, r3, #22
 800c23c:	d4ee      	bmi.n	800c21c <__smakebuf_r+0x18>
 800c23e:	f023 0303 	bic.w	r3, r3, #3
 800c242:	f043 0302 	orr.w	r3, r3, #2
 800c246:	81a3      	strh	r3, [r4, #12]
 800c248:	e7e2      	b.n	800c210 <__smakebuf_r+0xc>
 800c24a:	89a3      	ldrh	r3, [r4, #12]
 800c24c:	6020      	str	r0, [r4, #0]
 800c24e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c252:	81a3      	strh	r3, [r4, #12]
 800c254:	9b01      	ldr	r3, [sp, #4]
 800c256:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c25a:	b15b      	cbz	r3, 800c274 <__smakebuf_r+0x70>
 800c25c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c260:	4630      	mov	r0, r6
 800c262:	f000 f849 	bl	800c2f8 <_isatty_r>
 800c266:	b128      	cbz	r0, 800c274 <__smakebuf_r+0x70>
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	f023 0303 	bic.w	r3, r3, #3
 800c26e:	f043 0301 	orr.w	r3, r3, #1
 800c272:	81a3      	strh	r3, [r4, #12]
 800c274:	89a3      	ldrh	r3, [r4, #12]
 800c276:	431d      	orrs	r5, r3
 800c278:	81a5      	strh	r5, [r4, #12]
 800c27a:	e7cf      	b.n	800c21c <__smakebuf_r+0x18>

0800c27c <memmove>:
 800c27c:	4288      	cmp	r0, r1
 800c27e:	b510      	push	{r4, lr}
 800c280:	eb01 0402 	add.w	r4, r1, r2
 800c284:	d902      	bls.n	800c28c <memmove+0x10>
 800c286:	4284      	cmp	r4, r0
 800c288:	4623      	mov	r3, r4
 800c28a:	d807      	bhi.n	800c29c <memmove+0x20>
 800c28c:	1e43      	subs	r3, r0, #1
 800c28e:	42a1      	cmp	r1, r4
 800c290:	d008      	beq.n	800c2a4 <memmove+0x28>
 800c292:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c296:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c29a:	e7f8      	b.n	800c28e <memmove+0x12>
 800c29c:	4402      	add	r2, r0
 800c29e:	4601      	mov	r1, r0
 800c2a0:	428a      	cmp	r2, r1
 800c2a2:	d100      	bne.n	800c2a6 <memmove+0x2a>
 800c2a4:	bd10      	pop	{r4, pc}
 800c2a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c2aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c2ae:	e7f7      	b.n	800c2a0 <memmove+0x24>

0800c2b0 <strncmp>:
 800c2b0:	b510      	push	{r4, lr}
 800c2b2:	b16a      	cbz	r2, 800c2d0 <strncmp+0x20>
 800c2b4:	3901      	subs	r1, #1
 800c2b6:	1884      	adds	r4, r0, r2
 800c2b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d103      	bne.n	800c2cc <strncmp+0x1c>
 800c2c4:	42a0      	cmp	r0, r4
 800c2c6:	d001      	beq.n	800c2cc <strncmp+0x1c>
 800c2c8:	2a00      	cmp	r2, #0
 800c2ca:	d1f5      	bne.n	800c2b8 <strncmp+0x8>
 800c2cc:	1ad0      	subs	r0, r2, r3
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	4610      	mov	r0, r2
 800c2d2:	e7fc      	b.n	800c2ce <strncmp+0x1e>

0800c2d4 <_fstat_r>:
 800c2d4:	b538      	push	{r3, r4, r5, lr}
 800c2d6:	4d07      	ldr	r5, [pc, #28]	@ (800c2f4 <_fstat_r+0x20>)
 800c2d8:	2300      	movs	r3, #0
 800c2da:	4604      	mov	r4, r0
 800c2dc:	4608      	mov	r0, r1
 800c2de:	4611      	mov	r1, r2
 800c2e0:	602b      	str	r3, [r5, #0]
 800c2e2:	f7f7 f96f 	bl	80035c4 <_fstat>
 800c2e6:	1c43      	adds	r3, r0, #1
 800c2e8:	d102      	bne.n	800c2f0 <_fstat_r+0x1c>
 800c2ea:	682b      	ldr	r3, [r5, #0]
 800c2ec:	b103      	cbz	r3, 800c2f0 <_fstat_r+0x1c>
 800c2ee:	6023      	str	r3, [r4, #0]
 800c2f0:	bd38      	pop	{r3, r4, r5, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20000828 	.word	0x20000828

0800c2f8 <_isatty_r>:
 800c2f8:	b538      	push	{r3, r4, r5, lr}
 800c2fa:	4d06      	ldr	r5, [pc, #24]	@ (800c314 <_isatty_r+0x1c>)
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	4604      	mov	r4, r0
 800c300:	4608      	mov	r0, r1
 800c302:	602b      	str	r3, [r5, #0]
 800c304:	f7f7 f96e 	bl	80035e4 <_isatty>
 800c308:	1c43      	adds	r3, r0, #1
 800c30a:	d102      	bne.n	800c312 <_isatty_r+0x1a>
 800c30c:	682b      	ldr	r3, [r5, #0]
 800c30e:	b103      	cbz	r3, 800c312 <_isatty_r+0x1a>
 800c310:	6023      	str	r3, [r4, #0]
 800c312:	bd38      	pop	{r3, r4, r5, pc}
 800c314:	20000828 	.word	0x20000828

0800c318 <_sbrk_r>:
 800c318:	b538      	push	{r3, r4, r5, lr}
 800c31a:	4d06      	ldr	r5, [pc, #24]	@ (800c334 <_sbrk_r+0x1c>)
 800c31c:	2300      	movs	r3, #0
 800c31e:	4604      	mov	r4, r0
 800c320:	4608      	mov	r0, r1
 800c322:	602b      	str	r3, [r5, #0]
 800c324:	f7f7 f976 	bl	8003614 <_sbrk>
 800c328:	1c43      	adds	r3, r0, #1
 800c32a:	d102      	bne.n	800c332 <_sbrk_r+0x1a>
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	b103      	cbz	r3, 800c332 <_sbrk_r+0x1a>
 800c330:	6023      	str	r3, [r4, #0]
 800c332:	bd38      	pop	{r3, r4, r5, pc}
 800c334:	20000828 	.word	0x20000828

0800c338 <memcpy>:
 800c338:	440a      	add	r2, r1
 800c33a:	4291      	cmp	r1, r2
 800c33c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c340:	d100      	bne.n	800c344 <memcpy+0xc>
 800c342:	4770      	bx	lr
 800c344:	b510      	push	{r4, lr}
 800c346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c34a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c34e:	4291      	cmp	r1, r2
 800c350:	d1f9      	bne.n	800c346 <memcpy+0xe>
 800c352:	bd10      	pop	{r4, pc}
 800c354:	0000      	movs	r0, r0
	...

0800c358 <nan>:
 800c358:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c360 <nan+0x8>
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	00000000 	.word	0x00000000
 800c364:	7ff80000 	.word	0x7ff80000

0800c368 <__assert_func>:
 800c368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c36a:	4614      	mov	r4, r2
 800c36c:	461a      	mov	r2, r3
 800c36e:	4b09      	ldr	r3, [pc, #36]	@ (800c394 <__assert_func+0x2c>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	4605      	mov	r5, r0
 800c374:	68d8      	ldr	r0, [r3, #12]
 800c376:	b954      	cbnz	r4, 800c38e <__assert_func+0x26>
 800c378:	4b07      	ldr	r3, [pc, #28]	@ (800c398 <__assert_func+0x30>)
 800c37a:	461c      	mov	r4, r3
 800c37c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c380:	9100      	str	r1, [sp, #0]
 800c382:	462b      	mov	r3, r5
 800c384:	4905      	ldr	r1, [pc, #20]	@ (800c39c <__assert_func+0x34>)
 800c386:	f000 fba7 	bl	800cad8 <fiprintf>
 800c38a:	f000 fbb7 	bl	800cafc <abort>
 800c38e:	4b04      	ldr	r3, [pc, #16]	@ (800c3a0 <__assert_func+0x38>)
 800c390:	e7f4      	b.n	800c37c <__assert_func+0x14>
 800c392:	bf00      	nop
 800c394:	20000028 	.word	0x20000028
 800c398:	0800e805 	.word	0x0800e805
 800c39c:	0800e7d7 	.word	0x0800e7d7
 800c3a0:	0800e7ca 	.word	0x0800e7ca

0800c3a4 <_calloc_r>:
 800c3a4:	b570      	push	{r4, r5, r6, lr}
 800c3a6:	fba1 5402 	umull	r5, r4, r1, r2
 800c3aa:	b93c      	cbnz	r4, 800c3bc <_calloc_r+0x18>
 800c3ac:	4629      	mov	r1, r5
 800c3ae:	f7fd fffb 	bl	800a3a8 <_malloc_r>
 800c3b2:	4606      	mov	r6, r0
 800c3b4:	b928      	cbnz	r0, 800c3c2 <_calloc_r+0x1e>
 800c3b6:	2600      	movs	r6, #0
 800c3b8:	4630      	mov	r0, r6
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	220c      	movs	r2, #12
 800c3be:	6002      	str	r2, [r0, #0]
 800c3c0:	e7f9      	b.n	800c3b6 <_calloc_r+0x12>
 800c3c2:	462a      	mov	r2, r5
 800c3c4:	4621      	mov	r1, r4
 800c3c6:	f7fd f8a9 	bl	800951c <memset>
 800c3ca:	e7f5      	b.n	800c3b8 <_calloc_r+0x14>

0800c3cc <rshift>:
 800c3cc:	6903      	ldr	r3, [r0, #16]
 800c3ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3da:	f100 0414 	add.w	r4, r0, #20
 800c3de:	dd45      	ble.n	800c46c <rshift+0xa0>
 800c3e0:	f011 011f 	ands.w	r1, r1, #31
 800c3e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c3e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c3ec:	d10c      	bne.n	800c408 <rshift+0x3c>
 800c3ee:	f100 0710 	add.w	r7, r0, #16
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	42b1      	cmp	r1, r6
 800c3f6:	d334      	bcc.n	800c462 <rshift+0x96>
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	1eea      	subs	r2, r5, #3
 800c3fe:	4296      	cmp	r6, r2
 800c400:	bf38      	it	cc
 800c402:	2300      	movcc	r3, #0
 800c404:	4423      	add	r3, r4
 800c406:	e015      	b.n	800c434 <rshift+0x68>
 800c408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c40c:	f1c1 0820 	rsb	r8, r1, #32
 800c410:	40cf      	lsrs	r7, r1
 800c412:	f105 0e04 	add.w	lr, r5, #4
 800c416:	46a1      	mov	r9, r4
 800c418:	4576      	cmp	r6, lr
 800c41a:	46f4      	mov	ip, lr
 800c41c:	d815      	bhi.n	800c44a <rshift+0x7e>
 800c41e:	1a9a      	subs	r2, r3, r2
 800c420:	0092      	lsls	r2, r2, #2
 800c422:	3a04      	subs	r2, #4
 800c424:	3501      	adds	r5, #1
 800c426:	42ae      	cmp	r6, r5
 800c428:	bf38      	it	cc
 800c42a:	2200      	movcc	r2, #0
 800c42c:	18a3      	adds	r3, r4, r2
 800c42e:	50a7      	str	r7, [r4, r2]
 800c430:	b107      	cbz	r7, 800c434 <rshift+0x68>
 800c432:	3304      	adds	r3, #4
 800c434:	1b1a      	subs	r2, r3, r4
 800c436:	42a3      	cmp	r3, r4
 800c438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c43c:	bf08      	it	eq
 800c43e:	2300      	moveq	r3, #0
 800c440:	6102      	str	r2, [r0, #16]
 800c442:	bf08      	it	eq
 800c444:	6143      	streq	r3, [r0, #20]
 800c446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44a:	f8dc c000 	ldr.w	ip, [ip]
 800c44e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c452:	ea4c 0707 	orr.w	r7, ip, r7
 800c456:	f849 7b04 	str.w	r7, [r9], #4
 800c45a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c45e:	40cf      	lsrs	r7, r1
 800c460:	e7da      	b.n	800c418 <rshift+0x4c>
 800c462:	f851 cb04 	ldr.w	ip, [r1], #4
 800c466:	f847 cf04 	str.w	ip, [r7, #4]!
 800c46a:	e7c3      	b.n	800c3f4 <rshift+0x28>
 800c46c:	4623      	mov	r3, r4
 800c46e:	e7e1      	b.n	800c434 <rshift+0x68>

0800c470 <__hexdig_fun>:
 800c470:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c474:	2b09      	cmp	r3, #9
 800c476:	d802      	bhi.n	800c47e <__hexdig_fun+0xe>
 800c478:	3820      	subs	r0, #32
 800c47a:	b2c0      	uxtb	r0, r0
 800c47c:	4770      	bx	lr
 800c47e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c482:	2b05      	cmp	r3, #5
 800c484:	d801      	bhi.n	800c48a <__hexdig_fun+0x1a>
 800c486:	3847      	subs	r0, #71	@ 0x47
 800c488:	e7f7      	b.n	800c47a <__hexdig_fun+0xa>
 800c48a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c48e:	2b05      	cmp	r3, #5
 800c490:	d801      	bhi.n	800c496 <__hexdig_fun+0x26>
 800c492:	3827      	subs	r0, #39	@ 0x27
 800c494:	e7f1      	b.n	800c47a <__hexdig_fun+0xa>
 800c496:	2000      	movs	r0, #0
 800c498:	4770      	bx	lr
	...

0800c49c <__gethex>:
 800c49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a0:	b085      	sub	sp, #20
 800c4a2:	468a      	mov	sl, r1
 800c4a4:	9302      	str	r3, [sp, #8]
 800c4a6:	680b      	ldr	r3, [r1, #0]
 800c4a8:	9001      	str	r0, [sp, #4]
 800c4aa:	4690      	mov	r8, r2
 800c4ac:	1c9c      	adds	r4, r3, #2
 800c4ae:	46a1      	mov	r9, r4
 800c4b0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c4b4:	2830      	cmp	r0, #48	@ 0x30
 800c4b6:	d0fa      	beq.n	800c4ae <__gethex+0x12>
 800c4b8:	eba9 0303 	sub.w	r3, r9, r3
 800c4bc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c4c0:	f7ff ffd6 	bl	800c470 <__hexdig_fun>
 800c4c4:	4605      	mov	r5, r0
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d168      	bne.n	800c59c <__gethex+0x100>
 800c4ca:	49a0      	ldr	r1, [pc, #640]	@ (800c74c <__gethex+0x2b0>)
 800c4cc:	2201      	movs	r2, #1
 800c4ce:	4648      	mov	r0, r9
 800c4d0:	f7ff feee 	bl	800c2b0 <strncmp>
 800c4d4:	4607      	mov	r7, r0
 800c4d6:	2800      	cmp	r0, #0
 800c4d8:	d167      	bne.n	800c5aa <__gethex+0x10e>
 800c4da:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c4de:	4626      	mov	r6, r4
 800c4e0:	f7ff ffc6 	bl	800c470 <__hexdig_fun>
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	d062      	beq.n	800c5ae <__gethex+0x112>
 800c4e8:	4623      	mov	r3, r4
 800c4ea:	7818      	ldrb	r0, [r3, #0]
 800c4ec:	2830      	cmp	r0, #48	@ 0x30
 800c4ee:	4699      	mov	r9, r3
 800c4f0:	f103 0301 	add.w	r3, r3, #1
 800c4f4:	d0f9      	beq.n	800c4ea <__gethex+0x4e>
 800c4f6:	f7ff ffbb 	bl	800c470 <__hexdig_fun>
 800c4fa:	fab0 f580 	clz	r5, r0
 800c4fe:	096d      	lsrs	r5, r5, #5
 800c500:	f04f 0b01 	mov.w	fp, #1
 800c504:	464a      	mov	r2, r9
 800c506:	4616      	mov	r6, r2
 800c508:	3201      	adds	r2, #1
 800c50a:	7830      	ldrb	r0, [r6, #0]
 800c50c:	f7ff ffb0 	bl	800c470 <__hexdig_fun>
 800c510:	2800      	cmp	r0, #0
 800c512:	d1f8      	bne.n	800c506 <__gethex+0x6a>
 800c514:	498d      	ldr	r1, [pc, #564]	@ (800c74c <__gethex+0x2b0>)
 800c516:	2201      	movs	r2, #1
 800c518:	4630      	mov	r0, r6
 800c51a:	f7ff fec9 	bl	800c2b0 <strncmp>
 800c51e:	2800      	cmp	r0, #0
 800c520:	d13f      	bne.n	800c5a2 <__gethex+0x106>
 800c522:	b944      	cbnz	r4, 800c536 <__gethex+0x9a>
 800c524:	1c74      	adds	r4, r6, #1
 800c526:	4622      	mov	r2, r4
 800c528:	4616      	mov	r6, r2
 800c52a:	3201      	adds	r2, #1
 800c52c:	7830      	ldrb	r0, [r6, #0]
 800c52e:	f7ff ff9f 	bl	800c470 <__hexdig_fun>
 800c532:	2800      	cmp	r0, #0
 800c534:	d1f8      	bne.n	800c528 <__gethex+0x8c>
 800c536:	1ba4      	subs	r4, r4, r6
 800c538:	00a7      	lsls	r7, r4, #2
 800c53a:	7833      	ldrb	r3, [r6, #0]
 800c53c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c540:	2b50      	cmp	r3, #80	@ 0x50
 800c542:	d13e      	bne.n	800c5c2 <__gethex+0x126>
 800c544:	7873      	ldrb	r3, [r6, #1]
 800c546:	2b2b      	cmp	r3, #43	@ 0x2b
 800c548:	d033      	beq.n	800c5b2 <__gethex+0x116>
 800c54a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c54c:	d034      	beq.n	800c5b8 <__gethex+0x11c>
 800c54e:	1c71      	adds	r1, r6, #1
 800c550:	2400      	movs	r4, #0
 800c552:	7808      	ldrb	r0, [r1, #0]
 800c554:	f7ff ff8c 	bl	800c470 <__hexdig_fun>
 800c558:	1e43      	subs	r3, r0, #1
 800c55a:	b2db      	uxtb	r3, r3
 800c55c:	2b18      	cmp	r3, #24
 800c55e:	d830      	bhi.n	800c5c2 <__gethex+0x126>
 800c560:	f1a0 0210 	sub.w	r2, r0, #16
 800c564:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c568:	f7ff ff82 	bl	800c470 <__hexdig_fun>
 800c56c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c570:	fa5f fc8c 	uxtb.w	ip, ip
 800c574:	f1bc 0f18 	cmp.w	ip, #24
 800c578:	f04f 030a 	mov.w	r3, #10
 800c57c:	d91e      	bls.n	800c5bc <__gethex+0x120>
 800c57e:	b104      	cbz	r4, 800c582 <__gethex+0xe6>
 800c580:	4252      	negs	r2, r2
 800c582:	4417      	add	r7, r2
 800c584:	f8ca 1000 	str.w	r1, [sl]
 800c588:	b1ed      	cbz	r5, 800c5c6 <__gethex+0x12a>
 800c58a:	f1bb 0f00 	cmp.w	fp, #0
 800c58e:	bf0c      	ite	eq
 800c590:	2506      	moveq	r5, #6
 800c592:	2500      	movne	r5, #0
 800c594:	4628      	mov	r0, r5
 800c596:	b005      	add	sp, #20
 800c598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59c:	2500      	movs	r5, #0
 800c59e:	462c      	mov	r4, r5
 800c5a0:	e7b0      	b.n	800c504 <__gethex+0x68>
 800c5a2:	2c00      	cmp	r4, #0
 800c5a4:	d1c7      	bne.n	800c536 <__gethex+0x9a>
 800c5a6:	4627      	mov	r7, r4
 800c5a8:	e7c7      	b.n	800c53a <__gethex+0x9e>
 800c5aa:	464e      	mov	r6, r9
 800c5ac:	462f      	mov	r7, r5
 800c5ae:	2501      	movs	r5, #1
 800c5b0:	e7c3      	b.n	800c53a <__gethex+0x9e>
 800c5b2:	2400      	movs	r4, #0
 800c5b4:	1cb1      	adds	r1, r6, #2
 800c5b6:	e7cc      	b.n	800c552 <__gethex+0xb6>
 800c5b8:	2401      	movs	r4, #1
 800c5ba:	e7fb      	b.n	800c5b4 <__gethex+0x118>
 800c5bc:	fb03 0002 	mla	r0, r3, r2, r0
 800c5c0:	e7ce      	b.n	800c560 <__gethex+0xc4>
 800c5c2:	4631      	mov	r1, r6
 800c5c4:	e7de      	b.n	800c584 <__gethex+0xe8>
 800c5c6:	eba6 0309 	sub.w	r3, r6, r9
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	2b07      	cmp	r3, #7
 800c5d0:	dc0a      	bgt.n	800c5e8 <__gethex+0x14c>
 800c5d2:	9801      	ldr	r0, [sp, #4]
 800c5d4:	f7fd ff74 	bl	800a4c0 <_Balloc>
 800c5d8:	4604      	mov	r4, r0
 800c5da:	b940      	cbnz	r0, 800c5ee <__gethex+0x152>
 800c5dc:	4b5c      	ldr	r3, [pc, #368]	@ (800c750 <__gethex+0x2b4>)
 800c5de:	4602      	mov	r2, r0
 800c5e0:	21e4      	movs	r1, #228	@ 0xe4
 800c5e2:	485c      	ldr	r0, [pc, #368]	@ (800c754 <__gethex+0x2b8>)
 800c5e4:	f7ff fec0 	bl	800c368 <__assert_func>
 800c5e8:	3101      	adds	r1, #1
 800c5ea:	105b      	asrs	r3, r3, #1
 800c5ec:	e7ef      	b.n	800c5ce <__gethex+0x132>
 800c5ee:	f100 0a14 	add.w	sl, r0, #20
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	4655      	mov	r5, sl
 800c5f6:	469b      	mov	fp, r3
 800c5f8:	45b1      	cmp	r9, r6
 800c5fa:	d337      	bcc.n	800c66c <__gethex+0x1d0>
 800c5fc:	f845 bb04 	str.w	fp, [r5], #4
 800c600:	eba5 050a 	sub.w	r5, r5, sl
 800c604:	10ad      	asrs	r5, r5, #2
 800c606:	6125      	str	r5, [r4, #16]
 800c608:	4658      	mov	r0, fp
 800c60a:	f7fe f84b 	bl	800a6a4 <__hi0bits>
 800c60e:	016d      	lsls	r5, r5, #5
 800c610:	f8d8 6000 	ldr.w	r6, [r8]
 800c614:	1a2d      	subs	r5, r5, r0
 800c616:	42b5      	cmp	r5, r6
 800c618:	dd54      	ble.n	800c6c4 <__gethex+0x228>
 800c61a:	1bad      	subs	r5, r5, r6
 800c61c:	4629      	mov	r1, r5
 800c61e:	4620      	mov	r0, r4
 800c620:	f7fe fbdf 	bl	800ade2 <__any_on>
 800c624:	4681      	mov	r9, r0
 800c626:	b178      	cbz	r0, 800c648 <__gethex+0x1ac>
 800c628:	1e6b      	subs	r3, r5, #1
 800c62a:	1159      	asrs	r1, r3, #5
 800c62c:	f003 021f 	and.w	r2, r3, #31
 800c630:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c634:	f04f 0901 	mov.w	r9, #1
 800c638:	fa09 f202 	lsl.w	r2, r9, r2
 800c63c:	420a      	tst	r2, r1
 800c63e:	d003      	beq.n	800c648 <__gethex+0x1ac>
 800c640:	454b      	cmp	r3, r9
 800c642:	dc36      	bgt.n	800c6b2 <__gethex+0x216>
 800c644:	f04f 0902 	mov.w	r9, #2
 800c648:	4629      	mov	r1, r5
 800c64a:	4620      	mov	r0, r4
 800c64c:	f7ff febe 	bl	800c3cc <rshift>
 800c650:	442f      	add	r7, r5
 800c652:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c656:	42bb      	cmp	r3, r7
 800c658:	da42      	bge.n	800c6e0 <__gethex+0x244>
 800c65a:	9801      	ldr	r0, [sp, #4]
 800c65c:	4621      	mov	r1, r4
 800c65e:	f7fd ff6f 	bl	800a540 <_Bfree>
 800c662:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c664:	2300      	movs	r3, #0
 800c666:	6013      	str	r3, [r2, #0]
 800c668:	25a3      	movs	r5, #163	@ 0xa3
 800c66a:	e793      	b.n	800c594 <__gethex+0xf8>
 800c66c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c670:	2a2e      	cmp	r2, #46	@ 0x2e
 800c672:	d012      	beq.n	800c69a <__gethex+0x1fe>
 800c674:	2b20      	cmp	r3, #32
 800c676:	d104      	bne.n	800c682 <__gethex+0x1e6>
 800c678:	f845 bb04 	str.w	fp, [r5], #4
 800c67c:	f04f 0b00 	mov.w	fp, #0
 800c680:	465b      	mov	r3, fp
 800c682:	7830      	ldrb	r0, [r6, #0]
 800c684:	9303      	str	r3, [sp, #12]
 800c686:	f7ff fef3 	bl	800c470 <__hexdig_fun>
 800c68a:	9b03      	ldr	r3, [sp, #12]
 800c68c:	f000 000f 	and.w	r0, r0, #15
 800c690:	4098      	lsls	r0, r3
 800c692:	ea4b 0b00 	orr.w	fp, fp, r0
 800c696:	3304      	adds	r3, #4
 800c698:	e7ae      	b.n	800c5f8 <__gethex+0x15c>
 800c69a:	45b1      	cmp	r9, r6
 800c69c:	d8ea      	bhi.n	800c674 <__gethex+0x1d8>
 800c69e:	492b      	ldr	r1, [pc, #172]	@ (800c74c <__gethex+0x2b0>)
 800c6a0:	9303      	str	r3, [sp, #12]
 800c6a2:	2201      	movs	r2, #1
 800c6a4:	4630      	mov	r0, r6
 800c6a6:	f7ff fe03 	bl	800c2b0 <strncmp>
 800c6aa:	9b03      	ldr	r3, [sp, #12]
 800c6ac:	2800      	cmp	r0, #0
 800c6ae:	d1e1      	bne.n	800c674 <__gethex+0x1d8>
 800c6b0:	e7a2      	b.n	800c5f8 <__gethex+0x15c>
 800c6b2:	1ea9      	subs	r1, r5, #2
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	f7fe fb94 	bl	800ade2 <__any_on>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d0c2      	beq.n	800c644 <__gethex+0x1a8>
 800c6be:	f04f 0903 	mov.w	r9, #3
 800c6c2:	e7c1      	b.n	800c648 <__gethex+0x1ac>
 800c6c4:	da09      	bge.n	800c6da <__gethex+0x23e>
 800c6c6:	1b75      	subs	r5, r6, r5
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	9801      	ldr	r0, [sp, #4]
 800c6cc:	462a      	mov	r2, r5
 800c6ce:	f7fe f94f 	bl	800a970 <__lshift>
 800c6d2:	1b7f      	subs	r7, r7, r5
 800c6d4:	4604      	mov	r4, r0
 800c6d6:	f100 0a14 	add.w	sl, r0, #20
 800c6da:	f04f 0900 	mov.w	r9, #0
 800c6de:	e7b8      	b.n	800c652 <__gethex+0x1b6>
 800c6e0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c6e4:	42bd      	cmp	r5, r7
 800c6e6:	dd6f      	ble.n	800c7c8 <__gethex+0x32c>
 800c6e8:	1bed      	subs	r5, r5, r7
 800c6ea:	42ae      	cmp	r6, r5
 800c6ec:	dc34      	bgt.n	800c758 <__gethex+0x2bc>
 800c6ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d022      	beq.n	800c73c <__gethex+0x2a0>
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d024      	beq.n	800c744 <__gethex+0x2a8>
 800c6fa:	2b01      	cmp	r3, #1
 800c6fc:	d115      	bne.n	800c72a <__gethex+0x28e>
 800c6fe:	42ae      	cmp	r6, r5
 800c700:	d113      	bne.n	800c72a <__gethex+0x28e>
 800c702:	2e01      	cmp	r6, #1
 800c704:	d10b      	bne.n	800c71e <__gethex+0x282>
 800c706:	9a02      	ldr	r2, [sp, #8]
 800c708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c70c:	6013      	str	r3, [r2, #0]
 800c70e:	2301      	movs	r3, #1
 800c710:	6123      	str	r3, [r4, #16]
 800c712:	f8ca 3000 	str.w	r3, [sl]
 800c716:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c718:	2562      	movs	r5, #98	@ 0x62
 800c71a:	601c      	str	r4, [r3, #0]
 800c71c:	e73a      	b.n	800c594 <__gethex+0xf8>
 800c71e:	1e71      	subs	r1, r6, #1
 800c720:	4620      	mov	r0, r4
 800c722:	f7fe fb5e 	bl	800ade2 <__any_on>
 800c726:	2800      	cmp	r0, #0
 800c728:	d1ed      	bne.n	800c706 <__gethex+0x26a>
 800c72a:	9801      	ldr	r0, [sp, #4]
 800c72c:	4621      	mov	r1, r4
 800c72e:	f7fd ff07 	bl	800a540 <_Bfree>
 800c732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c734:	2300      	movs	r3, #0
 800c736:	6013      	str	r3, [r2, #0]
 800c738:	2550      	movs	r5, #80	@ 0x50
 800c73a:	e72b      	b.n	800c594 <__gethex+0xf8>
 800c73c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1f3      	bne.n	800c72a <__gethex+0x28e>
 800c742:	e7e0      	b.n	800c706 <__gethex+0x26a>
 800c744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1dd      	bne.n	800c706 <__gethex+0x26a>
 800c74a:	e7ee      	b.n	800c72a <__gethex+0x28e>
 800c74c:	0800e658 	.word	0x0800e658
 800c750:	0800e4ed 	.word	0x0800e4ed
 800c754:	0800e806 	.word	0x0800e806
 800c758:	1e6f      	subs	r7, r5, #1
 800c75a:	f1b9 0f00 	cmp.w	r9, #0
 800c75e:	d130      	bne.n	800c7c2 <__gethex+0x326>
 800c760:	b127      	cbz	r7, 800c76c <__gethex+0x2d0>
 800c762:	4639      	mov	r1, r7
 800c764:	4620      	mov	r0, r4
 800c766:	f7fe fb3c 	bl	800ade2 <__any_on>
 800c76a:	4681      	mov	r9, r0
 800c76c:	117a      	asrs	r2, r7, #5
 800c76e:	2301      	movs	r3, #1
 800c770:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c774:	f007 071f 	and.w	r7, r7, #31
 800c778:	40bb      	lsls	r3, r7
 800c77a:	4213      	tst	r3, r2
 800c77c:	4629      	mov	r1, r5
 800c77e:	4620      	mov	r0, r4
 800c780:	bf18      	it	ne
 800c782:	f049 0902 	orrne.w	r9, r9, #2
 800c786:	f7ff fe21 	bl	800c3cc <rshift>
 800c78a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c78e:	1b76      	subs	r6, r6, r5
 800c790:	2502      	movs	r5, #2
 800c792:	f1b9 0f00 	cmp.w	r9, #0
 800c796:	d047      	beq.n	800c828 <__gethex+0x38c>
 800c798:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d015      	beq.n	800c7cc <__gethex+0x330>
 800c7a0:	2b03      	cmp	r3, #3
 800c7a2:	d017      	beq.n	800c7d4 <__gethex+0x338>
 800c7a4:	2b01      	cmp	r3, #1
 800c7a6:	d109      	bne.n	800c7bc <__gethex+0x320>
 800c7a8:	f019 0f02 	tst.w	r9, #2
 800c7ac:	d006      	beq.n	800c7bc <__gethex+0x320>
 800c7ae:	f8da 3000 	ldr.w	r3, [sl]
 800c7b2:	ea49 0903 	orr.w	r9, r9, r3
 800c7b6:	f019 0f01 	tst.w	r9, #1
 800c7ba:	d10e      	bne.n	800c7da <__gethex+0x33e>
 800c7bc:	f045 0510 	orr.w	r5, r5, #16
 800c7c0:	e032      	b.n	800c828 <__gethex+0x38c>
 800c7c2:	f04f 0901 	mov.w	r9, #1
 800c7c6:	e7d1      	b.n	800c76c <__gethex+0x2d0>
 800c7c8:	2501      	movs	r5, #1
 800c7ca:	e7e2      	b.n	800c792 <__gethex+0x2f6>
 800c7cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7ce:	f1c3 0301 	rsb	r3, r3, #1
 800c7d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c7d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d0f0      	beq.n	800c7bc <__gethex+0x320>
 800c7da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7de:	f104 0314 	add.w	r3, r4, #20
 800c7e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c7e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c7ea:	f04f 0c00 	mov.w	ip, #0
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c7f8:	d01b      	beq.n	800c832 <__gethex+0x396>
 800c7fa:	3201      	adds	r2, #1
 800c7fc:	6002      	str	r2, [r0, #0]
 800c7fe:	2d02      	cmp	r5, #2
 800c800:	f104 0314 	add.w	r3, r4, #20
 800c804:	d13c      	bne.n	800c880 <__gethex+0x3e4>
 800c806:	f8d8 2000 	ldr.w	r2, [r8]
 800c80a:	3a01      	subs	r2, #1
 800c80c:	42b2      	cmp	r2, r6
 800c80e:	d109      	bne.n	800c824 <__gethex+0x388>
 800c810:	1171      	asrs	r1, r6, #5
 800c812:	2201      	movs	r2, #1
 800c814:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c818:	f006 061f 	and.w	r6, r6, #31
 800c81c:	fa02 f606 	lsl.w	r6, r2, r6
 800c820:	421e      	tst	r6, r3
 800c822:	d13a      	bne.n	800c89a <__gethex+0x3fe>
 800c824:	f045 0520 	orr.w	r5, r5, #32
 800c828:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c82a:	601c      	str	r4, [r3, #0]
 800c82c:	9b02      	ldr	r3, [sp, #8]
 800c82e:	601f      	str	r7, [r3, #0]
 800c830:	e6b0      	b.n	800c594 <__gethex+0xf8>
 800c832:	4299      	cmp	r1, r3
 800c834:	f843 cc04 	str.w	ip, [r3, #-4]
 800c838:	d8d9      	bhi.n	800c7ee <__gethex+0x352>
 800c83a:	68a3      	ldr	r3, [r4, #8]
 800c83c:	459b      	cmp	fp, r3
 800c83e:	db17      	blt.n	800c870 <__gethex+0x3d4>
 800c840:	6861      	ldr	r1, [r4, #4]
 800c842:	9801      	ldr	r0, [sp, #4]
 800c844:	3101      	adds	r1, #1
 800c846:	f7fd fe3b 	bl	800a4c0 <_Balloc>
 800c84a:	4681      	mov	r9, r0
 800c84c:	b918      	cbnz	r0, 800c856 <__gethex+0x3ba>
 800c84e:	4b1a      	ldr	r3, [pc, #104]	@ (800c8b8 <__gethex+0x41c>)
 800c850:	4602      	mov	r2, r0
 800c852:	2184      	movs	r1, #132	@ 0x84
 800c854:	e6c5      	b.n	800c5e2 <__gethex+0x146>
 800c856:	6922      	ldr	r2, [r4, #16]
 800c858:	3202      	adds	r2, #2
 800c85a:	f104 010c 	add.w	r1, r4, #12
 800c85e:	0092      	lsls	r2, r2, #2
 800c860:	300c      	adds	r0, #12
 800c862:	f7ff fd69 	bl	800c338 <memcpy>
 800c866:	4621      	mov	r1, r4
 800c868:	9801      	ldr	r0, [sp, #4]
 800c86a:	f7fd fe69 	bl	800a540 <_Bfree>
 800c86e:	464c      	mov	r4, r9
 800c870:	6923      	ldr	r3, [r4, #16]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c878:	6122      	str	r2, [r4, #16]
 800c87a:	2201      	movs	r2, #1
 800c87c:	615a      	str	r2, [r3, #20]
 800c87e:	e7be      	b.n	800c7fe <__gethex+0x362>
 800c880:	6922      	ldr	r2, [r4, #16]
 800c882:	455a      	cmp	r2, fp
 800c884:	dd0b      	ble.n	800c89e <__gethex+0x402>
 800c886:	2101      	movs	r1, #1
 800c888:	4620      	mov	r0, r4
 800c88a:	f7ff fd9f 	bl	800c3cc <rshift>
 800c88e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c892:	3701      	adds	r7, #1
 800c894:	42bb      	cmp	r3, r7
 800c896:	f6ff aee0 	blt.w	800c65a <__gethex+0x1be>
 800c89a:	2501      	movs	r5, #1
 800c89c:	e7c2      	b.n	800c824 <__gethex+0x388>
 800c89e:	f016 061f 	ands.w	r6, r6, #31
 800c8a2:	d0fa      	beq.n	800c89a <__gethex+0x3fe>
 800c8a4:	4453      	add	r3, sl
 800c8a6:	f1c6 0620 	rsb	r6, r6, #32
 800c8aa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c8ae:	f7fd fef9 	bl	800a6a4 <__hi0bits>
 800c8b2:	42b0      	cmp	r0, r6
 800c8b4:	dbe7      	blt.n	800c886 <__gethex+0x3ea>
 800c8b6:	e7f0      	b.n	800c89a <__gethex+0x3fe>
 800c8b8:	0800e4ed 	.word	0x0800e4ed

0800c8bc <L_shift>:
 800c8bc:	f1c2 0208 	rsb	r2, r2, #8
 800c8c0:	0092      	lsls	r2, r2, #2
 800c8c2:	b570      	push	{r4, r5, r6, lr}
 800c8c4:	f1c2 0620 	rsb	r6, r2, #32
 800c8c8:	6843      	ldr	r3, [r0, #4]
 800c8ca:	6804      	ldr	r4, [r0, #0]
 800c8cc:	fa03 f506 	lsl.w	r5, r3, r6
 800c8d0:	432c      	orrs	r4, r5
 800c8d2:	40d3      	lsrs	r3, r2
 800c8d4:	6004      	str	r4, [r0, #0]
 800c8d6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8da:	4288      	cmp	r0, r1
 800c8dc:	d3f4      	bcc.n	800c8c8 <L_shift+0xc>
 800c8de:	bd70      	pop	{r4, r5, r6, pc}

0800c8e0 <__match>:
 800c8e0:	b530      	push	{r4, r5, lr}
 800c8e2:	6803      	ldr	r3, [r0, #0]
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8ea:	b914      	cbnz	r4, 800c8f2 <__match+0x12>
 800c8ec:	6003      	str	r3, [r0, #0]
 800c8ee:	2001      	movs	r0, #1
 800c8f0:	bd30      	pop	{r4, r5, pc}
 800c8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8f6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c8fa:	2d19      	cmp	r5, #25
 800c8fc:	bf98      	it	ls
 800c8fe:	3220      	addls	r2, #32
 800c900:	42a2      	cmp	r2, r4
 800c902:	d0f0      	beq.n	800c8e6 <__match+0x6>
 800c904:	2000      	movs	r0, #0
 800c906:	e7f3      	b.n	800c8f0 <__match+0x10>

0800c908 <__hexnan>:
 800c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90c:	680b      	ldr	r3, [r1, #0]
 800c90e:	6801      	ldr	r1, [r0, #0]
 800c910:	115e      	asrs	r6, r3, #5
 800c912:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c916:	f013 031f 	ands.w	r3, r3, #31
 800c91a:	b087      	sub	sp, #28
 800c91c:	bf18      	it	ne
 800c91e:	3604      	addne	r6, #4
 800c920:	2500      	movs	r5, #0
 800c922:	1f37      	subs	r7, r6, #4
 800c924:	4682      	mov	sl, r0
 800c926:	4690      	mov	r8, r2
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c92e:	46b9      	mov	r9, r7
 800c930:	463c      	mov	r4, r7
 800c932:	9502      	str	r5, [sp, #8]
 800c934:	46ab      	mov	fp, r5
 800c936:	784a      	ldrb	r2, [r1, #1]
 800c938:	1c4b      	adds	r3, r1, #1
 800c93a:	9303      	str	r3, [sp, #12]
 800c93c:	b342      	cbz	r2, 800c990 <__hexnan+0x88>
 800c93e:	4610      	mov	r0, r2
 800c940:	9105      	str	r1, [sp, #20]
 800c942:	9204      	str	r2, [sp, #16]
 800c944:	f7ff fd94 	bl	800c470 <__hexdig_fun>
 800c948:	2800      	cmp	r0, #0
 800c94a:	d151      	bne.n	800c9f0 <__hexnan+0xe8>
 800c94c:	9a04      	ldr	r2, [sp, #16]
 800c94e:	9905      	ldr	r1, [sp, #20]
 800c950:	2a20      	cmp	r2, #32
 800c952:	d818      	bhi.n	800c986 <__hexnan+0x7e>
 800c954:	9b02      	ldr	r3, [sp, #8]
 800c956:	459b      	cmp	fp, r3
 800c958:	dd13      	ble.n	800c982 <__hexnan+0x7a>
 800c95a:	454c      	cmp	r4, r9
 800c95c:	d206      	bcs.n	800c96c <__hexnan+0x64>
 800c95e:	2d07      	cmp	r5, #7
 800c960:	dc04      	bgt.n	800c96c <__hexnan+0x64>
 800c962:	462a      	mov	r2, r5
 800c964:	4649      	mov	r1, r9
 800c966:	4620      	mov	r0, r4
 800c968:	f7ff ffa8 	bl	800c8bc <L_shift>
 800c96c:	4544      	cmp	r4, r8
 800c96e:	d952      	bls.n	800ca16 <__hexnan+0x10e>
 800c970:	2300      	movs	r3, #0
 800c972:	f1a4 0904 	sub.w	r9, r4, #4
 800c976:	f844 3c04 	str.w	r3, [r4, #-4]
 800c97a:	f8cd b008 	str.w	fp, [sp, #8]
 800c97e:	464c      	mov	r4, r9
 800c980:	461d      	mov	r5, r3
 800c982:	9903      	ldr	r1, [sp, #12]
 800c984:	e7d7      	b.n	800c936 <__hexnan+0x2e>
 800c986:	2a29      	cmp	r2, #41	@ 0x29
 800c988:	d157      	bne.n	800ca3a <__hexnan+0x132>
 800c98a:	3102      	adds	r1, #2
 800c98c:	f8ca 1000 	str.w	r1, [sl]
 800c990:	f1bb 0f00 	cmp.w	fp, #0
 800c994:	d051      	beq.n	800ca3a <__hexnan+0x132>
 800c996:	454c      	cmp	r4, r9
 800c998:	d206      	bcs.n	800c9a8 <__hexnan+0xa0>
 800c99a:	2d07      	cmp	r5, #7
 800c99c:	dc04      	bgt.n	800c9a8 <__hexnan+0xa0>
 800c99e:	462a      	mov	r2, r5
 800c9a0:	4649      	mov	r1, r9
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f7ff ff8a 	bl	800c8bc <L_shift>
 800c9a8:	4544      	cmp	r4, r8
 800c9aa:	d936      	bls.n	800ca1a <__hexnan+0x112>
 800c9ac:	f1a8 0204 	sub.w	r2, r8, #4
 800c9b0:	4623      	mov	r3, r4
 800c9b2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9b6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9ba:	429f      	cmp	r7, r3
 800c9bc:	d2f9      	bcs.n	800c9b2 <__hexnan+0xaa>
 800c9be:	1b3b      	subs	r3, r7, r4
 800c9c0:	f023 0303 	bic.w	r3, r3, #3
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	3401      	adds	r4, #1
 800c9c8:	3e03      	subs	r6, #3
 800c9ca:	42b4      	cmp	r4, r6
 800c9cc:	bf88      	it	hi
 800c9ce:	2304      	movhi	r3, #4
 800c9d0:	4443      	add	r3, r8
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	f843 2b04 	str.w	r2, [r3], #4
 800c9d8:	429f      	cmp	r7, r3
 800c9da:	d2fb      	bcs.n	800c9d4 <__hexnan+0xcc>
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	b91b      	cbnz	r3, 800c9e8 <__hexnan+0xe0>
 800c9e0:	4547      	cmp	r7, r8
 800c9e2:	d128      	bne.n	800ca36 <__hexnan+0x12e>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	603b      	str	r3, [r7, #0]
 800c9e8:	2005      	movs	r0, #5
 800c9ea:	b007      	add	sp, #28
 800c9ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9f0:	3501      	adds	r5, #1
 800c9f2:	2d08      	cmp	r5, #8
 800c9f4:	f10b 0b01 	add.w	fp, fp, #1
 800c9f8:	dd06      	ble.n	800ca08 <__hexnan+0x100>
 800c9fa:	4544      	cmp	r4, r8
 800c9fc:	d9c1      	bls.n	800c982 <__hexnan+0x7a>
 800c9fe:	2300      	movs	r3, #0
 800ca00:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca04:	2501      	movs	r5, #1
 800ca06:	3c04      	subs	r4, #4
 800ca08:	6822      	ldr	r2, [r4, #0]
 800ca0a:	f000 000f 	and.w	r0, r0, #15
 800ca0e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca12:	6020      	str	r0, [r4, #0]
 800ca14:	e7b5      	b.n	800c982 <__hexnan+0x7a>
 800ca16:	2508      	movs	r5, #8
 800ca18:	e7b3      	b.n	800c982 <__hexnan+0x7a>
 800ca1a:	9b01      	ldr	r3, [sp, #4]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d0dd      	beq.n	800c9dc <__hexnan+0xd4>
 800ca20:	f1c3 0320 	rsb	r3, r3, #32
 800ca24:	f04f 32ff 	mov.w	r2, #4294967295
 800ca28:	40da      	lsrs	r2, r3
 800ca2a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca34:	e7d2      	b.n	800c9dc <__hexnan+0xd4>
 800ca36:	3f04      	subs	r7, #4
 800ca38:	e7d0      	b.n	800c9dc <__hexnan+0xd4>
 800ca3a:	2004      	movs	r0, #4
 800ca3c:	e7d5      	b.n	800c9ea <__hexnan+0xe2>

0800ca3e <__ascii_mbtowc>:
 800ca3e:	b082      	sub	sp, #8
 800ca40:	b901      	cbnz	r1, 800ca44 <__ascii_mbtowc+0x6>
 800ca42:	a901      	add	r1, sp, #4
 800ca44:	b142      	cbz	r2, 800ca58 <__ascii_mbtowc+0x1a>
 800ca46:	b14b      	cbz	r3, 800ca5c <__ascii_mbtowc+0x1e>
 800ca48:	7813      	ldrb	r3, [r2, #0]
 800ca4a:	600b      	str	r3, [r1, #0]
 800ca4c:	7812      	ldrb	r2, [r2, #0]
 800ca4e:	1e10      	subs	r0, r2, #0
 800ca50:	bf18      	it	ne
 800ca52:	2001      	movne	r0, #1
 800ca54:	b002      	add	sp, #8
 800ca56:	4770      	bx	lr
 800ca58:	4610      	mov	r0, r2
 800ca5a:	e7fb      	b.n	800ca54 <__ascii_mbtowc+0x16>
 800ca5c:	f06f 0001 	mvn.w	r0, #1
 800ca60:	e7f8      	b.n	800ca54 <__ascii_mbtowc+0x16>

0800ca62 <_realloc_r>:
 800ca62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca66:	4680      	mov	r8, r0
 800ca68:	4615      	mov	r5, r2
 800ca6a:	460c      	mov	r4, r1
 800ca6c:	b921      	cbnz	r1, 800ca78 <_realloc_r+0x16>
 800ca6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca72:	4611      	mov	r1, r2
 800ca74:	f7fd bc98 	b.w	800a3a8 <_malloc_r>
 800ca78:	b92a      	cbnz	r2, 800ca86 <_realloc_r+0x24>
 800ca7a:	f7fd fc21 	bl	800a2c0 <_free_r>
 800ca7e:	2400      	movs	r4, #0
 800ca80:	4620      	mov	r0, r4
 800ca82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca86:	f000 f840 	bl	800cb0a <_malloc_usable_size_r>
 800ca8a:	4285      	cmp	r5, r0
 800ca8c:	4606      	mov	r6, r0
 800ca8e:	d802      	bhi.n	800ca96 <_realloc_r+0x34>
 800ca90:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ca94:	d8f4      	bhi.n	800ca80 <_realloc_r+0x1e>
 800ca96:	4629      	mov	r1, r5
 800ca98:	4640      	mov	r0, r8
 800ca9a:	f7fd fc85 	bl	800a3a8 <_malloc_r>
 800ca9e:	4607      	mov	r7, r0
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d0ec      	beq.n	800ca7e <_realloc_r+0x1c>
 800caa4:	42b5      	cmp	r5, r6
 800caa6:	462a      	mov	r2, r5
 800caa8:	4621      	mov	r1, r4
 800caaa:	bf28      	it	cs
 800caac:	4632      	movcs	r2, r6
 800caae:	f7ff fc43 	bl	800c338 <memcpy>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4640      	mov	r0, r8
 800cab6:	f7fd fc03 	bl	800a2c0 <_free_r>
 800caba:	463c      	mov	r4, r7
 800cabc:	e7e0      	b.n	800ca80 <_realloc_r+0x1e>

0800cabe <__ascii_wctomb>:
 800cabe:	4603      	mov	r3, r0
 800cac0:	4608      	mov	r0, r1
 800cac2:	b141      	cbz	r1, 800cad6 <__ascii_wctomb+0x18>
 800cac4:	2aff      	cmp	r2, #255	@ 0xff
 800cac6:	d904      	bls.n	800cad2 <__ascii_wctomb+0x14>
 800cac8:	228a      	movs	r2, #138	@ 0x8a
 800caca:	601a      	str	r2, [r3, #0]
 800cacc:	f04f 30ff 	mov.w	r0, #4294967295
 800cad0:	4770      	bx	lr
 800cad2:	700a      	strb	r2, [r1, #0]
 800cad4:	2001      	movs	r0, #1
 800cad6:	4770      	bx	lr

0800cad8 <fiprintf>:
 800cad8:	b40e      	push	{r1, r2, r3}
 800cada:	b503      	push	{r0, r1, lr}
 800cadc:	4601      	mov	r1, r0
 800cade:	ab03      	add	r3, sp, #12
 800cae0:	4805      	ldr	r0, [pc, #20]	@ (800caf8 <fiprintf+0x20>)
 800cae2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cae6:	6800      	ldr	r0, [r0, #0]
 800cae8:	9301      	str	r3, [sp, #4]
 800caea:	f7ff f9a1 	bl	800be30 <_vfiprintf_r>
 800caee:	b002      	add	sp, #8
 800caf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800caf4:	b003      	add	sp, #12
 800caf6:	4770      	bx	lr
 800caf8:	20000028 	.word	0x20000028

0800cafc <abort>:
 800cafc:	b508      	push	{r3, lr}
 800cafe:	2006      	movs	r0, #6
 800cb00:	f000 f834 	bl	800cb6c <raise>
 800cb04:	2001      	movs	r0, #1
 800cb06:	f7f6 fd29 	bl	800355c <_exit>

0800cb0a <_malloc_usable_size_r>:
 800cb0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb0e:	1f18      	subs	r0, r3, #4
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	bfbc      	itt	lt
 800cb14:	580b      	ldrlt	r3, [r1, r0]
 800cb16:	18c0      	addlt	r0, r0, r3
 800cb18:	4770      	bx	lr

0800cb1a <_raise_r>:
 800cb1a:	291f      	cmp	r1, #31
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4605      	mov	r5, r0
 800cb20:	460c      	mov	r4, r1
 800cb22:	d904      	bls.n	800cb2e <_raise_r+0x14>
 800cb24:	2316      	movs	r3, #22
 800cb26:	6003      	str	r3, [r0, #0]
 800cb28:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2c:	bd38      	pop	{r3, r4, r5, pc}
 800cb2e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb30:	b112      	cbz	r2, 800cb38 <_raise_r+0x1e>
 800cb32:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb36:	b94b      	cbnz	r3, 800cb4c <_raise_r+0x32>
 800cb38:	4628      	mov	r0, r5
 800cb3a:	f000 f831 	bl	800cba0 <_getpid_r>
 800cb3e:	4622      	mov	r2, r4
 800cb40:	4601      	mov	r1, r0
 800cb42:	4628      	mov	r0, r5
 800cb44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb48:	f000 b818 	b.w	800cb7c <_kill_r>
 800cb4c:	2b01      	cmp	r3, #1
 800cb4e:	d00a      	beq.n	800cb66 <_raise_r+0x4c>
 800cb50:	1c59      	adds	r1, r3, #1
 800cb52:	d103      	bne.n	800cb5c <_raise_r+0x42>
 800cb54:	2316      	movs	r3, #22
 800cb56:	6003      	str	r3, [r0, #0]
 800cb58:	2001      	movs	r0, #1
 800cb5a:	e7e7      	b.n	800cb2c <_raise_r+0x12>
 800cb5c:	2100      	movs	r1, #0
 800cb5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cb62:	4620      	mov	r0, r4
 800cb64:	4798      	blx	r3
 800cb66:	2000      	movs	r0, #0
 800cb68:	e7e0      	b.n	800cb2c <_raise_r+0x12>
	...

0800cb6c <raise>:
 800cb6c:	4b02      	ldr	r3, [pc, #8]	@ (800cb78 <raise+0xc>)
 800cb6e:	4601      	mov	r1, r0
 800cb70:	6818      	ldr	r0, [r3, #0]
 800cb72:	f7ff bfd2 	b.w	800cb1a <_raise_r>
 800cb76:	bf00      	nop
 800cb78:	20000028 	.word	0x20000028

0800cb7c <_kill_r>:
 800cb7c:	b538      	push	{r3, r4, r5, lr}
 800cb7e:	4d07      	ldr	r5, [pc, #28]	@ (800cb9c <_kill_r+0x20>)
 800cb80:	2300      	movs	r3, #0
 800cb82:	4604      	mov	r4, r0
 800cb84:	4608      	mov	r0, r1
 800cb86:	4611      	mov	r1, r2
 800cb88:	602b      	str	r3, [r5, #0]
 800cb8a:	f7f6 fcd7 	bl	800353c <_kill>
 800cb8e:	1c43      	adds	r3, r0, #1
 800cb90:	d102      	bne.n	800cb98 <_kill_r+0x1c>
 800cb92:	682b      	ldr	r3, [r5, #0]
 800cb94:	b103      	cbz	r3, 800cb98 <_kill_r+0x1c>
 800cb96:	6023      	str	r3, [r4, #0]
 800cb98:	bd38      	pop	{r3, r4, r5, pc}
 800cb9a:	bf00      	nop
 800cb9c:	20000828 	.word	0x20000828

0800cba0 <_getpid_r>:
 800cba0:	f7f6 bcc4 	b.w	800352c <_getpid>

0800cba4 <atan2>:
 800cba4:	f000 bb34 	b.w	800d210 <__ieee754_atan2>

0800cba8 <sqrt>:
 800cba8:	b538      	push	{r3, r4, r5, lr}
 800cbaa:	ed2d 8b02 	vpush	{d8}
 800cbae:	ec55 4b10 	vmov	r4, r5, d0
 800cbb2:	f000 f8cd 	bl	800cd50 <__ieee754_sqrt>
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	462b      	mov	r3, r5
 800cbba:	4620      	mov	r0, r4
 800cbbc:	4629      	mov	r1, r5
 800cbbe:	eeb0 8a40 	vmov.f32	s16, s0
 800cbc2:	eef0 8a60 	vmov.f32	s17, s1
 800cbc6:	f7f3 ffd1 	bl	8000b6c <__aeabi_dcmpun>
 800cbca:	b990      	cbnz	r0, 800cbf2 <sqrt+0x4a>
 800cbcc:	2200      	movs	r2, #0
 800cbce:	2300      	movs	r3, #0
 800cbd0:	4620      	mov	r0, r4
 800cbd2:	4629      	mov	r1, r5
 800cbd4:	f7f3 ffa2 	bl	8000b1c <__aeabi_dcmplt>
 800cbd8:	b158      	cbz	r0, 800cbf2 <sqrt+0x4a>
 800cbda:	f7fc fcf1 	bl	80095c0 <__errno>
 800cbde:	2321      	movs	r3, #33	@ 0x21
 800cbe0:	6003      	str	r3, [r0, #0]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	4610      	mov	r0, r2
 800cbe8:	4619      	mov	r1, r3
 800cbea:	f7f3 fe4f 	bl	800088c <__aeabi_ddiv>
 800cbee:	ec41 0b18 	vmov	d8, r0, r1
 800cbf2:	eeb0 0a48 	vmov.f32	s0, s16
 800cbf6:	eef0 0a68 	vmov.f32	s1, s17
 800cbfa:	ecbd 8b02 	vpop	{d8}
 800cbfe:	bd38      	pop	{r3, r4, r5, pc}

0800cc00 <cos>:
 800cc00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc02:	ec53 2b10 	vmov	r2, r3, d0
 800cc06:	4826      	ldr	r0, [pc, #152]	@ (800cca0 <cos+0xa0>)
 800cc08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cc0c:	4281      	cmp	r1, r0
 800cc0e:	d806      	bhi.n	800cc1e <cos+0x1e>
 800cc10:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cc98 <cos+0x98>
 800cc14:	b005      	add	sp, #20
 800cc16:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc1a:	f000 b975 	b.w	800cf08 <__kernel_cos>
 800cc1e:	4821      	ldr	r0, [pc, #132]	@ (800cca4 <cos+0xa4>)
 800cc20:	4281      	cmp	r1, r0
 800cc22:	d908      	bls.n	800cc36 <cos+0x36>
 800cc24:	4610      	mov	r0, r2
 800cc26:	4619      	mov	r1, r3
 800cc28:	f7f3 fb4e 	bl	80002c8 <__aeabi_dsub>
 800cc2c:	ec41 0b10 	vmov	d0, r0, r1
 800cc30:	b005      	add	sp, #20
 800cc32:	f85d fb04 	ldr.w	pc, [sp], #4
 800cc36:	4668      	mov	r0, sp
 800cc38:	f000 fbb2 	bl	800d3a0 <__ieee754_rem_pio2>
 800cc3c:	f000 0003 	and.w	r0, r0, #3
 800cc40:	2801      	cmp	r0, #1
 800cc42:	d00b      	beq.n	800cc5c <cos+0x5c>
 800cc44:	2802      	cmp	r0, #2
 800cc46:	d015      	beq.n	800cc74 <cos+0x74>
 800cc48:	b9d8      	cbnz	r0, 800cc82 <cos+0x82>
 800cc4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc4e:	ed9d 0b00 	vldr	d0, [sp]
 800cc52:	f000 f959 	bl	800cf08 <__kernel_cos>
 800cc56:	ec51 0b10 	vmov	r0, r1, d0
 800cc5a:	e7e7      	b.n	800cc2c <cos+0x2c>
 800cc5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc60:	ed9d 0b00 	vldr	d0, [sp]
 800cc64:	f000 fa18 	bl	800d098 <__kernel_sin>
 800cc68:	ec53 2b10 	vmov	r2, r3, d0
 800cc6c:	4610      	mov	r0, r2
 800cc6e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cc72:	e7db      	b.n	800cc2c <cos+0x2c>
 800cc74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc78:	ed9d 0b00 	vldr	d0, [sp]
 800cc7c:	f000 f944 	bl	800cf08 <__kernel_cos>
 800cc80:	e7f2      	b.n	800cc68 <cos+0x68>
 800cc82:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cc86:	ed9d 0b00 	vldr	d0, [sp]
 800cc8a:	2001      	movs	r0, #1
 800cc8c:	f000 fa04 	bl	800d098 <__kernel_sin>
 800cc90:	e7e1      	b.n	800cc56 <cos+0x56>
 800cc92:	bf00      	nop
 800cc94:	f3af 8000 	nop.w
	...
 800cca0:	3fe921fb 	.word	0x3fe921fb
 800cca4:	7fefffff 	.word	0x7fefffff

0800cca8 <sin>:
 800cca8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ccaa:	ec53 2b10 	vmov	r2, r3, d0
 800ccae:	4826      	ldr	r0, [pc, #152]	@ (800cd48 <sin+0xa0>)
 800ccb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ccb4:	4281      	cmp	r1, r0
 800ccb6:	d807      	bhi.n	800ccc8 <sin+0x20>
 800ccb8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800cd40 <sin+0x98>
 800ccbc:	2000      	movs	r0, #0
 800ccbe:	b005      	add	sp, #20
 800ccc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccc4:	f000 b9e8 	b.w	800d098 <__kernel_sin>
 800ccc8:	4820      	ldr	r0, [pc, #128]	@ (800cd4c <sin+0xa4>)
 800ccca:	4281      	cmp	r1, r0
 800cccc:	d908      	bls.n	800cce0 <sin+0x38>
 800ccce:	4610      	mov	r0, r2
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	f7f3 faf9 	bl	80002c8 <__aeabi_dsub>
 800ccd6:	ec41 0b10 	vmov	d0, r0, r1
 800ccda:	b005      	add	sp, #20
 800ccdc:	f85d fb04 	ldr.w	pc, [sp], #4
 800cce0:	4668      	mov	r0, sp
 800cce2:	f000 fb5d 	bl	800d3a0 <__ieee754_rem_pio2>
 800cce6:	f000 0003 	and.w	r0, r0, #3
 800ccea:	2801      	cmp	r0, #1
 800ccec:	d00c      	beq.n	800cd08 <sin+0x60>
 800ccee:	2802      	cmp	r0, #2
 800ccf0:	d011      	beq.n	800cd16 <sin+0x6e>
 800ccf2:	b9e8      	cbnz	r0, 800cd30 <sin+0x88>
 800ccf4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ccf8:	ed9d 0b00 	vldr	d0, [sp]
 800ccfc:	2001      	movs	r0, #1
 800ccfe:	f000 f9cb 	bl	800d098 <__kernel_sin>
 800cd02:	ec51 0b10 	vmov	r0, r1, d0
 800cd06:	e7e6      	b.n	800ccd6 <sin+0x2e>
 800cd08:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd0c:	ed9d 0b00 	vldr	d0, [sp]
 800cd10:	f000 f8fa 	bl	800cf08 <__kernel_cos>
 800cd14:	e7f5      	b.n	800cd02 <sin+0x5a>
 800cd16:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd1a:	ed9d 0b00 	vldr	d0, [sp]
 800cd1e:	2001      	movs	r0, #1
 800cd20:	f000 f9ba 	bl	800d098 <__kernel_sin>
 800cd24:	ec53 2b10 	vmov	r2, r3, d0
 800cd28:	4610      	mov	r0, r2
 800cd2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800cd2e:	e7d2      	b.n	800ccd6 <sin+0x2e>
 800cd30:	ed9d 1b02 	vldr	d1, [sp, #8]
 800cd34:	ed9d 0b00 	vldr	d0, [sp]
 800cd38:	f000 f8e6 	bl	800cf08 <__kernel_cos>
 800cd3c:	e7f2      	b.n	800cd24 <sin+0x7c>
 800cd3e:	bf00      	nop
	...
 800cd48:	3fe921fb 	.word	0x3fe921fb
 800cd4c:	7fefffff 	.word	0x7fefffff

0800cd50 <__ieee754_sqrt>:
 800cd50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	4a68      	ldr	r2, [pc, #416]	@ (800cef8 <__ieee754_sqrt+0x1a8>)
 800cd56:	ec55 4b10 	vmov	r4, r5, d0
 800cd5a:	43aa      	bics	r2, r5
 800cd5c:	462b      	mov	r3, r5
 800cd5e:	4621      	mov	r1, r4
 800cd60:	d110      	bne.n	800cd84 <__ieee754_sqrt+0x34>
 800cd62:	4622      	mov	r2, r4
 800cd64:	4620      	mov	r0, r4
 800cd66:	4629      	mov	r1, r5
 800cd68:	f7f3 fc66 	bl	8000638 <__aeabi_dmul>
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	4620      	mov	r0, r4
 800cd72:	4629      	mov	r1, r5
 800cd74:	f7f3 faaa 	bl	80002cc <__adddf3>
 800cd78:	4604      	mov	r4, r0
 800cd7a:	460d      	mov	r5, r1
 800cd7c:	ec45 4b10 	vmov	d0, r4, r5
 800cd80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd84:	2d00      	cmp	r5, #0
 800cd86:	dc0e      	bgt.n	800cda6 <__ieee754_sqrt+0x56>
 800cd88:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cd8c:	4322      	orrs	r2, r4
 800cd8e:	d0f5      	beq.n	800cd7c <__ieee754_sqrt+0x2c>
 800cd90:	b19d      	cbz	r5, 800cdba <__ieee754_sqrt+0x6a>
 800cd92:	4622      	mov	r2, r4
 800cd94:	4620      	mov	r0, r4
 800cd96:	4629      	mov	r1, r5
 800cd98:	f7f3 fa96 	bl	80002c8 <__aeabi_dsub>
 800cd9c:	4602      	mov	r2, r0
 800cd9e:	460b      	mov	r3, r1
 800cda0:	f7f3 fd74 	bl	800088c <__aeabi_ddiv>
 800cda4:	e7e8      	b.n	800cd78 <__ieee754_sqrt+0x28>
 800cda6:	152a      	asrs	r2, r5, #20
 800cda8:	d115      	bne.n	800cdd6 <__ieee754_sqrt+0x86>
 800cdaa:	2000      	movs	r0, #0
 800cdac:	e009      	b.n	800cdc2 <__ieee754_sqrt+0x72>
 800cdae:	0acb      	lsrs	r3, r1, #11
 800cdb0:	3a15      	subs	r2, #21
 800cdb2:	0549      	lsls	r1, r1, #21
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0fa      	beq.n	800cdae <__ieee754_sqrt+0x5e>
 800cdb8:	e7f7      	b.n	800cdaa <__ieee754_sqrt+0x5a>
 800cdba:	462a      	mov	r2, r5
 800cdbc:	e7fa      	b.n	800cdb4 <__ieee754_sqrt+0x64>
 800cdbe:	005b      	lsls	r3, r3, #1
 800cdc0:	3001      	adds	r0, #1
 800cdc2:	02dc      	lsls	r4, r3, #11
 800cdc4:	d5fb      	bpl.n	800cdbe <__ieee754_sqrt+0x6e>
 800cdc6:	1e44      	subs	r4, r0, #1
 800cdc8:	1b12      	subs	r2, r2, r4
 800cdca:	f1c0 0420 	rsb	r4, r0, #32
 800cdce:	fa21 f404 	lsr.w	r4, r1, r4
 800cdd2:	4323      	orrs	r3, r4
 800cdd4:	4081      	lsls	r1, r0
 800cdd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cdda:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cdde:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cde2:	07d2      	lsls	r2, r2, #31
 800cde4:	bf5c      	itt	pl
 800cde6:	005b      	lslpl	r3, r3, #1
 800cde8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cdec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdf0:	bf58      	it	pl
 800cdf2:	0049      	lslpl	r1, r1, #1
 800cdf4:	2600      	movs	r6, #0
 800cdf6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cdfa:	106d      	asrs	r5, r5, #1
 800cdfc:	0049      	lsls	r1, r1, #1
 800cdfe:	2016      	movs	r0, #22
 800ce00:	4632      	mov	r2, r6
 800ce02:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ce06:	1917      	adds	r7, r2, r4
 800ce08:	429f      	cmp	r7, r3
 800ce0a:	bfde      	ittt	le
 800ce0c:	193a      	addle	r2, r7, r4
 800ce0e:	1bdb      	suble	r3, r3, r7
 800ce10:	1936      	addle	r6, r6, r4
 800ce12:	0fcf      	lsrs	r7, r1, #31
 800ce14:	3801      	subs	r0, #1
 800ce16:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ce1a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce1e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ce22:	d1f0      	bne.n	800ce06 <__ieee754_sqrt+0xb6>
 800ce24:	4604      	mov	r4, r0
 800ce26:	2720      	movs	r7, #32
 800ce28:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ce2c:	429a      	cmp	r2, r3
 800ce2e:	eb00 0e0c 	add.w	lr, r0, ip
 800ce32:	db02      	blt.n	800ce3a <__ieee754_sqrt+0xea>
 800ce34:	d113      	bne.n	800ce5e <__ieee754_sqrt+0x10e>
 800ce36:	458e      	cmp	lr, r1
 800ce38:	d811      	bhi.n	800ce5e <__ieee754_sqrt+0x10e>
 800ce3a:	f1be 0f00 	cmp.w	lr, #0
 800ce3e:	eb0e 000c 	add.w	r0, lr, ip
 800ce42:	da42      	bge.n	800ceca <__ieee754_sqrt+0x17a>
 800ce44:	2800      	cmp	r0, #0
 800ce46:	db40      	blt.n	800ceca <__ieee754_sqrt+0x17a>
 800ce48:	f102 0801 	add.w	r8, r2, #1
 800ce4c:	1a9b      	subs	r3, r3, r2
 800ce4e:	458e      	cmp	lr, r1
 800ce50:	bf88      	it	hi
 800ce52:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ce56:	eba1 010e 	sub.w	r1, r1, lr
 800ce5a:	4464      	add	r4, ip
 800ce5c:	4642      	mov	r2, r8
 800ce5e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ce62:	3f01      	subs	r7, #1
 800ce64:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ce68:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ce6c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ce70:	d1dc      	bne.n	800ce2c <__ieee754_sqrt+0xdc>
 800ce72:	4319      	orrs	r1, r3
 800ce74:	d01b      	beq.n	800ceae <__ieee754_sqrt+0x15e>
 800ce76:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cefc <__ieee754_sqrt+0x1ac>
 800ce7a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cf00 <__ieee754_sqrt+0x1b0>
 800ce7e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ce82:	e9db 2300 	ldrd	r2, r3, [fp]
 800ce86:	f7f3 fa1f 	bl	80002c8 <__aeabi_dsub>
 800ce8a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ce8e:	4602      	mov	r2, r0
 800ce90:	460b      	mov	r3, r1
 800ce92:	4640      	mov	r0, r8
 800ce94:	4649      	mov	r1, r9
 800ce96:	f7f3 fe4b 	bl	8000b30 <__aeabi_dcmple>
 800ce9a:	b140      	cbz	r0, 800ceae <__ieee754_sqrt+0x15e>
 800ce9c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cea0:	e9da 0100 	ldrd	r0, r1, [sl]
 800cea4:	e9db 2300 	ldrd	r2, r3, [fp]
 800cea8:	d111      	bne.n	800cece <__ieee754_sqrt+0x17e>
 800ceaa:	3601      	adds	r6, #1
 800ceac:	463c      	mov	r4, r7
 800ceae:	1072      	asrs	r2, r6, #1
 800ceb0:	0863      	lsrs	r3, r4, #1
 800ceb2:	07f1      	lsls	r1, r6, #31
 800ceb4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ceb8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cebc:	bf48      	it	mi
 800cebe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cec2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cec6:	4618      	mov	r0, r3
 800cec8:	e756      	b.n	800cd78 <__ieee754_sqrt+0x28>
 800ceca:	4690      	mov	r8, r2
 800cecc:	e7be      	b.n	800ce4c <__ieee754_sqrt+0xfc>
 800cece:	f7f3 f9fd 	bl	80002cc <__adddf3>
 800ced2:	e9da 8900 	ldrd	r8, r9, [sl]
 800ced6:	4602      	mov	r2, r0
 800ced8:	460b      	mov	r3, r1
 800ceda:	4640      	mov	r0, r8
 800cedc:	4649      	mov	r1, r9
 800cede:	f7f3 fe1d 	bl	8000b1c <__aeabi_dcmplt>
 800cee2:	b120      	cbz	r0, 800ceee <__ieee754_sqrt+0x19e>
 800cee4:	1ca0      	adds	r0, r4, #2
 800cee6:	bf08      	it	eq
 800cee8:	3601      	addeq	r6, #1
 800ceea:	3402      	adds	r4, #2
 800ceec:	e7df      	b.n	800ceae <__ieee754_sqrt+0x15e>
 800ceee:	1c63      	adds	r3, r4, #1
 800cef0:	f023 0401 	bic.w	r4, r3, #1
 800cef4:	e7db      	b.n	800ceae <__ieee754_sqrt+0x15e>
 800cef6:	bf00      	nop
 800cef8:	7ff00000 	.word	0x7ff00000
 800cefc:	200001f0 	.word	0x200001f0
 800cf00:	200001e8 	.word	0x200001e8
 800cf04:	00000000 	.word	0x00000000

0800cf08 <__kernel_cos>:
 800cf08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0c:	ec57 6b10 	vmov	r6, r7, d0
 800cf10:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cf14:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800cf18:	ed8d 1b00 	vstr	d1, [sp]
 800cf1c:	d206      	bcs.n	800cf2c <__kernel_cos+0x24>
 800cf1e:	4630      	mov	r0, r6
 800cf20:	4639      	mov	r1, r7
 800cf22:	f7f3 fe39 	bl	8000b98 <__aeabi_d2iz>
 800cf26:	2800      	cmp	r0, #0
 800cf28:	f000 8088 	beq.w	800d03c <__kernel_cos+0x134>
 800cf2c:	4632      	mov	r2, r6
 800cf2e:	463b      	mov	r3, r7
 800cf30:	4630      	mov	r0, r6
 800cf32:	4639      	mov	r1, r7
 800cf34:	f7f3 fb80 	bl	8000638 <__aeabi_dmul>
 800cf38:	4b51      	ldr	r3, [pc, #324]	@ (800d080 <__kernel_cos+0x178>)
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	460d      	mov	r5, r1
 800cf40:	f7f3 fb7a 	bl	8000638 <__aeabi_dmul>
 800cf44:	a340      	add	r3, pc, #256	@ (adr r3, 800d048 <__kernel_cos+0x140>)
 800cf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf4a:	4682      	mov	sl, r0
 800cf4c:	468b      	mov	fp, r1
 800cf4e:	4620      	mov	r0, r4
 800cf50:	4629      	mov	r1, r5
 800cf52:	f7f3 fb71 	bl	8000638 <__aeabi_dmul>
 800cf56:	a33e      	add	r3, pc, #248	@ (adr r3, 800d050 <__kernel_cos+0x148>)
 800cf58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf5c:	f7f3 f9b6 	bl	80002cc <__adddf3>
 800cf60:	4622      	mov	r2, r4
 800cf62:	462b      	mov	r3, r5
 800cf64:	f7f3 fb68 	bl	8000638 <__aeabi_dmul>
 800cf68:	a33b      	add	r3, pc, #236	@ (adr r3, 800d058 <__kernel_cos+0x150>)
 800cf6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6e:	f7f3 f9ab 	bl	80002c8 <__aeabi_dsub>
 800cf72:	4622      	mov	r2, r4
 800cf74:	462b      	mov	r3, r5
 800cf76:	f7f3 fb5f 	bl	8000638 <__aeabi_dmul>
 800cf7a:	a339      	add	r3, pc, #228	@ (adr r3, 800d060 <__kernel_cos+0x158>)
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	f7f3 f9a4 	bl	80002cc <__adddf3>
 800cf84:	4622      	mov	r2, r4
 800cf86:	462b      	mov	r3, r5
 800cf88:	f7f3 fb56 	bl	8000638 <__aeabi_dmul>
 800cf8c:	a336      	add	r3, pc, #216	@ (adr r3, 800d068 <__kernel_cos+0x160>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7f3 f999 	bl	80002c8 <__aeabi_dsub>
 800cf96:	4622      	mov	r2, r4
 800cf98:	462b      	mov	r3, r5
 800cf9a:	f7f3 fb4d 	bl	8000638 <__aeabi_dmul>
 800cf9e:	a334      	add	r3, pc, #208	@ (adr r3, 800d070 <__kernel_cos+0x168>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f7f3 f992 	bl	80002cc <__adddf3>
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	462b      	mov	r3, r5
 800cfac:	f7f3 fb44 	bl	8000638 <__aeabi_dmul>
 800cfb0:	4622      	mov	r2, r4
 800cfb2:	462b      	mov	r3, r5
 800cfb4:	f7f3 fb40 	bl	8000638 <__aeabi_dmul>
 800cfb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfbc:	4604      	mov	r4, r0
 800cfbe:	460d      	mov	r5, r1
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	4639      	mov	r1, r7
 800cfc4:	f7f3 fb38 	bl	8000638 <__aeabi_dmul>
 800cfc8:	460b      	mov	r3, r1
 800cfca:	4602      	mov	r2, r0
 800cfcc:	4629      	mov	r1, r5
 800cfce:	4620      	mov	r0, r4
 800cfd0:	f7f3 f97a 	bl	80002c8 <__aeabi_dsub>
 800cfd4:	4b2b      	ldr	r3, [pc, #172]	@ (800d084 <__kernel_cos+0x17c>)
 800cfd6:	4598      	cmp	r8, r3
 800cfd8:	4606      	mov	r6, r0
 800cfda:	460f      	mov	r7, r1
 800cfdc:	d810      	bhi.n	800d000 <__kernel_cos+0xf8>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	4650      	mov	r0, sl
 800cfe4:	4659      	mov	r1, fp
 800cfe6:	f7f3 f96f 	bl	80002c8 <__aeabi_dsub>
 800cfea:	460b      	mov	r3, r1
 800cfec:	4926      	ldr	r1, [pc, #152]	@ (800d088 <__kernel_cos+0x180>)
 800cfee:	4602      	mov	r2, r0
 800cff0:	2000      	movs	r0, #0
 800cff2:	f7f3 f969 	bl	80002c8 <__aeabi_dsub>
 800cff6:	ec41 0b10 	vmov	d0, r0, r1
 800cffa:	b003      	add	sp, #12
 800cffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d000:	4b22      	ldr	r3, [pc, #136]	@ (800d08c <__kernel_cos+0x184>)
 800d002:	4921      	ldr	r1, [pc, #132]	@ (800d088 <__kernel_cos+0x180>)
 800d004:	4598      	cmp	r8, r3
 800d006:	bf8c      	ite	hi
 800d008:	4d21      	ldrhi	r5, [pc, #132]	@ (800d090 <__kernel_cos+0x188>)
 800d00a:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800d00e:	2400      	movs	r4, #0
 800d010:	4622      	mov	r2, r4
 800d012:	462b      	mov	r3, r5
 800d014:	2000      	movs	r0, #0
 800d016:	f7f3 f957 	bl	80002c8 <__aeabi_dsub>
 800d01a:	4622      	mov	r2, r4
 800d01c:	4680      	mov	r8, r0
 800d01e:	4689      	mov	r9, r1
 800d020:	462b      	mov	r3, r5
 800d022:	4650      	mov	r0, sl
 800d024:	4659      	mov	r1, fp
 800d026:	f7f3 f94f 	bl	80002c8 <__aeabi_dsub>
 800d02a:	4632      	mov	r2, r6
 800d02c:	463b      	mov	r3, r7
 800d02e:	f7f3 f94b 	bl	80002c8 <__aeabi_dsub>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	4640      	mov	r0, r8
 800d038:	4649      	mov	r1, r9
 800d03a:	e7da      	b.n	800cff2 <__kernel_cos+0xea>
 800d03c:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800d078 <__kernel_cos+0x170>
 800d040:	e7db      	b.n	800cffa <__kernel_cos+0xf2>
 800d042:	bf00      	nop
 800d044:	f3af 8000 	nop.w
 800d048:	be8838d4 	.word	0xbe8838d4
 800d04c:	bda8fae9 	.word	0xbda8fae9
 800d050:	bdb4b1c4 	.word	0xbdb4b1c4
 800d054:	3e21ee9e 	.word	0x3e21ee9e
 800d058:	809c52ad 	.word	0x809c52ad
 800d05c:	3e927e4f 	.word	0x3e927e4f
 800d060:	19cb1590 	.word	0x19cb1590
 800d064:	3efa01a0 	.word	0x3efa01a0
 800d068:	16c15177 	.word	0x16c15177
 800d06c:	3f56c16c 	.word	0x3f56c16c
 800d070:	5555554c 	.word	0x5555554c
 800d074:	3fa55555 	.word	0x3fa55555
 800d078:	00000000 	.word	0x00000000
 800d07c:	3ff00000 	.word	0x3ff00000
 800d080:	3fe00000 	.word	0x3fe00000
 800d084:	3fd33332 	.word	0x3fd33332
 800d088:	3ff00000 	.word	0x3ff00000
 800d08c:	3fe90000 	.word	0x3fe90000
 800d090:	3fd20000 	.word	0x3fd20000
 800d094:	00000000 	.word	0x00000000

0800d098 <__kernel_sin>:
 800d098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d09c:	ec55 4b10 	vmov	r4, r5, d0
 800d0a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800d0a4:	b085      	sub	sp, #20
 800d0a6:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800d0aa:	ed8d 1b02 	vstr	d1, [sp, #8]
 800d0ae:	4680      	mov	r8, r0
 800d0b0:	d205      	bcs.n	800d0be <__kernel_sin+0x26>
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	4629      	mov	r1, r5
 800d0b6:	f7f3 fd6f 	bl	8000b98 <__aeabi_d2iz>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d052      	beq.n	800d164 <__kernel_sin+0xcc>
 800d0be:	4622      	mov	r2, r4
 800d0c0:	462b      	mov	r3, r5
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	4629      	mov	r1, r5
 800d0c6:	f7f3 fab7 	bl	8000638 <__aeabi_dmul>
 800d0ca:	4682      	mov	sl, r0
 800d0cc:	468b      	mov	fp, r1
 800d0ce:	4602      	mov	r2, r0
 800d0d0:	460b      	mov	r3, r1
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	4629      	mov	r1, r5
 800d0d6:	f7f3 faaf 	bl	8000638 <__aeabi_dmul>
 800d0da:	a342      	add	r3, pc, #264	@ (adr r3, 800d1e4 <__kernel_sin+0x14c>)
 800d0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e0:	e9cd 0100 	strd	r0, r1, [sp]
 800d0e4:	4650      	mov	r0, sl
 800d0e6:	4659      	mov	r1, fp
 800d0e8:	f7f3 faa6 	bl	8000638 <__aeabi_dmul>
 800d0ec:	a33f      	add	r3, pc, #252	@ (adr r3, 800d1ec <__kernel_sin+0x154>)
 800d0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0f2:	f7f3 f8e9 	bl	80002c8 <__aeabi_dsub>
 800d0f6:	4652      	mov	r2, sl
 800d0f8:	465b      	mov	r3, fp
 800d0fa:	f7f3 fa9d 	bl	8000638 <__aeabi_dmul>
 800d0fe:	a33d      	add	r3, pc, #244	@ (adr r3, 800d1f4 <__kernel_sin+0x15c>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7f3 f8e2 	bl	80002cc <__adddf3>
 800d108:	4652      	mov	r2, sl
 800d10a:	465b      	mov	r3, fp
 800d10c:	f7f3 fa94 	bl	8000638 <__aeabi_dmul>
 800d110:	a33a      	add	r3, pc, #232	@ (adr r3, 800d1fc <__kernel_sin+0x164>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 f8d7 	bl	80002c8 <__aeabi_dsub>
 800d11a:	4652      	mov	r2, sl
 800d11c:	465b      	mov	r3, fp
 800d11e:	f7f3 fa8b 	bl	8000638 <__aeabi_dmul>
 800d122:	a338      	add	r3, pc, #224	@ (adr r3, 800d204 <__kernel_sin+0x16c>)
 800d124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d128:	f7f3 f8d0 	bl	80002cc <__adddf3>
 800d12c:	4606      	mov	r6, r0
 800d12e:	460f      	mov	r7, r1
 800d130:	f1b8 0f00 	cmp.w	r8, #0
 800d134:	d11b      	bne.n	800d16e <__kernel_sin+0xd6>
 800d136:	4602      	mov	r2, r0
 800d138:	460b      	mov	r3, r1
 800d13a:	4650      	mov	r0, sl
 800d13c:	4659      	mov	r1, fp
 800d13e:	f7f3 fa7b 	bl	8000638 <__aeabi_dmul>
 800d142:	a325      	add	r3, pc, #148	@ (adr r3, 800d1d8 <__kernel_sin+0x140>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f7f3 f8be 	bl	80002c8 <__aeabi_dsub>
 800d14c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d150:	f7f3 fa72 	bl	8000638 <__aeabi_dmul>
 800d154:	4602      	mov	r2, r0
 800d156:	460b      	mov	r3, r1
 800d158:	4620      	mov	r0, r4
 800d15a:	4629      	mov	r1, r5
 800d15c:	f7f3 f8b6 	bl	80002cc <__adddf3>
 800d160:	4604      	mov	r4, r0
 800d162:	460d      	mov	r5, r1
 800d164:	ec45 4b10 	vmov	d0, r4, r5
 800d168:	b005      	add	sp, #20
 800d16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d172:	4b1b      	ldr	r3, [pc, #108]	@ (800d1e0 <__kernel_sin+0x148>)
 800d174:	2200      	movs	r2, #0
 800d176:	f7f3 fa5f 	bl	8000638 <__aeabi_dmul>
 800d17a:	4632      	mov	r2, r6
 800d17c:	4680      	mov	r8, r0
 800d17e:	4689      	mov	r9, r1
 800d180:	463b      	mov	r3, r7
 800d182:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d186:	f7f3 fa57 	bl	8000638 <__aeabi_dmul>
 800d18a:	4602      	mov	r2, r0
 800d18c:	460b      	mov	r3, r1
 800d18e:	4640      	mov	r0, r8
 800d190:	4649      	mov	r1, r9
 800d192:	f7f3 f899 	bl	80002c8 <__aeabi_dsub>
 800d196:	4652      	mov	r2, sl
 800d198:	465b      	mov	r3, fp
 800d19a:	f7f3 fa4d 	bl	8000638 <__aeabi_dmul>
 800d19e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1a2:	f7f3 f891 	bl	80002c8 <__aeabi_dsub>
 800d1a6:	a30c      	add	r3, pc, #48	@ (adr r3, 800d1d8 <__kernel_sin+0x140>)
 800d1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ac:	4606      	mov	r6, r0
 800d1ae:	460f      	mov	r7, r1
 800d1b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d1b4:	f7f3 fa40 	bl	8000638 <__aeabi_dmul>
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	460b      	mov	r3, r1
 800d1bc:	4630      	mov	r0, r6
 800d1be:	4639      	mov	r1, r7
 800d1c0:	f7f3 f884 	bl	80002cc <__adddf3>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	4629      	mov	r1, r5
 800d1cc:	f7f3 f87c 	bl	80002c8 <__aeabi_dsub>
 800d1d0:	e7c6      	b.n	800d160 <__kernel_sin+0xc8>
 800d1d2:	bf00      	nop
 800d1d4:	f3af 8000 	nop.w
 800d1d8:	55555549 	.word	0x55555549
 800d1dc:	3fc55555 	.word	0x3fc55555
 800d1e0:	3fe00000 	.word	0x3fe00000
 800d1e4:	5acfd57c 	.word	0x5acfd57c
 800d1e8:	3de5d93a 	.word	0x3de5d93a
 800d1ec:	8a2b9ceb 	.word	0x8a2b9ceb
 800d1f0:	3e5ae5e6 	.word	0x3e5ae5e6
 800d1f4:	57b1fe7d 	.word	0x57b1fe7d
 800d1f8:	3ec71de3 	.word	0x3ec71de3
 800d1fc:	19c161d5 	.word	0x19c161d5
 800d200:	3f2a01a0 	.word	0x3f2a01a0
 800d204:	1110f8a6 	.word	0x1110f8a6
 800d208:	3f811111 	.word	0x3f811111
 800d20c:	00000000 	.word	0x00000000

0800d210 <__ieee754_atan2>:
 800d210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d214:	ec57 6b11 	vmov	r6, r7, d1
 800d218:	4273      	negs	r3, r6
 800d21a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800d398 <__ieee754_atan2+0x188>
 800d21e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800d222:	4333      	orrs	r3, r6
 800d224:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800d228:	4543      	cmp	r3, r8
 800d22a:	ec51 0b10 	vmov	r0, r1, d0
 800d22e:	4635      	mov	r5, r6
 800d230:	d809      	bhi.n	800d246 <__ieee754_atan2+0x36>
 800d232:	4244      	negs	r4, r0
 800d234:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d238:	4304      	orrs	r4, r0
 800d23a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800d23e:	4544      	cmp	r4, r8
 800d240:	468e      	mov	lr, r1
 800d242:	4681      	mov	r9, r0
 800d244:	d907      	bls.n	800d256 <__ieee754_atan2+0x46>
 800d246:	4632      	mov	r2, r6
 800d248:	463b      	mov	r3, r7
 800d24a:	f7f3 f83f 	bl	80002cc <__adddf3>
 800d24e:	ec41 0b10 	vmov	d0, r0, r1
 800d252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d256:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800d25a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800d25e:	4334      	orrs	r4, r6
 800d260:	d103      	bne.n	800d26a <__ieee754_atan2+0x5a>
 800d262:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d266:	f000 ba97 	b.w	800d798 <atan>
 800d26a:	17bc      	asrs	r4, r7, #30
 800d26c:	f004 0402 	and.w	r4, r4, #2
 800d270:	ea53 0909 	orrs.w	r9, r3, r9
 800d274:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800d278:	d107      	bne.n	800d28a <__ieee754_atan2+0x7a>
 800d27a:	2c02      	cmp	r4, #2
 800d27c:	d05f      	beq.n	800d33e <__ieee754_atan2+0x12e>
 800d27e:	2c03      	cmp	r4, #3
 800d280:	d1e5      	bne.n	800d24e <__ieee754_atan2+0x3e>
 800d282:	a141      	add	r1, pc, #260	@ (adr r1, 800d388 <__ieee754_atan2+0x178>)
 800d284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d288:	e7e1      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d28a:	4315      	orrs	r5, r2
 800d28c:	d106      	bne.n	800d29c <__ieee754_atan2+0x8c>
 800d28e:	f1be 0f00 	cmp.w	lr, #0
 800d292:	da5f      	bge.n	800d354 <__ieee754_atan2+0x144>
 800d294:	a13e      	add	r1, pc, #248	@ (adr r1, 800d390 <__ieee754_atan2+0x180>)
 800d296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d29a:	e7d8      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d29c:	4542      	cmp	r2, r8
 800d29e:	d10f      	bne.n	800d2c0 <__ieee754_atan2+0xb0>
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d2a6:	d107      	bne.n	800d2b8 <__ieee754_atan2+0xa8>
 800d2a8:	2c02      	cmp	r4, #2
 800d2aa:	d84c      	bhi.n	800d346 <__ieee754_atan2+0x136>
 800d2ac:	4b34      	ldr	r3, [pc, #208]	@ (800d380 <__ieee754_atan2+0x170>)
 800d2ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d2b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d2b6:	e7ca      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d2b8:	2c02      	cmp	r4, #2
 800d2ba:	d848      	bhi.n	800d34e <__ieee754_atan2+0x13e>
 800d2bc:	4b31      	ldr	r3, [pc, #196]	@ (800d384 <__ieee754_atan2+0x174>)
 800d2be:	e7f6      	b.n	800d2ae <__ieee754_atan2+0x9e>
 800d2c0:	4543      	cmp	r3, r8
 800d2c2:	d0e4      	beq.n	800d28e <__ieee754_atan2+0x7e>
 800d2c4:	1a9b      	subs	r3, r3, r2
 800d2c6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800d2ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2ce:	da1e      	bge.n	800d30e <__ieee754_atan2+0xfe>
 800d2d0:	2f00      	cmp	r7, #0
 800d2d2:	da01      	bge.n	800d2d8 <__ieee754_atan2+0xc8>
 800d2d4:	323c      	adds	r2, #60	@ 0x3c
 800d2d6:	db1e      	blt.n	800d316 <__ieee754_atan2+0x106>
 800d2d8:	4632      	mov	r2, r6
 800d2da:	463b      	mov	r3, r7
 800d2dc:	f7f3 fad6 	bl	800088c <__aeabi_ddiv>
 800d2e0:	ec41 0b10 	vmov	d0, r0, r1
 800d2e4:	f000 fbf0 	bl	800dac8 <fabs>
 800d2e8:	f000 fa56 	bl	800d798 <atan>
 800d2ec:	ec51 0b10 	vmov	r0, r1, d0
 800d2f0:	2c01      	cmp	r4, #1
 800d2f2:	d013      	beq.n	800d31c <__ieee754_atan2+0x10c>
 800d2f4:	2c02      	cmp	r4, #2
 800d2f6:	d015      	beq.n	800d324 <__ieee754_atan2+0x114>
 800d2f8:	2c00      	cmp	r4, #0
 800d2fa:	d0a8      	beq.n	800d24e <__ieee754_atan2+0x3e>
 800d2fc:	a318      	add	r3, pc, #96	@ (adr r3, 800d360 <__ieee754_atan2+0x150>)
 800d2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d302:	f7f2 ffe1 	bl	80002c8 <__aeabi_dsub>
 800d306:	a318      	add	r3, pc, #96	@ (adr r3, 800d368 <__ieee754_atan2+0x158>)
 800d308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30c:	e014      	b.n	800d338 <__ieee754_atan2+0x128>
 800d30e:	a118      	add	r1, pc, #96	@ (adr r1, 800d370 <__ieee754_atan2+0x160>)
 800d310:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d314:	e7ec      	b.n	800d2f0 <__ieee754_atan2+0xe0>
 800d316:	2000      	movs	r0, #0
 800d318:	2100      	movs	r1, #0
 800d31a:	e7e9      	b.n	800d2f0 <__ieee754_atan2+0xe0>
 800d31c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d320:	4619      	mov	r1, r3
 800d322:	e794      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d324:	a30e      	add	r3, pc, #56	@ (adr r3, 800d360 <__ieee754_atan2+0x150>)
 800d326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32a:	f7f2 ffcd 	bl	80002c8 <__aeabi_dsub>
 800d32e:	4602      	mov	r2, r0
 800d330:	460b      	mov	r3, r1
 800d332:	a10d      	add	r1, pc, #52	@ (adr r1, 800d368 <__ieee754_atan2+0x158>)
 800d334:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d338:	f7f2 ffc6 	bl	80002c8 <__aeabi_dsub>
 800d33c:	e787      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d33e:	a10a      	add	r1, pc, #40	@ (adr r1, 800d368 <__ieee754_atan2+0x158>)
 800d340:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d344:	e783      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d346:	a10c      	add	r1, pc, #48	@ (adr r1, 800d378 <__ieee754_atan2+0x168>)
 800d348:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d34c:	e77f      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d34e:	2000      	movs	r0, #0
 800d350:	2100      	movs	r1, #0
 800d352:	e77c      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d354:	a106      	add	r1, pc, #24	@ (adr r1, 800d370 <__ieee754_atan2+0x160>)
 800d356:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d35a:	e778      	b.n	800d24e <__ieee754_atan2+0x3e>
 800d35c:	f3af 8000 	nop.w
 800d360:	33145c07 	.word	0x33145c07
 800d364:	3ca1a626 	.word	0x3ca1a626
 800d368:	54442d18 	.word	0x54442d18
 800d36c:	400921fb 	.word	0x400921fb
 800d370:	54442d18 	.word	0x54442d18
 800d374:	3ff921fb 	.word	0x3ff921fb
 800d378:	54442d18 	.word	0x54442d18
 800d37c:	3fe921fb 	.word	0x3fe921fb
 800d380:	0800e880 	.word	0x0800e880
 800d384:	0800e868 	.word	0x0800e868
 800d388:	54442d18 	.word	0x54442d18
 800d38c:	c00921fb 	.word	0xc00921fb
 800d390:	54442d18 	.word	0x54442d18
 800d394:	bff921fb 	.word	0xbff921fb
 800d398:	7ff00000 	.word	0x7ff00000
 800d39c:	00000000 	.word	0x00000000

0800d3a0 <__ieee754_rem_pio2>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	ec57 6b10 	vmov	r6, r7, d0
 800d3a8:	4bc5      	ldr	r3, [pc, #788]	@ (800d6c0 <__ieee754_rem_pio2+0x320>)
 800d3aa:	b08d      	sub	sp, #52	@ 0x34
 800d3ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800d3b0:	4598      	cmp	r8, r3
 800d3b2:	4604      	mov	r4, r0
 800d3b4:	9704      	str	r7, [sp, #16]
 800d3b6:	d807      	bhi.n	800d3c8 <__ieee754_rem_pio2+0x28>
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	ed80 0b00 	vstr	d0, [r0]
 800d3c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d3c4:	2500      	movs	r5, #0
 800d3c6:	e028      	b.n	800d41a <__ieee754_rem_pio2+0x7a>
 800d3c8:	4bbe      	ldr	r3, [pc, #760]	@ (800d6c4 <__ieee754_rem_pio2+0x324>)
 800d3ca:	4598      	cmp	r8, r3
 800d3cc:	d878      	bhi.n	800d4c0 <__ieee754_rem_pio2+0x120>
 800d3ce:	9b04      	ldr	r3, [sp, #16]
 800d3d0:	4dbd      	ldr	r5, [pc, #756]	@ (800d6c8 <__ieee754_rem_pio2+0x328>)
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	4630      	mov	r0, r6
 800d3d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 800d688 <__ieee754_rem_pio2+0x2e8>)
 800d3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3dc:	4639      	mov	r1, r7
 800d3de:	dd38      	ble.n	800d452 <__ieee754_rem_pio2+0xb2>
 800d3e0:	f7f2 ff72 	bl	80002c8 <__aeabi_dsub>
 800d3e4:	45a8      	cmp	r8, r5
 800d3e6:	4606      	mov	r6, r0
 800d3e8:	460f      	mov	r7, r1
 800d3ea:	d01a      	beq.n	800d422 <__ieee754_rem_pio2+0x82>
 800d3ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 800d690 <__ieee754_rem_pio2+0x2f0>)
 800d3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f2:	f7f2 ff69 	bl	80002c8 <__aeabi_dsub>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	4680      	mov	r8, r0
 800d3fc:	4689      	mov	r9, r1
 800d3fe:	4630      	mov	r0, r6
 800d400:	4639      	mov	r1, r7
 800d402:	f7f2 ff61 	bl	80002c8 <__aeabi_dsub>
 800d406:	a3a2      	add	r3, pc, #648	@ (adr r3, 800d690 <__ieee754_rem_pio2+0x2f0>)
 800d408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d40c:	f7f2 ff5c 	bl	80002c8 <__aeabi_dsub>
 800d410:	e9c4 8900 	strd	r8, r9, [r4]
 800d414:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d418:	2501      	movs	r5, #1
 800d41a:	4628      	mov	r0, r5
 800d41c:	b00d      	add	sp, #52	@ 0x34
 800d41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d422:	a39d      	add	r3, pc, #628	@ (adr r3, 800d698 <__ieee754_rem_pio2+0x2f8>)
 800d424:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d428:	f7f2 ff4e 	bl	80002c8 <__aeabi_dsub>
 800d42c:	a39c      	add	r3, pc, #624	@ (adr r3, 800d6a0 <__ieee754_rem_pio2+0x300>)
 800d42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d432:	4606      	mov	r6, r0
 800d434:	460f      	mov	r7, r1
 800d436:	f7f2 ff47 	bl	80002c8 <__aeabi_dsub>
 800d43a:	4602      	mov	r2, r0
 800d43c:	460b      	mov	r3, r1
 800d43e:	4680      	mov	r8, r0
 800d440:	4689      	mov	r9, r1
 800d442:	4630      	mov	r0, r6
 800d444:	4639      	mov	r1, r7
 800d446:	f7f2 ff3f 	bl	80002c8 <__aeabi_dsub>
 800d44a:	a395      	add	r3, pc, #596	@ (adr r3, 800d6a0 <__ieee754_rem_pio2+0x300>)
 800d44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d450:	e7dc      	b.n	800d40c <__ieee754_rem_pio2+0x6c>
 800d452:	f7f2 ff3b 	bl	80002cc <__adddf3>
 800d456:	45a8      	cmp	r8, r5
 800d458:	4606      	mov	r6, r0
 800d45a:	460f      	mov	r7, r1
 800d45c:	d018      	beq.n	800d490 <__ieee754_rem_pio2+0xf0>
 800d45e:	a38c      	add	r3, pc, #560	@ (adr r3, 800d690 <__ieee754_rem_pio2+0x2f0>)
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	f7f2 ff32 	bl	80002cc <__adddf3>
 800d468:	4602      	mov	r2, r0
 800d46a:	460b      	mov	r3, r1
 800d46c:	4680      	mov	r8, r0
 800d46e:	4689      	mov	r9, r1
 800d470:	4630      	mov	r0, r6
 800d472:	4639      	mov	r1, r7
 800d474:	f7f2 ff28 	bl	80002c8 <__aeabi_dsub>
 800d478:	a385      	add	r3, pc, #532	@ (adr r3, 800d690 <__ieee754_rem_pio2+0x2f0>)
 800d47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47e:	f7f2 ff25 	bl	80002cc <__adddf3>
 800d482:	f04f 35ff 	mov.w	r5, #4294967295
 800d486:	e9c4 8900 	strd	r8, r9, [r4]
 800d48a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d48e:	e7c4      	b.n	800d41a <__ieee754_rem_pio2+0x7a>
 800d490:	a381      	add	r3, pc, #516	@ (adr r3, 800d698 <__ieee754_rem_pio2+0x2f8>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	f7f2 ff19 	bl	80002cc <__adddf3>
 800d49a:	a381      	add	r3, pc, #516	@ (adr r3, 800d6a0 <__ieee754_rem_pio2+0x300>)
 800d49c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4a0:	4606      	mov	r6, r0
 800d4a2:	460f      	mov	r7, r1
 800d4a4:	f7f2 ff12 	bl	80002cc <__adddf3>
 800d4a8:	4602      	mov	r2, r0
 800d4aa:	460b      	mov	r3, r1
 800d4ac:	4680      	mov	r8, r0
 800d4ae:	4689      	mov	r9, r1
 800d4b0:	4630      	mov	r0, r6
 800d4b2:	4639      	mov	r1, r7
 800d4b4:	f7f2 ff08 	bl	80002c8 <__aeabi_dsub>
 800d4b8:	a379      	add	r3, pc, #484	@ (adr r3, 800d6a0 <__ieee754_rem_pio2+0x300>)
 800d4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4be:	e7de      	b.n	800d47e <__ieee754_rem_pio2+0xde>
 800d4c0:	4b82      	ldr	r3, [pc, #520]	@ (800d6cc <__ieee754_rem_pio2+0x32c>)
 800d4c2:	4598      	cmp	r8, r3
 800d4c4:	f200 80d1 	bhi.w	800d66a <__ieee754_rem_pio2+0x2ca>
 800d4c8:	f000 fafe 	bl	800dac8 <fabs>
 800d4cc:	ec57 6b10 	vmov	r6, r7, d0
 800d4d0:	a375      	add	r3, pc, #468	@ (adr r3, 800d6a8 <__ieee754_rem_pio2+0x308>)
 800d4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	4639      	mov	r1, r7
 800d4da:	f7f3 f8ad 	bl	8000638 <__aeabi_dmul>
 800d4de:	4b7c      	ldr	r3, [pc, #496]	@ (800d6d0 <__ieee754_rem_pio2+0x330>)
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f7f2 fef3 	bl	80002cc <__adddf3>
 800d4e6:	f7f3 fb57 	bl	8000b98 <__aeabi_d2iz>
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	f7f3 f83a 	bl	8000564 <__aeabi_i2d>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	460b      	mov	r3, r1
 800d4f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d4f8:	a363      	add	r3, pc, #396	@ (adr r3, 800d688 <__ieee754_rem_pio2+0x2e8>)
 800d4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fe:	f7f3 f89b 	bl	8000638 <__aeabi_dmul>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	4630      	mov	r0, r6
 800d508:	4639      	mov	r1, r7
 800d50a:	f7f2 fedd 	bl	80002c8 <__aeabi_dsub>
 800d50e:	a360      	add	r3, pc, #384	@ (adr r3, 800d690 <__ieee754_rem_pio2+0x2f0>)
 800d510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d514:	4682      	mov	sl, r0
 800d516:	468b      	mov	fp, r1
 800d518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d51c:	f7f3 f88c 	bl	8000638 <__aeabi_dmul>
 800d520:	2d1f      	cmp	r5, #31
 800d522:	4606      	mov	r6, r0
 800d524:	460f      	mov	r7, r1
 800d526:	dc0c      	bgt.n	800d542 <__ieee754_rem_pio2+0x1a2>
 800d528:	4b6a      	ldr	r3, [pc, #424]	@ (800d6d4 <__ieee754_rem_pio2+0x334>)
 800d52a:	1e6a      	subs	r2, r5, #1
 800d52c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d530:	4543      	cmp	r3, r8
 800d532:	d006      	beq.n	800d542 <__ieee754_rem_pio2+0x1a2>
 800d534:	4632      	mov	r2, r6
 800d536:	463b      	mov	r3, r7
 800d538:	4650      	mov	r0, sl
 800d53a:	4659      	mov	r1, fp
 800d53c:	f7f2 fec4 	bl	80002c8 <__aeabi_dsub>
 800d540:	e00e      	b.n	800d560 <__ieee754_rem_pio2+0x1c0>
 800d542:	463b      	mov	r3, r7
 800d544:	4632      	mov	r2, r6
 800d546:	4650      	mov	r0, sl
 800d548:	4659      	mov	r1, fp
 800d54a:	f7f2 febd 	bl	80002c8 <__aeabi_dsub>
 800d54e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d552:	9305      	str	r3, [sp, #20]
 800d554:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d558:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800d55c:	2b10      	cmp	r3, #16
 800d55e:	dc02      	bgt.n	800d566 <__ieee754_rem_pio2+0x1c6>
 800d560:	e9c4 0100 	strd	r0, r1, [r4]
 800d564:	e039      	b.n	800d5da <__ieee754_rem_pio2+0x23a>
 800d566:	a34c      	add	r3, pc, #304	@ (adr r3, 800d698 <__ieee754_rem_pio2+0x2f8>)
 800d568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d56c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d570:	f7f3 f862 	bl	8000638 <__aeabi_dmul>
 800d574:	4606      	mov	r6, r0
 800d576:	460f      	mov	r7, r1
 800d578:	4602      	mov	r2, r0
 800d57a:	460b      	mov	r3, r1
 800d57c:	4650      	mov	r0, sl
 800d57e:	4659      	mov	r1, fp
 800d580:	f7f2 fea2 	bl	80002c8 <__aeabi_dsub>
 800d584:	4602      	mov	r2, r0
 800d586:	460b      	mov	r3, r1
 800d588:	4680      	mov	r8, r0
 800d58a:	4689      	mov	r9, r1
 800d58c:	4650      	mov	r0, sl
 800d58e:	4659      	mov	r1, fp
 800d590:	f7f2 fe9a 	bl	80002c8 <__aeabi_dsub>
 800d594:	4632      	mov	r2, r6
 800d596:	463b      	mov	r3, r7
 800d598:	f7f2 fe96 	bl	80002c8 <__aeabi_dsub>
 800d59c:	a340      	add	r3, pc, #256	@ (adr r3, 800d6a0 <__ieee754_rem_pio2+0x300>)
 800d59e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a2:	4606      	mov	r6, r0
 800d5a4:	460f      	mov	r7, r1
 800d5a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d5aa:	f7f3 f845 	bl	8000638 <__aeabi_dmul>
 800d5ae:	4632      	mov	r2, r6
 800d5b0:	463b      	mov	r3, r7
 800d5b2:	f7f2 fe89 	bl	80002c8 <__aeabi_dsub>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	4606      	mov	r6, r0
 800d5bc:	460f      	mov	r7, r1
 800d5be:	4640      	mov	r0, r8
 800d5c0:	4649      	mov	r1, r9
 800d5c2:	f7f2 fe81 	bl	80002c8 <__aeabi_dsub>
 800d5c6:	9a05      	ldr	r2, [sp, #20]
 800d5c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d5cc:	1ad3      	subs	r3, r2, r3
 800d5ce:	2b31      	cmp	r3, #49	@ 0x31
 800d5d0:	dc20      	bgt.n	800d614 <__ieee754_rem_pio2+0x274>
 800d5d2:	e9c4 0100 	strd	r0, r1, [r4]
 800d5d6:	46c2      	mov	sl, r8
 800d5d8:	46cb      	mov	fp, r9
 800d5da:	e9d4 8900 	ldrd	r8, r9, [r4]
 800d5de:	4650      	mov	r0, sl
 800d5e0:	4642      	mov	r2, r8
 800d5e2:	464b      	mov	r3, r9
 800d5e4:	4659      	mov	r1, fp
 800d5e6:	f7f2 fe6f 	bl	80002c8 <__aeabi_dsub>
 800d5ea:	463b      	mov	r3, r7
 800d5ec:	4632      	mov	r2, r6
 800d5ee:	f7f2 fe6b 	bl	80002c8 <__aeabi_dsub>
 800d5f2:	9b04      	ldr	r3, [sp, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d5fa:	f6bf af0e 	bge.w	800d41a <__ieee754_rem_pio2+0x7a>
 800d5fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800d602:	6063      	str	r3, [r4, #4]
 800d604:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d608:	f8c4 8000 	str.w	r8, [r4]
 800d60c:	60a0      	str	r0, [r4, #8]
 800d60e:	60e3      	str	r3, [r4, #12]
 800d610:	426d      	negs	r5, r5
 800d612:	e702      	b.n	800d41a <__ieee754_rem_pio2+0x7a>
 800d614:	a326      	add	r3, pc, #152	@ (adr r3, 800d6b0 <__ieee754_rem_pio2+0x310>)
 800d616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d61e:	f7f3 f80b 	bl	8000638 <__aeabi_dmul>
 800d622:	4606      	mov	r6, r0
 800d624:	460f      	mov	r7, r1
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	4640      	mov	r0, r8
 800d62c:	4649      	mov	r1, r9
 800d62e:	f7f2 fe4b 	bl	80002c8 <__aeabi_dsub>
 800d632:	4602      	mov	r2, r0
 800d634:	460b      	mov	r3, r1
 800d636:	4682      	mov	sl, r0
 800d638:	468b      	mov	fp, r1
 800d63a:	4640      	mov	r0, r8
 800d63c:	4649      	mov	r1, r9
 800d63e:	f7f2 fe43 	bl	80002c8 <__aeabi_dsub>
 800d642:	4632      	mov	r2, r6
 800d644:	463b      	mov	r3, r7
 800d646:	f7f2 fe3f 	bl	80002c8 <__aeabi_dsub>
 800d64a:	a31b      	add	r3, pc, #108	@ (adr r3, 800d6b8 <__ieee754_rem_pio2+0x318>)
 800d64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d650:	4606      	mov	r6, r0
 800d652:	460f      	mov	r7, r1
 800d654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d658:	f7f2 ffee 	bl	8000638 <__aeabi_dmul>
 800d65c:	4632      	mov	r2, r6
 800d65e:	463b      	mov	r3, r7
 800d660:	f7f2 fe32 	bl	80002c8 <__aeabi_dsub>
 800d664:	4606      	mov	r6, r0
 800d666:	460f      	mov	r7, r1
 800d668:	e764      	b.n	800d534 <__ieee754_rem_pio2+0x194>
 800d66a:	4b1b      	ldr	r3, [pc, #108]	@ (800d6d8 <__ieee754_rem_pio2+0x338>)
 800d66c:	4598      	cmp	r8, r3
 800d66e:	d935      	bls.n	800d6dc <__ieee754_rem_pio2+0x33c>
 800d670:	4632      	mov	r2, r6
 800d672:	463b      	mov	r3, r7
 800d674:	4630      	mov	r0, r6
 800d676:	4639      	mov	r1, r7
 800d678:	f7f2 fe26 	bl	80002c8 <__aeabi_dsub>
 800d67c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800d680:	e9c4 0100 	strd	r0, r1, [r4]
 800d684:	e69e      	b.n	800d3c4 <__ieee754_rem_pio2+0x24>
 800d686:	bf00      	nop
 800d688:	54400000 	.word	0x54400000
 800d68c:	3ff921fb 	.word	0x3ff921fb
 800d690:	1a626331 	.word	0x1a626331
 800d694:	3dd0b461 	.word	0x3dd0b461
 800d698:	1a600000 	.word	0x1a600000
 800d69c:	3dd0b461 	.word	0x3dd0b461
 800d6a0:	2e037073 	.word	0x2e037073
 800d6a4:	3ba3198a 	.word	0x3ba3198a
 800d6a8:	6dc9c883 	.word	0x6dc9c883
 800d6ac:	3fe45f30 	.word	0x3fe45f30
 800d6b0:	2e000000 	.word	0x2e000000
 800d6b4:	3ba3198a 	.word	0x3ba3198a
 800d6b8:	252049c1 	.word	0x252049c1
 800d6bc:	397b839a 	.word	0x397b839a
 800d6c0:	3fe921fb 	.word	0x3fe921fb
 800d6c4:	4002d97b 	.word	0x4002d97b
 800d6c8:	3ff921fb 	.word	0x3ff921fb
 800d6cc:	413921fb 	.word	0x413921fb
 800d6d0:	3fe00000 	.word	0x3fe00000
 800d6d4:	0800e898 	.word	0x0800e898
 800d6d8:	7fefffff 	.word	0x7fefffff
 800d6dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 800d6e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800d6e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	460f      	mov	r7, r1
 800d6ec:	f7f3 fa54 	bl	8000b98 <__aeabi_d2iz>
 800d6f0:	f7f2 ff38 	bl	8000564 <__aeabi_i2d>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	460b      	mov	r3, r1
 800d6f8:	4630      	mov	r0, r6
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d700:	f7f2 fde2 	bl	80002c8 <__aeabi_dsub>
 800d704:	4b22      	ldr	r3, [pc, #136]	@ (800d790 <__ieee754_rem_pio2+0x3f0>)
 800d706:	2200      	movs	r2, #0
 800d708:	f7f2 ff96 	bl	8000638 <__aeabi_dmul>
 800d70c:	460f      	mov	r7, r1
 800d70e:	4606      	mov	r6, r0
 800d710:	f7f3 fa42 	bl	8000b98 <__aeabi_d2iz>
 800d714:	f7f2 ff26 	bl	8000564 <__aeabi_i2d>
 800d718:	4602      	mov	r2, r0
 800d71a:	460b      	mov	r3, r1
 800d71c:	4630      	mov	r0, r6
 800d71e:	4639      	mov	r1, r7
 800d720:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d724:	f7f2 fdd0 	bl	80002c8 <__aeabi_dsub>
 800d728:	4b19      	ldr	r3, [pc, #100]	@ (800d790 <__ieee754_rem_pio2+0x3f0>)
 800d72a:	2200      	movs	r2, #0
 800d72c:	f7f2 ff84 	bl	8000638 <__aeabi_dmul>
 800d730:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800d734:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800d738:	f04f 0803 	mov.w	r8, #3
 800d73c:	2600      	movs	r6, #0
 800d73e:	2700      	movs	r7, #0
 800d740:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800d744:	4632      	mov	r2, r6
 800d746:	463b      	mov	r3, r7
 800d748:	46c2      	mov	sl, r8
 800d74a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d74e:	f7f3 f9db 	bl	8000b08 <__aeabi_dcmpeq>
 800d752:	2800      	cmp	r0, #0
 800d754:	d1f4      	bne.n	800d740 <__ieee754_rem_pio2+0x3a0>
 800d756:	4b0f      	ldr	r3, [pc, #60]	@ (800d794 <__ieee754_rem_pio2+0x3f4>)
 800d758:	9301      	str	r3, [sp, #4]
 800d75a:	2302      	movs	r3, #2
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	462a      	mov	r2, r5
 800d760:	4653      	mov	r3, sl
 800d762:	4621      	mov	r1, r4
 800d764:	a806      	add	r0, sp, #24
 800d766:	f000 f9b7 	bl	800dad8 <__kernel_rem_pio2>
 800d76a:	9b04      	ldr	r3, [sp, #16]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	4605      	mov	r5, r0
 800d770:	f6bf ae53 	bge.w	800d41a <__ieee754_rem_pio2+0x7a>
 800d774:	e9d4 2100 	ldrd	r2, r1, [r4]
 800d778:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d77c:	e9c4 2300 	strd	r2, r3, [r4]
 800d780:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800d784:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d788:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800d78c:	e740      	b.n	800d610 <__ieee754_rem_pio2+0x270>
 800d78e:	bf00      	nop
 800d790:	41700000 	.word	0x41700000
 800d794:	0800e918 	.word	0x0800e918

0800d798 <atan>:
 800d798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d79c:	ec55 4b10 	vmov	r4, r5, d0
 800d7a0:	4bbf      	ldr	r3, [pc, #764]	@ (800daa0 <atan+0x308>)
 800d7a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800d7a6:	429e      	cmp	r6, r3
 800d7a8:	46ab      	mov	fp, r5
 800d7aa:	d918      	bls.n	800d7de <atan+0x46>
 800d7ac:	4bbd      	ldr	r3, [pc, #756]	@ (800daa4 <atan+0x30c>)
 800d7ae:	429e      	cmp	r6, r3
 800d7b0:	d801      	bhi.n	800d7b6 <atan+0x1e>
 800d7b2:	d109      	bne.n	800d7c8 <atan+0x30>
 800d7b4:	b144      	cbz	r4, 800d7c8 <atan+0x30>
 800d7b6:	4622      	mov	r2, r4
 800d7b8:	462b      	mov	r3, r5
 800d7ba:	4620      	mov	r0, r4
 800d7bc:	4629      	mov	r1, r5
 800d7be:	f7f2 fd85 	bl	80002cc <__adddf3>
 800d7c2:	4604      	mov	r4, r0
 800d7c4:	460d      	mov	r5, r1
 800d7c6:	e006      	b.n	800d7d6 <atan+0x3e>
 800d7c8:	f1bb 0f00 	cmp.w	fp, #0
 800d7cc:	f340 812b 	ble.w	800da26 <atan+0x28e>
 800d7d0:	a597      	add	r5, pc, #604	@ (adr r5, 800da30 <atan+0x298>)
 800d7d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800d7d6:	ec45 4b10 	vmov	d0, r4, r5
 800d7da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7de:	4bb2      	ldr	r3, [pc, #712]	@ (800daa8 <atan+0x310>)
 800d7e0:	429e      	cmp	r6, r3
 800d7e2:	d813      	bhi.n	800d80c <atan+0x74>
 800d7e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800d7e8:	429e      	cmp	r6, r3
 800d7ea:	d80c      	bhi.n	800d806 <atan+0x6e>
 800d7ec:	a392      	add	r3, pc, #584	@ (adr r3, 800da38 <atan+0x2a0>)
 800d7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f2:	4620      	mov	r0, r4
 800d7f4:	4629      	mov	r1, r5
 800d7f6:	f7f2 fd69 	bl	80002cc <__adddf3>
 800d7fa:	4bac      	ldr	r3, [pc, #688]	@ (800daac <atan+0x314>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f7f3 f9ab 	bl	8000b58 <__aeabi_dcmpgt>
 800d802:	2800      	cmp	r0, #0
 800d804:	d1e7      	bne.n	800d7d6 <atan+0x3e>
 800d806:	f04f 3aff 	mov.w	sl, #4294967295
 800d80a:	e029      	b.n	800d860 <atan+0xc8>
 800d80c:	f000 f95c 	bl	800dac8 <fabs>
 800d810:	4ba7      	ldr	r3, [pc, #668]	@ (800dab0 <atan+0x318>)
 800d812:	429e      	cmp	r6, r3
 800d814:	ec55 4b10 	vmov	r4, r5, d0
 800d818:	f200 80bc 	bhi.w	800d994 <atan+0x1fc>
 800d81c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800d820:	429e      	cmp	r6, r3
 800d822:	f200 809e 	bhi.w	800d962 <atan+0x1ca>
 800d826:	4622      	mov	r2, r4
 800d828:	462b      	mov	r3, r5
 800d82a:	4620      	mov	r0, r4
 800d82c:	4629      	mov	r1, r5
 800d82e:	f7f2 fd4d 	bl	80002cc <__adddf3>
 800d832:	4b9e      	ldr	r3, [pc, #632]	@ (800daac <atan+0x314>)
 800d834:	2200      	movs	r2, #0
 800d836:	f7f2 fd47 	bl	80002c8 <__aeabi_dsub>
 800d83a:	2200      	movs	r2, #0
 800d83c:	4606      	mov	r6, r0
 800d83e:	460f      	mov	r7, r1
 800d840:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d844:	4620      	mov	r0, r4
 800d846:	4629      	mov	r1, r5
 800d848:	f7f2 fd40 	bl	80002cc <__adddf3>
 800d84c:	4602      	mov	r2, r0
 800d84e:	460b      	mov	r3, r1
 800d850:	4630      	mov	r0, r6
 800d852:	4639      	mov	r1, r7
 800d854:	f7f3 f81a 	bl	800088c <__aeabi_ddiv>
 800d858:	f04f 0a00 	mov.w	sl, #0
 800d85c:	4604      	mov	r4, r0
 800d85e:	460d      	mov	r5, r1
 800d860:	4622      	mov	r2, r4
 800d862:	462b      	mov	r3, r5
 800d864:	4620      	mov	r0, r4
 800d866:	4629      	mov	r1, r5
 800d868:	f7f2 fee6 	bl	8000638 <__aeabi_dmul>
 800d86c:	4602      	mov	r2, r0
 800d86e:	460b      	mov	r3, r1
 800d870:	4680      	mov	r8, r0
 800d872:	4689      	mov	r9, r1
 800d874:	f7f2 fee0 	bl	8000638 <__aeabi_dmul>
 800d878:	a371      	add	r3, pc, #452	@ (adr r3, 800da40 <atan+0x2a8>)
 800d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87e:	4606      	mov	r6, r0
 800d880:	460f      	mov	r7, r1
 800d882:	f7f2 fed9 	bl	8000638 <__aeabi_dmul>
 800d886:	a370      	add	r3, pc, #448	@ (adr r3, 800da48 <atan+0x2b0>)
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	f7f2 fd1e 	bl	80002cc <__adddf3>
 800d890:	4632      	mov	r2, r6
 800d892:	463b      	mov	r3, r7
 800d894:	f7f2 fed0 	bl	8000638 <__aeabi_dmul>
 800d898:	a36d      	add	r3, pc, #436	@ (adr r3, 800da50 <atan+0x2b8>)
 800d89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d89e:	f7f2 fd15 	bl	80002cc <__adddf3>
 800d8a2:	4632      	mov	r2, r6
 800d8a4:	463b      	mov	r3, r7
 800d8a6:	f7f2 fec7 	bl	8000638 <__aeabi_dmul>
 800d8aa:	a36b      	add	r3, pc, #428	@ (adr r3, 800da58 <atan+0x2c0>)
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f7f2 fd0c 	bl	80002cc <__adddf3>
 800d8b4:	4632      	mov	r2, r6
 800d8b6:	463b      	mov	r3, r7
 800d8b8:	f7f2 febe 	bl	8000638 <__aeabi_dmul>
 800d8bc:	a368      	add	r3, pc, #416	@ (adr r3, 800da60 <atan+0x2c8>)
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	f7f2 fd03 	bl	80002cc <__adddf3>
 800d8c6:	4632      	mov	r2, r6
 800d8c8:	463b      	mov	r3, r7
 800d8ca:	f7f2 feb5 	bl	8000638 <__aeabi_dmul>
 800d8ce:	a366      	add	r3, pc, #408	@ (adr r3, 800da68 <atan+0x2d0>)
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 fcfa 	bl	80002cc <__adddf3>
 800d8d8:	4642      	mov	r2, r8
 800d8da:	464b      	mov	r3, r9
 800d8dc:	f7f2 feac 	bl	8000638 <__aeabi_dmul>
 800d8e0:	a363      	add	r3, pc, #396	@ (adr r3, 800da70 <atan+0x2d8>)
 800d8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e6:	4680      	mov	r8, r0
 800d8e8:	4689      	mov	r9, r1
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	4639      	mov	r1, r7
 800d8ee:	f7f2 fea3 	bl	8000638 <__aeabi_dmul>
 800d8f2:	a361      	add	r3, pc, #388	@ (adr r3, 800da78 <atan+0x2e0>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	f7f2 fce6 	bl	80002c8 <__aeabi_dsub>
 800d8fc:	4632      	mov	r2, r6
 800d8fe:	463b      	mov	r3, r7
 800d900:	f7f2 fe9a 	bl	8000638 <__aeabi_dmul>
 800d904:	a35e      	add	r3, pc, #376	@ (adr r3, 800da80 <atan+0x2e8>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	f7f2 fcdd 	bl	80002c8 <__aeabi_dsub>
 800d90e:	4632      	mov	r2, r6
 800d910:	463b      	mov	r3, r7
 800d912:	f7f2 fe91 	bl	8000638 <__aeabi_dmul>
 800d916:	a35c      	add	r3, pc, #368	@ (adr r3, 800da88 <atan+0x2f0>)
 800d918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91c:	f7f2 fcd4 	bl	80002c8 <__aeabi_dsub>
 800d920:	4632      	mov	r2, r6
 800d922:	463b      	mov	r3, r7
 800d924:	f7f2 fe88 	bl	8000638 <__aeabi_dmul>
 800d928:	a359      	add	r3, pc, #356	@ (adr r3, 800da90 <atan+0x2f8>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fccb 	bl	80002c8 <__aeabi_dsub>
 800d932:	4632      	mov	r2, r6
 800d934:	463b      	mov	r3, r7
 800d936:	f7f2 fe7f 	bl	8000638 <__aeabi_dmul>
 800d93a:	4602      	mov	r2, r0
 800d93c:	460b      	mov	r3, r1
 800d93e:	4640      	mov	r0, r8
 800d940:	4649      	mov	r1, r9
 800d942:	f7f2 fcc3 	bl	80002cc <__adddf3>
 800d946:	4622      	mov	r2, r4
 800d948:	462b      	mov	r3, r5
 800d94a:	f7f2 fe75 	bl	8000638 <__aeabi_dmul>
 800d94e:	f1ba 3fff 	cmp.w	sl, #4294967295
 800d952:	4602      	mov	r2, r0
 800d954:	460b      	mov	r3, r1
 800d956:	d148      	bne.n	800d9ea <atan+0x252>
 800d958:	4620      	mov	r0, r4
 800d95a:	4629      	mov	r1, r5
 800d95c:	f7f2 fcb4 	bl	80002c8 <__aeabi_dsub>
 800d960:	e72f      	b.n	800d7c2 <atan+0x2a>
 800d962:	4b52      	ldr	r3, [pc, #328]	@ (800daac <atan+0x314>)
 800d964:	2200      	movs	r2, #0
 800d966:	4620      	mov	r0, r4
 800d968:	4629      	mov	r1, r5
 800d96a:	f7f2 fcad 	bl	80002c8 <__aeabi_dsub>
 800d96e:	4b4f      	ldr	r3, [pc, #316]	@ (800daac <atan+0x314>)
 800d970:	4606      	mov	r6, r0
 800d972:	460f      	mov	r7, r1
 800d974:	2200      	movs	r2, #0
 800d976:	4620      	mov	r0, r4
 800d978:	4629      	mov	r1, r5
 800d97a:	f7f2 fca7 	bl	80002cc <__adddf3>
 800d97e:	4602      	mov	r2, r0
 800d980:	460b      	mov	r3, r1
 800d982:	4630      	mov	r0, r6
 800d984:	4639      	mov	r1, r7
 800d986:	f7f2 ff81 	bl	800088c <__aeabi_ddiv>
 800d98a:	f04f 0a01 	mov.w	sl, #1
 800d98e:	4604      	mov	r4, r0
 800d990:	460d      	mov	r5, r1
 800d992:	e765      	b.n	800d860 <atan+0xc8>
 800d994:	4b47      	ldr	r3, [pc, #284]	@ (800dab4 <atan+0x31c>)
 800d996:	429e      	cmp	r6, r3
 800d998:	d21c      	bcs.n	800d9d4 <atan+0x23c>
 800d99a:	4b47      	ldr	r3, [pc, #284]	@ (800dab8 <atan+0x320>)
 800d99c:	2200      	movs	r2, #0
 800d99e:	4620      	mov	r0, r4
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	f7f2 fc91 	bl	80002c8 <__aeabi_dsub>
 800d9a6:	4b44      	ldr	r3, [pc, #272]	@ (800dab8 <atan+0x320>)
 800d9a8:	4606      	mov	r6, r0
 800d9aa:	460f      	mov	r7, r1
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	4620      	mov	r0, r4
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	f7f2 fe41 	bl	8000638 <__aeabi_dmul>
 800d9b6:	4b3d      	ldr	r3, [pc, #244]	@ (800daac <atan+0x314>)
 800d9b8:	2200      	movs	r2, #0
 800d9ba:	f7f2 fc87 	bl	80002cc <__adddf3>
 800d9be:	4602      	mov	r2, r0
 800d9c0:	460b      	mov	r3, r1
 800d9c2:	4630      	mov	r0, r6
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	f7f2 ff61 	bl	800088c <__aeabi_ddiv>
 800d9ca:	f04f 0a02 	mov.w	sl, #2
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	460d      	mov	r5, r1
 800d9d2:	e745      	b.n	800d860 <atan+0xc8>
 800d9d4:	4622      	mov	r2, r4
 800d9d6:	462b      	mov	r3, r5
 800d9d8:	4938      	ldr	r1, [pc, #224]	@ (800dabc <atan+0x324>)
 800d9da:	2000      	movs	r0, #0
 800d9dc:	f7f2 ff56 	bl	800088c <__aeabi_ddiv>
 800d9e0:	f04f 0a03 	mov.w	sl, #3
 800d9e4:	4604      	mov	r4, r0
 800d9e6:	460d      	mov	r5, r1
 800d9e8:	e73a      	b.n	800d860 <atan+0xc8>
 800d9ea:	4b35      	ldr	r3, [pc, #212]	@ (800dac0 <atan+0x328>)
 800d9ec:	4e35      	ldr	r6, [pc, #212]	@ (800dac4 <atan+0x32c>)
 800d9ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f6:	f7f2 fc67 	bl	80002c8 <__aeabi_dsub>
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	462b      	mov	r3, r5
 800d9fe:	f7f2 fc63 	bl	80002c8 <__aeabi_dsub>
 800da02:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800da0e:	f7f2 fc5b 	bl	80002c8 <__aeabi_dsub>
 800da12:	f1bb 0f00 	cmp.w	fp, #0
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	f6bf aedc 	bge.w	800d7d6 <atan+0x3e>
 800da1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da22:	461d      	mov	r5, r3
 800da24:	e6d7      	b.n	800d7d6 <atan+0x3e>
 800da26:	a51c      	add	r5, pc, #112	@ (adr r5, 800da98 <atan+0x300>)
 800da28:	e9d5 4500 	ldrd	r4, r5, [r5]
 800da2c:	e6d3      	b.n	800d7d6 <atan+0x3e>
 800da2e:	bf00      	nop
 800da30:	54442d18 	.word	0x54442d18
 800da34:	3ff921fb 	.word	0x3ff921fb
 800da38:	8800759c 	.word	0x8800759c
 800da3c:	7e37e43c 	.word	0x7e37e43c
 800da40:	e322da11 	.word	0xe322da11
 800da44:	3f90ad3a 	.word	0x3f90ad3a
 800da48:	24760deb 	.word	0x24760deb
 800da4c:	3fa97b4b 	.word	0x3fa97b4b
 800da50:	a0d03d51 	.word	0xa0d03d51
 800da54:	3fb10d66 	.word	0x3fb10d66
 800da58:	c54c206e 	.word	0xc54c206e
 800da5c:	3fb745cd 	.word	0x3fb745cd
 800da60:	920083ff 	.word	0x920083ff
 800da64:	3fc24924 	.word	0x3fc24924
 800da68:	5555550d 	.word	0x5555550d
 800da6c:	3fd55555 	.word	0x3fd55555
 800da70:	2c6a6c2f 	.word	0x2c6a6c2f
 800da74:	bfa2b444 	.word	0xbfa2b444
 800da78:	52defd9a 	.word	0x52defd9a
 800da7c:	3fadde2d 	.word	0x3fadde2d
 800da80:	af749a6d 	.word	0xaf749a6d
 800da84:	3fb3b0f2 	.word	0x3fb3b0f2
 800da88:	fe231671 	.word	0xfe231671
 800da8c:	3fbc71c6 	.word	0x3fbc71c6
 800da90:	9998ebc4 	.word	0x9998ebc4
 800da94:	3fc99999 	.word	0x3fc99999
 800da98:	54442d18 	.word	0x54442d18
 800da9c:	bff921fb 	.word	0xbff921fb
 800daa0:	440fffff 	.word	0x440fffff
 800daa4:	7ff00000 	.word	0x7ff00000
 800daa8:	3fdbffff 	.word	0x3fdbffff
 800daac:	3ff00000 	.word	0x3ff00000
 800dab0:	3ff2ffff 	.word	0x3ff2ffff
 800dab4:	40038000 	.word	0x40038000
 800dab8:	3ff80000 	.word	0x3ff80000
 800dabc:	bff00000 	.word	0xbff00000
 800dac0:	0800ea20 	.word	0x0800ea20
 800dac4:	0800ea40 	.word	0x0800ea40

0800dac8 <fabs>:
 800dac8:	ec51 0b10 	vmov	r0, r1, d0
 800dacc:	4602      	mov	r2, r0
 800dace:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800dad2:	ec43 2b10 	vmov	d0, r2, r3
 800dad6:	4770      	bx	lr

0800dad8 <__kernel_rem_pio2>:
 800dad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dadc:	ed2d 8b02 	vpush	{d8}
 800dae0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800dae4:	f112 0f14 	cmn.w	r2, #20
 800dae8:	9306      	str	r3, [sp, #24]
 800daea:	9104      	str	r1, [sp, #16]
 800daec:	4bbe      	ldr	r3, [pc, #760]	@ (800dde8 <__kernel_rem_pio2+0x310>)
 800daee:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800daf0:	9008      	str	r0, [sp, #32]
 800daf2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	9b06      	ldr	r3, [sp, #24]
 800dafa:	f103 33ff 	add.w	r3, r3, #4294967295
 800dafe:	bfa8      	it	ge
 800db00:	1ed4      	subge	r4, r2, #3
 800db02:	9305      	str	r3, [sp, #20]
 800db04:	bfb2      	itee	lt
 800db06:	2400      	movlt	r4, #0
 800db08:	2318      	movge	r3, #24
 800db0a:	fb94 f4f3 	sdivge	r4, r4, r3
 800db0e:	f06f 0317 	mvn.w	r3, #23
 800db12:	fb04 3303 	mla	r3, r4, r3, r3
 800db16:	eb03 0b02 	add.w	fp, r3, r2
 800db1a:	9b00      	ldr	r3, [sp, #0]
 800db1c:	9a05      	ldr	r2, [sp, #20]
 800db1e:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800ddd8 <__kernel_rem_pio2+0x300>
 800db22:	eb03 0802 	add.w	r8, r3, r2
 800db26:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800db28:	1aa7      	subs	r7, r4, r2
 800db2a:	ae20      	add	r6, sp, #128	@ 0x80
 800db2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800db30:	2500      	movs	r5, #0
 800db32:	4545      	cmp	r5, r8
 800db34:	dd13      	ble.n	800db5e <__kernel_rem_pio2+0x86>
 800db36:	9b06      	ldr	r3, [sp, #24]
 800db38:	aa20      	add	r2, sp, #128	@ 0x80
 800db3a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800db3e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800db42:	f04f 0800 	mov.w	r8, #0
 800db46:	9b00      	ldr	r3, [sp, #0]
 800db48:	4598      	cmp	r8, r3
 800db4a:	dc31      	bgt.n	800dbb0 <__kernel_rem_pio2+0xd8>
 800db4c:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800ddd8 <__kernel_rem_pio2+0x300>
 800db50:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800db54:	ed8d 7b02 	vstr	d7, [sp, #8]
 800db58:	462f      	mov	r7, r5
 800db5a:	2600      	movs	r6, #0
 800db5c:	e01b      	b.n	800db96 <__kernel_rem_pio2+0xbe>
 800db5e:	42ef      	cmn	r7, r5
 800db60:	d407      	bmi.n	800db72 <__kernel_rem_pio2+0x9a>
 800db62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800db66:	f7f2 fcfd 	bl	8000564 <__aeabi_i2d>
 800db6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800db6e:	3501      	adds	r5, #1
 800db70:	e7df      	b.n	800db32 <__kernel_rem_pio2+0x5a>
 800db72:	ec51 0b18 	vmov	r0, r1, d8
 800db76:	e7f8      	b.n	800db6a <__kernel_rem_pio2+0x92>
 800db78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800db80:	f7f2 fd5a 	bl	8000638 <__aeabi_dmul>
 800db84:	4602      	mov	r2, r0
 800db86:	460b      	mov	r3, r1
 800db88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db8c:	f7f2 fb9e 	bl	80002cc <__adddf3>
 800db90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db94:	3601      	adds	r6, #1
 800db96:	9b05      	ldr	r3, [sp, #20]
 800db98:	429e      	cmp	r6, r3
 800db9a:	f1a7 0708 	sub.w	r7, r7, #8
 800db9e:	ddeb      	ble.n	800db78 <__kernel_rem_pio2+0xa0>
 800dba0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dba4:	f108 0801 	add.w	r8, r8, #1
 800dba8:	ecaa 7b02 	vstmia	sl!, {d7}
 800dbac:	3508      	adds	r5, #8
 800dbae:	e7ca      	b.n	800db46 <__kernel_rem_pio2+0x6e>
 800dbb0:	9b00      	ldr	r3, [sp, #0]
 800dbb2:	f8dd 8000 	ldr.w	r8, [sp]
 800dbb6:	aa0c      	add	r2, sp, #48	@ 0x30
 800dbb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dbbc:	930a      	str	r3, [sp, #40]	@ 0x28
 800dbbe:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800dbc0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800dbc4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dbc6:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800dbca:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dbcc:	ab98      	add	r3, sp, #608	@ 0x260
 800dbce:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dbd2:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800dbd6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbda:	ac0c      	add	r4, sp, #48	@ 0x30
 800dbdc:	ab70      	add	r3, sp, #448	@ 0x1c0
 800dbde:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800dbe2:	46a1      	mov	r9, r4
 800dbe4:	46c2      	mov	sl, r8
 800dbe6:	f1ba 0f00 	cmp.w	sl, #0
 800dbea:	f1a5 0508 	sub.w	r5, r5, #8
 800dbee:	dc77      	bgt.n	800dce0 <__kernel_rem_pio2+0x208>
 800dbf0:	4658      	mov	r0, fp
 800dbf2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800dbf6:	f000 fac7 	bl	800e188 <scalbn>
 800dbfa:	ec57 6b10 	vmov	r6, r7, d0
 800dbfe:	2200      	movs	r2, #0
 800dc00:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800dc04:	4630      	mov	r0, r6
 800dc06:	4639      	mov	r1, r7
 800dc08:	f7f2 fd16 	bl	8000638 <__aeabi_dmul>
 800dc0c:	ec41 0b10 	vmov	d0, r0, r1
 800dc10:	f000 fb3a 	bl	800e288 <floor>
 800dc14:	4b75      	ldr	r3, [pc, #468]	@ (800ddec <__kernel_rem_pio2+0x314>)
 800dc16:	ec51 0b10 	vmov	r0, r1, d0
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	f7f2 fd0c 	bl	8000638 <__aeabi_dmul>
 800dc20:	4602      	mov	r2, r0
 800dc22:	460b      	mov	r3, r1
 800dc24:	4630      	mov	r0, r6
 800dc26:	4639      	mov	r1, r7
 800dc28:	f7f2 fb4e 	bl	80002c8 <__aeabi_dsub>
 800dc2c:	460f      	mov	r7, r1
 800dc2e:	4606      	mov	r6, r0
 800dc30:	f7f2 ffb2 	bl	8000b98 <__aeabi_d2iz>
 800dc34:	9002      	str	r0, [sp, #8]
 800dc36:	f7f2 fc95 	bl	8000564 <__aeabi_i2d>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	4630      	mov	r0, r6
 800dc40:	4639      	mov	r1, r7
 800dc42:	f7f2 fb41 	bl	80002c8 <__aeabi_dsub>
 800dc46:	f1bb 0f00 	cmp.w	fp, #0
 800dc4a:	4606      	mov	r6, r0
 800dc4c:	460f      	mov	r7, r1
 800dc4e:	dd6c      	ble.n	800dd2a <__kernel_rem_pio2+0x252>
 800dc50:	f108 31ff 	add.w	r1, r8, #4294967295
 800dc54:	ab0c      	add	r3, sp, #48	@ 0x30
 800dc56:	9d02      	ldr	r5, [sp, #8]
 800dc58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800dc5c:	f1cb 0018 	rsb	r0, fp, #24
 800dc60:	fa43 f200 	asr.w	r2, r3, r0
 800dc64:	4415      	add	r5, r2
 800dc66:	4082      	lsls	r2, r0
 800dc68:	1a9b      	subs	r3, r3, r2
 800dc6a:	aa0c      	add	r2, sp, #48	@ 0x30
 800dc6c:	9502      	str	r5, [sp, #8]
 800dc6e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800dc72:	f1cb 0217 	rsb	r2, fp, #23
 800dc76:	fa43 f902 	asr.w	r9, r3, r2
 800dc7a:	f1b9 0f00 	cmp.w	r9, #0
 800dc7e:	dd64      	ble.n	800dd4a <__kernel_rem_pio2+0x272>
 800dc80:	9b02      	ldr	r3, [sp, #8]
 800dc82:	2200      	movs	r2, #0
 800dc84:	3301      	adds	r3, #1
 800dc86:	9302      	str	r3, [sp, #8]
 800dc88:	4615      	mov	r5, r2
 800dc8a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800dc8e:	4590      	cmp	r8, r2
 800dc90:	f300 80b8 	bgt.w	800de04 <__kernel_rem_pio2+0x32c>
 800dc94:	f1bb 0f00 	cmp.w	fp, #0
 800dc98:	dd07      	ble.n	800dcaa <__kernel_rem_pio2+0x1d2>
 800dc9a:	f1bb 0f01 	cmp.w	fp, #1
 800dc9e:	f000 80bf 	beq.w	800de20 <__kernel_rem_pio2+0x348>
 800dca2:	f1bb 0f02 	cmp.w	fp, #2
 800dca6:	f000 80c6 	beq.w	800de36 <__kernel_rem_pio2+0x35e>
 800dcaa:	f1b9 0f02 	cmp.w	r9, #2
 800dcae:	d14c      	bne.n	800dd4a <__kernel_rem_pio2+0x272>
 800dcb0:	4632      	mov	r2, r6
 800dcb2:	463b      	mov	r3, r7
 800dcb4:	494e      	ldr	r1, [pc, #312]	@ (800ddf0 <__kernel_rem_pio2+0x318>)
 800dcb6:	2000      	movs	r0, #0
 800dcb8:	f7f2 fb06 	bl	80002c8 <__aeabi_dsub>
 800dcbc:	4606      	mov	r6, r0
 800dcbe:	460f      	mov	r7, r1
 800dcc0:	2d00      	cmp	r5, #0
 800dcc2:	d042      	beq.n	800dd4a <__kernel_rem_pio2+0x272>
 800dcc4:	4658      	mov	r0, fp
 800dcc6:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800dde0 <__kernel_rem_pio2+0x308>
 800dcca:	f000 fa5d 	bl	800e188 <scalbn>
 800dcce:	4630      	mov	r0, r6
 800dcd0:	4639      	mov	r1, r7
 800dcd2:	ec53 2b10 	vmov	r2, r3, d0
 800dcd6:	f7f2 faf7 	bl	80002c8 <__aeabi_dsub>
 800dcda:	4606      	mov	r6, r0
 800dcdc:	460f      	mov	r7, r1
 800dcde:	e034      	b.n	800dd4a <__kernel_rem_pio2+0x272>
 800dce0:	4b44      	ldr	r3, [pc, #272]	@ (800ddf4 <__kernel_rem_pio2+0x31c>)
 800dce2:	2200      	movs	r2, #0
 800dce4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dce8:	f7f2 fca6 	bl	8000638 <__aeabi_dmul>
 800dcec:	f7f2 ff54 	bl	8000b98 <__aeabi_d2iz>
 800dcf0:	f7f2 fc38 	bl	8000564 <__aeabi_i2d>
 800dcf4:	4b40      	ldr	r3, [pc, #256]	@ (800ddf8 <__kernel_rem_pio2+0x320>)
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	4606      	mov	r6, r0
 800dcfa:	460f      	mov	r7, r1
 800dcfc:	f7f2 fc9c 	bl	8000638 <__aeabi_dmul>
 800dd00:	4602      	mov	r2, r0
 800dd02:	460b      	mov	r3, r1
 800dd04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd08:	f7f2 fade 	bl	80002c8 <__aeabi_dsub>
 800dd0c:	f7f2 ff44 	bl	8000b98 <__aeabi_d2iz>
 800dd10:	e9d5 2300 	ldrd	r2, r3, [r5]
 800dd14:	f849 0b04 	str.w	r0, [r9], #4
 800dd18:	4639      	mov	r1, r7
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	f7f2 fad6 	bl	80002cc <__adddf3>
 800dd20:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd28:	e75d      	b.n	800dbe6 <__kernel_rem_pio2+0x10e>
 800dd2a:	d107      	bne.n	800dd3c <__kernel_rem_pio2+0x264>
 800dd2c:	f108 33ff 	add.w	r3, r8, #4294967295
 800dd30:	aa0c      	add	r2, sp, #48	@ 0x30
 800dd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd36:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800dd3a:	e79e      	b.n	800dc7a <__kernel_rem_pio2+0x1a2>
 800dd3c:	4b2f      	ldr	r3, [pc, #188]	@ (800ddfc <__kernel_rem_pio2+0x324>)
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f7f2 ff00 	bl	8000b44 <__aeabi_dcmpge>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d143      	bne.n	800ddd0 <__kernel_rem_pio2+0x2f8>
 800dd48:	4681      	mov	r9, r0
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4630      	mov	r0, r6
 800dd50:	4639      	mov	r1, r7
 800dd52:	f7f2 fed9 	bl	8000b08 <__aeabi_dcmpeq>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	f000 80bf 	beq.w	800deda <__kernel_rem_pio2+0x402>
 800dd5c:	f108 33ff 	add.w	r3, r8, #4294967295
 800dd60:	2200      	movs	r2, #0
 800dd62:	9900      	ldr	r1, [sp, #0]
 800dd64:	428b      	cmp	r3, r1
 800dd66:	da6e      	bge.n	800de46 <__kernel_rem_pio2+0x36e>
 800dd68:	2a00      	cmp	r2, #0
 800dd6a:	f000 8089 	beq.w	800de80 <__kernel_rem_pio2+0x3a8>
 800dd6e:	f108 38ff 	add.w	r8, r8, #4294967295
 800dd72:	ab0c      	add	r3, sp, #48	@ 0x30
 800dd74:	f1ab 0b18 	sub.w	fp, fp, #24
 800dd78:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d0f6      	beq.n	800dd6e <__kernel_rem_pio2+0x296>
 800dd80:	4658      	mov	r0, fp
 800dd82:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800dde0 <__kernel_rem_pio2+0x308>
 800dd86:	f000 f9ff 	bl	800e188 <scalbn>
 800dd8a:	f108 0301 	add.w	r3, r8, #1
 800dd8e:	00da      	lsls	r2, r3, #3
 800dd90:	9205      	str	r2, [sp, #20]
 800dd92:	ec55 4b10 	vmov	r4, r5, d0
 800dd96:	aa70      	add	r2, sp, #448	@ 0x1c0
 800dd98:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800ddf4 <__kernel_rem_pio2+0x31c>
 800dd9c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800dda0:	4646      	mov	r6, r8
 800dda2:	f04f 0a00 	mov.w	sl, #0
 800dda6:	2e00      	cmp	r6, #0
 800dda8:	f280 80cf 	bge.w	800df4a <__kernel_rem_pio2+0x472>
 800ddac:	4644      	mov	r4, r8
 800ddae:	2c00      	cmp	r4, #0
 800ddb0:	f2c0 80fd 	blt.w	800dfae <__kernel_rem_pio2+0x4d6>
 800ddb4:	4b12      	ldr	r3, [pc, #72]	@ (800de00 <__kernel_rem_pio2+0x328>)
 800ddb6:	461f      	mov	r7, r3
 800ddb8:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ddba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ddbe:	9306      	str	r3, [sp, #24]
 800ddc0:	f04f 0a00 	mov.w	sl, #0
 800ddc4:	f04f 0b00 	mov.w	fp, #0
 800ddc8:	2600      	movs	r6, #0
 800ddca:	eba8 0504 	sub.w	r5, r8, r4
 800ddce:	e0e2      	b.n	800df96 <__kernel_rem_pio2+0x4be>
 800ddd0:	f04f 0902 	mov.w	r9, #2
 800ddd4:	e754      	b.n	800dc80 <__kernel_rem_pio2+0x1a8>
 800ddd6:	bf00      	nop
	...
 800dde4:	3ff00000 	.word	0x3ff00000
 800dde8:	0800eaa0 	.word	0x0800eaa0
 800ddec:	40200000 	.word	0x40200000
 800ddf0:	3ff00000 	.word	0x3ff00000
 800ddf4:	3e700000 	.word	0x3e700000
 800ddf8:	41700000 	.word	0x41700000
 800ddfc:	3fe00000 	.word	0x3fe00000
 800de00:	0800ea60 	.word	0x0800ea60
 800de04:	f854 3b04 	ldr.w	r3, [r4], #4
 800de08:	b945      	cbnz	r5, 800de1c <__kernel_rem_pio2+0x344>
 800de0a:	b123      	cbz	r3, 800de16 <__kernel_rem_pio2+0x33e>
 800de0c:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800de10:	f844 3c04 	str.w	r3, [r4, #-4]
 800de14:	2301      	movs	r3, #1
 800de16:	3201      	adds	r2, #1
 800de18:	461d      	mov	r5, r3
 800de1a:	e738      	b.n	800dc8e <__kernel_rem_pio2+0x1b6>
 800de1c:	1acb      	subs	r3, r1, r3
 800de1e:	e7f7      	b.n	800de10 <__kernel_rem_pio2+0x338>
 800de20:	f108 32ff 	add.w	r2, r8, #4294967295
 800de24:	ab0c      	add	r3, sp, #48	@ 0x30
 800de26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de2a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800de2e:	a90c      	add	r1, sp, #48	@ 0x30
 800de30:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800de34:	e739      	b.n	800dcaa <__kernel_rem_pio2+0x1d2>
 800de36:	f108 32ff 	add.w	r2, r8, #4294967295
 800de3a:	ab0c      	add	r3, sp, #48	@ 0x30
 800de3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de40:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800de44:	e7f3      	b.n	800de2e <__kernel_rem_pio2+0x356>
 800de46:	a90c      	add	r1, sp, #48	@ 0x30
 800de48:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800de4c:	3b01      	subs	r3, #1
 800de4e:	430a      	orrs	r2, r1
 800de50:	e787      	b.n	800dd62 <__kernel_rem_pio2+0x28a>
 800de52:	3401      	adds	r4, #1
 800de54:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800de58:	2a00      	cmp	r2, #0
 800de5a:	d0fa      	beq.n	800de52 <__kernel_rem_pio2+0x37a>
 800de5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800de5e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800de62:	eb0d 0503 	add.w	r5, sp, r3
 800de66:	9b06      	ldr	r3, [sp, #24]
 800de68:	aa20      	add	r2, sp, #128	@ 0x80
 800de6a:	4443      	add	r3, r8
 800de6c:	f108 0701 	add.w	r7, r8, #1
 800de70:	3d98      	subs	r5, #152	@ 0x98
 800de72:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800de76:	4444      	add	r4, r8
 800de78:	42bc      	cmp	r4, r7
 800de7a:	da04      	bge.n	800de86 <__kernel_rem_pio2+0x3ae>
 800de7c:	46a0      	mov	r8, r4
 800de7e:	e6a2      	b.n	800dbc6 <__kernel_rem_pio2+0xee>
 800de80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800de82:	2401      	movs	r4, #1
 800de84:	e7e6      	b.n	800de54 <__kernel_rem_pio2+0x37c>
 800de86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de88:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800de8c:	f7f2 fb6a 	bl	8000564 <__aeabi_i2d>
 800de90:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800e158 <__kernel_rem_pio2+0x680>
 800de94:	e8e6 0102 	strd	r0, r1, [r6], #8
 800de98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800de9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dea0:	46b2      	mov	sl, r6
 800dea2:	f04f 0800 	mov.w	r8, #0
 800dea6:	9b05      	ldr	r3, [sp, #20]
 800dea8:	4598      	cmp	r8, r3
 800deaa:	dd05      	ble.n	800deb8 <__kernel_rem_pio2+0x3e0>
 800deac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800deb0:	3701      	adds	r7, #1
 800deb2:	eca5 7b02 	vstmia	r5!, {d7}
 800deb6:	e7df      	b.n	800de78 <__kernel_rem_pio2+0x3a0>
 800deb8:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800debc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800dec0:	f7f2 fbba 	bl	8000638 <__aeabi_dmul>
 800dec4:	4602      	mov	r2, r0
 800dec6:	460b      	mov	r3, r1
 800dec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800decc:	f7f2 f9fe 	bl	80002cc <__adddf3>
 800ded0:	f108 0801 	add.w	r8, r8, #1
 800ded4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ded8:	e7e5      	b.n	800dea6 <__kernel_rem_pio2+0x3ce>
 800deda:	f1cb 0000 	rsb	r0, fp, #0
 800dede:	ec47 6b10 	vmov	d0, r6, r7
 800dee2:	f000 f951 	bl	800e188 <scalbn>
 800dee6:	ec55 4b10 	vmov	r4, r5, d0
 800deea:	4b9d      	ldr	r3, [pc, #628]	@ (800e160 <__kernel_rem_pio2+0x688>)
 800deec:	2200      	movs	r2, #0
 800deee:	4620      	mov	r0, r4
 800def0:	4629      	mov	r1, r5
 800def2:	f7f2 fe27 	bl	8000b44 <__aeabi_dcmpge>
 800def6:	b300      	cbz	r0, 800df3a <__kernel_rem_pio2+0x462>
 800def8:	4b9a      	ldr	r3, [pc, #616]	@ (800e164 <__kernel_rem_pio2+0x68c>)
 800defa:	2200      	movs	r2, #0
 800defc:	4620      	mov	r0, r4
 800defe:	4629      	mov	r1, r5
 800df00:	f7f2 fb9a 	bl	8000638 <__aeabi_dmul>
 800df04:	f7f2 fe48 	bl	8000b98 <__aeabi_d2iz>
 800df08:	4606      	mov	r6, r0
 800df0a:	f7f2 fb2b 	bl	8000564 <__aeabi_i2d>
 800df0e:	4b94      	ldr	r3, [pc, #592]	@ (800e160 <__kernel_rem_pio2+0x688>)
 800df10:	2200      	movs	r2, #0
 800df12:	f7f2 fb91 	bl	8000638 <__aeabi_dmul>
 800df16:	460b      	mov	r3, r1
 800df18:	4602      	mov	r2, r0
 800df1a:	4629      	mov	r1, r5
 800df1c:	4620      	mov	r0, r4
 800df1e:	f7f2 f9d3 	bl	80002c8 <__aeabi_dsub>
 800df22:	f7f2 fe39 	bl	8000b98 <__aeabi_d2iz>
 800df26:	ab0c      	add	r3, sp, #48	@ 0x30
 800df28:	f10b 0b18 	add.w	fp, fp, #24
 800df2c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800df30:	f108 0801 	add.w	r8, r8, #1
 800df34:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800df38:	e722      	b.n	800dd80 <__kernel_rem_pio2+0x2a8>
 800df3a:	4620      	mov	r0, r4
 800df3c:	4629      	mov	r1, r5
 800df3e:	f7f2 fe2b 	bl	8000b98 <__aeabi_d2iz>
 800df42:	ab0c      	add	r3, sp, #48	@ 0x30
 800df44:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800df48:	e71a      	b.n	800dd80 <__kernel_rem_pio2+0x2a8>
 800df4a:	ab0c      	add	r3, sp, #48	@ 0x30
 800df4c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800df50:	f7f2 fb08 	bl	8000564 <__aeabi_i2d>
 800df54:	4622      	mov	r2, r4
 800df56:	462b      	mov	r3, r5
 800df58:	f7f2 fb6e 	bl	8000638 <__aeabi_dmul>
 800df5c:	4652      	mov	r2, sl
 800df5e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800df62:	465b      	mov	r3, fp
 800df64:	4620      	mov	r0, r4
 800df66:	4629      	mov	r1, r5
 800df68:	f7f2 fb66 	bl	8000638 <__aeabi_dmul>
 800df6c:	3e01      	subs	r6, #1
 800df6e:	4604      	mov	r4, r0
 800df70:	460d      	mov	r5, r1
 800df72:	e718      	b.n	800dda6 <__kernel_rem_pio2+0x2ce>
 800df74:	9906      	ldr	r1, [sp, #24]
 800df76:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800df7a:	9106      	str	r1, [sp, #24]
 800df7c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800df80:	f7f2 fb5a 	bl	8000638 <__aeabi_dmul>
 800df84:	4602      	mov	r2, r0
 800df86:	460b      	mov	r3, r1
 800df88:	4650      	mov	r0, sl
 800df8a:	4659      	mov	r1, fp
 800df8c:	f7f2 f99e 	bl	80002cc <__adddf3>
 800df90:	3601      	adds	r6, #1
 800df92:	4682      	mov	sl, r0
 800df94:	468b      	mov	fp, r1
 800df96:	9b00      	ldr	r3, [sp, #0]
 800df98:	429e      	cmp	r6, r3
 800df9a:	dc01      	bgt.n	800dfa0 <__kernel_rem_pio2+0x4c8>
 800df9c:	42b5      	cmp	r5, r6
 800df9e:	dae9      	bge.n	800df74 <__kernel_rem_pio2+0x49c>
 800dfa0:	ab48      	add	r3, sp, #288	@ 0x120
 800dfa2:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dfa6:	e9c5 ab00 	strd	sl, fp, [r5]
 800dfaa:	3c01      	subs	r4, #1
 800dfac:	e6ff      	b.n	800ddae <__kernel_rem_pio2+0x2d6>
 800dfae:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dfb0:	2b02      	cmp	r3, #2
 800dfb2:	dc0b      	bgt.n	800dfcc <__kernel_rem_pio2+0x4f4>
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	dc39      	bgt.n	800e02c <__kernel_rem_pio2+0x554>
 800dfb8:	d05d      	beq.n	800e076 <__kernel_rem_pio2+0x59e>
 800dfba:	9b02      	ldr	r3, [sp, #8]
 800dfbc:	f003 0007 	and.w	r0, r3, #7
 800dfc0:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800dfc4:	ecbd 8b02 	vpop	{d8}
 800dfc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfcc:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800dfce:	2b03      	cmp	r3, #3
 800dfd0:	d1f3      	bne.n	800dfba <__kernel_rem_pio2+0x4e2>
 800dfd2:	9b05      	ldr	r3, [sp, #20]
 800dfd4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800dfd8:	eb0d 0403 	add.w	r4, sp, r3
 800dfdc:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800dfe0:	4625      	mov	r5, r4
 800dfe2:	46c2      	mov	sl, r8
 800dfe4:	f1ba 0f00 	cmp.w	sl, #0
 800dfe8:	f1a5 0508 	sub.w	r5, r5, #8
 800dfec:	dc6b      	bgt.n	800e0c6 <__kernel_rem_pio2+0x5ee>
 800dfee:	4645      	mov	r5, r8
 800dff0:	2d01      	cmp	r5, #1
 800dff2:	f1a4 0408 	sub.w	r4, r4, #8
 800dff6:	f300 8087 	bgt.w	800e108 <__kernel_rem_pio2+0x630>
 800dffa:	9c05      	ldr	r4, [sp, #20]
 800dffc:	ab48      	add	r3, sp, #288	@ 0x120
 800dffe:	441c      	add	r4, r3
 800e000:	2000      	movs	r0, #0
 800e002:	2100      	movs	r1, #0
 800e004:	f1b8 0f01 	cmp.w	r8, #1
 800e008:	f300 809c 	bgt.w	800e144 <__kernel_rem_pio2+0x66c>
 800e00c:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800e010:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800e014:	f1b9 0f00 	cmp.w	r9, #0
 800e018:	f040 80a6 	bne.w	800e168 <__kernel_rem_pio2+0x690>
 800e01c:	9b04      	ldr	r3, [sp, #16]
 800e01e:	e9c3 7800 	strd	r7, r8, [r3]
 800e022:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e026:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e02a:	e7c6      	b.n	800dfba <__kernel_rem_pio2+0x4e2>
 800e02c:	9d05      	ldr	r5, [sp, #20]
 800e02e:	ab48      	add	r3, sp, #288	@ 0x120
 800e030:	441d      	add	r5, r3
 800e032:	4644      	mov	r4, r8
 800e034:	2000      	movs	r0, #0
 800e036:	2100      	movs	r1, #0
 800e038:	2c00      	cmp	r4, #0
 800e03a:	da35      	bge.n	800e0a8 <__kernel_rem_pio2+0x5d0>
 800e03c:	f1b9 0f00 	cmp.w	r9, #0
 800e040:	d038      	beq.n	800e0b4 <__kernel_rem_pio2+0x5dc>
 800e042:	4602      	mov	r2, r0
 800e044:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e048:	9c04      	ldr	r4, [sp, #16]
 800e04a:	e9c4 2300 	strd	r2, r3, [r4]
 800e04e:	4602      	mov	r2, r0
 800e050:	460b      	mov	r3, r1
 800e052:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800e056:	f7f2 f937 	bl	80002c8 <__aeabi_dsub>
 800e05a:	ad4a      	add	r5, sp, #296	@ 0x128
 800e05c:	2401      	movs	r4, #1
 800e05e:	45a0      	cmp	r8, r4
 800e060:	da2b      	bge.n	800e0ba <__kernel_rem_pio2+0x5e2>
 800e062:	f1b9 0f00 	cmp.w	r9, #0
 800e066:	d002      	beq.n	800e06e <__kernel_rem_pio2+0x596>
 800e068:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e06c:	4619      	mov	r1, r3
 800e06e:	9b04      	ldr	r3, [sp, #16]
 800e070:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e074:	e7a1      	b.n	800dfba <__kernel_rem_pio2+0x4e2>
 800e076:	9c05      	ldr	r4, [sp, #20]
 800e078:	ab48      	add	r3, sp, #288	@ 0x120
 800e07a:	441c      	add	r4, r3
 800e07c:	2000      	movs	r0, #0
 800e07e:	2100      	movs	r1, #0
 800e080:	f1b8 0f00 	cmp.w	r8, #0
 800e084:	da09      	bge.n	800e09a <__kernel_rem_pio2+0x5c2>
 800e086:	f1b9 0f00 	cmp.w	r9, #0
 800e08a:	d002      	beq.n	800e092 <__kernel_rem_pio2+0x5ba>
 800e08c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e090:	4619      	mov	r1, r3
 800e092:	9b04      	ldr	r3, [sp, #16]
 800e094:	e9c3 0100 	strd	r0, r1, [r3]
 800e098:	e78f      	b.n	800dfba <__kernel_rem_pio2+0x4e2>
 800e09a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e09e:	f7f2 f915 	bl	80002cc <__adddf3>
 800e0a2:	f108 38ff 	add.w	r8, r8, #4294967295
 800e0a6:	e7eb      	b.n	800e080 <__kernel_rem_pio2+0x5a8>
 800e0a8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800e0ac:	f7f2 f90e 	bl	80002cc <__adddf3>
 800e0b0:	3c01      	subs	r4, #1
 800e0b2:	e7c1      	b.n	800e038 <__kernel_rem_pio2+0x560>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	e7c6      	b.n	800e048 <__kernel_rem_pio2+0x570>
 800e0ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800e0be:	f7f2 f905 	bl	80002cc <__adddf3>
 800e0c2:	3401      	adds	r4, #1
 800e0c4:	e7cb      	b.n	800e05e <__kernel_rem_pio2+0x586>
 800e0c6:	ed95 7b00 	vldr	d7, [r5]
 800e0ca:	ed8d 7b00 	vstr	d7, [sp]
 800e0ce:	ed95 7b02 	vldr	d7, [r5, #8]
 800e0d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0d6:	ec53 2b17 	vmov	r2, r3, d7
 800e0da:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e0de:	f7f2 f8f5 	bl	80002cc <__adddf3>
 800e0e2:	4602      	mov	r2, r0
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460f      	mov	r7, r1
 800e0ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0ee:	f7f2 f8eb 	bl	80002c8 <__aeabi_dsub>
 800e0f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e0f6:	f7f2 f8e9 	bl	80002cc <__adddf3>
 800e0fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800e102:	e9c5 6700 	strd	r6, r7, [r5]
 800e106:	e76d      	b.n	800dfe4 <__kernel_rem_pio2+0x50c>
 800e108:	ed94 7b00 	vldr	d7, [r4]
 800e10c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800e110:	ec51 0b17 	vmov	r0, r1, d7
 800e114:	4652      	mov	r2, sl
 800e116:	465b      	mov	r3, fp
 800e118:	ed8d 7b00 	vstr	d7, [sp]
 800e11c:	f7f2 f8d6 	bl	80002cc <__adddf3>
 800e120:	4602      	mov	r2, r0
 800e122:	460b      	mov	r3, r1
 800e124:	4606      	mov	r6, r0
 800e126:	460f      	mov	r7, r1
 800e128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e12c:	f7f2 f8cc 	bl	80002c8 <__aeabi_dsub>
 800e130:	4652      	mov	r2, sl
 800e132:	465b      	mov	r3, fp
 800e134:	f7f2 f8ca 	bl	80002cc <__adddf3>
 800e138:	3d01      	subs	r5, #1
 800e13a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e13e:	e9c4 6700 	strd	r6, r7, [r4]
 800e142:	e755      	b.n	800dff0 <__kernel_rem_pio2+0x518>
 800e144:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e148:	f7f2 f8c0 	bl	80002cc <__adddf3>
 800e14c:	f108 38ff 	add.w	r8, r8, #4294967295
 800e150:	e758      	b.n	800e004 <__kernel_rem_pio2+0x52c>
 800e152:	bf00      	nop
 800e154:	f3af 8000 	nop.w
	...
 800e160:	41700000 	.word	0x41700000
 800e164:	3e700000 	.word	0x3e700000
 800e168:	9b04      	ldr	r3, [sp, #16]
 800e16a:	9a04      	ldr	r2, [sp, #16]
 800e16c:	601f      	str	r7, [r3, #0]
 800e16e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800e172:	605c      	str	r4, [r3, #4]
 800e174:	609d      	str	r5, [r3, #8]
 800e176:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e17a:	60d3      	str	r3, [r2, #12]
 800e17c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e180:	6110      	str	r0, [r2, #16]
 800e182:	6153      	str	r3, [r2, #20]
 800e184:	e719      	b.n	800dfba <__kernel_rem_pio2+0x4e2>
 800e186:	bf00      	nop

0800e188 <scalbn>:
 800e188:	b570      	push	{r4, r5, r6, lr}
 800e18a:	ec55 4b10 	vmov	r4, r5, d0
 800e18e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e192:	4606      	mov	r6, r0
 800e194:	462b      	mov	r3, r5
 800e196:	b991      	cbnz	r1, 800e1be <scalbn+0x36>
 800e198:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e19c:	4323      	orrs	r3, r4
 800e19e:	d03d      	beq.n	800e21c <scalbn+0x94>
 800e1a0:	4b35      	ldr	r3, [pc, #212]	@ (800e278 <scalbn+0xf0>)
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	f7f2 fa46 	bl	8000638 <__aeabi_dmul>
 800e1ac:	4b33      	ldr	r3, [pc, #204]	@ (800e27c <scalbn+0xf4>)
 800e1ae:	429e      	cmp	r6, r3
 800e1b0:	4604      	mov	r4, r0
 800e1b2:	460d      	mov	r5, r1
 800e1b4:	da0f      	bge.n	800e1d6 <scalbn+0x4e>
 800e1b6:	a328      	add	r3, pc, #160	@ (adr r3, 800e258 <scalbn+0xd0>)
 800e1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1bc:	e01e      	b.n	800e1fc <scalbn+0x74>
 800e1be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e1c2:	4291      	cmp	r1, r2
 800e1c4:	d10b      	bne.n	800e1de <scalbn+0x56>
 800e1c6:	4622      	mov	r2, r4
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	4629      	mov	r1, r5
 800e1cc:	f7f2 f87e 	bl	80002cc <__adddf3>
 800e1d0:	4604      	mov	r4, r0
 800e1d2:	460d      	mov	r5, r1
 800e1d4:	e022      	b.n	800e21c <scalbn+0x94>
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e1dc:	3936      	subs	r1, #54	@ 0x36
 800e1de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e1e2:	4296      	cmp	r6, r2
 800e1e4:	dd0d      	ble.n	800e202 <scalbn+0x7a>
 800e1e6:	2d00      	cmp	r5, #0
 800e1e8:	a11d      	add	r1, pc, #116	@ (adr r1, 800e260 <scalbn+0xd8>)
 800e1ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1ee:	da02      	bge.n	800e1f6 <scalbn+0x6e>
 800e1f0:	a11d      	add	r1, pc, #116	@ (adr r1, 800e268 <scalbn+0xe0>)
 800e1f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e1f6:	a31a      	add	r3, pc, #104	@ (adr r3, 800e260 <scalbn+0xd8>)
 800e1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fc:	f7f2 fa1c 	bl	8000638 <__aeabi_dmul>
 800e200:	e7e6      	b.n	800e1d0 <scalbn+0x48>
 800e202:	1872      	adds	r2, r6, r1
 800e204:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e208:	428a      	cmp	r2, r1
 800e20a:	dcec      	bgt.n	800e1e6 <scalbn+0x5e>
 800e20c:	2a00      	cmp	r2, #0
 800e20e:	dd08      	ble.n	800e222 <scalbn+0x9a>
 800e210:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e214:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e218:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e21c:	ec45 4b10 	vmov	d0, r4, r5
 800e220:	bd70      	pop	{r4, r5, r6, pc}
 800e222:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e226:	da08      	bge.n	800e23a <scalbn+0xb2>
 800e228:	2d00      	cmp	r5, #0
 800e22a:	a10b      	add	r1, pc, #44	@ (adr r1, 800e258 <scalbn+0xd0>)
 800e22c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e230:	dac1      	bge.n	800e1b6 <scalbn+0x2e>
 800e232:	a10f      	add	r1, pc, #60	@ (adr r1, 800e270 <scalbn+0xe8>)
 800e234:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e238:	e7bd      	b.n	800e1b6 <scalbn+0x2e>
 800e23a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e23e:	3236      	adds	r2, #54	@ 0x36
 800e240:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e244:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e248:	4620      	mov	r0, r4
 800e24a:	4b0d      	ldr	r3, [pc, #52]	@ (800e280 <scalbn+0xf8>)
 800e24c:	4629      	mov	r1, r5
 800e24e:	2200      	movs	r2, #0
 800e250:	e7d4      	b.n	800e1fc <scalbn+0x74>
 800e252:	bf00      	nop
 800e254:	f3af 8000 	nop.w
 800e258:	c2f8f359 	.word	0xc2f8f359
 800e25c:	01a56e1f 	.word	0x01a56e1f
 800e260:	8800759c 	.word	0x8800759c
 800e264:	7e37e43c 	.word	0x7e37e43c
 800e268:	8800759c 	.word	0x8800759c
 800e26c:	fe37e43c 	.word	0xfe37e43c
 800e270:	c2f8f359 	.word	0xc2f8f359
 800e274:	81a56e1f 	.word	0x81a56e1f
 800e278:	43500000 	.word	0x43500000
 800e27c:	ffff3cb0 	.word	0xffff3cb0
 800e280:	3c900000 	.word	0x3c900000
 800e284:	00000000 	.word	0x00000000

0800e288 <floor>:
 800e288:	ec51 0b10 	vmov	r0, r1, d0
 800e28c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e294:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800e298:	2e13      	cmp	r6, #19
 800e29a:	460c      	mov	r4, r1
 800e29c:	4605      	mov	r5, r0
 800e29e:	4680      	mov	r8, r0
 800e2a0:	dc34      	bgt.n	800e30c <floor+0x84>
 800e2a2:	2e00      	cmp	r6, #0
 800e2a4:	da17      	bge.n	800e2d6 <floor+0x4e>
 800e2a6:	a332      	add	r3, pc, #200	@ (adr r3, 800e370 <floor+0xe8>)
 800e2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ac:	f7f2 f80e 	bl	80002cc <__adddf3>
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	f7f2 fc50 	bl	8000b58 <__aeabi_dcmpgt>
 800e2b8:	b150      	cbz	r0, 800e2d0 <floor+0x48>
 800e2ba:	2c00      	cmp	r4, #0
 800e2bc:	da55      	bge.n	800e36a <floor+0xe2>
 800e2be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800e2c2:	432c      	orrs	r4, r5
 800e2c4:	2500      	movs	r5, #0
 800e2c6:	42ac      	cmp	r4, r5
 800e2c8:	4c2b      	ldr	r4, [pc, #172]	@ (800e378 <floor+0xf0>)
 800e2ca:	bf08      	it	eq
 800e2cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	e023      	b.n	800e31e <floor+0x96>
 800e2d6:	4f29      	ldr	r7, [pc, #164]	@ (800e37c <floor+0xf4>)
 800e2d8:	4137      	asrs	r7, r6
 800e2da:	ea01 0307 	and.w	r3, r1, r7
 800e2de:	4303      	orrs	r3, r0
 800e2e0:	d01d      	beq.n	800e31e <floor+0x96>
 800e2e2:	a323      	add	r3, pc, #140	@ (adr r3, 800e370 <floor+0xe8>)
 800e2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e8:	f7f1 fff0 	bl	80002cc <__adddf3>
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f7f2 fc32 	bl	8000b58 <__aeabi_dcmpgt>
 800e2f4:	2800      	cmp	r0, #0
 800e2f6:	d0eb      	beq.n	800e2d0 <floor+0x48>
 800e2f8:	2c00      	cmp	r4, #0
 800e2fa:	bfbe      	ittt	lt
 800e2fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800e300:	4133      	asrlt	r3, r6
 800e302:	18e4      	addlt	r4, r4, r3
 800e304:	ea24 0407 	bic.w	r4, r4, r7
 800e308:	2500      	movs	r5, #0
 800e30a:	e7e1      	b.n	800e2d0 <floor+0x48>
 800e30c:	2e33      	cmp	r6, #51	@ 0x33
 800e30e:	dd0a      	ble.n	800e326 <floor+0x9e>
 800e310:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800e314:	d103      	bne.n	800e31e <floor+0x96>
 800e316:	4602      	mov	r2, r0
 800e318:	460b      	mov	r3, r1
 800e31a:	f7f1 ffd7 	bl	80002cc <__adddf3>
 800e31e:	ec41 0b10 	vmov	d0, r0, r1
 800e322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e326:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800e32a:	f04f 37ff 	mov.w	r7, #4294967295
 800e32e:	40df      	lsrs	r7, r3
 800e330:	4207      	tst	r7, r0
 800e332:	d0f4      	beq.n	800e31e <floor+0x96>
 800e334:	a30e      	add	r3, pc, #56	@ (adr r3, 800e370 <floor+0xe8>)
 800e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33a:	f7f1 ffc7 	bl	80002cc <__adddf3>
 800e33e:	2200      	movs	r2, #0
 800e340:	2300      	movs	r3, #0
 800e342:	f7f2 fc09 	bl	8000b58 <__aeabi_dcmpgt>
 800e346:	2800      	cmp	r0, #0
 800e348:	d0c2      	beq.n	800e2d0 <floor+0x48>
 800e34a:	2c00      	cmp	r4, #0
 800e34c:	da0a      	bge.n	800e364 <floor+0xdc>
 800e34e:	2e14      	cmp	r6, #20
 800e350:	d101      	bne.n	800e356 <floor+0xce>
 800e352:	3401      	adds	r4, #1
 800e354:	e006      	b.n	800e364 <floor+0xdc>
 800e356:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800e35a:	2301      	movs	r3, #1
 800e35c:	40b3      	lsls	r3, r6
 800e35e:	441d      	add	r5, r3
 800e360:	4545      	cmp	r5, r8
 800e362:	d3f6      	bcc.n	800e352 <floor+0xca>
 800e364:	ea25 0507 	bic.w	r5, r5, r7
 800e368:	e7b2      	b.n	800e2d0 <floor+0x48>
 800e36a:	2500      	movs	r5, #0
 800e36c:	462c      	mov	r4, r5
 800e36e:	e7af      	b.n	800e2d0 <floor+0x48>
 800e370:	8800759c 	.word	0x8800759c
 800e374:	7e37e43c 	.word	0x7e37e43c
 800e378:	bff00000 	.word	0xbff00000
 800e37c:	000fffff 	.word	0x000fffff

0800e380 <_init>:
 800e380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e382:	bf00      	nop
 800e384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e386:	bc08      	pop	{r3}
 800e388:	469e      	mov	lr, r3
 800e38a:	4770      	bx	lr

0800e38c <_fini>:
 800e38c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38e:	bf00      	nop
 800e390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e392:	bc08      	pop	{r3}
 800e394:	469e      	mov	lr, r3
 800e396:	4770      	bx	lr
