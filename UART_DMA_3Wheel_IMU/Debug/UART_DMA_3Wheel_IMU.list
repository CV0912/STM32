
UART_DMA_3Wheel_IMU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b578  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000680  0800b748  0800b748  0000c748  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bdc8  0800bdc8  0000d1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bdc8  0800bdc8  0000cdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdd0  0800bdd0  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdd0  0800bdd0  0000cdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdd4  0800bdd4  0000cdd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800bdd8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001f8  0800bfd0  0000d1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800bfd0  0000d604  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011c6b  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002611  00000000  00000000  0001ee93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000214a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d48  00000000  00000000  00022578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023abc  00000000  00000000  000232c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015085  00000000  00000000  00046d7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7137  00000000  00000000  0005be01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00132f38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b9c  00000000  00000000  00132f7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00138b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b730 	.word	0x0800b730

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800b730 	.word	0x0800b730

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <BNO055_Read>:
    uint8_t buf[2] = {reg, data};
    return HAL_I2C_Master_Transmit(hi2c, BNO055_I2C_ADDR, buf, 2, HAL_MAX_DELAY);
}

static HAL_StatusTypeDef BNO055_Read(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *data, uint8_t len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af02      	add	r7, sp, #8
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	607a      	str	r2, [r7, #4]
 8000f82:	461a      	mov	r2, r3
 8000f84:	460b      	mov	r3, r1
 8000f86:	72fb      	strb	r3, [r7, #11]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	72bb      	strb	r3, [r7, #10]
    HAL_StatusTypeDef status;

    status = HAL_I2C_Master_Transmit(hi2c, BNO055_I2C_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000f8c:	f107 020b 	add.w	r2, r7, #11
 8000f90:	f04f 33ff 	mov.w	r3, #4294967295
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	2150      	movs	r1, #80	@ 0x50
 8000f9a:	68f8      	ldr	r0, [r7, #12]
 8000f9c:	f002 fd80 	bl	8003aa0 <HAL_I2C_Master_Transmit>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 8000fa4:	7dfb      	ldrb	r3, [r7, #23]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <BNO055_Read+0x36>
 8000faa:	7dfb      	ldrb	r3, [r7, #23]
 8000fac:	e00a      	b.n	8000fc4 <BNO055_Read+0x4c>

    return HAL_I2C_Master_Receive(hi2c, BNO055_I2C_ADDR, data, len, HAL_MAX_DELAY);
 8000fae:	7abb      	ldrb	r3, [r7, #10]
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb6:	9200      	str	r2, [sp, #0]
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	2150      	movs	r1, #80	@ 0x50
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f002 fe6d 	bl	8003c9c <HAL_I2C_Master_Receive>
 8000fc2:	4603      	mov	r3, r0
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <BNO055_GetAccelerometer>:

    return HAL_OK;
}

HAL_StatusTypeDef BNO055_GetAccelerometer(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_ACCEL_DATA_X_LSB, buf, 6);
 8000fd6:	f107 0208 	add.w	r2, r7, #8
 8000fda:	2306      	movs	r3, #6
 8000fdc:	2108      	movs	r1, #8
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffca 	bl	8000f78 <BNO055_Read>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8000fe8:	7bfb      	ldrb	r3, [r7, #15]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <BNO055_GetAccelerometer+0x26>
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	e036      	b.n	8001060 <BNO055_GetAccelerometer+0x94>

    // Convert to m/s^2 (BNO055 accelerometer LSB = 1/100 m/s^2)
    data->accel_x = (int16_t)((buf[1] << 8) | buf[0]) / 100.0f;
 8000ff2:	7a7b      	ldrb	r3, [r7, #9]
 8000ff4:	021b      	lsls	r3, r3, #8
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	7a3b      	ldrb	r3, [r7, #8]
 8000ffa:	b21b      	sxth	r3, r3
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	b21b      	sxth	r3, r3
 8001000:	ee07 3a90 	vmov	s15, r3
 8001004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001008:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001068 <BNO055_GetAccelerometer+0x9c>
 800100c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	edc3 7a00 	vstr	s15, [r3]
    data->accel_y = (int16_t)((buf[3] << 8) | buf[2]) / 100.0f;
 8001016:	7afb      	ldrb	r3, [r7, #11]
 8001018:	021b      	lsls	r3, r3, #8
 800101a:	b21a      	sxth	r2, r3
 800101c:	7abb      	ldrb	r3, [r7, #10]
 800101e:	b21b      	sxth	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b21b      	sxth	r3, r3
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102c:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001068 <BNO055_GetAccelerometer+0x9c>
 8001030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	edc3 7a01 	vstr	s15, [r3, #4]
    data->accel_z = (int16_t)((buf[5] << 8) | buf[4]) / 100.0f;
 800103a:	7b7b      	ldrb	r3, [r7, #13]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	7b3b      	ldrb	r3, [r7, #12]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21b      	sxth	r3, r3
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001050:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001068 <BNO055_GetAccelerometer+0x9c>
 8001054:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	edc3 7a02 	vstr	s15, [r3, #8]

    return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	42c80000 	.word	0x42c80000

0800106c <BNO055_GetGyroscope>:

HAL_StatusTypeDef BNO055_GetGyroscope(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_GYRO_DATA_X_LSB, buf, 6);
 8001076:	f107 0208 	add.w	r2, r7, #8
 800107a:	2306      	movs	r3, #6
 800107c:	2114      	movs	r1, #20
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff7a 	bl	8000f78 <BNO055_Read>
 8001084:	4603      	mov	r3, r0
 8001086:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <BNO055_GetGyroscope+0x26>
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	e036      	b.n	8001100 <BNO055_GetGyroscope+0x94>

    // Convert to degrees/s (BNO055 gyroscope LSB = 1/16 degree/s)
    data->gyro_x = (int16_t)((buf[1] << 8) | buf[0]) / 16.0f;
 8001092:	7a7b      	ldrb	r3, [r7, #9]
 8001094:	021b      	lsls	r3, r3, #8
 8001096:	b21a      	sxth	r2, r3
 8001098:	7a3b      	ldrb	r3, [r7, #8]
 800109a:	b21b      	sxth	r3, r3
 800109c:	4313      	orrs	r3, r2
 800109e:	b21b      	sxth	r3, r3
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a8:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	edc3 7a03 	vstr	s15, [r3, #12]
    data->gyro_y = (int16_t)((buf[3] << 8) | buf[2]) / 16.0f;
 80010b6:	7afb      	ldrb	r3, [r7, #11]
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7abb      	ldrb	r3, [r7, #10]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	ee07 3a90 	vmov	s15, r3
 80010c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010cc:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80010d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	edc3 7a04 	vstr	s15, [r3, #16]
    data->gyro_z = (int16_t)((buf[5] << 8) | buf[4]) / 16.0f;
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	7b3b      	ldrb	r3, [r7, #12]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	ee07 3a90 	vmov	s15, r3
 80010ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010f0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80010f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	edc3 7a05 	vstr	s15, [r3, #20]

    return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <BNO055_GetEulerAngles>:

HAL_StatusTypeDef BNO055_GetEulerAngles(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_EULER_H_LSB, buf, 6);
 8001112:	f107 0208 	add.w	r2, r7, #8
 8001116:	2306      	movs	r3, #6
 8001118:	211a      	movs	r1, #26
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff2c 	bl	8000f78 <BNO055_Read>
 8001120:	4603      	mov	r3, r0
 8001122:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <BNO055_GetEulerAngles+0x26>
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	e036      	b.n	800119c <BNO055_GetEulerAngles+0x94>

    // Convert to degrees (BNO055 euler angles are in degrees * 16)
    data->euler_h = (int16_t)((buf[1] << 8) | buf[0]) / 16.0f;
 800112e:	7a7b      	ldrb	r3, [r7, #9]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7a3b      	ldrb	r3, [r7, #8]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21b      	sxth	r3, r3
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001144:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001148:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	edc3 7a06 	vstr	s15, [r3, #24]
    data->euler_r = (int16_t)((buf[3] << 8) | buf[2]) / 16.0f;
 8001152:	7afb      	ldrb	r3, [r7, #11]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	7abb      	ldrb	r3, [r7, #10]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21b      	sxth	r3, r3
 8001160:	ee07 3a90 	vmov	s15, r3
 8001164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001168:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800116c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	edc3 7a07 	vstr	s15, [r3, #28]
    data->euler_p = (int16_t)((buf[5] << 8) | buf[4]) / 16.0f;
 8001176:	7b7b      	ldrb	r3, [r7, #13]
 8001178:	021b      	lsls	r3, r3, #8
 800117a:	b21a      	sxth	r2, r3
 800117c:	7b3b      	ldrb	r3, [r7, #12]
 800117e:	b21b      	sxth	r3, r3
 8001180:	4313      	orrs	r3, r2
 8001182:	b21b      	sxth	r3, r3
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800118c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8001190:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	edc3 7a08 	vstr	s15, [r3, #32]

    return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <BNO055_GetQuaternion>:

HAL_StatusTypeDef BNO055_GetQuaternion(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
    uint8_t buf[8];
    HAL_StatusTypeDef status;

    status = BNO055_Read(hi2c, BNO055_QUATERNION_DATA_W_LSB, buf, 8);
 80011ae:	f107 020c 	add.w	r2, r7, #12
 80011b2:	2308      	movs	r3, #8
 80011b4:	2120      	movs	r1, #32
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fede 	bl	8000f78 <BNO055_Read>
 80011bc:	4603      	mov	r3, r0
 80011be:	75fb      	strb	r3, [r7, #23]
    if (status != HAL_OK) return status;
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <BNO055_GetQuaternion+0x26>
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
 80011c8:	e048      	b.n	800125c <BNO055_GetQuaternion+0xb8>

    // Convert to float (BNO055 quaternion values are scaled by 2^14)
    data->quat_w = (int16_t)((buf[1] << 8) | buf[0]) / 16384.0f;
 80011ca:	7b7b      	ldrb	r3, [r7, #13]
 80011cc:	021b      	lsls	r3, r3, #8
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7b3b      	ldrb	r3, [r7, #12]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	4313      	orrs	r3, r2
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	ee07 3a90 	vmov	s15, r3
 80011dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011e0:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8001264 <BNO055_GetQuaternion+0xc0>
 80011e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    data->quat_x = (int16_t)((buf[3] << 8) | buf[2]) / 16384.0f;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	7bbb      	ldrb	r3, [r7, #14]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	4313      	orrs	r3, r2
 80011fa:	b21b      	sxth	r3, r3
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001204:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001264 <BNO055_GetQuaternion+0xc0>
 8001208:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    data->quat_y = (int16_t)((buf[5] << 8) | buf[4]) / 16384.0f;
 8001212:	7c7b      	ldrb	r3, [r7, #17]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	b21a      	sxth	r2, r3
 8001218:	7c3b      	ldrb	r3, [r7, #16]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	b21b      	sxth	r3, r3
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001228:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001264 <BNO055_GetQuaternion+0xc0>
 800122c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    data->quat_z = (int16_t)((buf[7] << 8) | buf[6]) / 16384.0f;
 8001236:	7cfb      	ldrb	r3, [r7, #19]
 8001238:	021b      	lsls	r3, r3, #8
 800123a:	b21a      	sxth	r2, r3
 800123c:	7cbb      	ldrb	r3, [r7, #18]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	b21b      	sxth	r3, r3
 8001244:	ee07 3a90 	vmov	s15, r3
 8001248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800124c:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001264 <BNO055_GetQuaternion+0xc0>
 8001250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

    return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	46800000 	.word	0x46800000

08001268 <BNO055_GetAllData>:

HAL_StatusTypeDef BNO055_GetAllData(I2C_HandleTypeDef *hi2c, BNO055_Data_t *data)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef status;

    status = BNO055_GetAccelerometer(hi2c, data);
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff fea9 	bl	8000fcc <BNO055_GetAccelerometer>
 800127a:	4603      	mov	r3, r0
 800127c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <BNO055_GetAllData+0x20>
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	e021      	b.n	80012cc <BNO055_GetAllData+0x64>

    status = BNO055_GetGyroscope(hi2c, data);
 8001288:	6839      	ldr	r1, [r7, #0]
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff feee 	bl	800106c <BNO055_GetGyroscope>
 8001290:	4603      	mov	r3, r0
 8001292:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <BNO055_GetAllData+0x36>
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	e016      	b.n	80012cc <BNO055_GetAllData+0x64>

    status = BNO055_GetEulerAngles(hi2c, data);
 800129e:	6839      	ldr	r1, [r7, #0]
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff31 	bl	8001108 <BNO055_GetEulerAngles>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <BNO055_GetAllData+0x4c>
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	e00b      	b.n	80012cc <BNO055_GetAllData+0x64>

    status = BNO055_GetQuaternion(hi2c, data);
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ff74 	bl	80011a4 <BNO055_GetQuaternion>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <BNO055_GetAllData+0x62>
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	e000      	b.n	80012cc <BNO055_GetAllData+0x64>

    return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <HAL_UART_RxCpltCallback>:
int32_t lx, ly, rx, ry, cro, squ, tri, cir, up, down, left, right, ll1, rr1,
		ll2, rr2, rL, rR;
int deadzone = 50;
int l0 = 310;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80012dc:	2210      	movs	r2, #16
 80012de:	4904      	ldr	r1, [pc, #16]	@ (80012f0 <HAL_UART_RxCpltCallback+0x1c>)
 80012e0:	4804      	ldr	r0, [pc, #16]	@ (80012f4 <HAL_UART_RxCpltCallback+0x20>)
 80012e2:	f005 f83a 	bl	800635a <HAL_UART_Receive_DMA>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000448 	.word	0x20000448
 80012f4:	200002f8 	.word	0x200002f8

080012f8 <constrain>:
int constrain(int value, int min_val, int max_val) {
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	60f8      	str	r0, [r7, #12]
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
	if (value < min_val)
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	429a      	cmp	r2, r3
 800130a:	da01      	bge.n	8001310 <constrain+0x18>
		return min_val;
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	e006      	b.n	800131e <constrain+0x26>
	if (value > max_val)
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	429a      	cmp	r2, r3
 8001316:	dd01      	ble.n	800131c <constrain+0x24>
		return max_val;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	e000      	b.n	800131e <constrain+0x26>
	return value;
 800131c:	68fb      	ldr	r3, [r7, #12]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3714      	adds	r7, #20
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	0000      	movs	r0, r0
 800132c:	0000      	movs	r0, r0
	...

08001330 <compute3wheel>:
void compute3wheel() {
 8001330:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001334:	b08a      	sub	sp, #40	@ 0x28
 8001336:	af00      	add	r7, sp, #0
	// Calculate joystick-based velocities
	const double theta = -30 * pi / 180;
 8001338:	a397      	add	r3, pc, #604	@ (adr r3, 8001598 <compute3wheel+0x268>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double lx_rotated = lx * cos(theta) - ly * sin(theta);
 8001342:	4b8b      	ldr	r3, [pc, #556]	@ (8001570 <compute3wheel+0x240>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f90c 	bl	8000564 <__aeabi_i2d>
 800134c:	4604      	mov	r4, r0
 800134e:	460d      	mov	r5, r1
 8001350:	ed97 0b08 	vldr	d0, [r7, #32]
 8001354:	f008 fe2c 	bl	8009fb0 <cos>
 8001358:	ec53 2b10 	vmov	r2, r3, d0
 800135c:	4620      	mov	r0, r4
 800135e:	4629      	mov	r1, r5
 8001360:	f7ff f96a 	bl	8000638 <__aeabi_dmul>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4690      	mov	r8, r2
 800136a:	4699      	mov	r9, r3
 800136c:	4b81      	ldr	r3, [pc, #516]	@ (8001574 <compute3wheel+0x244>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff f8f7 	bl	8000564 <__aeabi_i2d>
 8001376:	4604      	mov	r4, r0
 8001378:	460d      	mov	r5, r1
 800137a:	ed97 0b08 	vldr	d0, [r7, #32]
 800137e:	f008 fe6b 	bl	800a058 <sin>
 8001382:	ec53 2b10 	vmov	r2, r3, d0
 8001386:	4620      	mov	r0, r4
 8001388:	4629      	mov	r1, r5
 800138a:	f7ff f955 	bl	8000638 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4640      	mov	r0, r8
 8001394:	4649      	mov	r1, r9
 8001396:	f7fe ff97 	bl	80002c8 <__aeabi_dsub>
 800139a:	4602      	mov	r2, r0
 800139c:	460b      	mov	r3, r1
 800139e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double ly_rotated = lx * sin(theta) + ly * cos(theta);
 80013a2:	4b73      	ldr	r3, [pc, #460]	@ (8001570 <compute3wheel+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f8dc 	bl	8000564 <__aeabi_i2d>
 80013ac:	4604      	mov	r4, r0
 80013ae:	460d      	mov	r5, r1
 80013b0:	ed97 0b08 	vldr	d0, [r7, #32]
 80013b4:	f008 fe50 	bl	800a058 <sin>
 80013b8:	ec53 2b10 	vmov	r2, r3, d0
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7ff f93a 	bl	8000638 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4690      	mov	r8, r2
 80013ca:	4699      	mov	r9, r3
 80013cc:	4b69      	ldr	r3, [pc, #420]	@ (8001574 <compute3wheel+0x244>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f8c7 	bl	8000564 <__aeabi_i2d>
 80013d6:	4604      	mov	r4, r0
 80013d8:	460d      	mov	r5, r1
 80013da:	ed97 0b08 	vldr	d0, [r7, #32]
 80013de:	f008 fde7 	bl	8009fb0 <cos>
 80013e2:	ec53 2b10 	vmov	r2, r3, d0
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7ff f925 	bl	8000638 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4640      	mov	r0, r8
 80013f4:	4649      	mov	r1, r9
 80013f6:	f7fe ff69 	bl	80002cc <__adddf3>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
	double vx = ly_rotated;
 8001402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001406:	e9c7 2302 	strd	r2, r3, [r7, #8]
	double vy = lx_rotated;
 800140a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800140e:	e9c7 2300 	strd	r2, r3, [r7]
	w = rx;
 8001412:	4b59      	ldr	r3, [pc, #356]	@ (8001578 <compute3wheel+0x248>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a59      	ldr	r2, [pc, #356]	@ (800157c <compute3wheel+0x24c>)
 8001418:	6013      	str	r3, [r2, #0]
	target_wf = ((-0.5 * vx) + (sqrt(3) / 2) * vy + l0 * w);
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	4b58      	ldr	r3, [pc, #352]	@ (8001580 <compute3wheel+0x250>)
 8001420:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001424:	f7ff f908 	bl	8000638 <__aeabi_dmul>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4614      	mov	r4, r2
 800142e:	461d      	mov	r5, r3
 8001430:	a34d      	add	r3, pc, #308	@ (adr r3, 8001568 <compute3wheel+0x238>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	e9d7 0100 	ldrd	r0, r1, [r7]
 800143a:	f7ff f8fd 	bl	8000638 <__aeabi_dmul>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4620      	mov	r0, r4
 8001444:	4629      	mov	r1, r5
 8001446:	f7fe ff41 	bl	80002cc <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	4b4c      	ldr	r3, [pc, #304]	@ (8001584 <compute3wheel+0x254>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a49      	ldr	r2, [pc, #292]	@ (800157c <compute3wheel+0x24c>)
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f880 	bl	8000564 <__aeabi_i2d>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4620      	mov	r0, r4
 800146a:	4629      	mov	r1, r5
 800146c:	f7fe ff2e 	bl	80002cc <__adddf3>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4610      	mov	r0, r2
 8001476:	4619      	mov	r1, r3
 8001478:	f7ff fb8e 	bl	8000b98 <__aeabi_d2iz>
 800147c:	4603      	mov	r3, r0
 800147e:	4a42      	ldr	r2, [pc, #264]	@ (8001588 <compute3wheel+0x258>)
 8001480:	6013      	str	r3, [r2, #0]
	target_wrr = ((-0.5 * vx) - (sqrt(3) / 2) * vy + l0 * w);
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	4b3e      	ldr	r3, [pc, #248]	@ (8001580 <compute3wheel+0x250>)
 8001488:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4614      	mov	r4, r2
 8001496:	461d      	mov	r5, r3
 8001498:	a333      	add	r3, pc, #204	@ (adr r3, 8001568 <compute3wheel+0x238>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014a2:	f7ff f8c9 	bl	8000638 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe ff0b 	bl	80002c8 <__aeabi_dsub>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4614      	mov	r4, r2
 80014b8:	461d      	mov	r5, r3
 80014ba:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <compute3wheel+0x254>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a2f      	ldr	r2, [pc, #188]	@ (800157c <compute3wheel+0x24c>)
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	fb02 f303 	mul.w	r3, r2, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f84c 	bl	8000564 <__aeabi_i2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe fefa 	bl	80002cc <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fb5a 	bl	8000b98 <__aeabi_d2iz>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a29      	ldr	r2, [pc, #164]	@ (800158c <compute3wheel+0x25c>)
 80014e8:	6013      	str	r3, [r2, #0]
	target_wrl = (vx + l0 * w);
 80014ea:	4b26      	ldr	r3, [pc, #152]	@ (8001584 <compute3wheel+0x254>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a23      	ldr	r2, [pc, #140]	@ (800157c <compute3wheel+0x24c>)
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	fb02 f303 	mul.w	r3, r2, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f834 	bl	8000564 <__aeabi_i2d>
 80014fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001500:	f7fe fee4 	bl	80002cc <__adddf3>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb44 	bl	8000b98 <__aeabi_d2iz>
 8001510:	4603      	mov	r3, r0
 8001512:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <compute3wheel+0x260>)
 8001514:	6013      	str	r3, [r2, #0]

	// Constrain target wheel speeds
	target_wf = constrain(target_wf, -800, 800);
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <compute3wheel+0x258>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800151e:	491d      	ldr	r1, [pc, #116]	@ (8001594 <compute3wheel+0x264>)
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fee9 	bl	80012f8 <constrain>
 8001526:	4603      	mov	r3, r0
 8001528:	4a17      	ldr	r2, [pc, #92]	@ (8001588 <compute3wheel+0x258>)
 800152a:	6013      	str	r3, [r2, #0]
	target_wrr = constrain(target_wrr, -800, 800);
 800152c:	4b17      	ldr	r3, [pc, #92]	@ (800158c <compute3wheel+0x25c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001534:	4917      	ldr	r1, [pc, #92]	@ (8001594 <compute3wheel+0x264>)
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff fede 	bl	80012f8 <constrain>
 800153c:	4603      	mov	r3, r0
 800153e:	4a13      	ldr	r2, [pc, #76]	@ (800158c <compute3wheel+0x25c>)
 8001540:	6013      	str	r3, [r2, #0]
	target_wrl = constrain(target_wrl, -800, 800);
 8001542:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <compute3wheel+0x260>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800154a:	4912      	ldr	r1, [pc, #72]	@ (8001594 <compute3wheel+0x264>)
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fed3 	bl	80012f8 <constrain>
 8001552:	4603      	mov	r3, r0
 8001554:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <compute3wheel+0x260>)
 8001556:	6013      	str	r3, [r2, #0]
}
 8001558:	bf00      	nop
 800155a:	3728      	adds	r7, #40	@ 0x28
 800155c:	46bd      	mov	sp, r7
 800155e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001562:	bf00      	nop
 8001564:	f3af 8000 	nop.w
 8001568:	e8584caa 	.word	0xe8584caa
 800156c:	3febb67a 	.word	0x3febb67a
 8001570:	20000468 	.word	0x20000468
 8001574:	2000046c 	.word	0x2000046c
 8001578:	20000470 	.word	0x20000470
 800157c:	20000464 	.word	0x20000464
 8001580:	bfe00000 	.word	0xbfe00000
 8001584:	2000000c 	.word	0x2000000c
 8001588:	20000458 	.word	0x20000458
 800158c:	2000045c 	.word	0x2000045c
 8001590:	20000460 	.word	0x20000460
 8001594:	fffffce0 	.word	0xfffffce0
 8001598:	382b64d8 	.word	0x382b64d8
 800159c:	bfe0c152 	.word	0xbfe0c152

080015a0 <Encoder_Init>:
}



void Encoder_Init(uint16_t ARR_Value)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	@ 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	80fb      	strh	r3, [r7, #6]
	 uint32_t *pAPB1ClkCtrlReg =   (uint32_t*)0x40023840; // address of APB2 clock control register
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <Encoder_Init+0x90>)
 80015ac:	61fb      	str	r3, [r7, #28]
	 uint32_t *pTimer2ArrReg   =   (uint32_t*)0x4000002C; // address of timer 2 auto reload register
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <Encoder_Init+0x94>)
 80015b0:	61bb      	str	r3, [r7, #24]
	 uint32_t *pTimer2CCMR1Reg =   (uint32_t*)0x40000018; // address of timer 2 capture/compare register
 80015b2:	4b21      	ldr	r3, [pc, #132]	@ (8001638 <Encoder_Init+0x98>)
 80015b4:	617b      	str	r3, [r7, #20]
	 uint32_t *pTimer2CcerReg  =   (uint32_t*)0x40000020; // address of timer 2 capture/compare enable register
 80015b6:	4b21      	ldr	r3, [pc, #132]	@ (800163c <Encoder_Init+0x9c>)
 80015b8:	613b      	str	r3, [r7, #16]
     uint32_t *pTimer2SmcrReg  =   (uint32_t*)0x40000008; // address of timer 2 slave mode control register
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <Encoder_Init+0xa0>)
 80015bc:	60fb      	str	r3, [r7, #12]
     uint32_t *pTimer2CR1Reg   =   (uint32_t*)0x40000000; // address of timer 2 control register 1
 80015be:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015c2:	60bb      	str	r3, [r7, #8]

    *pAPB1ClkCtrlReg |= 0x1;           //timer 2 clock enable
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	601a      	str	r2, [r3, #0]
    *pTimer2ArrReg   =  ARR_Value - 1; // maximum count value for counter
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	461a      	mov	r2, r3
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	601a      	str	r2, [r3, #0]
    *pTimer2CCMR1Reg |= 0x1;   // mapping 'Input capture 1' mode in timer 2 Channel 1 and configuring it as input
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f043 0201 	orr.w	r2, r3, #1
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	601a      	str	r2, [r3, #0]
    *pTimer2CCMR1Reg |= 0x100; // mapping 'Input capture 2' mode in timer 2 Channel 2 and configuring it as input
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	601a      	str	r2, [r3, #0]
    *pTimer2CcerReg  |= 0x2;   // channel 1 triggered at rising edge
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f043 0202 	orr.w	r2, r3, #2
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	601a      	str	r2, [r3, #0]
    *pTimer2CcerReg  |= 0x20;  // channel 2 triggered at rising edge
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f043 0220 	orr.w	r2, r3, #32
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	601a      	str	r2, [r3, #0]
    *pTimer2SmcrReg  |= 0x3;   // counter counts up/down on both channel 1 and channel 2 edges depending on the level of the other input.
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f043 0203 	orr.w	r2, r3, #3
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	601a      	str	r2, [r3, #0]
    *pTimer2CR1Reg   |= 0x1;   // counter enable
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f043 0201 	orr.w	r2, r3, #1
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	601a      	str	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	3724      	adds	r7, #36	@ 0x24
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023840 	.word	0x40023840
 8001634:	4000002c 	.word	0x4000002c
 8001638:	40000018 	.word	0x40000018
 800163c:	40000020 	.word	0x40000020
 8001640:	40000008 	.word	0x40000008

08001644 <Get_Encoder_Counts>:
uint16_t Get_Encoder_Counts()
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
	 uint32_t *pTimer2CNTReg   =   (uint32_t*)0x40000024; // address of timer 2 counter register
 800164a:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <Get_Encoder_Counts+0x1c>)
 800164c:	607b      	str	r3, [r7, #4]
	 return *pTimer2CNTReg; // reading counts from counter register
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3

}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40000024 	.word	0x40000024
 8001664:	00000000 	.word	0x00000000

08001668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800166a:	b08f      	sub	sp, #60	@ 0x3c
 800166c:	af08      	add	r7, sp, #32

  /* USER CODE BEGIN 1 */
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 800166e:	2210      	movs	r2, #16
 8001670:	497d      	ldr	r1, [pc, #500]	@ (8001868 <main+0x200>)
 8001672:	487e      	ldr	r0, [pc, #504]	@ (800186c <main+0x204>)
 8001674:	f004 fe71 	bl	800635a <HAL_UART_Receive_DMA>
	Encoder_Init(65535);
 8001678:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800167c:	f7ff ff90 	bl	80015a0 <Encoder_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001680:	f001 f972 	bl	8002968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001684:	f000 fbdc 	bl	8001e40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001688:	f000 fdf2 	bl	8002270 <MX_GPIO_Init>
  MX_DMA_Init();
 800168c:	f000 fdd0 	bl	8002230 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001690:	f000 fda4 	bl	80021dc <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001694:	f000 fd78 	bl	8002188 <MX_UART4_Init>
  MX_TIM1_Init();
 8001698:	f000 fc6e 	bl	8001f78 <MX_TIM1_Init>
  MX_TIM8_Init();
 800169c:	f000 fd24 	bl	80020e8 <MX_TIM8_Init>
  MX_I2C1_Init();
 80016a0:	f000 fc3c 	bl	8001f1c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80016a4:	2210      	movs	r2, #16
 80016a6:	4970      	ldr	r1, [pc, #448]	@ (8001868 <main+0x200>)
 80016a8:	4870      	ldr	r0, [pc, #448]	@ (800186c <main+0x204>)
 80016aa:	f004 fe56 	bl	800635a <HAL_UART_Receive_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  lx = (rxbuff[0] & 0x80) ?
 80016ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001868 <main+0x200>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da04      	bge.n	80016c2 <main+0x5a>
 80016b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001868 <main+0x200>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016c0:	e001      	b.n	80016c6 <main+0x5e>
 80016c2:	4b69      	ldr	r3, [pc, #420]	@ (8001868 <main+0x200>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
  lx = (rxbuff[0] & 0x80) ?
 80016c6:	4a6a      	ldr	r2, [pc, #424]	@ (8001870 <main+0x208>)
 80016c8:	6013      	str	r3, [r2, #0]
  		ly = (rxbuff[1] & 0x80) ?
 80016ca:	4b67      	ldr	r3, [pc, #412]	@ (8001868 <main+0x200>)
 80016cc:	785b      	ldrb	r3, [r3, #1]
 80016ce:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	da04      	bge.n	80016de <main+0x76>
 80016d4:	4b64      	ldr	r3, [pc, #400]	@ (8001868 <main+0x200>)
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016dc:	e001      	b.n	80016e2 <main+0x7a>
 80016de:	4b62      	ldr	r3, [pc, #392]	@ (8001868 <main+0x200>)
 80016e0:	785b      	ldrb	r3, [r3, #1]
  		ly = (rxbuff[1] & 0x80) ?
 80016e2:	4a64      	ldr	r2, [pc, #400]	@ (8001874 <main+0x20c>)
 80016e4:	6013      	str	r3, [r2, #0]
  		rx = (rxbuff[2] & 0x80) ?
 80016e6:	4b60      	ldr	r3, [pc, #384]	@ (8001868 <main+0x200>)
 80016e8:	789b      	ldrb	r3, [r3, #2]
 80016ea:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	da04      	bge.n	80016fa <main+0x92>
 80016f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001868 <main+0x200>)
 80016f2:	789b      	ldrb	r3, [r3, #2]
 80016f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80016f8:	e001      	b.n	80016fe <main+0x96>
 80016fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001868 <main+0x200>)
 80016fc:	789b      	ldrb	r3, [r3, #2]
  		rx = (rxbuff[2] & 0x80) ?
 80016fe:	4a5e      	ldr	r2, [pc, #376]	@ (8001878 <main+0x210>)
 8001700:	6013      	str	r3, [r2, #0]
  		ry = (rxbuff[3] & 0x80) ?
 8001702:	4b59      	ldr	r3, [pc, #356]	@ (8001868 <main+0x200>)
 8001704:	78db      	ldrb	r3, [r3, #3]
 8001706:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 8001708:	2b00      	cmp	r3, #0
 800170a:	da04      	bge.n	8001716 <main+0xae>
 800170c:	4b56      	ldr	r3, [pc, #344]	@ (8001868 <main+0x200>)
 800170e:	78db      	ldrb	r3, [r3, #3]
 8001710:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001714:	e001      	b.n	800171a <main+0xb2>
 8001716:	4b54      	ldr	r3, [pc, #336]	@ (8001868 <main+0x200>)
 8001718:	78db      	ldrb	r3, [r3, #3]
  		ry = (rxbuff[3] & 0x80) ?
 800171a:	4a58      	ldr	r2, [pc, #352]	@ (800187c <main+0x214>)
 800171c:	6013      	str	r3, [r2, #0]
  		cro = (rxbuff[4] & 0x80) ?
 800171e:	4b52      	ldr	r3, [pc, #328]	@ (8001868 <main+0x200>)
 8001720:	791b      	ldrb	r3, [r3, #4]
 8001722:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8001724:	2b00      	cmp	r3, #0
 8001726:	da04      	bge.n	8001732 <main+0xca>
 8001728:	4b4f      	ldr	r3, [pc, #316]	@ (8001868 <main+0x200>)
 800172a:	791b      	ldrb	r3, [r3, #4]
 800172c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001730:	e001      	b.n	8001736 <main+0xce>
 8001732:	4b4d      	ldr	r3, [pc, #308]	@ (8001868 <main+0x200>)
 8001734:	791b      	ldrb	r3, [r3, #4]
  		cro = (rxbuff[4] & 0x80) ?
 8001736:	4a52      	ldr	r2, [pc, #328]	@ (8001880 <main+0x218>)
 8001738:	6013      	str	r3, [r2, #0]
  		squ = (rxbuff[5] & 0x80) ?
 800173a:	4b4b      	ldr	r3, [pc, #300]	@ (8001868 <main+0x200>)
 800173c:	795b      	ldrb	r3, [r3, #5]
 800173e:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 8001740:	2b00      	cmp	r3, #0
 8001742:	da04      	bge.n	800174e <main+0xe6>
 8001744:	4b48      	ldr	r3, [pc, #288]	@ (8001868 <main+0x200>)
 8001746:	795b      	ldrb	r3, [r3, #5]
 8001748:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800174c:	e001      	b.n	8001752 <main+0xea>
 800174e:	4b46      	ldr	r3, [pc, #280]	@ (8001868 <main+0x200>)
 8001750:	795b      	ldrb	r3, [r3, #5]
  		squ = (rxbuff[5] & 0x80) ?
 8001752:	4a4c      	ldr	r2, [pc, #304]	@ (8001884 <main+0x21c>)
 8001754:	6013      	str	r3, [r2, #0]
  		tri = (rxbuff[6] & 0x80) ?
 8001756:	4b44      	ldr	r3, [pc, #272]	@ (8001868 <main+0x200>)
 8001758:	799b      	ldrb	r3, [r3, #6]
 800175a:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 800175c:	2b00      	cmp	r3, #0
 800175e:	da04      	bge.n	800176a <main+0x102>
 8001760:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <main+0x200>)
 8001762:	799b      	ldrb	r3, [r3, #6]
 8001764:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001768:	e001      	b.n	800176e <main+0x106>
 800176a:	4b3f      	ldr	r3, [pc, #252]	@ (8001868 <main+0x200>)
 800176c:	799b      	ldrb	r3, [r3, #6]
  		tri = (rxbuff[6] & 0x80) ?
 800176e:	4a46      	ldr	r2, [pc, #280]	@ (8001888 <main+0x220>)
 8001770:	6013      	str	r3, [r2, #0]
  		cir = (rxbuff[7] & 0x80) ?
 8001772:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <main+0x200>)
 8001774:	79db      	ldrb	r3, [r3, #7]
 8001776:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 8001778:	2b00      	cmp	r3, #0
 800177a:	da04      	bge.n	8001786 <main+0x11e>
 800177c:	4b3a      	ldr	r3, [pc, #232]	@ (8001868 <main+0x200>)
 800177e:	79db      	ldrb	r3, [r3, #7]
 8001780:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001784:	e001      	b.n	800178a <main+0x122>
 8001786:	4b38      	ldr	r3, [pc, #224]	@ (8001868 <main+0x200>)
 8001788:	79db      	ldrb	r3, [r3, #7]
  		cir = (rxbuff[7] & 0x80) ?
 800178a:	4a40      	ldr	r2, [pc, #256]	@ (800188c <main+0x224>)
 800178c:	6013      	str	r3, [r2, #0]
  		up = (rxbuff[8] & 0x80) ?
 800178e:	4b36      	ldr	r3, [pc, #216]	@ (8001868 <main+0x200>)
 8001790:	7a1b      	ldrb	r3, [r3, #8]
 8001792:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 8001794:	2b00      	cmp	r3, #0
 8001796:	da04      	bge.n	80017a2 <main+0x13a>
 8001798:	4b33      	ldr	r3, [pc, #204]	@ (8001868 <main+0x200>)
 800179a:	7a1b      	ldrb	r3, [r3, #8]
 800179c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017a0:	e001      	b.n	80017a6 <main+0x13e>
 80017a2:	4b31      	ldr	r3, [pc, #196]	@ (8001868 <main+0x200>)
 80017a4:	7a1b      	ldrb	r3, [r3, #8]
  		up = (rxbuff[8] & 0x80) ?
 80017a6:	4a3a      	ldr	r2, [pc, #232]	@ (8001890 <main+0x228>)
 80017a8:	6013      	str	r3, [r2, #0]
  		down = (rxbuff[9] & 0x80) ?
 80017aa:	4b2f      	ldr	r3, [pc, #188]	@ (8001868 <main+0x200>)
 80017ac:	7a5b      	ldrb	r3, [r3, #9]
 80017ae:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da04      	bge.n	80017be <main+0x156>
 80017b4:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <main+0x200>)
 80017b6:	7a5b      	ldrb	r3, [r3, #9]
 80017b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017bc:	e001      	b.n	80017c2 <main+0x15a>
 80017be:	4b2a      	ldr	r3, [pc, #168]	@ (8001868 <main+0x200>)
 80017c0:	7a5b      	ldrb	r3, [r3, #9]
  		down = (rxbuff[9] & 0x80) ?
 80017c2:	4a34      	ldr	r2, [pc, #208]	@ (8001894 <main+0x22c>)
 80017c4:	6013      	str	r3, [r2, #0]
  		left = (rxbuff[10] & 0x80) ?
 80017c6:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <main+0x200>)
 80017c8:	7a9b      	ldrb	r3, [r3, #10]
 80017ca:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	da04      	bge.n	80017da <main+0x172>
 80017d0:	4b25      	ldr	r3, [pc, #148]	@ (8001868 <main+0x200>)
 80017d2:	7a9b      	ldrb	r3, [r3, #10]
 80017d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017d8:	e001      	b.n	80017de <main+0x176>
 80017da:	4b23      	ldr	r3, [pc, #140]	@ (8001868 <main+0x200>)
 80017dc:	7a9b      	ldrb	r3, [r3, #10]
  		left = (rxbuff[10] & 0x80) ?
 80017de:	4a2e      	ldr	r2, [pc, #184]	@ (8001898 <main+0x230>)
 80017e0:	6013      	str	r3, [r2, #0]
  		right = (rxbuff[11] & 0x80) ?
 80017e2:	4b21      	ldr	r3, [pc, #132]	@ (8001868 <main+0x200>)
 80017e4:	7adb      	ldrb	r3, [r3, #11]
 80017e6:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	da04      	bge.n	80017f6 <main+0x18e>
 80017ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <main+0x200>)
 80017ee:	7adb      	ldrb	r3, [r3, #11]
 80017f0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80017f4:	e001      	b.n	80017fa <main+0x192>
 80017f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001868 <main+0x200>)
 80017f8:	7adb      	ldrb	r3, [r3, #11]
  		right = (rxbuff[11] & 0x80) ?
 80017fa:	4a28      	ldr	r2, [pc, #160]	@ (800189c <main+0x234>)
 80017fc:	6013      	str	r3, [r2, #0]
  		ll1 = (rxbuff[12] & 0x80) ?
 80017fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <main+0x200>)
 8001800:	7b1b      	ldrb	r3, [r3, #12]
 8001802:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 8001804:	2b00      	cmp	r3, #0
 8001806:	da04      	bge.n	8001812 <main+0x1aa>
 8001808:	4b17      	ldr	r3, [pc, #92]	@ (8001868 <main+0x200>)
 800180a:	7b1b      	ldrb	r3, [r3, #12]
 800180c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001810:	e001      	b.n	8001816 <main+0x1ae>
 8001812:	4b15      	ldr	r3, [pc, #84]	@ (8001868 <main+0x200>)
 8001814:	7b1b      	ldrb	r3, [r3, #12]
  		ll1 = (rxbuff[12] & 0x80) ?
 8001816:	4a22      	ldr	r2, [pc, #136]	@ (80018a0 <main+0x238>)
 8001818:	6013      	str	r3, [r2, #0]
  		ll2 = (rxbuff[13] & 0x80) ?
 800181a:	4b13      	ldr	r3, [pc, #76]	@ (8001868 <main+0x200>)
 800181c:	7b5b      	ldrb	r3, [r3, #13]
 800181e:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 8001820:	2b00      	cmp	r3, #0
 8001822:	da04      	bge.n	800182e <main+0x1c6>
 8001824:	4b10      	ldr	r3, [pc, #64]	@ (8001868 <main+0x200>)
 8001826:	7b5b      	ldrb	r3, [r3, #13]
 8001828:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800182c:	e001      	b.n	8001832 <main+0x1ca>
 800182e:	4b0e      	ldr	r3, [pc, #56]	@ (8001868 <main+0x200>)
 8001830:	7b5b      	ldrb	r3, [r3, #13]
  		ll2 = (rxbuff[13] & 0x80) ?
 8001832:	4a1c      	ldr	r2, [pc, #112]	@ (80018a4 <main+0x23c>)
 8001834:	6013      	str	r3, [r2, #0]
  		rr1 = (rxbuff[14] & 0x80) ?
 8001836:	4b0c      	ldr	r3, [pc, #48]	@ (8001868 <main+0x200>)
 8001838:	7b9b      	ldrb	r3, [r3, #14]
 800183a:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 800183c:	2b00      	cmp	r3, #0
 800183e:	da04      	bge.n	800184a <main+0x1e2>
 8001840:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <main+0x200>)
 8001842:	7b9b      	ldrb	r3, [r3, #14]
 8001844:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001848:	e001      	b.n	800184e <main+0x1e6>
 800184a:	4b07      	ldr	r3, [pc, #28]	@ (8001868 <main+0x200>)
 800184c:	7b9b      	ldrb	r3, [r3, #14]
  		rr1 = (rxbuff[14] & 0x80) ?
 800184e:	4a16      	ldr	r2, [pc, #88]	@ (80018a8 <main+0x240>)
 8001850:	6013      	str	r3, [r2, #0]
  		rr2 = (rxbuff[15] & 0x80) ?
 8001852:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <main+0x200>)
 8001854:	7bdb      	ldrb	r3, [r3, #15]
 8001856:	b25b      	sxtb	r3, r3
  				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 8001858:	2b00      	cmp	r3, #0
 800185a:	da27      	bge.n	80018ac <main+0x244>
 800185c:	4b02      	ldr	r3, [pc, #8]	@ (8001868 <main+0x200>)
 800185e:	7bdb      	ldrb	r3, [r3, #15]
 8001860:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001864:	e024      	b.n	80018b0 <main+0x248>
 8001866:	bf00      	nop
 8001868:	20000448 	.word	0x20000448
 800186c:	200002f8 	.word	0x200002f8
 8001870:	20000468 	.word	0x20000468
 8001874:	2000046c 	.word	0x2000046c
 8001878:	20000470 	.word	0x20000470
 800187c:	20000474 	.word	0x20000474
 8001880:	20000478 	.word	0x20000478
 8001884:	2000047c 	.word	0x2000047c
 8001888:	20000480 	.word	0x20000480
 800188c:	20000484 	.word	0x20000484
 8001890:	20000488 	.word	0x20000488
 8001894:	2000048c 	.word	0x2000048c
 8001898:	20000490 	.word	0x20000490
 800189c:	20000494 	.word	0x20000494
 80018a0:	20000498 	.word	0x20000498
 80018a4:	200004a0 	.word	0x200004a0
 80018a8:	2000049c 	.word	0x2000049c
 80018ac:	4b99      	ldr	r3, [pc, #612]	@ (8001b14 <main+0x4ac>)
 80018ae:	7bdb      	ldrb	r3, [r3, #15]
  		rr2 = (rxbuff[15] & 0x80) ?
 80018b0:	4a99      	ldr	r2, [pc, #612]	@ (8001b18 <main+0x4b0>)
 80018b2:	6013      	str	r3, [r2, #0]
  //			  		  	  	 	 	   right=(rxbuff[12] & 0x80) ? (int32_t)rxbuff[12] - 256 : (int32_t)rxbuff[12];
  //			  		  	  	 	 	   ll1= (rxbuff[13] & 0x80) ? (int32_t)rxbuff[13] - 256 : (int32_t)rxbuff[13];
  //			  		  	  	 	 	   ll2= (rxbuff[14] & 0x80) ? (int32_t)rxbuff[14] - 256 : (int32_t)rxbuff[14];
  //			  		  	  	 	 	   rr1= (rxbuff[15] & 0x80) ? (int32_t)rxbuff[15] - 256 : (int32_t)rxbuff[15];
  //			  		  	  	 	 	   rr2= (rxbuff[16] & 0x80) ? (int32_t)rxbuff[16] - 256 : (int32_t)rxbuff[16];
  		if (abs(lx) < deadzone)
 80018b4:	4b99      	ldr	r3, [pc, #612]	@ (8001b1c <main+0x4b4>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018bc:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018c0:	4b97      	ldr	r3, [pc, #604]	@ (8001b20 <main+0x4b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	da02      	bge.n	80018ce <main+0x266>
  			lx = 0;
 80018c8:	4b94      	ldr	r3, [pc, #592]	@ (8001b1c <main+0x4b4>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
  		if (abs(ly) < deadzone)
 80018ce:	4b95      	ldr	r3, [pc, #596]	@ (8001b24 <main+0x4bc>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018d6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018da:	4b91      	ldr	r3, [pc, #580]	@ (8001b20 <main+0x4b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	da02      	bge.n	80018e8 <main+0x280>
  			ly = 0;
 80018e2:	4b90      	ldr	r3, [pc, #576]	@ (8001b24 <main+0x4bc>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
  		if (abs(rx) < deadzone)
 80018e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001b28 <main+0x4c0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80018f0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80018f4:	4b8a      	ldr	r3, [pc, #552]	@ (8001b20 <main+0x4b8>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	da03      	bge.n	8001904 <main+0x29c>
  			rx = 0;
 80018fc:	4b8a      	ldr	r3, [pc, #552]	@ (8001b28 <main+0x4c0>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e010      	b.n	8001926 <main+0x2be>
  		else
  			rx = (rx > 0) ? rx - deadzone : rx + deadzone;
 8001904:	4b88      	ldr	r3, [pc, #544]	@ (8001b28 <main+0x4c0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd05      	ble.n	8001918 <main+0x2b0>
 800190c:	4b86      	ldr	r3, [pc, #536]	@ (8001b28 <main+0x4c0>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b83      	ldr	r3, [pc, #524]	@ (8001b20 <main+0x4b8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	e004      	b.n	8001922 <main+0x2ba>
 8001918:	4b83      	ldr	r3, [pc, #524]	@ (8001b28 <main+0x4c0>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b80      	ldr	r3, [pc, #512]	@ (8001b20 <main+0x4b8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4413      	add	r3, r2
 8001922:	4a81      	ldr	r2, [pc, #516]	@ (8001b28 <main+0x4c0>)
 8001924:	6013      	str	r3, [r2, #0]
  		if (abs(ry) < deadzone)
 8001926:	4b81      	ldr	r3, [pc, #516]	@ (8001b2c <main+0x4c4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800192e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001932:	4b7b      	ldr	r3, [pc, #492]	@ (8001b20 <main+0x4b8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	da02      	bge.n	8001940 <main+0x2d8>
  			ry = 0;
 800193a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b2c <main+0x4c4>)
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
  		lx = (lx * 950) / 127;  // Assuming joystick range is -127 to +127
 8001940:	4b76      	ldr	r3, [pc, #472]	@ (8001b1c <main+0x4b4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001948:	fb02 f303 	mul.w	r3, r2, r3
 800194c:	4a78      	ldr	r2, [pc, #480]	@ (8001b30 <main+0x4c8>)
 800194e:	fb82 1203 	smull	r1, r2, r2, r3
 8001952:	441a      	add	r2, r3
 8001954:	1192      	asrs	r2, r2, #6
 8001956:	17db      	asrs	r3, r3, #31
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	4a70      	ldr	r2, [pc, #448]	@ (8001b1c <main+0x4b4>)
 800195c:	6013      	str	r3, [r2, #0]
  		ly = (ly * 950) / 127;
 800195e:	4b71      	ldr	r3, [pc, #452]	@ (8001b24 <main+0x4bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001966:	fb02 f303 	mul.w	r3, r2, r3
 800196a:	4a71      	ldr	r2, [pc, #452]	@ (8001b30 <main+0x4c8>)
 800196c:	fb82 1203 	smull	r1, r2, r2, r3
 8001970:	441a      	add	r2, r3
 8001972:	1192      	asrs	r2, r2, #6
 8001974:	17db      	asrs	r3, r3, #31
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	4a6a      	ldr	r2, [pc, #424]	@ (8001b24 <main+0x4bc>)
 800197a:	6013      	str	r3, [r2, #0]
  		rx = (rx * 950) / 127;
 800197c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b28 <main+0x4c0>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001984:	fb02 f303 	mul.w	r3, r2, r3
 8001988:	4a69      	ldr	r2, [pc, #420]	@ (8001b30 <main+0x4c8>)
 800198a:	fb82 1203 	smull	r1, r2, r2, r3
 800198e:	441a      	add	r2, r3
 8001990:	1192      	asrs	r2, r2, #6
 8001992:	17db      	asrs	r3, r3, #31
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	4a64      	ldr	r2, [pc, #400]	@ (8001b28 <main+0x4c0>)
 8001998:	6013      	str	r3, [r2, #0]
  		rL = sqrt(lx * lx + ly * ly);
 800199a:	4b60      	ldr	r3, [pc, #384]	@ (8001b1c <main+0x4b4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a5f      	ldr	r2, [pc, #380]	@ (8001b1c <main+0x4b4>)
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	fb03 f202 	mul.w	r2, r3, r2
 80019a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b24 <main+0x4bc>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	495e      	ldr	r1, [pc, #376]	@ (8001b24 <main+0x4bc>)
 80019ac:	6809      	ldr	r1, [r1, #0]
 80019ae:	fb01 f303 	mul.w	r3, r1, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fdd5 	bl	8000564 <__aeabi_i2d>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	ec43 2b10 	vmov	d0, r2, r3
 80019c2:	f008 fac9 	bl	8009f58 <sqrt>
 80019c6:	ec53 2b10 	vmov	r2, r3, d0
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f8e3 	bl	8000b98 <__aeabi_d2iz>
 80019d2:	4603      	mov	r3, r0
 80019d4:	4a57      	ldr	r2, [pc, #348]	@ (8001b34 <main+0x4cc>)
 80019d6:	6013      	str	r3, [r2, #0]
  		rR = sqrt(rx * rx + ry * ry);
 80019d8:	4b53      	ldr	r3, [pc, #332]	@ (8001b28 <main+0x4c0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a52      	ldr	r2, [pc, #328]	@ (8001b28 <main+0x4c0>)
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	fb03 f202 	mul.w	r2, r3, r2
 80019e4:	4b51      	ldr	r3, [pc, #324]	@ (8001b2c <main+0x4c4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4950      	ldr	r1, [pc, #320]	@ (8001b2c <main+0x4c4>)
 80019ea:	6809      	ldr	r1, [r1, #0]
 80019ec:	fb01 f303 	mul.w	r3, r1, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fdb6 	bl	8000564 <__aeabi_i2d>
 80019f8:	4602      	mov	r2, r0
 80019fa:	460b      	mov	r3, r1
 80019fc:	ec43 2b10 	vmov	d0, r2, r3
 8001a00:	f008 faaa 	bl	8009f58 <sqrt>
 8001a04:	ec53 2b10 	vmov	r2, r3, d0
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f8c4 	bl	8000b98 <__aeabi_d2iz>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a49      	ldr	r2, [pc, #292]	@ (8001b38 <main+0x4d0>)
 8001a14:	6013      	str	r3, [r2, #0]
  				printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\r\n",
 8001a16:	4b41      	ldr	r3, [pc, #260]	@ (8001b1c <main+0x4b4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	4b41      	ldr	r3, [pc, #260]	@ (8001b24 <main+0x4bc>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	4b41      	ldr	r3, [pc, #260]	@ (8001b28 <main+0x4c0>)
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	4b40      	ldr	r3, [pc, #256]	@ (8001b2c <main+0x4c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a43      	ldr	r2, [pc, #268]	@ (8001b3c <main+0x4d4>)
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	4943      	ldr	r1, [pc, #268]	@ (8001b40 <main+0x4d8>)
 8001a32:	6809      	ldr	r1, [r1, #0]
 8001a34:	4843      	ldr	r0, [pc, #268]	@ (8001b44 <main+0x4dc>)
 8001a36:	6800      	ldr	r0, [r0, #0]
 8001a38:	4c43      	ldr	r4, [pc, #268]	@ (8001b48 <main+0x4e0>)
 8001a3a:	6824      	ldr	r4, [r4, #0]
 8001a3c:	4d43      	ldr	r5, [pc, #268]	@ (8001b4c <main+0x4e4>)
 8001a3e:	682d      	ldr	r5, [r5, #0]
 8001a40:	4e43      	ldr	r6, [pc, #268]	@ (8001b50 <main+0x4e8>)
 8001a42:	6836      	ldr	r6, [r6, #0]
 8001a44:	9606      	str	r6, [sp, #24]
 8001a46:	9505      	str	r5, [sp, #20]
 8001a48:	9404      	str	r4, [sp, #16]
 8001a4a:	9003      	str	r0, [sp, #12]
 8001a4c:	9102      	str	r1, [sp, #8]
 8001a4e:	9201      	str	r2, [sp, #4]
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	68f9      	ldr	r1, [r7, #12]
 8001a58:	483e      	ldr	r0, [pc, #248]	@ (8001b54 <main+0x4ec>)
 8001a5a:	f006 faa5 	bl	8007fa8 <iprintf>
  						lx, ly, rx, ry, cro, squ, tri, cir, ll1, rr1);
  				  printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly, rx, ry, cro, squ, tri, cir);
 8001a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8001b1c <main+0x4b4>)
 8001a60:	681d      	ldr	r5, [r3, #0]
 8001a62:	4b30      	ldr	r3, [pc, #192]	@ (8001b24 <main+0x4bc>)
 8001a64:	681e      	ldr	r6, [r3, #0]
 8001a66:	4b30      	ldr	r3, [pc, #192]	@ (8001b28 <main+0x4c0>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <main+0x4c4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a32      	ldr	r2, [pc, #200]	@ (8001b3c <main+0x4d4>)
 8001a72:	6812      	ldr	r2, [r2, #0]
 8001a74:	4932      	ldr	r1, [pc, #200]	@ (8001b40 <main+0x4d8>)
 8001a76:	6809      	ldr	r1, [r1, #0]
 8001a78:	4832      	ldr	r0, [pc, #200]	@ (8001b44 <main+0x4dc>)
 8001a7a:	6800      	ldr	r0, [r0, #0]
 8001a7c:	4c32      	ldr	r4, [pc, #200]	@ (8001b48 <main+0x4e0>)
 8001a7e:	6824      	ldr	r4, [r4, #0]
 8001a80:	9404      	str	r4, [sp, #16]
 8001a82:	9003      	str	r0, [sp, #12]
 8001a84:	9102      	str	r1, [sp, #8]
 8001a86:	9201      	str	r2, [sp, #4]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4632      	mov	r2, r6
 8001a8e:	4629      	mov	r1, r5
 8001a90:	4831      	ldr	r0, [pc, #196]	@ (8001b58 <main+0x4f0>)
 8001a92:	f006 fa89 	bl	8007fa8 <iprintf>
  		uint16_t counter = Get_Encoder_Counts();
 8001a96:	f7ff fdd5 	bl	8001644 <Get_Encoder_Counts>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	82fb      	strh	r3, [r7, #22]
  		printf("Encoder 1 : %u\r\n",counter);
 8001a9e:	8afb      	ldrh	r3, [r7, #22]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	482e      	ldr	r0, [pc, #184]	@ (8001b5c <main+0x4f4>)
 8001aa4:	f006 fa80 	bl	8007fa8 <iprintf>
  		compute3wheel();
 8001aa8:	f7ff fc42 	bl	8001330 <compute3wheel>
  		if (target_wf >= 0) {
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <main+0x4f8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	db0d      	blt.n	8001ad0 <main+0x468>
  			TIM1->CCR1 = target_wf;
 8001ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b60 <main+0x4f8>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b64 <main+0x4fc>)
 8001aba:	635a      	str	r2, [r3, #52]	@ 0x34
  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001abc:	2100      	movs	r1, #0
 8001abe:	482a      	ldr	r0, [pc, #168]	@ (8001b68 <main+0x500>)
 8001ac0:	f003 fd34 	bl	800552c <HAL_TIM_PWM_Start>
  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	4828      	ldr	r0, [pc, #160]	@ (8001b6c <main+0x504>)
 8001aca:	f001 fe8b 	bl	80037e4 <HAL_GPIO_WritePin>
 8001ace:	e00d      	b.n	8001aec <main+0x484>
  		} else {
  			TIM1->CCR1 = -target_wf;
 8001ad0:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <main+0x4f8>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	4b23      	ldr	r3, [pc, #140]	@ (8001b64 <main+0x4fc>)
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ada:	2100      	movs	r1, #0
 8001adc:	4822      	ldr	r0, [pc, #136]	@ (8001b68 <main+0x500>)
 8001ade:	f003 fd25 	bl	800552c <HAL_TIM_PWM_Start>
  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	2180      	movs	r1, #128	@ 0x80
 8001ae6:	4821      	ldr	r0, [pc, #132]	@ (8001b6c <main+0x504>)
 8001ae8:	f001 fe7c 	bl	80037e4 <HAL_GPIO_WritePin>
  		}
  		if (target_wrr >= 0) {
 8001aec:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <main+0x508>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	db3f      	blt.n	8001b74 <main+0x50c>
  			TIM1->CCR2 = target_wrr;
 8001af4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b70 <main+0x508>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <main+0x4fc>)
 8001afa:	639a      	str	r2, [r3, #56]	@ 0x38
  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001afc:	2104      	movs	r1, #4
 8001afe:	481a      	ldr	r0, [pc, #104]	@ (8001b68 <main+0x500>)
 8001b00:	f003 fd14 	bl	800552c <HAL_TIM_PWM_Start>
  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b0a:	4818      	ldr	r0, [pc, #96]	@ (8001b6c <main+0x504>)
 8001b0c:	f001 fe6a 	bl	80037e4 <HAL_GPIO_WritePin>
 8001b10:	e03f      	b.n	8001b92 <main+0x52a>
 8001b12:	bf00      	nop
 8001b14:	20000448 	.word	0x20000448
 8001b18:	200004a4 	.word	0x200004a4
 8001b1c:	20000468 	.word	0x20000468
 8001b20:	20000008 	.word	0x20000008
 8001b24:	2000046c 	.word	0x2000046c
 8001b28:	20000470 	.word	0x20000470
 8001b2c:	20000474 	.word	0x20000474
 8001b30:	81020409 	.word	0x81020409
 8001b34:	200004a8 	.word	0x200004a8
 8001b38:	200004ac 	.word	0x200004ac
 8001b3c:	20000478 	.word	0x20000478
 8001b40:	2000047c 	.word	0x2000047c
 8001b44:	20000480 	.word	0x20000480
 8001b48:	20000484 	.word	0x20000484
 8001b4c:	20000498 	.word	0x20000498
 8001b50:	2000049c 	.word	0x2000049c
 8001b54:	0800b748 	.word	0x0800b748
 8001b58:	0800b788 	.word	0x0800b788
 8001b5c:	0800b7c0 	.word	0x0800b7c0
 8001b60:	20000458 	.word	0x20000458
 8001b64:	40010000 	.word	0x40010000
 8001b68:	20000268 	.word	0x20000268
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	2000045c 	.word	0x2000045c
  		} else {
  			TIM1->CCR2 = -target_wrr;
 8001b74:	4b98      	ldr	r3, [pc, #608]	@ (8001dd8 <main+0x770>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	425a      	negs	r2, r3
 8001b7a:	4b98      	ldr	r3, [pc, #608]	@ (8001ddc <main+0x774>)
 8001b7c:	639a      	str	r2, [r3, #56]	@ 0x38
  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001b7e:	2104      	movs	r1, #4
 8001b80:	4897      	ldr	r0, [pc, #604]	@ (8001de0 <main+0x778>)
 8001b82:	f003 fcd3 	bl	800552c <HAL_TIM_PWM_Start>
  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8001b86:	2201      	movs	r2, #1
 8001b88:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b8c:	4895      	ldr	r0, [pc, #596]	@ (8001de4 <main+0x77c>)
 8001b8e:	f001 fe29 	bl	80037e4 <HAL_GPIO_WritePin>
  		}
  		if (target_wrl >= 0) {
 8001b92:	4b95      	ldr	r3, [pc, #596]	@ (8001de8 <main+0x780>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0e      	blt.n	8001bb8 <main+0x550>
  			TIM1->CCR3 = target_wrl;
 8001b9a:	4b93      	ldr	r3, [pc, #588]	@ (8001de8 <main+0x780>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4b8f      	ldr	r3, [pc, #572]	@ (8001ddc <main+0x774>)
 8001ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	488e      	ldr	r0, [pc, #568]	@ (8001de0 <main+0x778>)
 8001ba6:	f003 fcc1 	bl	800552c <HAL_TIM_PWM_Start>
  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb0:	488c      	ldr	r0, [pc, #560]	@ (8001de4 <main+0x77c>)
 8001bb2:	f001 fe17 	bl	80037e4 <HAL_GPIO_WritePin>
 8001bb6:	e00e      	b.n	8001bd6 <main+0x56e>
  		} else {
  			TIM1->CCR3 = -target_wrl;
 8001bb8:	4b8b      	ldr	r3, [pc, #556]	@ (8001de8 <main+0x780>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	425a      	negs	r2, r3
 8001bbe:	4b87      	ldr	r3, [pc, #540]	@ (8001ddc <main+0x774>)
 8001bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
  			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001bc2:	2108      	movs	r1, #8
 8001bc4:	4886      	ldr	r0, [pc, #536]	@ (8001de0 <main+0x778>)
 8001bc6:	f003 fcb1 	bl	800552c <HAL_TIM_PWM_Start>
  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bd0:	4884      	ldr	r0, [pc, #528]	@ (8001de4 <main+0x77c>)
 8001bd2:	f001 fe07 	bl	80037e4 <HAL_GPIO_WritePin>
  		}
  		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15,
 8001bd6:	4b85      	ldr	r3, [pc, #532]	@ (8001dec <main+0x784>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	bf14      	ite	ne
 8001bde:	2301      	movne	r3, #1
 8001be0:	2300      	moveq	r3, #0
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	461a      	mov	r2, r3
 8001be6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bea:	4881      	ldr	r0, [pc, #516]	@ (8001df0 <main+0x788>)
 8001bec:	f001 fdfa 	bl	80037e4 <HAL_GPIO_WritePin>
  				direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

  		if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 8001bf0:	4b80      	ldr	r3, [pc, #512]	@ (8001df4 <main+0x78c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d109      	bne.n	8001c0c <main+0x5a4>
 8001bf8:	4b7f      	ldr	r3, [pc, #508]	@ (8001df8 <main+0x790>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d105      	bne.n	8001c0c <main+0x5a4>
  			direction1 = 1;  // Set to Anti-clockwise
 8001c00:	4b7a      	ldr	r3, [pc, #488]	@ (8001dec <main+0x784>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	601a      	str	r2, [r3, #0]
  			stepper_running1 = 1;
 8001c06:	4b7d      	ldr	r3, [pc, #500]	@ (8001dfc <main+0x794>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]
  		}
  		if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8001c0c:	4b7c      	ldr	r3, [pc, #496]	@ (8001e00 <main+0x798>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d109      	bne.n	8001c28 <main+0x5c0>
 8001c14:	4b7b      	ldr	r3, [pc, #492]	@ (8001e04 <main+0x79c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <main+0x5c0>
  			direction1 = 0;  // Set to Clockwise
 8001c1c:	4b73      	ldr	r3, [pc, #460]	@ (8001dec <main+0x784>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
  			stepper_running1 = 1;
 8001c22:	4b76      	ldr	r3, [pc, #472]	@ (8001dfc <main+0x794>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
  		}
  		if (cir == 1 && !prev_squ) {
 8001c28:	4b77      	ldr	r3, [pc, #476]	@ (8001e08 <main+0x7a0>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d106      	bne.n	8001c3e <main+0x5d6>
 8001c30:	4b76      	ldr	r3, [pc, #472]	@ (8001e0c <main+0x7a4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d102      	bne.n	8001c3e <main+0x5d6>
  			stepper_running1 = 0;
 8001c38:	4b70      	ldr	r3, [pc, #448]	@ (8001dfc <main+0x794>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
  		}
  		prev_ll1 = ll1;
 8001c3e:	4b6d      	ldr	r3, [pc, #436]	@ (8001df4 <main+0x78c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a6d      	ldr	r2, [pc, #436]	@ (8001df8 <main+0x790>)
 8001c44:	6013      	str	r3, [r2, #0]
  		prev_rr1 = rr1;
 8001c46:	4b6e      	ldr	r3, [pc, #440]	@ (8001e00 <main+0x798>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a6e      	ldr	r2, [pc, #440]	@ (8001e04 <main+0x79c>)
 8001c4c:	6013      	str	r3, [r2, #0]
  		prev_squ = cir;
 8001c4e:	4b6e      	ldr	r3, [pc, #440]	@ (8001e08 <main+0x7a0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a6e      	ldr	r2, [pc, #440]	@ (8001e0c <main+0x7a4>)
 8001c54:	6013      	str	r3, [r2, #0]
  		if (stepper_running1 && (HAL_GetTick() - last_step_time1) >= step_delay1) {
 8001c56:	4b69      	ldr	r3, [pc, #420]	@ (8001dfc <main+0x794>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d023      	beq.n	8001ca6 <main+0x63e>
 8001c5e:	f000 fee9 	bl	8002a34 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	4b6a      	ldr	r3, [pc, #424]	@ (8001e10 <main+0x7a8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	4a6a      	ldr	r2, [pc, #424]	@ (8001e14 <main+0x7ac>)
 8001c6c:	6812      	ldr	r2, [r2, #0]
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d319      	bcc.n	8001ca6 <main+0x63e>
  			last_step_time1 = HAL_GetTick(); // Update last step time
 8001c72:	f000 fedf 	bl	8002a34 <HAL_GetTick>
 8001c76:	4603      	mov	r3, r0
 8001c78:	4a65      	ldr	r2, [pc, #404]	@ (8001e10 <main+0x7a8>)
 8001c7a:	6013      	str	r3, [r2, #0]

  			if (step_state1 == 0) {
 8001c7c:	4b66      	ldr	r3, [pc, #408]	@ (8001e18 <main+0x7b0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d108      	bne.n	8001c96 <main+0x62e>
  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // Step HIGH
 8001c84:	2201      	movs	r2, #1
 8001c86:	2140      	movs	r1, #64	@ 0x40
 8001c88:	4856      	ldr	r0, [pc, #344]	@ (8001de4 <main+0x77c>)
 8001c8a:	f001 fdab 	bl	80037e4 <HAL_GPIO_WritePin>
  				step_state1 = 1;
 8001c8e:	4b62      	ldr	r3, [pc, #392]	@ (8001e18 <main+0x7b0>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	e007      	b.n	8001ca6 <main+0x63e>
  			} else {
  				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET); // Step LOW
 8001c96:	2200      	movs	r2, #0
 8001c98:	2140      	movs	r1, #64	@ 0x40
 8001c9a:	4852      	ldr	r0, [pc, #328]	@ (8001de4 <main+0x77c>)
 8001c9c:	f001 fda2 	bl	80037e4 <HAL_GPIO_WritePin>
  				step_state1 = 0;
 8001ca0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e18 <main+0x7b0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
  			}
  		}
  		if (BNO055_GetAllData(&hi2c1, &imu_data) == HAL_OK) {
 8001ca6:	495d      	ldr	r1, [pc, #372]	@ (8001e1c <main+0x7b4>)
 8001ca8:	485d      	ldr	r0, [pc, #372]	@ (8001e20 <main+0x7b8>)
 8001caa:	f7ff fadd 	bl	8001268 <BNO055_GetAllData>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 8083 	bne.w	8001dbc <main+0x754>
  			  	  		  // Print gyroscope data (degrees/s)
  			  	  //		  printf("Gyro: X=%.2f, Y=%.2f, Z=%.2f deg/s\n",
  			  	  //				 imu_data.gyro_x, imu_data.gyro_y, imu_data.gyro_z);
  			  	  //		  printf("\n\n");
  			  	  		  // Print orientation data
  				  	q0=imu_data.quat_w;
 8001cb6:	4b59      	ldr	r3, [pc, #356]	@ (8001e1c <main+0x7b4>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	4a5a      	ldr	r2, [pc, #360]	@ (8001e24 <main+0x7bc>)
 8001cbc:	6013      	str	r3, [r2, #0]
  				    q1=imu_data.quat_x;
 8001cbe:	4b57      	ldr	r3, [pc, #348]	@ (8001e1c <main+0x7b4>)
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc2:	4a59      	ldr	r2, [pc, #356]	@ (8001e28 <main+0x7c0>)
 8001cc4:	6013      	str	r3, [r2, #0]
  				    q2=imu_data.quat_y;
 8001cc6:	4b55      	ldr	r3, [pc, #340]	@ (8001e1c <main+0x7b4>)
 8001cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cca:	4a58      	ldr	r2, [pc, #352]	@ (8001e2c <main+0x7c4>)
 8001ccc:	6013      	str	r3, [r2, #0]
  				    q3=imu_data.quat_z;
 8001cce:	4b53      	ldr	r3, [pc, #332]	@ (8001e1c <main+0x7b4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a57      	ldr	r2, [pc, #348]	@ (8001e30 <main+0x7c8>)
 8001cd4:	6013      	str	r3, [r2, #0]
  				    yaw=-(atan2(2*(q0*q3+q1*q2),1-2*(q2*q2+q3*q3))-pi/2);
 8001cd6:	4b53      	ldr	r3, [pc, #332]	@ (8001e24 <main+0x7bc>)
 8001cd8:	ed93 7a00 	vldr	s14, [r3]
 8001cdc:	4b54      	ldr	r3, [pc, #336]	@ (8001e30 <main+0x7c8>)
 8001cde:	edd3 7a00 	vldr	s15, [r3]
 8001ce2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce6:	4b50      	ldr	r3, [pc, #320]	@ (8001e28 <main+0x7c0>)
 8001ce8:	edd3 6a00 	vldr	s13, [r3]
 8001cec:	4b4f      	ldr	r3, [pc, #316]	@ (8001e2c <main+0x7c4>)
 8001cee:	edd3 7a00 	vldr	s15, [r3]
 8001cf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cf6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cfe:	ee17 0a90 	vmov	r0, s15
 8001d02:	f7fe fc41 	bl	8000588 <__aeabi_f2d>
 8001d06:	4604      	mov	r4, r0
 8001d08:	460d      	mov	r5, r1
 8001d0a:	4b48      	ldr	r3, [pc, #288]	@ (8001e2c <main+0x7c4>)
 8001d0c:	ed93 7a00 	vldr	s14, [r3]
 8001d10:	4b46      	ldr	r3, [pc, #280]	@ (8001e2c <main+0x7c4>)
 8001d12:	edd3 7a00 	vldr	s15, [r3]
 8001d16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d1a:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <main+0x7c8>)
 8001d1c:	edd3 6a00 	vldr	s13, [r3]
 8001d20:	4b43      	ldr	r3, [pc, #268]	@ (8001e30 <main+0x7c8>)
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3a:	ee17 0a90 	vmov	r0, s15
 8001d3e:	f7fe fc23 	bl	8000588 <__aeabi_f2d>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	ec43 2b11 	vmov	d1, r2, r3
 8001d4a:	ec45 4b10 	vmov	d0, r4, r5
 8001d4e:	f008 f901 	bl	8009f54 <atan2>
 8001d52:	ec51 0b10 	vmov	r0, r1, d0
 8001d56:	a31c      	add	r3, pc, #112	@ (adr r3, 8001dc8 <main+0x760>)
 8001d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5c:	f7fe fab4 	bl	80002c8 <__aeabi_dsub>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ff3e 	bl	8000be8 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	ee07 3a90 	vmov	s15, r3
 8001d72:	eef1 7a67 	vneg.f32	s15, s15
 8001d76:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <main+0x7cc>)
 8001d78:	edc3 7a00 	vstr	s15, [r3]
  				    yaw = yaw * (180.0 / pi);
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8001e34 <main+0x7cc>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fc01 	bl	8000588 <__aeabi_f2d>
 8001d86:	a312      	add	r3, pc, #72	@ (adr r3, 8001dd0 <main+0x768>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fc54 	bl	8000638 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe ff26 	bl	8000be8 <__aeabi_d2f>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a25      	ldr	r2, [pc, #148]	@ (8001e34 <main+0x7cc>)
 8001da0:	6013      	str	r3, [r2, #0]
  			  	  		  printf("Euler: Yaw=%.2f\n\r",yaw);
 8001da2:	4b24      	ldr	r3, [pc, #144]	@ (8001e34 <main+0x7cc>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fbee 	bl	8000588 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4821      	ldr	r0, [pc, #132]	@ (8001e38 <main+0x7d0>)
 8001db2:	f006 f8f9 	bl	8007fa8 <iprintf>
  			  	  		  printf("\n\n");
 8001db6:	4821      	ldr	r0, [pc, #132]	@ (8001e3c <main+0x7d4>)
 8001db8:	f006 f95e 	bl	8008078 <puts>
  			  	  	  }

  			  	  	  HAL_Delay(100); // Read at 10Hz
 8001dbc:	2064      	movs	r0, #100	@ 0x64
 8001dbe:	f000 fe45 	bl	8002a4c <HAL_Delay>
  {
 8001dc2:	e474      	b.n	80016ae <main+0x46>
 8001dc4:	f3af 8000 	nop.w
 8001dc8:	54411744 	.word	0x54411744
 8001dcc:	3ff921fb 	.word	0x3ff921fb
 8001dd0:	1a674644 	.word	0x1a674644
 8001dd4:	404ca5dc 	.word	0x404ca5dc
 8001dd8:	2000045c 	.word	0x2000045c
 8001ddc:	40010000 	.word	0x40010000
 8001de0:	20000268 	.word	0x20000268
 8001de4:	40020800 	.word	0x40020800
 8001de8:	20000460 	.word	0x20000460
 8001dec:	20000000 	.word	0x20000000
 8001df0:	40020400 	.word	0x40020400
 8001df4:	20000498 	.word	0x20000498
 8001df8:	200003f8 	.word	0x200003f8
 8001dfc:	200003f0 	.word	0x200003f0
 8001e00:	2000049c 	.word	0x2000049c
 8001e04:	200003fc 	.word	0x200003fc
 8001e08:	20000484 	.word	0x20000484
 8001e0c:	200003f4 	.word	0x200003f4
 8001e10:	200003e8 	.word	0x200003e8
 8001e14:	20000004 	.word	0x20000004
 8001e18:	200003ec 	.word	0x200003ec
 8001e1c:	20000400 	.word	0x20000400
 8001e20:	20000214 	.word	0x20000214
 8001e24:	20000438 	.word	0x20000438
 8001e28:	2000043c 	.word	0x2000043c
 8001e2c:	20000440 	.word	0x20000440
 8001e30:	20000444 	.word	0x20000444
 8001e34:	20000434 	.word	0x20000434
 8001e38:	0800b7d4 	.word	0x0800b7d4
 8001e3c:	0800b7e8 	.word	0x0800b7e8

08001e40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b094      	sub	sp, #80	@ 0x50
 8001e44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	2234      	movs	r2, #52	@ 0x34
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f006 f9f2 	bl	8008238 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e54:	f107 0308 	add.w	r3, r7, #8
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	4b2a      	ldr	r3, [pc, #168]	@ (8001f14 <SystemClock_Config+0xd4>)
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	4a29      	ldr	r2, [pc, #164]	@ (8001f14 <SystemClock_Config+0xd4>)
 8001e6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e74:	4b27      	ldr	r3, [pc, #156]	@ (8001f14 <SystemClock_Config+0xd4>)
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001e80:	2300      	movs	r3, #0
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <SystemClock_Config+0xd8>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e8c:	4a22      	ldr	r2, [pc, #136]	@ (8001f18 <SystemClock_Config+0xd8>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e92:	6013      	str	r3, [r2, #0]
 8001e94:	4b20      	ldr	r3, [pc, #128]	@ (8001f18 <SystemClock_Config+0xd8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ea8:	2310      	movs	r3, #16
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eac:	2302      	movs	r3, #2
 8001eae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001eb4:	2310      	movs	r3, #16
 8001eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ebc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eca:	f107 031c 	add.w	r3, r7, #28
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f002 ffe6 	bl	8004ea0 <HAL_RCC_OscConfig>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001eda:	f000 fa79 	bl	80023d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ede:	230f      	movs	r3, #15
 8001ee0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	2102      	movs	r1, #2
 8001efa:	4618      	mov	r0, r3
 8001efc:	f002 fc86 	bl	800480c <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001f06:	f000 fa63 	bl	80023d0 <Error_Handler>
  }
}
 8001f0a:	bf00      	nop
 8001f0c:	3750      	adds	r7, #80	@ 0x50
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000

08001f1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f22:	4a13      	ldr	r2, [pc, #76]	@ (8001f70 <MX_I2C1_Init+0x54>)
 8001f24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f28:	4a12      	ldr	r2, [pc, #72]	@ (8001f74 <MX_I2C1_Init+0x58>)
 8001f2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f3a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f40:	4b0a      	ldr	r3, [pc, #40]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f4c:	4b07      	ldr	r3, [pc, #28]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f52:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f58:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <MX_I2C1_Init+0x50>)
 8001f5a:	f001 fc5d 	bl	8003818 <HAL_I2C_Init>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f64:	f000 fa34 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f68:	bf00      	nop
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20000214 	.word	0x20000214
 8001f70:	40005400 	.word	0x40005400
 8001f74:	00061a80 	.word	0x00061a80

08001f78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b096      	sub	sp, #88	@ 0x58
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f7e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	605a      	str	r2, [r3, #4]
 8001f88:	609a      	str	r2, [r3, #8]
 8001f8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f90:	2200      	movs	r2, #0
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	609a      	str	r2, [r3, #8]
 8001fa2:	60da      	str	r2, [r3, #12]
 8001fa4:	611a      	str	r2, [r3, #16]
 8001fa6:	615a      	str	r2, [r3, #20]
 8001fa8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2220      	movs	r2, #32
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f006 f941 	bl	8008238 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fb6:	4b4a      	ldr	r3, [pc, #296]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8001fb8:	4a4a      	ldr	r2, [pc, #296]	@ (80020e4 <MX_TIM1_Init+0x16c>)
 8001fba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001fbc:	4b48      	ldr	r3, [pc, #288]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8001fbe:	22b3      	movs	r2, #179	@ 0xb3
 8001fc0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc2:	4b47      	ldr	r3, [pc, #284]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001fc8:	4b45      	ldr	r3, [pc, #276]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8001fca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd0:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fd6:	4b42      	ldr	r3, [pc, #264]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fdc:	4b40      	ldr	r3, [pc, #256]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fe2:	483f      	ldr	r0, [pc, #252]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8001fe4:	f003 f9fa 	bl	80053dc <HAL_TIM_Base_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001fee:	f000 f9ef 	bl	80023d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ff8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4838      	ldr	r0, [pc, #224]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8002000:	f003 fc1e 	bl	8005840 <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800200a:	f000 f9e1 	bl	80023d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800200e:	4834      	ldr	r0, [pc, #208]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8002010:	f003 fa33 	bl	800547a <HAL_TIM_PWM_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800201a:	f000 f9d9 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002022:	2300      	movs	r3, #0
 8002024:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002026:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800202a:	4619      	mov	r1, r3
 800202c:	482c      	ldr	r0, [pc, #176]	@ (80020e0 <MX_TIM1_Init+0x168>)
 800202e:	f003 ffeb 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002038:	f000 f9ca 	bl	80023d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203c:	2360      	movs	r3, #96	@ 0x60
 800203e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002044:	2300      	movs	r3, #0
 8002046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002048:	2300      	movs	r3, #0
 800204a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002054:	2300      	movs	r3, #0
 8002056:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800205c:	2200      	movs	r2, #0
 800205e:	4619      	mov	r1, r3
 8002060:	481f      	ldr	r0, [pc, #124]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8002062:	f003 fb2b 	bl	80056bc <HAL_TIM_PWM_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800206c:	f000 f9b0 	bl	80023d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002074:	2204      	movs	r2, #4
 8002076:	4619      	mov	r1, r3
 8002078:	4819      	ldr	r0, [pc, #100]	@ (80020e0 <MX_TIM1_Init+0x168>)
 800207a:	f003 fb1f 	bl	80056bc <HAL_TIM_PWM_ConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8002084:	f000 f9a4 	bl	80023d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208c:	2208      	movs	r2, #8
 800208e:	4619      	mov	r1, r3
 8002090:	4813      	ldr	r0, [pc, #76]	@ (80020e0 <MX_TIM1_Init+0x168>)
 8002092:	f003 fb13 	bl	80056bc <HAL_TIM_PWM_ConfigChannel>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d001      	beq.n	80020a0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800209c:	f000 f998 	bl	80023d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020be:	1d3b      	adds	r3, r7, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4807      	ldr	r0, [pc, #28]	@ (80020e0 <MX_TIM1_Init+0x168>)
 80020c4:	f004 f81c 	bl	8006100 <HAL_TIMEx_ConfigBreakDeadTime>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80020ce:	f000 f97f 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020d2:	4803      	ldr	r0, [pc, #12]	@ (80020e0 <MX_TIM1_Init+0x168>)
 80020d4:	f000 fa2a 	bl	800252c <HAL_TIM_MspPostInit>

}
 80020d8:	bf00      	nop
 80020da:	3758      	adds	r7, #88	@ 0x58
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000268 	.word	0x20000268
 80020e4:	40010000 	.word	0x40010000

080020e8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ee:	f107 0308 	add.w	r3, r7, #8
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	605a      	str	r2, [r3, #4]
 80020f8:	609a      	str	r2, [r3, #8]
 80020fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002104:	4b1e      	ldr	r3, [pc, #120]	@ (8002180 <MX_TIM8_Init+0x98>)
 8002106:	4a1f      	ldr	r2, [pc, #124]	@ (8002184 <MX_TIM8_Init+0x9c>)
 8002108:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 800210a:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <MX_TIM8_Init+0x98>)
 800210c:	22b3      	movs	r2, #179	@ 0xb3
 800210e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002110:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <MX_TIM8_Init+0x98>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8002116:	4b1a      	ldr	r3, [pc, #104]	@ (8002180 <MX_TIM8_Init+0x98>)
 8002118:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800211c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800211e:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <MX_TIM8_Init+0x98>)
 8002120:	2200      	movs	r2, #0
 8002122:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002124:	4b16      	ldr	r3, [pc, #88]	@ (8002180 <MX_TIM8_Init+0x98>)
 8002126:	2200      	movs	r2, #0
 8002128:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800212a:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <MX_TIM8_Init+0x98>)
 800212c:	2200      	movs	r2, #0
 800212e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002130:	4813      	ldr	r0, [pc, #76]	@ (8002180 <MX_TIM8_Init+0x98>)
 8002132:	f003 f953 	bl	80053dc <HAL_TIM_Base_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800213c:	f000 f948 	bl	80023d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002140:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002144:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002146:	f107 0308 	add.w	r3, r7, #8
 800214a:	4619      	mov	r1, r3
 800214c:	480c      	ldr	r0, [pc, #48]	@ (8002180 <MX_TIM8_Init+0x98>)
 800214e:	f003 fb77 	bl	8005840 <HAL_TIM_ConfigClockSource>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8002158:	f000 f93a 	bl	80023d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002164:	463b      	mov	r3, r7
 8002166:	4619      	mov	r1, r3
 8002168:	4805      	ldr	r0, [pc, #20]	@ (8002180 <MX_TIM8_Init+0x98>)
 800216a:	f003 ff4d 	bl	8006008 <HAL_TIMEx_MasterConfigSynchronization>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8002174:	f000 f92c 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002178:	bf00      	nop
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200002b0 	.word	0x200002b0
 8002184:	40010400 	.word	0x40010400

08002188 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <MX_UART4_Init+0x4c>)
 800218e:	4a12      	ldr	r2, [pc, #72]	@ (80021d8 <MX_UART4_Init+0x50>)
 8002190:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002192:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <MX_UART4_Init+0x4c>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b0e      	ldr	r3, [pc, #56]	@ (80021d4 <MX_UART4_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b08      	ldr	r3, [pc, #32]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80021be:	4805      	ldr	r0, [pc, #20]	@ (80021d4 <MX_UART4_Init+0x4c>)
 80021c0:	f003 fff0 	bl	80061a4 <HAL_UART_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80021ca:	f000 f901 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	200002f8 	.word	0x200002f8
 80021d8:	40004c00 	.word	0x40004c00

080021dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80021e0:	4b11      	ldr	r3, [pc, #68]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021e2:	4a12      	ldr	r2, [pc, #72]	@ (800222c <MX_USART2_UART_Init+0x50>)
 80021e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80021ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002200:	4b09      	ldr	r3, [pc, #36]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002202:	220c      	movs	r2, #12
 8002204:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002206:	4b08      	ldr	r3, [pc, #32]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	@ (8002228 <MX_USART2_UART_Init+0x4c>)
 8002214:	f003 ffc6 	bl	80061a4 <HAL_UART_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800221e:	f000 f8d7 	bl	80023d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000340 	.word	0x20000340
 800222c:	40004400 	.word	0x40004400

08002230 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <MX_DMA_Init+0x3c>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <MX_DMA_Init+0x3c>)
 8002240:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <MX_DMA_Init+0x3c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002252:	2200      	movs	r2, #0
 8002254:	2100      	movs	r1, #0
 8002256:	200d      	movs	r0, #13
 8002258:	f000 fcf7 	bl	8002c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800225c:	200d      	movs	r0, #13
 800225e:	f000 fd10 	bl	8002c82 <HAL_NVIC_EnableIRQ>

}
 8002262:	bf00      	nop
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800

08002270 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b08a      	sub	sp, #40	@ 0x28
 8002274:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	2200      	movs	r2, #0
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	605a      	str	r2, [r3, #4]
 8002280:	609a      	str	r2, [r3, #8]
 8002282:	60da      	str	r2, [r3, #12]
 8002284:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	613b      	str	r3, [r7, #16]
 800228a:	4b42      	ldr	r3, [pc, #264]	@ (8002394 <MX_GPIO_Init+0x124>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a41      	ldr	r2, [pc, #260]	@ (8002394 <MX_GPIO_Init+0x124>)
 8002290:	f043 0304 	orr.w	r3, r3, #4
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b3f      	ldr	r3, [pc, #252]	@ (8002394 <MX_GPIO_Init+0x124>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a3a      	ldr	r2, [pc, #232]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b38      	ldr	r3, [pc, #224]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	4b34      	ldr	r3, [pc, #208]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	4a33      	ldr	r2, [pc, #204]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ce:	4b31      	ldr	r3, [pc, #196]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
 80022d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022da:	2300      	movs	r3, #0
 80022dc:	607b      	str	r3, [r7, #4]
 80022de:	4b2d      	ldr	r3, [pc, #180]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022e4:	f043 0302 	orr.w	r3, r3, #2
 80022e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002394 <MX_GPIO_Init+0x124>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	607b      	str	r3, [r7, #4]
 80022f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2120      	movs	r1, #32
 80022fa:	4827      	ldr	r0, [pc, #156]	@ (8002398 <MX_GPIO_Init+0x128>)
 80022fc:	f001 fa72 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(stepper_direction_GPIO_Port, stepper_direction_Pin, GPIO_PIN_RESET);
 8002300:	2200      	movs	r2, #0
 8002302:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002306:	4825      	ldr	r0, [pc, #148]	@ (800239c <MX_GPIO_Init+0x12c>)
 8002308:	f001 fa6c 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, stepper_speed_Pin|motor1_Pin|motor2_Pin|motor3_Pin, GPIO_PIN_RESET);
 800230c:	2200      	movs	r2, #0
 800230e:	f44f 7170 	mov.w	r1, #960	@ 0x3c0
 8002312:	4823      	ldr	r0, [pc, #140]	@ (80023a0 <MX_GPIO_Init+0x130>)
 8002314:	f001 fa66 	bl	80037e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002318:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800231c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800231e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002322:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	4619      	mov	r1, r3
 800232e:	481c      	ldr	r0, [pc, #112]	@ (80023a0 <MX_GPIO_Init+0x130>)
 8002330:	f001 f8c4 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002334:	2320      	movs	r3, #32
 8002336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002338:	2301      	movs	r3, #1
 800233a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	4619      	mov	r1, r3
 800234a:	4813      	ldr	r0, [pc, #76]	@ (8002398 <MX_GPIO_Init+0x128>)
 800234c:	f001 f8b6 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pin : stepper_direction_Pin */
  GPIO_InitStruct.Pin = stepper_direction_Pin;
 8002350:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	2301      	movs	r3, #1
 8002358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(stepper_direction_GPIO_Port, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	480c      	ldr	r0, [pc, #48]	@ (800239c <MX_GPIO_Init+0x12c>)
 800236a:	f001 f8a7 	bl	80034bc <HAL_GPIO_Init>

  /*Configure GPIO pins : stepper_speed_Pin motor1_Pin motor2_Pin motor3_Pin */
  GPIO_InitStruct.Pin = stepper_speed_Pin|motor1_Pin|motor2_Pin|motor3_Pin;
 800236e:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002380:	f107 0314 	add.w	r3, r7, #20
 8002384:	4619      	mov	r1, r3
 8002386:	4806      	ldr	r0, [pc, #24]	@ (80023a0 <MX_GPIO_Init+0x130>)
 8002388:	f001 f898 	bl	80034bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800238c:	bf00      	nop
 800238e:	3728      	adds	r7, #40	@ 0x28
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40023800 	.word	0x40023800
 8002398:	40020000 	.word	0x40020000
 800239c:	40020400 	.word	0x40020400
 80023a0:	40020800 	.word	0x40020800

080023a4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	b29a      	uxth	r2, r3
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	4804      	ldr	r0, [pc, #16]	@ (80023cc <_write+0x28>)
 80023bc:	f003 ff42 	bl	8006244 <HAL_UART_Transmit>
	return len;
 80023c0:	687b      	ldr	r3, [r7, #4]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000340 	.word	0x20000340

080023d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023d4:	b672      	cpsid	i
}
 80023d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <Error_Handler+0x8>

080023dc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	4b10      	ldr	r3, [pc, #64]	@ (8002428 <HAL_MspInit+0x4c>)
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	4a0f      	ldr	r2, [pc, #60]	@ (8002428 <HAL_MspInit+0x4c>)
 80023ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <HAL_MspInit+0x4c>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023fa:	607b      	str	r3, [r7, #4]
 80023fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	603b      	str	r3, [r7, #0]
 8002402:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_MspInit+0x4c>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002406:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <HAL_MspInit+0x4c>)
 8002408:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800240c:	6413      	str	r3, [r2, #64]	@ 0x40
 800240e:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <HAL_MspInit+0x4c>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800241a:	2007      	movs	r0, #7
 800241c:	f000 fc0a 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	@ 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a19      	ldr	r2, [pc, #100]	@ (80024b0 <HAL_I2C_MspInit+0x84>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d12b      	bne.n	80024a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	4b18      	ldr	r3, [pc, #96]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002456:	4a17      	ldr	r2, [pc, #92]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002458:	f043 0302 	orr.w	r3, r3, #2
 800245c:	6313      	str	r3, [r2, #48]	@ 0x30
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800246a:	23c0      	movs	r3, #192	@ 0xc0
 800246c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800246e:	2312      	movs	r3, #18
 8002470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002476:	2303      	movs	r3, #3
 8002478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800247a:	2304      	movs	r3, #4
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	480c      	ldr	r0, [pc, #48]	@ (80024b8 <HAL_I2C_MspInit+0x8c>)
 8002486:	f001 f819 	bl	80034bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002492:	4a08      	ldr	r2, [pc, #32]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 8002494:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002498:	6413      	str	r3, [r2, #64]	@ 0x40
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <HAL_I2C_MspInit+0x88>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800249e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024a2:	60fb      	str	r3, [r7, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80024a6:	bf00      	nop
 80024a8:	3728      	adds	r7, #40	@ 0x28
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40005400 	.word	0x40005400
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020400 	.word	0x40020400

080024bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a15      	ldr	r2, [pc, #84]	@ (8002520 <HAL_TIM_Base_MspInit+0x64>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10e      	bne.n	80024ec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <HAL_TIM_Base_MspInit+0x68>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	4a13      	ldr	r2, [pc, #76]	@ (8002524 <HAL_TIM_Base_MspInit+0x68>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024de:	4b11      	ldr	r3, [pc, #68]	@ (8002524 <HAL_TIM_Base_MspInit+0x68>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80024ea:	e012      	b.n	8002512 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002528 <HAL_TIM_Base_MspInit+0x6c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d10d      	bne.n	8002512 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_TIM_Base_MspInit+0x68>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024fe:	4a09      	ldr	r2, [pc, #36]	@ (8002524 <HAL_TIM_Base_MspInit+0x68>)
 8002500:	f043 0302 	orr.w	r3, r3, #2
 8002504:	6453      	str	r3, [r2, #68]	@ 0x44
 8002506:	4b07      	ldr	r3, [pc, #28]	@ (8002524 <HAL_TIM_Base_MspInit+0x68>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	60bb      	str	r3, [r7, #8]
 8002510:	68bb      	ldr	r3, [r7, #8]
}
 8002512:	bf00      	nop
 8002514:	3714      	adds	r7, #20
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000
 8002524:	40023800 	.word	0x40023800
 8002528:	40010400 	.word	0x40010400

0800252c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b088      	sub	sp, #32
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a12      	ldr	r2, [pc, #72]	@ (8002594 <HAL_TIM_MspPostInit+0x68>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d11e      	bne.n	800258c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <HAL_TIM_MspPostInit+0x6c>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_TIM_MspPostInit+0x6c>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	6313      	str	r3, [r2, #48]	@ 0x30
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <HAL_TIM_MspPostInit+0x6c>)
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800256a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800256e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800257c:	2301      	movs	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002580:	f107 030c 	add.w	r3, r7, #12
 8002584:	4619      	mov	r1, r3
 8002586:	4805      	ldr	r0, [pc, #20]	@ (800259c <HAL_TIM_MspPostInit+0x70>)
 8002588:	f000 ff98 	bl	80034bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800258c:	bf00      	nop
 800258e:	3720      	adds	r7, #32
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40010000 	.word	0x40010000
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000

080025a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b08c      	sub	sp, #48	@ 0x30
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a4e      	ldr	r2, [pc, #312]	@ (80026f8 <HAL_UART_MspInit+0x158>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d164      	bne.n	800268c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	61bb      	str	r3, [r7, #24]
 80025c6:	4b4d      	ldr	r3, [pc, #308]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ca:	4a4c      	ldr	r2, [pc, #304]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80025cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80025d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d2:	4b4a      	ldr	r3, [pc, #296]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025da:	61bb      	str	r3, [r7, #24]
 80025dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	617b      	str	r3, [r7, #20]
 80025e2:	4b46      	ldr	r3, [pc, #280]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a45      	ldr	r2, [pc, #276]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80025e8:	f043 0304 	orr.w	r3, r3, #4
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b43      	ldr	r3, [pc, #268]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	617b      	str	r3, [r7, #20]
 80025f8:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80025fa:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80025fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002600:	2302      	movs	r3, #2
 8002602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002608:	2303      	movs	r3, #3
 800260a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800260c:	2308      	movs	r3, #8
 800260e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002610:	f107 031c 	add.w	r3, r7, #28
 8002614:	4619      	mov	r1, r3
 8002616:	483a      	ldr	r0, [pc, #232]	@ (8002700 <HAL_UART_MspInit+0x160>)
 8002618:	f000 ff50 	bl	80034bc <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800261c:	4b39      	ldr	r3, [pc, #228]	@ (8002704 <HAL_UART_MspInit+0x164>)
 800261e:	4a3a      	ldr	r2, [pc, #232]	@ (8002708 <HAL_UART_MspInit+0x168>)
 8002620:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002622:	4b38      	ldr	r3, [pc, #224]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002624:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002628:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800262a:	4b36      	ldr	r3, [pc, #216]	@ (8002704 <HAL_UART_MspInit+0x164>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002630:	4b34      	ldr	r3, [pc, #208]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002632:	2200      	movs	r2, #0
 8002634:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002636:	4b33      	ldr	r3, [pc, #204]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002638:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800263c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800263e:	4b31      	ldr	r3, [pc, #196]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002640:	2200      	movs	r2, #0
 8002642:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002644:	4b2f      	ldr	r3, [pc, #188]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002646:	2200      	movs	r2, #0
 8002648:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800264a:	4b2e      	ldr	r3, [pc, #184]	@ (8002704 <HAL_UART_MspInit+0x164>)
 800264c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002650:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002652:	4b2c      	ldr	r3, [pc, #176]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002654:	2200      	movs	r2, #0
 8002656:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002658:	4b2a      	ldr	r3, [pc, #168]	@ (8002704 <HAL_UART_MspInit+0x164>)
 800265a:	2200      	movs	r2, #0
 800265c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800265e:	4829      	ldr	r0, [pc, #164]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002660:	f000 fb2a 	bl	8002cb8 <HAL_DMA_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800266a:	f7ff feb1 	bl	80023d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a24      	ldr	r2, [pc, #144]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002672:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002674:	4a23      	ldr	r2, [pc, #140]	@ (8002704 <HAL_UART_MspInit+0x164>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800267a:	2200      	movs	r2, #0
 800267c:	2100      	movs	r1, #0
 800267e:	2034      	movs	r0, #52	@ 0x34
 8002680:	f000 fae3 	bl	8002c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002684:	2034      	movs	r0, #52	@ 0x34
 8002686:	f000 fafc 	bl	8002c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800268a:	e030      	b.n	80026ee <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1e      	ldr	r2, [pc, #120]	@ (800270c <HAL_UART_MspInit+0x16c>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d12b      	bne.n	80026ee <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4a17      	ldr	r2, [pc, #92]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	4a10      	ldr	r2, [pc, #64]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c2:	4b0e      	ldr	r3, [pc, #56]	@ (80026fc <HAL_UART_MspInit+0x15c>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026ce:	230c      	movs	r3, #12
 80026d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d2:	2302      	movs	r3, #2
 80026d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d6:	2300      	movs	r3, #0
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026da:	2303      	movs	r3, #3
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026de:	2307      	movs	r3, #7
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026e2:	f107 031c 	add.w	r3, r7, #28
 80026e6:	4619      	mov	r1, r3
 80026e8:	4809      	ldr	r0, [pc, #36]	@ (8002710 <HAL_UART_MspInit+0x170>)
 80026ea:	f000 fee7 	bl	80034bc <HAL_GPIO_Init>
}
 80026ee:	bf00      	nop
 80026f0:	3730      	adds	r7, #48	@ 0x30
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	40004c00 	.word	0x40004c00
 80026fc:	40023800 	.word	0x40023800
 8002700:	40020800 	.word	0x40020800
 8002704:	20000388 	.word	0x20000388
 8002708:	40026040 	.word	0x40026040
 800270c:	40004400 	.word	0x40004400
 8002710:	40020000 	.word	0x40020000

08002714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <NMI_Handler+0x4>

0800271c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002720:	bf00      	nop
 8002722:	e7fd      	b.n	8002720 <HardFault_Handler+0x4>

08002724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002728:	bf00      	nop
 800272a:	e7fd      	b.n	8002728 <MemManage_Handler+0x4>

0800272c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002730:	bf00      	nop
 8002732:	e7fd      	b.n	8002730 <BusFault_Handler+0x4>

08002734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002738:	bf00      	nop
 800273a:	e7fd      	b.n	8002738 <UsageFault_Handler+0x4>

0800273c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274e:	bf00      	nop
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800275c:	bf00      	nop
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800276a:	f000 f94f 	bl	8002a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <DMA1_Stream2_IRQHandler+0x10>)
 800277a:	f000 fc35 	bl	8002fe8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000388 	.word	0x20000388

08002788 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <UART4_IRQHandler+0x10>)
 800278e:	f003 fe09 	bl	80063a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200002f8 	.word	0x200002f8

0800279c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return 1;
 80027a0:	2301      	movs	r3, #1
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_kill>:

int _kill(int pid, int sig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027b6:	f005 fd91 	bl	80082dc <__errno>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2216      	movs	r2, #22
 80027be:	601a      	str	r2, [r3, #0]
  return -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_exit>:

void _exit (int status)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027d4:	f04f 31ff 	mov.w	r1, #4294967295
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ffe7 	bl	80027ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80027de:	bf00      	nop
 80027e0:	e7fd      	b.n	80027de <_exit+0x12>

080027e2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ee:	2300      	movs	r3, #0
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	e00a      	b.n	800280a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027f4:	f3af 8000 	nop.w
 80027f8:	4601      	mov	r1, r0
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	60ba      	str	r2, [r7, #8]
 8002800:	b2ca      	uxtb	r2, r1
 8002802:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	3301      	adds	r3, #1
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	dbf0      	blt.n	80027f4 <_read+0x12>
  }

  return len;
 8002812:	687b      	ldr	r3, [r7, #4]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <_close>:
  }
  return len;
}

int _close(int file)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002824:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002844:	605a      	str	r2, [r3, #4]
  return 0;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <_isatty>:

int _isatty(int file)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800285c:	2301      	movs	r3, #1
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800286a:	b480      	push	{r7}
 800286c:	b085      	sub	sp, #20
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800288c:	4a14      	ldr	r2, [pc, #80]	@ (80028e0 <_sbrk+0x5c>)
 800288e:	4b15      	ldr	r3, [pc, #84]	@ (80028e4 <_sbrk+0x60>)
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <_sbrk+0x64>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d102      	bne.n	80028a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a0:	4b11      	ldr	r3, [pc, #68]	@ (80028e8 <_sbrk+0x64>)
 80028a2:	4a12      	ldr	r2, [pc, #72]	@ (80028ec <_sbrk+0x68>)
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028a6:	4b10      	ldr	r3, [pc, #64]	@ (80028e8 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d207      	bcs.n	80028c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028b4:	f005 fd12 	bl	80082dc <__errno>
 80028b8:	4603      	mov	r3, r0
 80028ba:	220c      	movs	r2, #12
 80028bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028be:	f04f 33ff 	mov.w	r3, #4294967295
 80028c2:	e009      	b.n	80028d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028c4:	4b08      	ldr	r3, [pc, #32]	@ (80028e8 <_sbrk+0x64>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ca:	4b07      	ldr	r3, [pc, #28]	@ (80028e8 <_sbrk+0x64>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	4a05      	ldr	r2, [pc, #20]	@ (80028e8 <_sbrk+0x64>)
 80028d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028d6:	68fb      	ldr	r3, [r7, #12]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20020000 	.word	0x20020000
 80028e4:	00000400 	.word	0x00000400
 80028e8:	200004b0 	.word	0x200004b0
 80028ec:	20000608 	.word	0x20000608

080028f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f4:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <SystemInit+0x20>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	4a05      	ldr	r2, [pc, #20]	@ (8002910 <SystemInit+0x20>)
 80028fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002904:	bf00      	nop
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	e000ed00 	.word	0xe000ed00

08002914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800294c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002918:	f7ff ffea 	bl	80028f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800291c:	480c      	ldr	r0, [pc, #48]	@ (8002950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800291e:	490d      	ldr	r1, [pc, #52]	@ (8002954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002920:	4a0d      	ldr	r2, [pc, #52]	@ (8002958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002924:	e002      	b.n	800292c <LoopCopyDataInit>

08002926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800292a:	3304      	adds	r3, #4

0800292c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800292c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800292e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002930:	d3f9      	bcc.n	8002926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002932:	4a0a      	ldr	r2, [pc, #40]	@ (800295c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002934:	4c0a      	ldr	r4, [pc, #40]	@ (8002960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002938:	e001      	b.n	800293e <LoopFillZerobss>

0800293a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800293a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800293c:	3204      	adds	r2, #4

0800293e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800293e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002940:	d3fb      	bcc.n	800293a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002942:	f005 fcd1 	bl	80082e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002946:	f7fe fe8f 	bl	8001668 <main>
  bx  lr    
 800294a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800294c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002954:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002958:	0800bdd8 	.word	0x0800bdd8
  ldr r2, =_sbss
 800295c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002960:	20000604 	.word	0x20000604

08002964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002964:	e7fe      	b.n	8002964 <ADC_IRQHandler>
	...

08002968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800296c:	4b0e      	ldr	r3, [pc, #56]	@ (80029a8 <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <HAL_Init+0x40>)
 8002972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002978:	4b0b      	ldr	r3, [pc, #44]	@ (80029a8 <HAL_Init+0x40>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a0a      	ldr	r2, [pc, #40]	@ (80029a8 <HAL_Init+0x40>)
 800297e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002984:	4b08      	ldr	r3, [pc, #32]	@ (80029a8 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a07      	ldr	r2, [pc, #28]	@ (80029a8 <HAL_Init+0x40>)
 800298a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800298e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002990:	2003      	movs	r0, #3
 8002992:	f000 f94f 	bl	8002c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002996:	2000      	movs	r0, #0
 8002998:	f000 f808 	bl	80029ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800299c:	f7ff fd1e 	bl	80023dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00

080029ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b4:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_InitTick+0x54>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b12      	ldr	r3, [pc, #72]	@ (8002a04 <HAL_InitTick+0x58>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	4619      	mov	r1, r3
 80029be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f000 f967 	bl	8002c9e <HAL_SYSTICK_Config>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e00e      	b.n	80029f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b0f      	cmp	r3, #15
 80029de:	d80a      	bhi.n	80029f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029e0:	2200      	movs	r2, #0
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	f000 f92f 	bl	8002c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029ec:	4a06      	ldr	r2, [pc, #24]	@ (8002a08 <HAL_InitTick+0x5c>)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000010 	.word	0x20000010
 8002a04:	20000018 	.word	0x20000018
 8002a08:	20000014 	.word	0x20000014

08002a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a10:	4b06      	ldr	r3, [pc, #24]	@ (8002a2c <HAL_IncTick+0x20>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	461a      	mov	r2, r3
 8002a16:	4b06      	ldr	r3, [pc, #24]	@ (8002a30 <HAL_IncTick+0x24>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <HAL_IncTick+0x24>)
 8002a1e:	6013      	str	r3, [r2, #0]
}
 8002a20:	bf00      	nop
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000018 	.word	0x20000018
 8002a30:	200004b4 	.word	0x200004b4

08002a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return uwTick;
 8002a38:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <HAL_GetTick+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	200004b4 	.word	0x200004b4

08002a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a54:	f7ff ffee 	bl	8002a34 <HAL_GetTick>
 8002a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d005      	beq.n	8002a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a66:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <HAL_Delay+0x44>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	4413      	add	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a72:	bf00      	nop
 8002a74:	f7ff ffde 	bl	8002a34 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d8f7      	bhi.n	8002a74 <HAL_Delay+0x28>
  {
  }
}
 8002a84:	bf00      	nop
 8002a86:	bf00      	nop
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000018 	.word	0x20000018

08002a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b085      	sub	sp, #20
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002abc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ac6:	4a04      	ldr	r2, [pc, #16]	@ (8002ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	60d3      	str	r3, [r2, #12]
}
 8002acc:	bf00      	nop
 8002ace:	3714      	adds	r7, #20
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0a1b      	lsrs	r3, r3, #8
 8002ae6:	f003 0307 	and.w	r3, r3, #7
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	e000ed00 	.word	0xe000ed00

08002af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	4603      	mov	r3, r0
 8002b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	db0b      	blt.n	8002b22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
 8002b0c:	f003 021f 	and.w	r2, r3, #31
 8002b10:	4907      	ldr	r1, [pc, #28]	@ (8002b30 <__NVIC_EnableIRQ+0x38>)
 8002b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b16:	095b      	lsrs	r3, r3, #5
 8002b18:	2001      	movs	r0, #1
 8002b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	e000e100 	.word	0xe000e100

08002b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	6039      	str	r1, [r7, #0]
 8002b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	db0a      	blt.n	8002b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	490c      	ldr	r1, [pc, #48]	@ (8002b80 <__NVIC_SetPriority+0x4c>)
 8002b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	b2d2      	uxtb	r2, r2
 8002b56:	440b      	add	r3, r1
 8002b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b5c:	e00a      	b.n	8002b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4908      	ldr	r1, [pc, #32]	@ (8002b84 <__NVIC_SetPriority+0x50>)
 8002b64:	79fb      	ldrb	r3, [r7, #7]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	3b04      	subs	r3, #4
 8002b6c:	0112      	lsls	r2, r2, #4
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	761a      	strb	r2, [r3, #24]
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000e100 	.word	0xe000e100
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	@ 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ba2:	2b04      	cmp	r3, #4
 8002ba4:	bf28      	it	cs
 8002ba6:	2304      	movcs	r3, #4
 8002ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3304      	adds	r3, #4
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d902      	bls.n	8002bb8 <NVIC_EncodePriority+0x30>
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	3b03      	subs	r3, #3
 8002bb6:	e000      	b.n	8002bba <NVIC_EncodePriority+0x32>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	43da      	mvns	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	401a      	ands	r2, r3
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bda:	43d9      	mvns	r1, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002be0:	4313      	orrs	r3, r2
         );
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3724      	adds	r7, #36	@ 0x24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c00:	d301      	bcc.n	8002c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c02:	2301      	movs	r3, #1
 8002c04:	e00f      	b.n	8002c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c06:	4a0a      	ldr	r2, [pc, #40]	@ (8002c30 <SysTick_Config+0x40>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c0e:	210f      	movs	r1, #15
 8002c10:	f04f 30ff 	mov.w	r0, #4294967295
 8002c14:	f7ff ff8e 	bl	8002b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c18:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <SysTick_Config+0x40>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c1e:	4b04      	ldr	r3, [pc, #16]	@ (8002c30 <SysTick_Config+0x40>)
 8002c20:	2207      	movs	r2, #7
 8002c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000e010 	.word	0xe000e010

08002c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f7ff ff29 	bl	8002a94 <__NVIC_SetPriorityGrouping>
}
 8002c42:	bf00      	nop
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b086      	sub	sp, #24
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	4603      	mov	r3, r0
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c5c:	f7ff ff3e 	bl	8002adc <__NVIC_GetPriorityGrouping>
 8002c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	6978      	ldr	r0, [r7, #20]
 8002c68:	f7ff ff8e 	bl	8002b88 <NVIC_EncodePriority>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c72:	4611      	mov	r1, r2
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff5d 	bl	8002b34 <__NVIC_SetPriority>
}
 8002c7a:	bf00      	nop
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff ff31 	bl	8002af8 <__NVIC_EnableIRQ>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ffa2 	bl	8002bf0 <SysTick_Config>
 8002cac:	4603      	mov	r3, r0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff feb6 	bl	8002a34 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e099      	b.n	8002e08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cf4:	e00f      	b.n	8002d16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cf6:	f7ff fe9d 	bl	8002a34 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b05      	cmp	r3, #5
 8002d02:	d908      	bls.n	8002d16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e078      	b.n	8002e08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e8      	bne.n	8002cf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	4b38      	ldr	r3, [pc, #224]	@ (8002e10 <HAL_DMA_Init+0x158>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d107      	bne.n	8002d80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	2b04      	cmp	r3, #4
 8002da8:	d117      	bne.n	8002dda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00e      	beq.n	8002dda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fb01 	bl	80033c4 <DMA_CheckFifoParam>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d008      	beq.n	8002dda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2240      	movs	r2, #64	@ 0x40
 8002dcc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e016      	b.n	8002e08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fab8 	bl	8003358 <DMA_CalcBaseAndBitshift>
 8002de8:	4603      	mov	r3, r0
 8002dea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df0:	223f      	movs	r2, #63	@ 0x3f
 8002df2:	409a      	lsls	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	f010803f 	.word	0xf010803f

08002e14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_DMA_Start_IT+0x26>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e040      	b.n	8002ebc <HAL_DMA_Start_IT+0xa8>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d12f      	bne.n	8002eae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2202      	movs	r2, #2
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fa4a 	bl	80032fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e6c:	223f      	movs	r2, #63	@ 0x3f
 8002e6e:	409a      	lsls	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0216 	orr.w	r2, r2, #22
 8002e82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0208 	orr.w	r2, r2, #8
 8002e9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e005      	b.n	8002eba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ed2:	f7ff fdaf 	bl	8002a34 <HAL_GetTick>
 8002ed6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d008      	beq.n	8002ef6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2280      	movs	r2, #128	@ 0x80
 8002ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e052      	b.n	8002f9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0216 	bic.w	r2, r2, #22
 8002f04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <HAL_DMA_Abort+0x62>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0208 	bic.w	r2, r2, #8
 8002f34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f46:	e013      	b.n	8002f70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f48:	f7ff fd74 	bl	8002a34 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b05      	cmp	r3, #5
 8002f54:	d90c      	bls.n	8002f70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2203      	movs	r2, #3
 8002f60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e015      	b.n	8002f9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1e4      	bne.n	8002f48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f82:	223f      	movs	r2, #63	@ 0x3f
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2280      	movs	r2, #128	@ 0x80
 8002fbc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00c      	b.n	8002fdc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2205      	movs	r2, #5
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ff4:	4b8e      	ldr	r3, [pc, #568]	@ (8003230 <HAL_DMA_IRQHandler+0x248>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a8e      	ldr	r2, [pc, #568]	@ (8003234 <HAL_DMA_IRQHandler+0x24c>)
 8002ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffe:	0a9b      	lsrs	r3, r3, #10
 8003000:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	2208      	movs	r2, #8
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d01a      	beq.n	8003054 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d013      	beq.n	8003054 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0204 	bic.w	r2, r2, #4
 800303a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003040:	2208      	movs	r2, #8
 8003042:	409a      	lsls	r2, r3
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f043 0201 	orr.w	r2, r3, #1
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003058:	2201      	movs	r2, #1
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	4013      	ands	r3, r2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003076:	2201      	movs	r2, #1
 8003078:	409a      	lsls	r2, r3
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	f043 0202 	orr.w	r2, r3, #2
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308e:	2204      	movs	r2, #4
 8003090:	409a      	lsls	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4013      	ands	r3, r2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	2204      	movs	r2, #4
 80030ae:	409a      	lsls	r2, r3
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b8:	f043 0204 	orr.w	r2, r3, #4
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c4:	2210      	movs	r2, #16
 80030c6:	409a      	lsls	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d043      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d03c      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e2:	2210      	movs	r2, #16
 80030e4:	409a      	lsls	r2, r3
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d018      	beq.n	800312a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d108      	bne.n	8003118 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	2b00      	cmp	r3, #0
 800310c:	d024      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	4798      	blx	r3
 8003116:	e01f      	b.n	8003158 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e016      	b.n	8003158 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003134:	2b00      	cmp	r3, #0
 8003136:	d107      	bne.n	8003148 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0208 	bic.w	r2, r2, #8
 8003146:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315c:	2220      	movs	r2, #32
 800315e:	409a      	lsls	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4013      	ands	r3, r2
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 808f 	beq.w	8003288 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8087 	beq.w	8003288 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800317e:	2220      	movs	r2, #32
 8003180:	409a      	lsls	r2, r3
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b05      	cmp	r3, #5
 8003190:	d136      	bne.n	8003200 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0216 	bic.w	r2, r2, #22
 80031a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d103      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x1da>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d007      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 0208 	bic.w	r2, r2, #8
 80031d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031d6:	223f      	movs	r2, #63	@ 0x3f
 80031d8:	409a      	lsls	r2, r3
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d07e      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
        }
        return;
 80031fe:	e079      	b.n	80032f4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d01d      	beq.n	800324a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10d      	bne.n	8003238 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003220:	2b00      	cmp	r3, #0
 8003222:	d031      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
 800322c:	e02c      	b.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
 800322e:	bf00      	nop
 8003230:	20000010 	.word	0x20000010
 8003234:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
 8003248:	e01e      	b.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0210 	bic.w	r2, r2, #16
 8003266:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328c:	2b00      	cmp	r3, #0
 800328e:	d032      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d022      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2205      	movs	r2, #5
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0201 	bic.w	r2, r2, #1
 80032b2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	3301      	adds	r3, #1
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d307      	bcc.n	80032d0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f2      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x2cc>
 80032ce:	e000      	b.n	80032d2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80032d0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2201      	movs	r2, #1
 80032d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d005      	beq.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
 80032f2:	e000      	b.n	80032f6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80032f4:	bf00      	nop
    }
  }
}
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003318:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b40      	cmp	r3, #64	@ 0x40
 8003328:	d108      	bne.n	800333c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800333a:	e007      	b.n	800334c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	60da      	str	r2, [r3, #12]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	b2db      	uxtb	r3, r3
 8003366:	3b10      	subs	r3, #16
 8003368:	4a14      	ldr	r2, [pc, #80]	@ (80033bc <DMA_CalcBaseAndBitshift+0x64>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	091b      	lsrs	r3, r3, #4
 8003370:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003372:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4413      	add	r3, r2
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b03      	cmp	r3, #3
 8003384:	d909      	bls.n	800339a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800338e:	f023 0303 	bic.w	r3, r3, #3
 8003392:	1d1a      	adds	r2, r3, #4
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58
 8003398:	e007      	b.n	80033aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80033a2:	f023 0303 	bic.w	r3, r3, #3
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	aaaaaaab 	.word	0xaaaaaaab
 80033c0:	0800b804 	.word	0x0800b804

080033c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	699b      	ldr	r3, [r3, #24]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d11f      	bne.n	800341e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d856      	bhi.n	8003492 <DMA_CheckFifoParam+0xce>
 80033e4:	a201      	add	r2, pc, #4	@ (adr r2, 80033ec <DMA_CheckFifoParam+0x28>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	0800340f 	.word	0x0800340f
 80033f4:	080033fd 	.word	0x080033fd
 80033f8:	08003493 	.word	0x08003493
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d046      	beq.n	8003496 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800340c:	e043      	b.n	8003496 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003416:	d140      	bne.n	800349a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800341c:	e03d      	b.n	800349a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003426:	d121      	bne.n	800346c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	2b03      	cmp	r3, #3
 800342c:	d837      	bhi.n	800349e <DMA_CheckFifoParam+0xda>
 800342e:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <DMA_CheckFifoParam+0x70>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003445 	.word	0x08003445
 8003438:	0800344b 	.word	0x0800344b
 800343c:	08003445 	.word	0x08003445
 8003440:	0800345d 	.word	0x0800345d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
      break;
 8003448:	e030      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d025      	beq.n	80034a2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800345a:	e022      	b.n	80034a2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003464:	d11f      	bne.n	80034a6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800346a:	e01c      	b.n	80034a6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2b02      	cmp	r3, #2
 8003470:	d903      	bls.n	800347a <DMA_CheckFifoParam+0xb6>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d003      	beq.n	8003480 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003478:	e018      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	73fb      	strb	r3, [r7, #15]
      break;
 800347e:	e015      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e00b      	b.n	80034aa <DMA_CheckFifoParam+0xe6>
      break;
 8003492:	bf00      	nop
 8003494:	e00a      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
 8003498:	e008      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 800349a:	bf00      	nop
 800349c:	e006      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 800349e:	bf00      	nop
 80034a0:	e004      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
 80034a4:	e002      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;   
 80034a6:	bf00      	nop
 80034a8:	e000      	b.n	80034ac <DMA_CheckFifoParam+0xe8>
      break;
 80034aa:	bf00      	nop
    }
  } 
  
  return status; 
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop

080034bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034bc:	b480      	push	{r7}
 80034be:	b089      	sub	sp, #36	@ 0x24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034c6:	2300      	movs	r3, #0
 80034c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034d2:	2300      	movs	r3, #0
 80034d4:	61fb      	str	r3, [r7, #28]
 80034d6:	e165      	b.n	80037a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034d8:	2201      	movs	r2, #1
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4013      	ands	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034ec:	693a      	ldr	r2, [r7, #16]
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	f040 8154 	bne.w	800379e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d005      	beq.n	800350e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350a:	2b02      	cmp	r3, #2
 800350c:	d130      	bne.n	8003570 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	2203      	movs	r2, #3
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003544:	2201      	movs	r2, #1
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	4013      	ands	r3, r2
 8003552:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 0201 	and.w	r2, r3, #1
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	4313      	orrs	r3, r2
 8003568:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	2b03      	cmp	r3, #3
 800357a:	d017      	beq.n	80035ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	005b      	lsls	r3, r3, #1
 8003586:	2203      	movs	r2, #3
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d123      	bne.n	8003600 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	08da      	lsrs	r2, r3, #3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3208      	adds	r2, #8
 80035c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	f003 0307 	and.w	r3, r3, #7
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	220f      	movs	r2, #15
 80035d0:	fa02 f303 	lsl.w	r3, r2, r3
 80035d4:	43db      	mvns	r3, r3
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	4013      	ands	r3, r2
 80035da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	691a      	ldr	r2, [r3, #16]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f003 0307 	and.w	r3, r3, #7
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	08da      	lsrs	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3208      	adds	r2, #8
 80035fa:	69b9      	ldr	r1, [r7, #24]
 80035fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	2203      	movs	r2, #3
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f003 0203 	and.w	r2, r3, #3
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800363c:	2b00      	cmp	r3, #0
 800363e:	f000 80ae 	beq.w	800379e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	4b5d      	ldr	r3, [pc, #372]	@ (80037bc <HAL_GPIO_Init+0x300>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	4a5c      	ldr	r2, [pc, #368]	@ (80037bc <HAL_GPIO_Init+0x300>)
 800364c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003650:	6453      	str	r3, [r2, #68]	@ 0x44
 8003652:	4b5a      	ldr	r3, [pc, #360]	@ (80037bc <HAL_GPIO_Init+0x300>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800365a:	60fb      	str	r3, [r7, #12]
 800365c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800365e:	4a58      	ldr	r2, [pc, #352]	@ (80037c0 <HAL_GPIO_Init+0x304>)
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	089b      	lsrs	r3, r3, #2
 8003664:	3302      	adds	r3, #2
 8003666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800366a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	220f      	movs	r2, #15
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4f      	ldr	r2, [pc, #316]	@ (80037c4 <HAL_GPIO_Init+0x308>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d025      	beq.n	80036d6 <HAL_GPIO_Init+0x21a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4e      	ldr	r2, [pc, #312]	@ (80037c8 <HAL_GPIO_Init+0x30c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01f      	beq.n	80036d2 <HAL_GPIO_Init+0x216>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4d      	ldr	r2, [pc, #308]	@ (80037cc <HAL_GPIO_Init+0x310>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d019      	beq.n	80036ce <HAL_GPIO_Init+0x212>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a4c      	ldr	r2, [pc, #304]	@ (80037d0 <HAL_GPIO_Init+0x314>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d013      	beq.n	80036ca <HAL_GPIO_Init+0x20e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4b      	ldr	r2, [pc, #300]	@ (80037d4 <HAL_GPIO_Init+0x318>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00d      	beq.n	80036c6 <HAL_GPIO_Init+0x20a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4a      	ldr	r2, [pc, #296]	@ (80037d8 <HAL_GPIO_Init+0x31c>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d007      	beq.n	80036c2 <HAL_GPIO_Init+0x206>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a49      	ldr	r2, [pc, #292]	@ (80037dc <HAL_GPIO_Init+0x320>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d101      	bne.n	80036be <HAL_GPIO_Init+0x202>
 80036ba:	2306      	movs	r3, #6
 80036bc:	e00c      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036be:	2307      	movs	r3, #7
 80036c0:	e00a      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036c2:	2305      	movs	r3, #5
 80036c4:	e008      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036c6:	2304      	movs	r3, #4
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036ca:	2303      	movs	r3, #3
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x21c>
 80036d6:	2300      	movs	r3, #0
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	f002 0203 	and.w	r2, r2, #3
 80036de:	0092      	lsls	r2, r2, #2
 80036e0:	4093      	lsls	r3, r2
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e8:	4935      	ldr	r1, [pc, #212]	@ (80037c0 <HAL_GPIO_Init+0x304>)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3302      	adds	r3, #2
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f6:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <HAL_GPIO_Init+0x324>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371a:	4a31      	ldr	r2, [pc, #196]	@ (80037e0 <HAL_GPIO_Init+0x324>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003720:	4b2f      	ldr	r3, [pc, #188]	@ (80037e0 <HAL_GPIO_Init+0x324>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003744:	4a26      	ldr	r2, [pc, #152]	@ (80037e0 <HAL_GPIO_Init+0x324>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800374a:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <HAL_GPIO_Init+0x324>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376e:	4a1c      	ldr	r2, [pc, #112]	@ (80037e0 <HAL_GPIO_Init+0x324>)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003774:	4b1a      	ldr	r3, [pc, #104]	@ (80037e0 <HAL_GPIO_Init+0x324>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003798:	4a11      	ldr	r2, [pc, #68]	@ (80037e0 <HAL_GPIO_Init+0x324>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	f67f ae96 	bls.w	80034d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3724      	adds	r7, #36	@ 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40013800 	.word	0x40013800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40020400 	.word	0x40020400
 80037cc:	40020800 	.word	0x40020800
 80037d0:	40020c00 	.word	0x40020c00
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40021400 	.word	0x40021400
 80037dc:	40021800 	.word	0x40021800
 80037e0:	40013c00 	.word	0x40013c00

080037e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	807b      	strh	r3, [r7, #2]
 80037f0:	4613      	mov	r3, r2
 80037f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f4:	787b      	ldrb	r3, [r7, #1]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d003      	beq.n	8003802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003800:	e003      	b.n	800380a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003802:	887b      	ldrh	r3, [r7, #2]
 8003804:	041a      	lsls	r2, r3, #16
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	619a      	str	r2, [r3, #24]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d101      	bne.n	800382a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e12b      	b.n	8003a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d106      	bne.n	8003844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f7fe fdf4 	bl	800242c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2224      	movs	r2, #36	@ 0x24
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0201 	bic.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800386a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800387a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800387c:	f001 f8b8 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 8003880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a81      	ldr	r2, [pc, #516]	@ (8003a8c <HAL_I2C_Init+0x274>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d807      	bhi.n	800389c <HAL_I2C_Init+0x84>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a80      	ldr	r2, [pc, #512]	@ (8003a90 <HAL_I2C_Init+0x278>)
 8003890:	4293      	cmp	r3, r2
 8003892:	bf94      	ite	ls
 8003894:	2301      	movls	r3, #1
 8003896:	2300      	movhi	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e006      	b.n	80038aa <HAL_I2C_Init+0x92>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a94 <HAL_I2C_Init+0x27c>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	bf94      	ite	ls
 80038a4:	2301      	movls	r3, #1
 80038a6:	2300      	movhi	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e0e7      	b.n	8003a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4a78      	ldr	r2, [pc, #480]	@ (8003a98 <HAL_I2C_Init+0x280>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0c9b      	lsrs	r3, r3, #18
 80038bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	4a6a      	ldr	r2, [pc, #424]	@ (8003a8c <HAL_I2C_Init+0x274>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d802      	bhi.n	80038ec <HAL_I2C_Init+0xd4>
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	3301      	adds	r3, #1
 80038ea:	e009      	b.n	8003900 <HAL_I2C_Init+0xe8>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038f2:	fb02 f303 	mul.w	r3, r2, r3
 80038f6:	4a69      	ldr	r2, [pc, #420]	@ (8003a9c <HAL_I2C_Init+0x284>)
 80038f8:	fba2 2303 	umull	r2, r3, r2, r3
 80038fc:	099b      	lsrs	r3, r3, #6
 80038fe:	3301      	adds	r3, #1
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003912:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	495c      	ldr	r1, [pc, #368]	@ (8003a8c <HAL_I2C_Init+0x274>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d819      	bhi.n	8003954 <HAL_I2C_Init+0x13c>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e59      	subs	r1, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fbb1 f3f3 	udiv	r3, r1, r3
 800392e:	1c59      	adds	r1, r3, #1
 8003930:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003934:	400b      	ands	r3, r1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00a      	beq.n	8003950 <HAL_I2C_Init+0x138>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	1e59      	subs	r1, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	005b      	lsls	r3, r3, #1
 8003944:	fbb1 f3f3 	udiv	r3, r1, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	e051      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 8003950:	2304      	movs	r3, #4
 8003952:	e04f      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d111      	bne.n	8003980 <HAL_I2C_Init+0x168>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	1e58      	subs	r0, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6859      	ldr	r1, [r3, #4]
 8003964:	460b      	mov	r3, r1
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	440b      	add	r3, r1
 800396a:	fbb0 f3f3 	udiv	r3, r0, r3
 800396e:	3301      	adds	r3, #1
 8003970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e012      	b.n	80039a6 <HAL_I2C_Init+0x18e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	1e58      	subs	r0, r3, #1
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6859      	ldr	r1, [r3, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	0099      	lsls	r1, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	fbb0 f3f3 	udiv	r3, r0, r3
 8003996:	3301      	adds	r3, #1
 8003998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_I2C_Init+0x196>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e022      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10e      	bne.n	80039d4 <HAL_I2C_Init+0x1bc>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1e58      	subs	r0, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	440b      	add	r3, r1
 80039c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c8:	3301      	adds	r3, #1
 80039ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039d2:	e00f      	b.n	80039f4 <HAL_I2C_Init+0x1dc>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	1e58      	subs	r0, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6859      	ldr	r1, [r3, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	0099      	lsls	r1, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ea:	3301      	adds	r3, #1
 80039ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	6809      	ldr	r1, [r1, #0]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6911      	ldr	r1, [r2, #16]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68d2      	ldr	r2, [r2, #12]
 8003a2e:	4311      	orrs	r1, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0201 	orr.w	r2, r2, #1
 8003a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	000186a0 	.word	0x000186a0
 8003a90:	001e847f 	.word	0x001e847f
 8003a94:	003d08ff 	.word	0x003d08ff
 8003a98:	431bde83 	.word	0x431bde83
 8003a9c:	10624dd3 	.word	0x10624dd3

08003aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b088      	sub	sp, #32
 8003aa4:	af02      	add	r7, sp, #8
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	607a      	str	r2, [r7, #4]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	460b      	mov	r3, r1
 8003aae:	817b      	strh	r3, [r7, #10]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ab4:	f7fe ffbe 	bl	8002a34 <HAL_GetTick>
 8003ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b20      	cmp	r3, #32
 8003ac4:	f040 80e0 	bne.w	8003c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	9300      	str	r3, [sp, #0]
 8003acc:	2319      	movs	r3, #25
 8003ace:	2201      	movs	r2, #1
 8003ad0:	4970      	ldr	r1, [pc, #448]	@ (8003c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fc64 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	e0d3      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_I2C_Master_Transmit+0x50>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e0cc      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d007      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2221      	movs	r2, #33	@ 0x21
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2210      	movs	r2, #16
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	893a      	ldrh	r2, [r7, #8]
 8003b46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	4a50      	ldr	r2, [pc, #320]	@ (8003c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b56:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b58:	8979      	ldrh	r1, [r7, #10]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	6a3a      	ldr	r2, [r7, #32]
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 face 	bl	8004100 <I2C_MasterRequestWrite>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e08d      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	613b      	str	r3, [r7, #16]
 8003b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b84:	e066      	b.n	8003c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fd22 	bl	80045d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e06b      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	781a      	ldrb	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f003 0304 	and.w	r3, r3, #4
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	d11b      	bne.n	8003c28 <HAL_I2C_Master_Transmit+0x188>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d017      	beq.n	8003c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	781a      	ldrb	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	6a39      	ldr	r1, [r7, #32]
 8003c2c:	68f8      	ldr	r0, [r7, #12]
 8003c2e:	f000 fd19 	bl	8004664 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00d      	beq.n	8003c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d107      	bne.n	8003c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e01a      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d194      	bne.n	8003b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	00100002 	.word	0x00100002
 8003c98:	ffff0000 	.word	0xffff0000

08003c9c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08c      	sub	sp, #48	@ 0x30
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	460b      	mov	r3, r1
 8003caa:	817b      	strh	r3, [r7, #10]
 8003cac:	4613      	mov	r3, r2
 8003cae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7fe fec0 	bl	8002a34 <HAL_GetTick>
 8003cb4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b20      	cmp	r3, #32
 8003cc0:	f040 8217 	bne.w	80040f2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	9300      	str	r3, [sp, #0]
 8003cc8:	2319      	movs	r3, #25
 8003cca:	2201      	movs	r2, #1
 8003ccc:	497c      	ldr	r1, [pc, #496]	@ (8003ec0 <HAL_I2C_Master_Receive+0x224>)
 8003cce:	68f8      	ldr	r0, [r7, #12]
 8003cd0:	f000 fb66 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	e20a      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_I2C_Master_Receive+0x50>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e203      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d007      	beq.n	8003d12 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f042 0201 	orr.w	r2, r2, #1
 8003d10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2222      	movs	r2, #34	@ 0x22
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	893a      	ldrh	r2, [r7, #8]
 8003d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a5c      	ldr	r2, [pc, #368]	@ (8003ec4 <HAL_I2C_Master_Receive+0x228>)
 8003d52:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fa52 	bl	8004204 <I2C_MasterRequestRead>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1c4      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d113      	bne.n	8003d9a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	623b      	str	r3, [r7, #32]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	623b      	str	r3, [r7, #32]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e198      	b.n	80040cc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d11b      	bne.n	8003dda <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003db0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	61fb      	str	r3, [r7, #28]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	61fb      	str	r3, [r7, #28]
 8003dc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e178      	b.n	80040cc <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d11b      	bne.n	8003e1a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e02:	2300      	movs	r3, #0
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695b      	ldr	r3, [r3, #20]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	e158      	b.n	80040cc <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e40:	e144      	b.n	80040cc <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e46:	2b03      	cmp	r3, #3
 8003e48:	f200 80f1 	bhi.w	800402e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d123      	bne.n	8003e9c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 fc4b 	bl	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e145      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e9a:	e117      	b.n	80040cc <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d14e      	bne.n	8003f42 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea6:	9300      	str	r3, [sp, #0]
 8003ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eaa:	2200      	movs	r2, #0
 8003eac:	4906      	ldr	r1, [pc, #24]	@ (8003ec8 <HAL_I2C_Master_Receive+0x22c>)
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f000 fa76 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d008      	beq.n	8003ecc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e11a      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
 8003ebe:	bf00      	nop
 8003ec0:	00100002 	.word	0x00100002
 8003ec4:	ffff0000 	.word	0xffff0000
 8003ec8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eda:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691a      	ldr	r2, [r3, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eee:	1c5a      	adds	r2, r3, #1
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	3b01      	subs	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b29a      	uxth	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f40:	e0c4      	b.n	80040cc <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f48:	2200      	movs	r2, #0
 8003f4a:	496c      	ldr	r1, [pc, #432]	@ (80040fc <HAL_I2C_Master_Receive+0x460>)
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fa27 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e0cb      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	691a      	ldr	r2, [r3, #16]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	4955      	ldr	r1, [pc, #340]	@ (80040fc <HAL_I2C_Master_Receive+0x460>)
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f000 f9f9 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d001      	beq.n	8003fb8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e09d      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fc6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004016:	3b01      	subs	r3, #1
 8004018:	b29a      	uxth	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800402c:	e04e      	b.n	80040cc <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004030:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 fb5e 	bl	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e058      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b04      	cmp	r3, #4
 8004080:	d124      	bne.n	80040cc <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004086:	2b03      	cmp	r3, #3
 8004088:	d107      	bne.n	800409a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004098:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f47f aeb6 	bne.w	8003e42 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2220      	movs	r2, #32
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80040f2:	2302      	movs	r3, #2
  }
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3728      	adds	r7, #40	@ 0x28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	00010004 	.word	0x00010004

08004100 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	460b      	mov	r3, r1
 800410e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004114:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d006      	beq.n	800412a <I2C_MasterRequestWrite+0x2a>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d003      	beq.n	800412a <I2C_MasterRequestWrite+0x2a>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004128:	d108      	bne.n	800413c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e00b      	b.n	8004154 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	2b12      	cmp	r3, #18
 8004142:	d107      	bne.n	8004154 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f91d 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800417a:	d103      	bne.n	8004184 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004182:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e035      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004190:	d108      	bne.n	80041a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041a0:	611a      	str	r2, [r3, #16]
 80041a2:	e01b      	b.n	80041dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041a4:	897b      	ldrh	r3, [r7, #10]
 80041a6:	11db      	asrs	r3, r3, #7
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f003 0306 	and.w	r3, r3, #6
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f063 030f 	orn	r3, r3, #15
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	490e      	ldr	r1, [pc, #56]	@ (80041fc <I2C_MasterRequestWrite+0xfc>)
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f966 	bl	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e010      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4907      	ldr	r1, [pc, #28]	@ (8004200 <I2C_MasterRequestWrite+0x100>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f956 	bl	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	00010008 	.word	0x00010008
 8004200:	00010002 	.word	0x00010002

08004204 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	460b      	mov	r3, r1
 8004212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004218:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004228:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d006      	beq.n	800423e <I2C_MasterRequestRead+0x3a>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d003      	beq.n	800423e <I2C_MasterRequestRead+0x3a>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800423c:	d108      	bne.n	8004250 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e00b      	b.n	8004268 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004254:	2b11      	cmp	r3, #17
 8004256:	d107      	bne.n	8004268 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004266:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f893 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800428e:	d103      	bne.n	8004298 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004296:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e079      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042a4:	d108      	bne.n	80042b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	e05f      	b.n	8004378 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042b8:	897b      	ldrh	r3, [r7, #10]
 80042ba:	11db      	asrs	r3, r3, #7
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0306 	and.w	r3, r3, #6
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f063 030f 	orn	r3, r3, #15
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4930      	ldr	r1, [pc, #192]	@ (8004398 <I2C_MasterRequestRead+0x194>)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f8dc 	bl	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e054      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4929      	ldr	r1, [pc, #164]	@ (800439c <I2C_MasterRequestRead+0x198>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f8cc 	bl	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e044      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800432a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f831 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00d      	beq.n	8004360 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800434e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004352:	d103      	bne.n	800435c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800435a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e017      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004360:	897b      	ldrh	r3, [r7, #10]
 8004362:	11db      	asrs	r3, r3, #7
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0306 	and.w	r3, r3, #6
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f063 030e 	orn	r3, r3, #14
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4907      	ldr	r1, [pc, #28]	@ (800439c <I2C_MasterRequestRead+0x198>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f888 	bl	8004494 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	00010008 	.word	0x00010008
 800439c:	00010002 	.word	0x00010002

080043a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b0:	e048      	b.n	8004444 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b8:	d044      	beq.n	8004444 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ba:	f7fe fb3b 	bl	8002a34 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d139      	bne.n	8004444 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	0c1b      	lsrs	r3, r3, #16
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d10d      	bne.n	80043f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	43da      	mvns	r2, r3
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	e00c      	b.n	8004410 <I2C_WaitOnFlagUntilTimeout+0x70>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf0c      	ite	eq
 8004408:	2301      	moveq	r3, #1
 800440a:	2300      	movne	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	461a      	mov	r2, r3
 8004410:	79fb      	ldrb	r3, [r7, #7]
 8004412:	429a      	cmp	r2, r3
 8004414:	d116      	bne.n	8004444 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2220      	movs	r2, #32
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	f043 0220 	orr.w	r2, r3, #32
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e023      	b.n	800448c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b01      	cmp	r3, #1
 800444c:	d10d      	bne.n	800446a <I2C_WaitOnFlagUntilTimeout+0xca>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	695b      	ldr	r3, [r3, #20]
 8004454:	43da      	mvns	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4013      	ands	r3, r2
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	bf0c      	ite	eq
 8004460:	2301      	moveq	r3, #1
 8004462:	2300      	movne	r3, #0
 8004464:	b2db      	uxtb	r3, r3
 8004466:	461a      	mov	r2, r3
 8004468:	e00c      	b.n	8004484 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	43da      	mvns	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	b29b      	uxth	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	bf0c      	ite	eq
 800447c:	2301      	moveq	r3, #1
 800447e:	2300      	movne	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	429a      	cmp	r2, r3
 8004488:	d093      	beq.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044a2:	e071      	b.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b2:	d123      	bne.n	80044fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80044cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e8:	f043 0204 	orr.w	r2, r3, #4
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e067      	b.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004502:	d041      	beq.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004504:	f7fe fa96 	bl	8002a34 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d302      	bcc.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d136      	bne.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d10c      	bne.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	43da      	mvns	r2, r3
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4013      	ands	r3, r2
 8004530:	b29b      	uxth	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	bf14      	ite	ne
 8004536:	2301      	movne	r3, #1
 8004538:	2300      	moveq	r3, #0
 800453a:	b2db      	uxtb	r3, r3
 800453c:	e00b      	b.n	8004556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	43da      	mvns	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4013      	ands	r3, r2
 800454a:	b29b      	uxth	r3, r3
 800454c:	2b00      	cmp	r3, #0
 800454e:	bf14      	ite	ne
 8004550:	2301      	movne	r3, #1
 8004552:	2300      	moveq	r3, #0
 8004554:	b2db      	uxtb	r3, r3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d016      	beq.n	8004588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2200      	movs	r2, #0
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2220      	movs	r2, #32
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	f043 0220 	orr.w	r2, r3, #32
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e021      	b.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	0c1b      	lsrs	r3, r3, #16
 800458c:	b2db      	uxtb	r3, r3
 800458e:	2b01      	cmp	r3, #1
 8004590:	d10c      	bne.n	80045ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	43da      	mvns	r2, r3
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	4013      	ands	r3, r2
 800459e:	b29b      	uxth	r3, r3
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	bf14      	ite	ne
 80045a4:	2301      	movne	r3, #1
 80045a6:	2300      	moveq	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e00b      	b.n	80045c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	43da      	mvns	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4013      	ands	r3, r2
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f af6d 	bne.w	80044a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e0:	e034      	b.n	800464c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f8e3 	bl	80047ae <I2C_IsAcknowledgeFailed>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e034      	b.n	800465c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d028      	beq.n	800464c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe fa1b 	bl	8002a34 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d11d      	bne.n	800464c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800461a:	2b80      	cmp	r3, #128	@ 0x80
 800461c:	d016      	beq.n	800464c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004638:	f043 0220 	orr.w	r2, r3, #32
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e007      	b.n	800465c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004656:	2b80      	cmp	r3, #128	@ 0x80
 8004658:	d1c3      	bne.n	80045e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004670:	e034      	b.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f000 f89b 	bl	80047ae <I2C_IsAcknowledgeFailed>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e034      	b.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004688:	d028      	beq.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800468a:	f7fe f9d3 	bl	8002a34 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	429a      	cmp	r2, r3
 8004698:	d302      	bcc.n	80046a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d11d      	bne.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b04      	cmp	r3, #4
 80046ac:	d016      	beq.n	80046dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e007      	b.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695b      	ldr	r3, [r3, #20]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d1c3      	bne.n	8004672 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004700:	e049      	b.n	8004796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b10      	cmp	r3, #16
 800470e:	d119      	bne.n	8004744 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0210 	mvn.w	r2, #16
 8004718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e030      	b.n	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004744:	f7fe f976 	bl	8002a34 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	429a      	cmp	r2, r3
 8004752:	d302      	bcc.n	800475a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11d      	bne.n	8004796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004764:	2b40      	cmp	r3, #64	@ 0x40
 8004766:	d016      	beq.n	8004796 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004782:	f043 0220 	orr.w	r2, r3, #32
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e007      	b.n	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b40      	cmp	r3, #64	@ 0x40
 80047a2:	d1ae      	bne.n	8004702 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3710      	adds	r7, #16
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c4:	d11b      	bne.n	80047fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80047ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f043 0204 	orr.w	r2, r3, #4
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0cc      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004820:	4b68      	ldr	r3, [pc, #416]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d90c      	bls.n	8004848 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b65      	ldr	r3, [pc, #404]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b63      	ldr	r3, [pc, #396]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e0b8      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d020      	beq.n	8004896 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004860:	4b59      	ldr	r3, [pc, #356]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	4a58      	ldr	r2, [pc, #352]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004866:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800486a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004878:	4b53      	ldr	r3, [pc, #332]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a52      	ldr	r2, [pc, #328]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004882:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004884:	4b50      	ldr	r3, [pc, #320]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	494d      	ldr	r1, [pc, #308]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	4313      	orrs	r3, r2
 8004894:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d044      	beq.n	800492c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048aa:	4b47      	ldr	r3, [pc, #284]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d119      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e07f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d003      	beq.n	80048ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c6:	2b03      	cmp	r3, #3
 80048c8:	d107      	bne.n	80048da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ca:	4b3f      	ldr	r3, [pc, #252]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d109      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e06f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048da:	4b3b      	ldr	r3, [pc, #236]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e067      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ea:	4b37      	ldr	r3, [pc, #220]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f023 0203 	bic.w	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	4934      	ldr	r1, [pc, #208]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048fc:	f7fe f89a 	bl	8002a34 <HAL_GetTick>
 8004900:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004902:	e00a      	b.n	800491a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004904:	f7fe f896 	bl	8002a34 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004912:	4293      	cmp	r3, r2
 8004914:	d901      	bls.n	800491a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e04f      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	4b2b      	ldr	r3, [pc, #172]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 020c 	and.w	r2, r3, #12
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	429a      	cmp	r2, r3
 800492a:	d1eb      	bne.n	8004904 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800492c:	4b25      	ldr	r3, [pc, #148]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 030f 	and.w	r3, r3, #15
 8004934:	683a      	ldr	r2, [r7, #0]
 8004936:	429a      	cmp	r2, r3
 8004938:	d20c      	bcs.n	8004954 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800493a:	4b22      	ldr	r3, [pc, #136]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004942:	4b20      	ldr	r3, [pc, #128]	@ (80049c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 030f 	and.w	r3, r3, #15
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e032      	b.n	80049ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0304 	and.w	r3, r3, #4
 800495c:	2b00      	cmp	r3, #0
 800495e:	d008      	beq.n	8004972 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004960:	4b19      	ldr	r3, [pc, #100]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4916      	ldr	r1, [pc, #88]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800497e:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	490e      	ldr	r1, [pc, #56]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004992:	f000 f855 	bl	8004a40 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <HAL_RCC_ClockConfig+0x1bc>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	490a      	ldr	r1, [pc, #40]	@ (80049cc <HAL_RCC_ClockConfig+0x1c0>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	fa22 f303 	lsr.w	r3, r2, r3
 80049aa:	4a09      	ldr	r2, [pc, #36]	@ (80049d0 <HAL_RCC_ClockConfig+0x1c4>)
 80049ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80049ae:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <HAL_RCC_ClockConfig+0x1c8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4618      	mov	r0, r3
 80049b4:	f7fd fffa 	bl	80029ac <HAL_InitTick>

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	40023c00 	.word	0x40023c00
 80049c8:	40023800 	.word	0x40023800
 80049cc:	0800b7ec 	.word	0x0800b7ec
 80049d0:	20000010 	.word	0x20000010
 80049d4:	20000014 	.word	0x20000014

080049d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049d8:	b480      	push	{r7}
 80049da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049dc:	4b03      	ldr	r3, [pc, #12]	@ (80049ec <HAL_RCC_GetHCLKFreq+0x14>)
 80049de:	681b      	ldr	r3, [r3, #0]
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	20000010 	.word	0x20000010

080049f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049f4:	f7ff fff0 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 80049f8:	4602      	mov	r2, r0
 80049fa:	4b05      	ldr	r3, [pc, #20]	@ (8004a10 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	0a9b      	lsrs	r3, r3, #10
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	4903      	ldr	r1, [pc, #12]	@ (8004a14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a06:	5ccb      	ldrb	r3, [r1, r3]
 8004a08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	40023800 	.word	0x40023800
 8004a14:	0800b7fc 	.word	0x0800b7fc

08004a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a1c:	f7ff ffdc 	bl	80049d8 <HAL_RCC_GetHCLKFreq>
 8004a20:	4602      	mov	r2, r0
 8004a22:	4b05      	ldr	r3, [pc, #20]	@ (8004a38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	0b5b      	lsrs	r3, r3, #13
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	4903      	ldr	r1, [pc, #12]	@ (8004a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a2e:	5ccb      	ldrb	r3, [r1, r3]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	40023800 	.word	0x40023800
 8004a3c:	0800b7fc 	.word	0x0800b7fc

08004a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a44:	b0ae      	sub	sp, #184	@ 0xb8
 8004a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8004a54:	2300      	movs	r3, #0
 8004a56:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a66:	4bcb      	ldr	r3, [pc, #812]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f003 030c 	and.w	r3, r3, #12
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	f200 8206 	bhi.w	8004e80 <HAL_RCC_GetSysClockFreq+0x440>
 8004a74:	a201      	add	r2, pc, #4	@ (adr r2, 8004a7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004ab1 	.word	0x08004ab1
 8004a80:	08004e81 	.word	0x08004e81
 8004a84:	08004e81 	.word	0x08004e81
 8004a88:	08004e81 	.word	0x08004e81
 8004a8c:	08004ab9 	.word	0x08004ab9
 8004a90:	08004e81 	.word	0x08004e81
 8004a94:	08004e81 	.word	0x08004e81
 8004a98:	08004e81 	.word	0x08004e81
 8004a9c:	08004ac1 	.word	0x08004ac1
 8004aa0:	08004e81 	.word	0x08004e81
 8004aa4:	08004e81 	.word	0x08004e81
 8004aa8:	08004e81 	.word	0x08004e81
 8004aac:	08004cb1 	.word	0x08004cb1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ab0:	4bb9      	ldr	r3, [pc, #740]	@ (8004d98 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ab2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004ab6:	e1e7      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ab8:	4bb8      	ldr	r3, [pc, #736]	@ (8004d9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8004aba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004abe:	e1e3      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ac0:	4bb4      	ldr	r3, [pc, #720]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004acc:	4bb1      	ldr	r3, [pc, #708]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d071      	beq.n	8004bbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ad8:	4bae      	ldr	r3, [pc, #696]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	099b      	lsrs	r3, r3, #6
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004ae4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004af4:	2300      	movs	r3, #0
 8004af6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004afa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004afe:	4622      	mov	r2, r4
 8004b00:	462b      	mov	r3, r5
 8004b02:	f04f 0000 	mov.w	r0, #0
 8004b06:	f04f 0100 	mov.w	r1, #0
 8004b0a:	0159      	lsls	r1, r3, #5
 8004b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b10:	0150      	lsls	r0, r2, #5
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4621      	mov	r1, r4
 8004b18:	1a51      	subs	r1, r2, r1
 8004b1a:	6439      	str	r1, [r7, #64]	@ 0x40
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8004b22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b24:	f04f 0200 	mov.w	r2, #0
 8004b28:	f04f 0300 	mov.w	r3, #0
 8004b2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8004b30:	4649      	mov	r1, r9
 8004b32:	018b      	lsls	r3, r1, #6
 8004b34:	4641      	mov	r1, r8
 8004b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	018a      	lsls	r2, r1, #6
 8004b3e:	4641      	mov	r1, r8
 8004b40:	1a51      	subs	r1, r2, r1
 8004b42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004b44:	4649      	mov	r1, r9
 8004b46:	eb63 0301 	sbc.w	r3, r3, r1
 8004b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	f04f 0300 	mov.w	r3, #0
 8004b54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8004b58:	4649      	mov	r1, r9
 8004b5a:	00cb      	lsls	r3, r1, #3
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b62:	4641      	mov	r1, r8
 8004b64:	00ca      	lsls	r2, r1, #3
 8004b66:	4610      	mov	r0, r2
 8004b68:	4619      	mov	r1, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	4622      	mov	r2, r4
 8004b6e:	189b      	adds	r3, r3, r2
 8004b70:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b72:	462b      	mov	r3, r5
 8004b74:	460a      	mov	r2, r1
 8004b76:	eb42 0303 	adc.w	r3, r2, r3
 8004b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b7c:	f04f 0200 	mov.w	r2, #0
 8004b80:	f04f 0300 	mov.w	r3, #0
 8004b84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b88:	4629      	mov	r1, r5
 8004b8a:	024b      	lsls	r3, r1, #9
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004b92:	4621      	mov	r1, r4
 8004b94:	024a      	lsls	r2, r1, #9
 8004b96:	4610      	mov	r0, r2
 8004b98:	4619      	mov	r1, r3
 8004b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ba4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ba8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004bac:	f7fc f86c 	bl	8000c88 <__aeabi_uldivmod>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	460b      	mov	r3, r1
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bba:	e067      	b.n	8004c8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bbc:	4b75      	ldr	r3, [pc, #468]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	099b      	lsrs	r3, r3, #6
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bc8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8004bcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004bda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f04f 0100 	mov.w	r1, #0
 8004bea:	0159      	lsls	r1, r3, #5
 8004bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bf0:	0150      	lsls	r0, r2, #5
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	1a51      	subs	r1, r2, r1
 8004bfa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bfc:	4629      	mov	r1, r5
 8004bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004c02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8004c10:	4649      	mov	r1, r9
 8004c12:	018b      	lsls	r3, r1, #6
 8004c14:	4641      	mov	r1, r8
 8004c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c1a:	4641      	mov	r1, r8
 8004c1c:	018a      	lsls	r2, r1, #6
 8004c1e:	4641      	mov	r1, r8
 8004c20:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c24:	4649      	mov	r1, r9
 8004c26:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c2a:	f04f 0200 	mov.w	r2, #0
 8004c2e:	f04f 0300 	mov.w	r3, #0
 8004c32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c3e:	4692      	mov	sl, r2
 8004c40:	469b      	mov	fp, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	eb1a 0303 	adds.w	r3, sl, r3
 8004c48:	623b      	str	r3, [r7, #32]
 8004c4a:	462b      	mov	r3, r5
 8004c4c:	eb4b 0303 	adc.w	r3, fp, r3
 8004c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004c5e:	4629      	mov	r1, r5
 8004c60:	028b      	lsls	r3, r1, #10
 8004c62:	4621      	mov	r1, r4
 8004c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c68:	4621      	mov	r1, r4
 8004c6a:	028a      	lsls	r2, r1, #10
 8004c6c:	4610      	mov	r0, r2
 8004c6e:	4619      	mov	r1, r3
 8004c70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004c74:	2200      	movs	r2, #0
 8004c76:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c78:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8004c7e:	f7fc f803 	bl	8000c88 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4613      	mov	r3, r2
 8004c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004c8c:	4b41      	ldr	r3, [pc, #260]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	0c1b      	lsrs	r3, r3, #16
 8004c92:	f003 0303 	and.w	r3, r3, #3
 8004c96:	3301      	adds	r3, #1
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8004c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004ca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004cae:	e0eb      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cb0:	4b38      	ldr	r3, [pc, #224]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cbc:	4b35      	ldr	r3, [pc, #212]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d06b      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cc8:	4b32      	ldr	r3, [pc, #200]	@ (8004d94 <HAL_RCC_GetSysClockFreq+0x354>)
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	099b      	lsrs	r3, r3, #6
 8004cce:	2200      	movs	r2, #0
 8004cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cd2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004cd4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cda:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cdc:	2300      	movs	r3, #0
 8004cde:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ce0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	462b      	mov	r3, r5
 8004ce8:	f04f 0000 	mov.w	r0, #0
 8004cec:	f04f 0100 	mov.w	r1, #0
 8004cf0:	0159      	lsls	r1, r3, #5
 8004cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf6:	0150      	lsls	r0, r2, #5
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	4621      	mov	r1, r4
 8004cfe:	1a51      	subs	r1, r2, r1
 8004d00:	61b9      	str	r1, [r7, #24]
 8004d02:	4629      	mov	r1, r5
 8004d04:	eb63 0301 	sbc.w	r3, r3, r1
 8004d08:	61fb      	str	r3, [r7, #28]
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8004d16:	4659      	mov	r1, fp
 8004d18:	018b      	lsls	r3, r1, #6
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d20:	4651      	mov	r1, sl
 8004d22:	018a      	lsls	r2, r1, #6
 8004d24:	4651      	mov	r1, sl
 8004d26:	ebb2 0801 	subs.w	r8, r2, r1
 8004d2a:	4659      	mov	r1, fp
 8004d2c:	eb63 0901 	sbc.w	r9, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d44:	4690      	mov	r8, r2
 8004d46:	4699      	mov	r9, r3
 8004d48:	4623      	mov	r3, r4
 8004d4a:	eb18 0303 	adds.w	r3, r8, r3
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	462b      	mov	r3, r5
 8004d52:	eb49 0303 	adc.w	r3, r9, r3
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004d64:	4629      	mov	r1, r5
 8004d66:	024b      	lsls	r3, r1, #9
 8004d68:	4621      	mov	r1, r4
 8004d6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004d6e:	4621      	mov	r1, r4
 8004d70:	024a      	lsls	r2, r1, #9
 8004d72:	4610      	mov	r0, r2
 8004d74:	4619      	mov	r1, r3
 8004d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d7e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004d80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d84:	f7fb ff80 	bl	8000c88 <__aeabi_uldivmod>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d92:	e065      	b.n	8004e60 <HAL_RCC_GetSysClockFreq+0x420>
 8004d94:	40023800 	.word	0x40023800
 8004d98:	00f42400 	.word	0x00f42400
 8004d9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004da0:	4b3d      	ldr	r3, [pc, #244]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x458>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	099b      	lsrs	r3, r3, #6
 8004da6:	2200      	movs	r2, #0
 8004da8:	4618      	mov	r0, r3
 8004daa:	4611      	mov	r1, r2
 8004dac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004db0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004db2:	2300      	movs	r3, #0
 8004db4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004db6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004dba:	4642      	mov	r2, r8
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	f04f 0000 	mov.w	r0, #0
 8004dc2:	f04f 0100 	mov.w	r1, #0
 8004dc6:	0159      	lsls	r1, r3, #5
 8004dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004dcc:	0150      	lsls	r0, r2, #5
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4641      	mov	r1, r8
 8004dd4:	1a51      	subs	r1, r2, r1
 8004dd6:	60b9      	str	r1, [r7, #8]
 8004dd8:	4649      	mov	r1, r9
 8004dda:	eb63 0301 	sbc.w	r3, r3, r1
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004dec:	4659      	mov	r1, fp
 8004dee:	018b      	lsls	r3, r1, #6
 8004df0:	4651      	mov	r1, sl
 8004df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004df6:	4651      	mov	r1, sl
 8004df8:	018a      	lsls	r2, r1, #6
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	1a54      	subs	r4, r2, r1
 8004dfe:	4659      	mov	r1, fp
 8004e00:	eb63 0501 	sbc.w	r5, r3, r1
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	00eb      	lsls	r3, r5, #3
 8004e0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e12:	00e2      	lsls	r2, r4, #3
 8004e14:	4614      	mov	r4, r2
 8004e16:	461d      	mov	r5, r3
 8004e18:	4643      	mov	r3, r8
 8004e1a:	18e3      	adds	r3, r4, r3
 8004e1c:	603b      	str	r3, [r7, #0]
 8004e1e:	464b      	mov	r3, r9
 8004e20:	eb45 0303 	adc.w	r3, r5, r3
 8004e24:	607b      	str	r3, [r7, #4]
 8004e26:	f04f 0200 	mov.w	r2, #0
 8004e2a:	f04f 0300 	mov.w	r3, #0
 8004e2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e32:	4629      	mov	r1, r5
 8004e34:	028b      	lsls	r3, r1, #10
 8004e36:	4621      	mov	r1, r4
 8004e38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e3c:	4621      	mov	r1, r4
 8004e3e:	028a      	lsls	r2, r1, #10
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004e48:	2200      	movs	r2, #0
 8004e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e4c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004e4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e52:	f7fb ff19 	bl	8000c88 <__aeabi_uldivmod>
 8004e56:	4602      	mov	r2, r0
 8004e58:	460b      	mov	r3, r1
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e60:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <HAL_RCC_GetSysClockFreq+0x458>)
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	0f1b      	lsrs	r3, r3, #28
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8004e6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e7e:	e003      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e80:	4b06      	ldr	r3, [pc, #24]	@ (8004e9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004e82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004e86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	37b8      	adds	r7, #184	@ 0xb8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800
 8004e9c:	00f42400 	.word	0x00f42400

08004ea0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b086      	sub	sp, #24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e28d      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 8083 	beq.w	8004fc6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ec0:	4b94      	ldr	r3, [pc, #592]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 030c 	and.w	r3, r3, #12
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d019      	beq.n	8004f00 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ecc:	4b91      	ldr	r3, [pc, #580]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f003 030c 	and.w	r3, r3, #12
        || \
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d106      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004ed8:	4b8e      	ldr	r3, [pc, #568]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ee4:	d00c      	beq.n	8004f00 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ee6:	4b8b      	ldr	r3, [pc, #556]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004eee:	2b0c      	cmp	r3, #12
 8004ef0:	d112      	bne.n	8004f18 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ef2:	4b88      	ldr	r3, [pc, #544]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004efa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004efe:	d10b      	bne.n	8004f18 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f00:	4b84      	ldr	r3, [pc, #528]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d05b      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x124>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d157      	bne.n	8004fc4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e25a      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f20:	d106      	bne.n	8004f30 <HAL_RCC_OscConfig+0x90>
 8004f22:	4b7c      	ldr	r3, [pc, #496]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a7b      	ldr	r2, [pc, #492]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	e01d      	b.n	8004f6c <HAL_RCC_OscConfig+0xcc>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f38:	d10c      	bne.n	8004f54 <HAL_RCC_OscConfig+0xb4>
 8004f3a:	4b76      	ldr	r3, [pc, #472]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a75      	ldr	r2, [pc, #468]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f44:	6013      	str	r3, [r2, #0]
 8004f46:	4b73      	ldr	r3, [pc, #460]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a72      	ldr	r2, [pc, #456]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f50:	6013      	str	r3, [r2, #0]
 8004f52:	e00b      	b.n	8004f6c <HAL_RCC_OscConfig+0xcc>
 8004f54:	4b6f      	ldr	r3, [pc, #444]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a6e      	ldr	r2, [pc, #440]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f5e:	6013      	str	r3, [r2, #0]
 8004f60:	4b6c      	ldr	r3, [pc, #432]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a6b      	ldr	r2, [pc, #428]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d013      	beq.n	8004f9c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f74:	f7fd fd5e 	bl	8002a34 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f7c:	f7fd fd5a 	bl	8002a34 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b64      	cmp	r3, #100	@ 0x64
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e21f      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f8e:	4b61      	ldr	r3, [pc, #388]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0xdc>
 8004f9a:	e014      	b.n	8004fc6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9c:	f7fd fd4a 	bl	8002a34 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fa4:	f7fd fd46 	bl	8002a34 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b64      	cmp	r3, #100	@ 0x64
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e20b      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fb6:	4b57      	ldr	r3, [pc, #348]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1f0      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x104>
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d06f      	beq.n	80050b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004fd2:	4b50      	ldr	r3, [pc, #320]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d017      	beq.n	800500e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fde:	4b4d      	ldr	r3, [pc, #308]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	f003 030c 	and.w	r3, r3, #12
        || \
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	d105      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004fea:	4b4a      	ldr	r3, [pc, #296]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00b      	beq.n	800500e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ff6:	4b47      	ldr	r3, [pc, #284]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8004ffe:	2b0c      	cmp	r3, #12
 8005000:	d11c      	bne.n	800503c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005002:	4b44      	ldr	r3, [pc, #272]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d116      	bne.n	800503c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	4b41      	ldr	r3, [pc, #260]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d005      	beq.n	8005026 <HAL_RCC_OscConfig+0x186>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d001      	beq.n	8005026 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e1d3      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005026:	4b3b      	ldr	r3, [pc, #236]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	4937      	ldr	r1, [pc, #220]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8005036:	4313      	orrs	r3, r2
 8005038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800503a:	e03a      	b.n	80050b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d020      	beq.n	8005086 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005044:	4b34      	ldr	r3, [pc, #208]	@ (8005118 <HAL_RCC_OscConfig+0x278>)
 8005046:	2201      	movs	r2, #1
 8005048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504a:	f7fd fcf3 	bl	8002a34 <HAL_GetTick>
 800504e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005050:	e008      	b.n	8005064 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005052:	f7fd fcef 	bl	8002a34 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	2b02      	cmp	r3, #2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e1b4      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005064:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0f0      	beq.n	8005052 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005070:	4b28      	ldr	r3, [pc, #160]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4925      	ldr	r1, [pc, #148]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 8005080:	4313      	orrs	r3, r2
 8005082:	600b      	str	r3, [r1, #0]
 8005084:	e015      	b.n	80050b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005086:	4b24      	ldr	r3, [pc, #144]	@ (8005118 <HAL_RCC_OscConfig+0x278>)
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508c:	f7fd fcd2 	bl	8002a34 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005094:	f7fd fcce 	bl	8002a34 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e193      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a6:	4b1b      	ldr	r3, [pc, #108]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 0308 	and.w	r3, r3, #8
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d036      	beq.n	800512c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d016      	beq.n	80050f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050c6:	4b15      	ldr	r3, [pc, #84]	@ (800511c <HAL_RCC_OscConfig+0x27c>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050cc:	f7fd fcb2 	bl	8002a34 <HAL_GetTick>
 80050d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d2:	e008      	b.n	80050e6 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d4:	f7fd fcae 	bl	8002a34 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d901      	bls.n	80050e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80050e2:	2303      	movs	r3, #3
 80050e4:	e173      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005114 <HAL_RCC_OscConfig+0x274>)
 80050e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0f0      	beq.n	80050d4 <HAL_RCC_OscConfig+0x234>
 80050f2:	e01b      	b.n	800512c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f4:	4b09      	ldr	r3, [pc, #36]	@ (800511c <HAL_RCC_OscConfig+0x27c>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fd fc9b 	bl	8002a34 <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005100:	e00e      	b.n	8005120 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005102:	f7fd fc97 	bl	8002a34 <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b02      	cmp	r3, #2
 800510e:	d907      	bls.n	8005120 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e15c      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
 8005114:	40023800 	.word	0x40023800
 8005118:	42470000 	.word	0x42470000
 800511c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005120:	4b8a      	ldr	r3, [pc, #552]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005122:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1ea      	bne.n	8005102 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	f000 8097 	beq.w	8005268 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800513a:	2300      	movs	r3, #0
 800513c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800513e:	4b83      	ldr	r3, [pc, #524]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10f      	bne.n	800516a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	4b7f      	ldr	r3, [pc, #508]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005152:	4a7e      	ldr	r2, [pc, #504]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005158:	6413      	str	r3, [r2, #64]	@ 0x40
 800515a:	4b7c      	ldr	r3, [pc, #496]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 800515c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005162:	60bb      	str	r3, [r7, #8]
 8005164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005166:	2301      	movs	r3, #1
 8005168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516a:	4b79      	ldr	r3, [pc, #484]	@ (8005350 <HAL_RCC_OscConfig+0x4b0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005172:	2b00      	cmp	r3, #0
 8005174:	d118      	bne.n	80051a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005176:	4b76      	ldr	r3, [pc, #472]	@ (8005350 <HAL_RCC_OscConfig+0x4b0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a75      	ldr	r2, [pc, #468]	@ (8005350 <HAL_RCC_OscConfig+0x4b0>)
 800517c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005182:	f7fd fc57 	bl	8002a34 <HAL_GetTick>
 8005186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005188:	e008      	b.n	800519c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518a:	f7fd fc53 	bl	8002a34 <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	2b02      	cmp	r3, #2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e118      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800519c:	4b6c      	ldr	r3, [pc, #432]	@ (8005350 <HAL_RCC_OscConfig+0x4b0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0f0      	beq.n	800518a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d106      	bne.n	80051be <HAL_RCC_OscConfig+0x31e>
 80051b0:	4b66      	ldr	r3, [pc, #408]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b4:	4a65      	ldr	r2, [pc, #404]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80051bc:	e01c      	b.n	80051f8 <HAL_RCC_OscConfig+0x358>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b05      	cmp	r3, #5
 80051c4:	d10c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x340>
 80051c6:	4b61      	ldr	r3, [pc, #388]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ca:	4a60      	ldr	r2, [pc, #384]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051cc:	f043 0304 	orr.w	r3, r3, #4
 80051d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051d2:	4b5e      	ldr	r3, [pc, #376]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d6:	4a5d      	ldr	r2, [pc, #372]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051d8:	f043 0301 	orr.w	r3, r3, #1
 80051dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80051de:	e00b      	b.n	80051f8 <HAL_RCC_OscConfig+0x358>
 80051e0:	4b5a      	ldr	r3, [pc, #360]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e4:	4a59      	ldr	r2, [pc, #356]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ec:	4b57      	ldr	r3, [pc, #348]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f0:	4a56      	ldr	r2, [pc, #344]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80051f2:	f023 0304 	bic.w	r3, r3, #4
 80051f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d015      	beq.n	800522c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005200:	f7fd fc18 	bl	8002a34 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fd fc14 	bl	8002a34 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0d7      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800521e:	4b4b      	ldr	r3, [pc, #300]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d0ee      	beq.n	8005208 <HAL_RCC_OscConfig+0x368>
 800522a:	e014      	b.n	8005256 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522c:	f7fd fc02 	bl	8002a34 <HAL_GetTick>
 8005230:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005232:	e00a      	b.n	800524a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005234:	f7fd fbfe 	bl	8002a34 <HAL_GetTick>
 8005238:	4602      	mov	r2, r0
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005242:	4293      	cmp	r3, r2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e0c1      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800524a:	4b40      	ldr	r3, [pc, #256]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 800524c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1ee      	bne.n	8005234 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005256:	7dfb      	ldrb	r3, [r7, #23]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d105      	bne.n	8005268 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800525c:	4b3b      	ldr	r3, [pc, #236]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 800525e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005260:	4a3a      	ldr	r2, [pc, #232]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005262:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005266:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f000 80ad 	beq.w	80053cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005272:	4b36      	ldr	r3, [pc, #216]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	f003 030c 	and.w	r3, r3, #12
 800527a:	2b08      	cmp	r3, #8
 800527c:	d060      	beq.n	8005340 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d145      	bne.n	8005312 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005286:	4b33      	ldr	r3, [pc, #204]	@ (8005354 <HAL_RCC_OscConfig+0x4b4>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fd fbd2 	bl	8002a34 <HAL_GetTick>
 8005290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005294:	f7fd fbce 	bl	8002a34 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e093      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052a6:	4b29      	ldr	r3, [pc, #164]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f0      	bne.n	8005294 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	69da      	ldr	r2, [r3, #28]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c0:	019b      	lsls	r3, r3, #6
 80052c2:	431a      	orrs	r2, r3
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c8:	085b      	lsrs	r3, r3, #1
 80052ca:	3b01      	subs	r3, #1
 80052cc:	041b      	lsls	r3, r3, #16
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	061b      	lsls	r3, r3, #24
 80052d6:	431a      	orrs	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052dc:	071b      	lsls	r3, r3, #28
 80052de:	491b      	ldr	r1, [pc, #108]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052e4:	4b1b      	ldr	r3, [pc, #108]	@ (8005354 <HAL_RCC_OscConfig+0x4b4>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ea:	f7fd fba3 	bl	8002a34 <HAL_GetTick>
 80052ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052f0:	e008      	b.n	8005304 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052f2:	f7fd fb9f 	bl	8002a34 <HAL_GetTick>
 80052f6:	4602      	mov	r2, r0
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	1ad3      	subs	r3, r2, r3
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d901      	bls.n	8005304 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005300:	2303      	movs	r3, #3
 8005302:	e064      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005304:	4b11      	ldr	r3, [pc, #68]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d0f0      	beq.n	80052f2 <HAL_RCC_OscConfig+0x452>
 8005310:	e05c      	b.n	80053cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <HAL_RCC_OscConfig+0x4b4>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fd fb8c 	bl	8002a34 <HAL_GetTick>
 800531c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531e:	e008      	b.n	8005332 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005320:	f7fd fb88 	bl	8002a34 <HAL_GetTick>
 8005324:	4602      	mov	r2, r0
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2b02      	cmp	r3, #2
 800532c:	d901      	bls.n	8005332 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e04d      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005332:	4b06      	ldr	r3, [pc, #24]	@ (800534c <HAL_RCC_OscConfig+0x4ac>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1f0      	bne.n	8005320 <HAL_RCC_OscConfig+0x480>
 800533e:	e045      	b.n	80053cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b01      	cmp	r3, #1
 8005346:	d107      	bne.n	8005358 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e040      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
 800534c:	40023800 	.word	0x40023800
 8005350:	40007000 	.word	0x40007000
 8005354:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005358:	4b1f      	ldr	r3, [pc, #124]	@ (80053d8 <HAL_RCC_OscConfig+0x538>)
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d030      	beq.n	80053c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d129      	bne.n	80053c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537e:	429a      	cmp	r2, r3
 8005380:	d122      	bne.n	80053c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005388:	4013      	ands	r3, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800538e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005390:	4293      	cmp	r3, r2
 8005392:	d119      	bne.n	80053c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800539e:	085b      	lsrs	r3, r3, #1
 80053a0:	3b01      	subs	r3, #1
 80053a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d10f      	bne.n	80053c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d107      	bne.n	80053c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e000      	b.n	80053ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800

080053dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d101      	bne.n	80053ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e041      	b.n	8005472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f7fd f85a 	bl	80024bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2202      	movs	r2, #2
 800540c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3304      	adds	r3, #4
 8005418:	4619      	mov	r1, r3
 800541a:	4610      	mov	r0, r2
 800541c:	f000 fad8 	bl	80059d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e041      	b.n	8005510 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d106      	bne.n	80054a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f839 	bl	8005518 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2202      	movs	r2, #2
 80054aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3304      	adds	r3, #4
 80054b6:	4619      	mov	r1, r3
 80054b8:	4610      	mov	r0, r2
 80054ba:	f000 fa89 	bl	80059d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2201      	movs	r2, #1
 80054d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800550e:	2300      	movs	r3, #0
}
 8005510:	4618      	mov	r0, r3
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d109      	bne.n	8005550 <HAL_TIM_PWM_Start+0x24>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	bf14      	ite	ne
 8005548:	2301      	movne	r3, #1
 800554a:	2300      	moveq	r3, #0
 800554c:	b2db      	uxtb	r3, r3
 800554e:	e022      	b.n	8005596 <HAL_TIM_PWM_Start+0x6a>
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b04      	cmp	r3, #4
 8005554:	d109      	bne.n	800556a <HAL_TIM_PWM_Start+0x3e>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b01      	cmp	r3, #1
 8005560:	bf14      	ite	ne
 8005562:	2301      	movne	r3, #1
 8005564:	2300      	moveq	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	e015      	b.n	8005596 <HAL_TIM_PWM_Start+0x6a>
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b08      	cmp	r3, #8
 800556e:	d109      	bne.n	8005584 <HAL_TIM_PWM_Start+0x58>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b01      	cmp	r3, #1
 800557a:	bf14      	ite	ne
 800557c:	2301      	movne	r3, #1
 800557e:	2300      	moveq	r3, #0
 8005580:	b2db      	uxtb	r3, r3
 8005582:	e008      	b.n	8005596 <HAL_TIM_PWM_Start+0x6a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b01      	cmp	r3, #1
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e07c      	b.n	8005698 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_PWM_Start+0x82>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80055ac:	e013      	b.n	80055d6 <HAL_TIM_PWM_Start+0xaa>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b04      	cmp	r3, #4
 80055b2:	d104      	bne.n	80055be <HAL_TIM_PWM_Start+0x92>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055bc:	e00b      	b.n	80055d6 <HAL_TIM_PWM_Start+0xaa>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b08      	cmp	r3, #8
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_PWM_Start+0xa2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055cc:	e003      	b.n	80055d6 <HAL_TIM_PWM_Start+0xaa>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2201      	movs	r2, #1
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fcec 	bl	8005fbc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2d      	ldr	r2, [pc, #180]	@ (80056a0 <HAL_TIM_PWM_Start+0x174>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_TIM_PWM_Start+0xcc>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2c      	ldr	r2, [pc, #176]	@ (80056a4 <HAL_TIM_PWM_Start+0x178>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d101      	bne.n	80055fc <HAL_TIM_PWM_Start+0xd0>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <HAL_TIM_PWM_Start+0xd2>
 80055fc:	2300      	movs	r3, #0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d007      	beq.n	8005612 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005610:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a22      	ldr	r2, [pc, #136]	@ (80056a0 <HAL_TIM_PWM_Start+0x174>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d022      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005624:	d01d      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1f      	ldr	r2, [pc, #124]	@ (80056a8 <HAL_TIM_PWM_Start+0x17c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d018      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1d      	ldr	r2, [pc, #116]	@ (80056ac <HAL_TIM_PWM_Start+0x180>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d013      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1c      	ldr	r2, [pc, #112]	@ (80056b0 <HAL_TIM_PWM_Start+0x184>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a16      	ldr	r2, [pc, #88]	@ (80056a4 <HAL_TIM_PWM_Start+0x178>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a18      	ldr	r2, [pc, #96]	@ (80056b4 <HAL_TIM_PWM_Start+0x188>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIM_PWM_Start+0x136>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a16      	ldr	r2, [pc, #88]	@ (80056b8 <HAL_TIM_PWM_Start+0x18c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d111      	bne.n	8005686 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b06      	cmp	r3, #6
 8005672:	d010      	beq.n	8005696 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0201 	orr.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005684:	e007      	b.n	8005696 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f042 0201 	orr.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40010400 	.word	0x40010400
 80056a8:	40000400 	.word	0x40000400
 80056ac:	40000800 	.word	0x40000800
 80056b0:	40000c00 	.word	0x40000c00
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40001800 	.word	0x40001800

080056bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b086      	sub	sp, #24
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056c8:	2300      	movs	r3, #0
 80056ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d101      	bne.n	80056da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056d6:	2302      	movs	r3, #2
 80056d8:	e0ae      	b.n	8005838 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2b0c      	cmp	r3, #12
 80056e6:	f200 809f 	bhi.w	8005828 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80056ea:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005725 	.word	0x08005725
 80056f4:	08005829 	.word	0x08005829
 80056f8:	08005829 	.word	0x08005829
 80056fc:	08005829 	.word	0x08005829
 8005700:	08005765 	.word	0x08005765
 8005704:	08005829 	.word	0x08005829
 8005708:	08005829 	.word	0x08005829
 800570c:	08005829 	.word	0x08005829
 8005710:	080057a7 	.word	0x080057a7
 8005714:	08005829 	.word	0x08005829
 8005718:	08005829 	.word	0x08005829
 800571c:	08005829 	.word	0x08005829
 8005720:	080057e7 	.word	0x080057e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68b9      	ldr	r1, [r7, #8]
 800572a:	4618      	mov	r0, r3
 800572c:	f000 f9fc 	bl	8005b28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699a      	ldr	r2, [r3, #24]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0208 	orr.w	r2, r2, #8
 800573e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	699a      	ldr	r2, [r3, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f022 0204 	bic.w	r2, r2, #4
 800574e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6999      	ldr	r1, [r3, #24]
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	691a      	ldr	r2, [r3, #16]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	619a      	str	r2, [r3, #24]
      break;
 8005762:	e064      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 fa4c 	bl	8005c08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	699a      	ldr	r2, [r3, #24]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800577e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	699a      	ldr	r2, [r3, #24]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800578e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6999      	ldr	r1, [r3, #24]
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	021a      	lsls	r2, r3, #8
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	430a      	orrs	r2, r1
 80057a2:	619a      	str	r2, [r3, #24]
      break;
 80057a4:	e043      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 faa1 	bl	8005cf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f042 0208 	orr.w	r2, r2, #8
 80057c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f022 0204 	bic.w	r2, r2, #4
 80057d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69d9      	ldr	r1, [r3, #28]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	691a      	ldr	r2, [r3, #16]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	61da      	str	r2, [r3, #28]
      break;
 80057e4:	e023      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 faf5 	bl	8005ddc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	69da      	ldr	r2, [r3, #28]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	69d9      	ldr	r1, [r3, #28]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	691b      	ldr	r3, [r3, #16]
 800581c:	021a      	lsls	r2, r3, #8
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	61da      	str	r2, [r3, #28]
      break;
 8005826:	e002      	b.n	800582e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
      break;
 800582c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005836:	7dfb      	ldrb	r3, [r7, #23]
}
 8005838:	4618      	mov	r0, r3
 800583a:	3718      	adds	r7, #24
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_TIM_ConfigClockSource+0x1c>
 8005858:	2302      	movs	r3, #2
 800585a:	e0b4      	b.n	80059c6 <HAL_TIM_ConfigClockSource+0x186>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800587a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68ba      	ldr	r2, [r7, #8]
 800588a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005894:	d03e      	beq.n	8005914 <HAL_TIM_ConfigClockSource+0xd4>
 8005896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800589a:	f200 8087 	bhi.w	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 800589e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058a2:	f000 8086 	beq.w	80059b2 <HAL_TIM_ConfigClockSource+0x172>
 80058a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058aa:	d87f      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058ac:	2b70      	cmp	r3, #112	@ 0x70
 80058ae:	d01a      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0xa6>
 80058b0:	2b70      	cmp	r3, #112	@ 0x70
 80058b2:	d87b      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058b4:	2b60      	cmp	r3, #96	@ 0x60
 80058b6:	d050      	beq.n	800595a <HAL_TIM_ConfigClockSource+0x11a>
 80058b8:	2b60      	cmp	r3, #96	@ 0x60
 80058ba:	d877      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058bc:	2b50      	cmp	r3, #80	@ 0x50
 80058be:	d03c      	beq.n	800593a <HAL_TIM_ConfigClockSource+0xfa>
 80058c0:	2b50      	cmp	r3, #80	@ 0x50
 80058c2:	d873      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058c4:	2b40      	cmp	r3, #64	@ 0x40
 80058c6:	d058      	beq.n	800597a <HAL_TIM_ConfigClockSource+0x13a>
 80058c8:	2b40      	cmp	r3, #64	@ 0x40
 80058ca:	d86f      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058cc:	2b30      	cmp	r3, #48	@ 0x30
 80058ce:	d064      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058d0:	2b30      	cmp	r3, #48	@ 0x30
 80058d2:	d86b      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	d060      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058d8:	2b20      	cmp	r3, #32
 80058da:	d867      	bhi.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d05c      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d05a      	beq.n	800599a <HAL_TIM_ConfigClockSource+0x15a>
 80058e4:	e062      	b.n	80059ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058f6:	f000 fb41 	bl	8005f7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005908:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	609a      	str	r2, [r3, #8]
      break;
 8005912:	e04f      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005924:	f000 fb2a 	bl	8005f7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005936:	609a      	str	r2, [r3, #8]
      break;
 8005938:	e03c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	461a      	mov	r2, r3
 8005948:	f000 fa9e 	bl	8005e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2150      	movs	r1, #80	@ 0x50
 8005952:	4618      	mov	r0, r3
 8005954:	f000 faf7 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005958:	e02c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005966:	461a      	mov	r2, r3
 8005968:	f000 fabd 	bl	8005ee6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2160      	movs	r1, #96	@ 0x60
 8005972:	4618      	mov	r0, r3
 8005974:	f000 fae7 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005978:	e01c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	461a      	mov	r2, r3
 8005988:	f000 fa7e 	bl	8005e88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2140      	movs	r1, #64	@ 0x40
 8005992:	4618      	mov	r0, r3
 8005994:	f000 fad7 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 8005998:	e00c      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4619      	mov	r1, r3
 80059a4:	4610      	mov	r0, r2
 80059a6:	f000 face 	bl	8005f46 <TIM_ITRx_SetConfig>
      break;
 80059aa:	e003      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	73fb      	strb	r3, [r7, #15]
      break;
 80059b0:	e000      	b.n	80059b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80059b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a46      	ldr	r2, [pc, #280]	@ (8005afc <TIM_Base_SetConfig+0x12c>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d013      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ee:	d00f      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a43      	ldr	r2, [pc, #268]	@ (8005b00 <TIM_Base_SetConfig+0x130>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d00b      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a42      	ldr	r2, [pc, #264]	@ (8005b04 <TIM_Base_SetConfig+0x134>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d007      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a41      	ldr	r2, [pc, #260]	@ (8005b08 <TIM_Base_SetConfig+0x138>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d003      	beq.n	8005a10 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a40      	ldr	r2, [pc, #256]	@ (8005b0c <TIM_Base_SetConfig+0x13c>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d108      	bne.n	8005a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a35      	ldr	r2, [pc, #212]	@ (8005afc <TIM_Base_SetConfig+0x12c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d02b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a30:	d027      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a32      	ldr	r2, [pc, #200]	@ (8005b00 <TIM_Base_SetConfig+0x130>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d023      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a31      	ldr	r2, [pc, #196]	@ (8005b04 <TIM_Base_SetConfig+0x134>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d01f      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a30      	ldr	r2, [pc, #192]	@ (8005b08 <TIM_Base_SetConfig+0x138>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d01b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2f      	ldr	r2, [pc, #188]	@ (8005b0c <TIM_Base_SetConfig+0x13c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d017      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2e      	ldr	r2, [pc, #184]	@ (8005b10 <TIM_Base_SetConfig+0x140>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d013      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b14 <TIM_Base_SetConfig+0x144>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00f      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2c      	ldr	r2, [pc, #176]	@ (8005b18 <TIM_Base_SetConfig+0x148>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d00b      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8005b1c <TIM_Base_SetConfig+0x14c>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d007      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a2a      	ldr	r2, [pc, #168]	@ (8005b20 <TIM_Base_SetConfig+0x150>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a29      	ldr	r2, [pc, #164]	@ (8005b24 <TIM_Base_SetConfig+0x154>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d108      	bne.n	8005a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a10      	ldr	r2, [pc, #64]	@ (8005afc <TIM_Base_SetConfig+0x12c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d003      	beq.n	8005ac8 <TIM_Base_SetConfig+0xf8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a12      	ldr	r2, [pc, #72]	@ (8005b0c <TIM_Base_SetConfig+0x13c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d103      	bne.n	8005ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691a      	ldr	r2, [r3, #16]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d105      	bne.n	8005aee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f023 0201 	bic.w	r2, r3, #1
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	611a      	str	r2, [r3, #16]
  }
}
 8005aee:	bf00      	nop
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40010000 	.word	0x40010000
 8005b00:	40000400 	.word	0x40000400
 8005b04:	40000800 	.word	0x40000800
 8005b08:	40000c00 	.word	0x40000c00
 8005b0c:	40010400 	.word	0x40010400
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800
 8005b1c:	40001800 	.word	0x40001800
 8005b20:	40001c00 	.word	0x40001c00
 8005b24:	40002000 	.word	0x40002000

08005b28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b087      	sub	sp, #28
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f023 0201 	bic.w	r2, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0303 	bic.w	r3, r3, #3
 8005b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4313      	orrs	r3, r2
 8005b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f023 0302 	bic.w	r3, r3, #2
 8005b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a20      	ldr	r2, [pc, #128]	@ (8005c00 <TIM_OC1_SetConfig+0xd8>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC1_SetConfig+0x64>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a1f      	ldr	r2, [pc, #124]	@ (8005c04 <TIM_OC1_SetConfig+0xdc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10c      	bne.n	8005ba6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0308 	bic.w	r3, r3, #8
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 0304 	bic.w	r3, r3, #4
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a15      	ldr	r2, [pc, #84]	@ (8005c00 <TIM_OC1_SetConfig+0xd8>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d003      	beq.n	8005bb6 <TIM_OC1_SetConfig+0x8e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a14      	ldr	r2, [pc, #80]	@ (8005c04 <TIM_OC1_SetConfig+0xdc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d111      	bne.n	8005bda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	621a      	str	r2, [r3, #32]
}
 8005bf4:	bf00      	nop
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	40010000 	.word	0x40010000
 8005c04:	40010400 	.word	0x40010400

08005c08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f023 0210 	bic.w	r2, r3, #16
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	021b      	lsls	r3, r3, #8
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	f023 0320 	bic.w	r3, r3, #32
 8005c52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a22      	ldr	r2, [pc, #136]	@ (8005cec <TIM_OC2_SetConfig+0xe4>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d003      	beq.n	8005c70 <TIM_OC2_SetConfig+0x68>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a21      	ldr	r2, [pc, #132]	@ (8005cf0 <TIM_OC2_SetConfig+0xe8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d10d      	bne.n	8005c8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	011b      	lsls	r3, r3, #4
 8005c7e:	697a      	ldr	r2, [r7, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a17      	ldr	r2, [pc, #92]	@ (8005cec <TIM_OC2_SetConfig+0xe4>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d003      	beq.n	8005c9c <TIM_OC2_SetConfig+0x94>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a16      	ldr	r2, [pc, #88]	@ (8005cf0 <TIM_OC2_SetConfig+0xe8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d113      	bne.n	8005cc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ca2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005caa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	695b      	ldr	r3, [r3, #20]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
 8005cea:	bf00      	nop
 8005cec:	40010000 	.word	0x40010000
 8005cf0:	40010400 	.word	0x40010400

08005cf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
 8005cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	021b      	lsls	r3, r3, #8
 8005d44:	697a      	ldr	r2, [r7, #20]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a21      	ldr	r2, [pc, #132]	@ (8005dd4 <TIM_OC3_SetConfig+0xe0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_OC3_SetConfig+0x66>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a20      	ldr	r2, [pc, #128]	@ (8005dd8 <TIM_OC3_SetConfig+0xe4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d10d      	bne.n	8005d76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	021b      	lsls	r3, r3, #8
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a16      	ldr	r2, [pc, #88]	@ (8005dd4 <TIM_OC3_SetConfig+0xe0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_OC3_SetConfig+0x92>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a15      	ldr	r2, [pc, #84]	@ (8005dd8 <TIM_OC3_SetConfig+0xe4>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d113      	bne.n	8005dae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685a      	ldr	r2, [r3, #4]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	621a      	str	r2, [r3, #32]
}
 8005dc8:	bf00      	nop
 8005dca:	371c      	adds	r7, #28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40010400 	.word	0x40010400

08005ddc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b087      	sub	sp, #28
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a1b      	ldr	r3, [r3, #32]
 8005dea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a1b      	ldr	r3, [r3, #32]
 8005df0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	021b      	lsls	r3, r3, #8
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	031b      	lsls	r3, r3, #12
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a12      	ldr	r2, [pc, #72]	@ (8005e80 <TIM_OC4_SetConfig+0xa4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_OC4_SetConfig+0x68>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a11      	ldr	r2, [pc, #68]	@ (8005e84 <TIM_OC4_SetConfig+0xa8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d109      	bne.n	8005e58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	695b      	ldr	r3, [r3, #20]
 8005e50:	019b      	lsls	r3, r3, #6
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	4313      	orrs	r3, r2
 8005e56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	621a      	str	r2, [r3, #32]
}
 8005e72:	bf00      	nop
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40010000 	.word	0x40010000
 8005e84:	40010400 	.word	0x40010400

08005e88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b087      	sub	sp, #28
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	f023 0201 	bic.w	r2, r3, #1
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	699b      	ldr	r3, [r3, #24]
 8005eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 030a 	bic.w	r3, r3, #10
 8005ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ec6:	697a      	ldr	r2, [r7, #20]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	693a      	ldr	r2, [r7, #16]
 8005ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	621a      	str	r2, [r3, #32]
}
 8005eda:	bf00      	nop
 8005edc:	371c      	adds	r7, #28
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b087      	sub	sp, #28
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	60f8      	str	r0, [r7, #12]
 8005eee:	60b9      	str	r1, [r7, #8]
 8005ef0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	f023 0210 	bic.w	r2, r3, #16
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	031b      	lsls	r3, r3, #12
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	011b      	lsls	r3, r3, #4
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	621a      	str	r2, [r3, #32]
}
 8005f3a:	bf00      	nop
 8005f3c:	371c      	adds	r7, #28
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
 8005f4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f043 0307 	orr.w	r3, r3, #7
 8005f68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	609a      	str	r2, [r3, #8]
}
 8005f70:	bf00      	nop
 8005f72:	3714      	adds	r7, #20
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	607a      	str	r2, [r7, #4]
 8005f88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	021a      	lsls	r2, r3, #8
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	431a      	orrs	r2, r3
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	609a      	str	r2, [r3, #8]
}
 8005fb0:	bf00      	nop
 8005fb2:	371c      	adds	r7, #28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	f003 031f 	and.w	r3, r3, #31
 8005fce:	2201      	movs	r2, #1
 8005fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1a      	ldr	r2, [r3, #32]
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	43db      	mvns	r3, r3
 8005fde:	401a      	ands	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a1a      	ldr	r2, [r3, #32]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 031f 	and.w	r3, r3, #31
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800601c:	2302      	movs	r3, #2
 800601e:	e05a      	b.n	80060d6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006046:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4313      	orrs	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a21      	ldr	r2, [pc, #132]	@ (80060e4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d022      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800606c:	d01d      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a1d      	ldr	r2, [pc, #116]	@ (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d018      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a1b      	ldr	r2, [pc, #108]	@ (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d013      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a1a      	ldr	r2, [pc, #104]	@ (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00e      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a18      	ldr	r2, [pc, #96]	@ (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d009      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a17      	ldr	r2, [pc, #92]	@ (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d004      	beq.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a15      	ldr	r2, [pc, #84]	@ (80060fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10c      	bne.n	80060c4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	68ba      	ldr	r2, [r7, #8]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68ba      	ldr	r2, [r7, #8]
 80060c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40010000 	.word	0x40010000
 80060e8:	40000400 	.word	0x40000400
 80060ec:	40000800 	.word	0x40000800
 80060f0:	40000c00 	.word	0x40000c00
 80060f4:	40010400 	.word	0x40010400
 80060f8:	40014000 	.word	0x40014000
 80060fc:	40001800 	.word	0x40001800

08006100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006118:	2302      	movs	r3, #2
 800611a:	e03d      	b.n	8006198 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e042      	b.n	800623c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fc f9e8 	bl	80025a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2224      	movs	r2, #36	@ 0x24
 80061d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 ff4f 	bl	800708c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695a      	ldr	r2, [r3, #20]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800620c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800621c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	@ 0x28
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	4613      	mov	r3, r2
 8006252:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b20      	cmp	r3, #32
 8006262:	d175      	bne.n	8006350 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <HAL_UART_Transmit+0x2c>
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	e06e      	b.n	8006352 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2221      	movs	r2, #33	@ 0x21
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006282:	f7fc fbd7 	bl	8002a34 <HAL_GetTick>
 8006286:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	88fa      	ldrh	r2, [r7, #6]
 800628c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	88fa      	ldrh	r2, [r7, #6]
 8006292:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800629c:	d108      	bne.n	80062b0 <HAL_UART_Transmit+0x6c>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d104      	bne.n	80062b0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	61bb      	str	r3, [r7, #24]
 80062ae:	e003      	b.n	80062b8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80062b8:	e02e      	b.n	8006318 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	2200      	movs	r2, #0
 80062c2:	2180      	movs	r1, #128	@ 0x80
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f000 fc27 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d005      	beq.n	80062dc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e03a      	b.n	8006352 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d10b      	bne.n	80062fa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062f0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	3302      	adds	r3, #2
 80062f6:	61bb      	str	r3, [r7, #24]
 80062f8:	e007      	b.n	800630a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	781a      	ldrb	r2, [r3, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	3301      	adds	r3, #1
 8006308:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800630e:	b29b      	uxth	r3, r3
 8006310:	3b01      	subs	r3, #1
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800631c:	b29b      	uxth	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1cb      	bne.n	80062ba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	9300      	str	r3, [sp, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2200      	movs	r2, #0
 800632a:	2140      	movs	r1, #64	@ 0x40
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 fbf3 	bl	8006b18 <UART_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2220      	movs	r2, #32
 800633c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e006      	b.n	8006352 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	e000      	b.n	8006352 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006350:	2302      	movs	r3, #2
  }
}
 8006352:	4618      	mov	r0, r3
 8006354:	3720      	adds	r7, #32
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b084      	sub	sp, #16
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	4613      	mov	r3, r2
 8006366:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b20      	cmp	r3, #32
 8006372:	d112      	bne.n	800639a <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d002      	beq.n	8006380 <HAL_UART_Receive_DMA+0x26>
 800637a:	88fb      	ldrh	r3, [r7, #6]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e00b      	b.n	800639c <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800638a:	88fb      	ldrh	r3, [r7, #6]
 800638c:	461a      	mov	r2, r3
 800638e:	68b9      	ldr	r1, [r7, #8]
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f000 fc1b 	bl	8006bcc <UART_Start_Receive_DMA>
 8006396:	4603      	mov	r3, r0
 8006398:	e000      	b.n	800639c <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800639a:	2302      	movs	r3, #2
  }
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b0ba      	sub	sp, #232	@ 0xe8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80063ca:	2300      	movs	r3, #0
 80063cc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063da:	f003 030f 	and.w	r3, r3, #15
 80063de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80063e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10f      	bne.n	800640a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ee:	f003 0320 	and.w	r3, r3, #32
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_UART_IRQHandler+0x66>
 80063f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063fa:	f003 0320 	and.w	r3, r3, #32
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fd83 	bl	8006f0e <UART_Receive_IT>
      return;
 8006408:	e25b      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800640a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800640e:	2b00      	cmp	r3, #0
 8006410:	f000 80de 	beq.w	80065d0 <HAL_UART_IRQHandler+0x22c>
 8006414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d106      	bne.n	800642e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006420:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006424:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 80d1 	beq.w	80065d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00b      	beq.n	8006452 <HAL_UART_IRQHandler+0xae>
 800643a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800643e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006442:	2b00      	cmp	r3, #0
 8006444:	d005      	beq.n	8006452 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800644a:	f043 0201 	orr.w	r2, r3, #1
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_UART_IRQHandler+0xd2>
 800645e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006462:	f003 0301 	and.w	r3, r3, #1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800646e:	f043 0202 	orr.w	r2, r3, #2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800647a:	f003 0302 	and.w	r3, r3, #2
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_UART_IRQHandler+0xf6>
 8006482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006492:	f043 0204 	orr.w	r2, r3, #4
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d011      	beq.n	80064ca <HAL_UART_IRQHandler+0x126>
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064aa:	f003 0320 	and.w	r3, r3, #32
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d105      	bne.n	80064be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d005      	beq.n	80064ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064c2:	f043 0208 	orr.w	r2, r3, #8
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 81f2 	beq.w	80068b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d8:	f003 0320 	and.w	r3, r3, #32
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_UART_IRQHandler+0x14e>
 80064e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e4:	f003 0320 	and.w	r3, r3, #32
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fd0e 	bl	8006f0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	695b      	ldr	r3, [r3, #20]
 80064f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	bf0c      	ite	eq
 8006500:	2301      	moveq	r3, #1
 8006502:	2300      	movne	r3, #0
 8006504:	b2db      	uxtb	r3, r3
 8006506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800650e:	f003 0308 	and.w	r3, r3, #8
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_UART_IRQHandler+0x17a>
 8006516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800651a:	2b00      	cmp	r3, #0
 800651c:	d04f      	beq.n	80065be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 fc16 	bl	8006d50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652e:	2b40      	cmp	r3, #64	@ 0x40
 8006530:	d141      	bne.n	80065b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3314      	adds	r3, #20
 8006538:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800653c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006540:	e853 3f00 	ldrex	r3, [r3]
 8006544:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006548:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800654c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3314      	adds	r3, #20
 800655a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800655e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006562:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800656a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800656e:	e841 2300 	strex	r3, r2, [r1]
 8006572:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d1d9      	bne.n	8006532 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d013      	beq.n	80065ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658a:	4a7e      	ldr	r2, [pc, #504]	@ (8006784 <HAL_UART_IRQHandler+0x3e0>)
 800658c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006592:	4618      	mov	r0, r3
 8006594:	f7fc fd06 	bl	8002fa4 <HAL_DMA_Abort_IT>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d016      	beq.n	80065cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80065a8:	4610      	mov	r0, r2
 80065aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065ac:	e00e      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f99e 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065b4:	e00a      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 f99a 	bl	80068f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	e006      	b.n	80065cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f996 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80065ca:	e175      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065cc:	bf00      	nop
    return;
 80065ce:	e173      	b.n	80068b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	f040 814f 	bne.w	8006878 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065de:	f003 0310 	and.w	r3, r3, #16
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 8148 	beq.w	8006878 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80065e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ec:	f003 0310 	and.w	r3, r3, #16
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	f000 8141 	beq.w	8006878 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60bb      	str	r3, [r7, #8]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	60bb      	str	r3, [r7, #8]
 800660a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006616:	2b40      	cmp	r3, #64	@ 0x40
 8006618:	f040 80b6 	bne.w	8006788 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006628:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800662c:	2b00      	cmp	r3, #0
 800662e:	f000 8145 	beq.w	80068bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006636:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800663a:	429a      	cmp	r2, r3
 800663c:	f080 813e 	bcs.w	80068bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006646:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006652:	f000 8088 	beq.w	8006766 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006664:	e853 3f00 	ldrex	r3, [r3]
 8006668:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800666c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	330c      	adds	r3, #12
 800667e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006686:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800668e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800669a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1d9      	bne.n	8006656 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	3314      	adds	r3, #20
 80066a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80066ac:	e853 3f00 	ldrex	r3, [r3]
 80066b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80066b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80066b4:	f023 0301 	bic.w	r3, r3, #1
 80066b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3314      	adds	r3, #20
 80066c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80066c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80066ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80066ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80066d2:	e841 2300 	strex	r3, r2, [r1]
 80066d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80066d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e1      	bne.n	80066a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	3314      	adds	r3, #20
 80066e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066e8:	e853 3f00 	ldrex	r3, [r3]
 80066ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80066ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006702:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006704:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006706:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006708:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800670a:	e841 2300 	strex	r3, r2, [r1]
 800670e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006710:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1e3      	bne.n	80066de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2220      	movs	r2, #32
 800671a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006734:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006736:	f023 0310 	bic.w	r3, r3, #16
 800673a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006748:	65ba      	str	r2, [r7, #88]	@ 0x58
 800674a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800674e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006750:	e841 2300 	strex	r3, r2, [r1]
 8006754:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1e3      	bne.n	8006724 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006760:	4618      	mov	r0, r3
 8006762:	f7fc fbaf 	bl	8002ec4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006774:	b29b      	uxth	r3, r3
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	b29b      	uxth	r3, r3
 800677a:	4619      	mov	r1, r3
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f8c1 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006782:	e09b      	b.n	80068bc <HAL_UART_IRQHandler+0x518>
 8006784:	08006e17 	.word	0x08006e17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006790:	b29b      	uxth	r3, r3
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 808e 	beq.w	80068c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80067a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8089 	beq.w	80068c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	330c      	adds	r3, #12
 80067b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	330c      	adds	r3, #12
 80067ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80067d2:	647a      	str	r2, [r7, #68]	@ 0x44
 80067d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e3      	bne.n	80067ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3314      	adds	r3, #20
 80067ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f0:	e853 3f00 	ldrex	r3, [r3]
 80067f4:	623b      	str	r3, [r7, #32]
   return(result);
 80067f6:	6a3b      	ldr	r3, [r7, #32]
 80067f8:	f023 0301 	bic.w	r3, r3, #1
 80067fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3314      	adds	r3, #20
 8006806:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800680a:	633a      	str	r2, [r7, #48]	@ 0x30
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e3      	bne.n	80067e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	330c      	adds	r3, #12
 8006832:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	60fb      	str	r3, [r7, #12]
   return(result);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0310 	bic.w	r3, r3, #16
 8006842:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	330c      	adds	r3, #12
 800684c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006850:	61fa      	str	r2, [r7, #28]
 8006852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	69b9      	ldr	r1, [r7, #24]
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	617b      	str	r3, [r7, #20]
   return(result);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e3      	bne.n	800682c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2202      	movs	r2, #2
 8006868:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800686a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800686e:	4619      	mov	r1, r3
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 f847 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006876:	e023      	b.n	80068c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800687c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006880:	2b00      	cmp	r3, #0
 8006882:	d009      	beq.n	8006898 <HAL_UART_IRQHandler+0x4f4>
 8006884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fad4 	bl	8006e3e <UART_Transmit_IT>
    return;
 8006896:	e014      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800689c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00e      	beq.n	80068c2 <HAL_UART_IRQHandler+0x51e>
 80068a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d008      	beq.n	80068c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fb14 	bl	8006ede <UART_EndTransmit_IT>
    return;
 80068b6:	e004      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80068b8:	bf00      	nop
 80068ba:	e002      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80068bc:	bf00      	nop
 80068be:	e000      	b.n	80068c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80068c0:	bf00      	nop
  }
}
 80068c2:	37e8      	adds	r7, #232	@ 0xe8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006910:	bf00      	nop
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b09c      	sub	sp, #112	@ 0x70
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006928:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d172      	bne.n	8006a1e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800693a:	2200      	movs	r2, #0
 800693c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800693e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	330c      	adds	r3, #12
 8006944:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800694e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006954:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006956:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	330c      	adds	r3, #12
 800695c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800695e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006960:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006964:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800696c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e5      	bne.n	800693e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006972:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3314      	adds	r3, #20
 8006978:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	667b      	str	r3, [r7, #100]	@ 0x64
 800698a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3314      	adds	r3, #20
 8006990:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006992:	647a      	str	r2, [r7, #68]	@ 0x44
 8006994:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006998:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e5      	bne.n	8006972 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3314      	adds	r3, #20
 80069ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b0:	e853 3f00 	ldrex	r3, [r3]
 80069b4:	623b      	str	r3, [r7, #32]
   return(result);
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80069be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	3314      	adds	r3, #20
 80069c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80069c6:	633a      	str	r2, [r7, #48]	@ 0x30
 80069c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e5      	bne.n	80069a6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069dc:	2220      	movs	r2, #32
 80069de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d119      	bne.n	8006a1e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	330c      	adds	r3, #12
 80069f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 0310 	bic.w	r3, r3, #16
 8006a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	330c      	adds	r3, #12
 8006a08:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006a0a:	61fa      	str	r2, [r7, #28]
 8006a0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	69b9      	ldr	r1, [r7, #24]
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	617b      	str	r3, [r7, #20]
   return(result);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e5      	bne.n	80069ea <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a20:	2200      	movs	r2, #0
 8006a22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d106      	bne.n	8006a3a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006a2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a30:	4619      	mov	r1, r3
 8006a32:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a34:	f7ff ff66 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a38:	e002      	b.n	8006a40 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006a3a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006a3c:	f7fa fc4a 	bl	80012d4 <HAL_UART_RxCpltCallback>
}
 8006a40:	bf00      	nop
 8006a42:	3770      	adds	r7, #112	@ 0x70
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d108      	bne.n	8006a76 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff ff48 	bl	8006904 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006a74:	e002      	b.n	8006a7c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f7ff ff30 	bl	80068dc <HAL_UART_RxHalfCpltCallback>
}
 8006a7c:	bf00      	nop
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a94:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006aa0:	2b80      	cmp	r3, #128	@ 0x80
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b21      	cmp	r3, #33	@ 0x21
 8006ab6:	d108      	bne.n	8006aca <UART_DMAError+0x46>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006ac4:	68b8      	ldr	r0, [r7, #8]
 8006ac6:	f000 f91b 	bl	8006d00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad4:	2b40      	cmp	r3, #64	@ 0x40
 8006ad6:	bf0c      	ite	eq
 8006ad8:	2301      	moveq	r3, #1
 8006ada:	2300      	movne	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b22      	cmp	r3, #34	@ 0x22
 8006aea:	d108      	bne.n	8006afe <UART_DMAError+0x7a>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d005      	beq.n	8006afe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	2200      	movs	r2, #0
 8006af6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006af8:	68b8      	ldr	r0, [r7, #8]
 8006afa:	f000 f929 	bl	8006d50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b02:	f043 0210 	orr.w	r2, r3, #16
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b0a:	68b8      	ldr	r0, [r7, #8]
 8006b0c:	f7ff fef0 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b10:	bf00      	nop
 8006b12:	3710      	adds	r7, #16
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	4613      	mov	r3, r2
 8006b26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b28:	e03b      	b.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b30:	d037      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b32:	f7fb ff7f 	bl	8002a34 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	6a3a      	ldr	r2, [r7, #32]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d302      	bcc.n	8006b48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b42:	6a3b      	ldr	r3, [r7, #32]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	e03a      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d023      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b80      	cmp	r3, #128	@ 0x80
 8006b5e:	d020      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	2b40      	cmp	r3, #64	@ 0x40
 8006b64:	d01d      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b08      	cmp	r3, #8
 8006b72:	d116      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006b74:	2300      	movs	r3, #0
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	617b      	str	r3, [r7, #20]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	617b      	str	r3, [r7, #20]
 8006b88:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 f8e0 	bl	8006d50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2208      	movs	r2, #8
 8006b94:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e00f      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4013      	ands	r3, r2
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	bf0c      	ite	eq
 8006bb2:	2301      	moveq	r3, #1
 8006bb4:	2300      	movne	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d0b4      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b098      	sub	sp, #96	@ 0x60
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2222      	movs	r2, #34	@ 0x22
 8006bf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bf8:	4a3e      	ldr	r2, [pc, #248]	@ (8006cf4 <UART_Start_Receive_DMA+0x128>)
 8006bfa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c00:	4a3d      	ldr	r2, [pc, #244]	@ (8006cf8 <UART_Start_Receive_DMA+0x12c>)
 8006c02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c08:	4a3c      	ldr	r2, [pc, #240]	@ (8006cfc <UART_Start_Receive_DMA+0x130>)
 8006c0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c10:	2200      	movs	r2, #0
 8006c12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006c14:	f107 0308 	add.w	r3, r7, #8
 8006c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	3304      	adds	r3, #4
 8006c24:	4619      	mov	r1, r3
 8006c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	f7fc f8f2 	bl	8002e14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006c30:	2300      	movs	r3, #0
 8006c32:	613b      	str	r3, [r7, #16]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	613b      	str	r3, [r7, #16]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d019      	beq.n	8006c82 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	330c      	adds	r3, #12
 8006c54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006c58:	e853 3f00 	ldrex	r3, [r3]
 8006c5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c64:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006c6e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006c70:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006c74:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c76:	e841 2300 	strex	r3, r2, [r1]
 8006c7a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1e5      	bne.n	8006c4e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	3314      	adds	r3, #20
 8006c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c8c:	e853 3f00 	ldrex	r3, [r3]
 8006c90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	f043 0301 	orr.w	r3, r3, #1
 8006c98:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3314      	adds	r3, #20
 8006ca0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ca2:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006ca4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006ca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006caa:	e841 2300 	strex	r3, r2, [r1]
 8006cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d1e5      	bne.n	8006c82 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3314      	adds	r3, #20
 8006cbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ccc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3314      	adds	r3, #20
 8006cd4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006cd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6a39      	ldr	r1, [r7, #32]
 8006cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e5      	bne.n	8006cb6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3760      	adds	r7, #96	@ 0x60
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	0800691d 	.word	0x0800691d
 8006cf8:	08006a49 	.word	0x08006a49
 8006cfc:	08006a85 	.word	0x08006a85

08006d00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b089      	sub	sp, #36	@ 0x24
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	330c      	adds	r3, #12
 8006d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	e853 3f00 	ldrex	r3, [r3]
 8006d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	330c      	adds	r3, #12
 8006d26:	69fa      	ldr	r2, [r7, #28]
 8006d28:	61ba      	str	r2, [r7, #24]
 8006d2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2c:	6979      	ldr	r1, [r7, #20]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	e841 2300 	strex	r3, r2, [r1]
 8006d34:	613b      	str	r3, [r7, #16]
   return(result);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e5      	bne.n	8006d08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2220      	movs	r2, #32
 8006d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006d44:	bf00      	nop
 8006d46:	3724      	adds	r7, #36	@ 0x24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b095      	sub	sp, #84	@ 0x54
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	330c      	adds	r3, #12
 8006d5e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d78:	643a      	str	r2, [r7, #64]	@ 0x40
 8006d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e5      	bne.n	8006d58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3314      	adds	r3, #20
 8006d92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3314      	adds	r3, #20
 8006daa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006dac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006db2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d119      	bne.n	8006dfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	330c      	adds	r3, #12
 8006dce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f023 0310 	bic.w	r3, r3, #16
 8006dde:	647b      	str	r3, [r7, #68]	@ 0x44
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	330c      	adds	r3, #12
 8006de6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006de8:	61ba      	str	r2, [r7, #24]
 8006dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6979      	ldr	r1, [r7, #20]
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	613b      	str	r3, [r7, #16]
   return(result);
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e5      	bne.n	8006dc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006e0a:	bf00      	nop
 8006e0c:	3754      	adds	r7, #84	@ 0x54
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b084      	sub	sp, #16
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2200      	movs	r2, #0
 8006e28:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f7ff fd5d 	bl	80068f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}

08006e3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b085      	sub	sp, #20
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b21      	cmp	r3, #33	@ 0x21
 8006e50:	d13e      	bne.n	8006ed0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e5a:	d114      	bne.n	8006e86 <UART_Transmit_IT+0x48>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d110      	bne.n	8006e86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	881b      	ldrh	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	1c9a      	adds	r2, r3, #2
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	621a      	str	r2, [r3, #32]
 8006e84:	e008      	b.n	8006e98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a1b      	ldr	r3, [r3, #32]
 8006e8a:	1c59      	adds	r1, r3, #1
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	6211      	str	r1, [r2, #32]
 8006e90:	781a      	ldrb	r2, [r3, #0]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10f      	bne.n	8006ecc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68da      	ldr	r2, [r3, #12]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006eba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68da      	ldr	r2, [r3, #12]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006eca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	e000      	b.n	8006ed2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ed0:	2302      	movs	r3, #2
  }
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68da      	ldr	r2, [r3, #12]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ef4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2220      	movs	r2, #32
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f7ff fce2 	bl	80068c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b08c      	sub	sp, #48	@ 0x30
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b22      	cmp	r3, #34	@ 0x22
 8006f20:	f040 80ae 	bne.w	8007080 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f2c:	d117      	bne.n	8006f5e <UART_Receive_IT+0x50>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	691b      	ldr	r3, [r3, #16]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d113      	bne.n	8006f5e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f4c:	b29a      	uxth	r2, r3
 8006f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f50:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f56:	1c9a      	adds	r2, r3, #2
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8006f5c:	e026      	b.n	8006fac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f70:	d007      	beq.n	8006f82 <UART_Receive_IT+0x74>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d10a      	bne.n	8006f90 <UART_Receive_IT+0x82>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d106      	bne.n	8006f90 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f8c:	701a      	strb	r2, [r3, #0]
 8006f8e:	e008      	b.n	8006fa2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	687a      	ldr	r2, [r7, #4]
 8006fb8:	4619      	mov	r1, r3
 8006fba:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d15d      	bne.n	800707c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68da      	ldr	r2, [r3, #12]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0220 	bic.w	r2, r2, #32
 8006fce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006fde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695a      	ldr	r2, [r3, #20]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0201 	bic.w	r2, r2, #1
 8006fee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007002:	2b01      	cmp	r3, #1
 8007004:	d135      	bne.n	8007072 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	330c      	adds	r3, #12
 8007012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	e853 3f00 	ldrex	r3, [r3]
 800701a:	613b      	str	r3, [r7, #16]
   return(result);
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f023 0310 	bic.w	r3, r3, #16
 8007022:	627b      	str	r3, [r7, #36]	@ 0x24
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	330c      	adds	r3, #12
 800702a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702c:	623a      	str	r2, [r7, #32]
 800702e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007030:	69f9      	ldr	r1, [r7, #28]
 8007032:	6a3a      	ldr	r2, [r7, #32]
 8007034:	e841 2300 	strex	r3, r2, [r1]
 8007038:	61bb      	str	r3, [r7, #24]
   return(result);
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e5      	bne.n	800700c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b10      	cmp	r3, #16
 800704c:	d10a      	bne.n	8007064 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	60fb      	str	r3, [r7, #12]
 8007062:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7ff fc4a 	bl	8006904 <HAL_UARTEx_RxEventCallback>
 8007070:	e002      	b.n	8007078 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fa f92e 	bl	80012d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007078:	2300      	movs	r3, #0
 800707a:	e002      	b.n	8007082 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	e000      	b.n	8007082 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007080:	2302      	movs	r3, #2
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3730      	adds	r7, #48	@ 0x30
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
	...

0800708c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800708c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007090:	b0c0      	sub	sp, #256	@ 0x100
 8007092:	af00      	add	r7, sp, #0
 8007094:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a8:	68d9      	ldr	r1, [r3, #12]
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	ea40 0301 	orr.w	r3, r0, r1
 80070b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ba:	689a      	ldr	r2, [r3, #8]
 80070bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	431a      	orrs	r2, r3
 80070c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80070e4:	f021 010c 	bic.w	r1, r1, #12
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070f2:	430b      	orrs	r3, r1
 80070f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007106:	6999      	ldr	r1, [r3, #24]
 8007108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	ea40 0301 	orr.w	r3, r0, r1
 8007112:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b8f      	ldr	r3, [pc, #572]	@ (8007358 <UART_SetConfig+0x2cc>)
 800711c:	429a      	cmp	r2, r3
 800711e:	d005      	beq.n	800712c <UART_SetConfig+0xa0>
 8007120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	4b8d      	ldr	r3, [pc, #564]	@ (800735c <UART_SetConfig+0x2d0>)
 8007128:	429a      	cmp	r2, r3
 800712a:	d104      	bne.n	8007136 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800712c:	f7fd fc74 	bl	8004a18 <HAL_RCC_GetPCLK2Freq>
 8007130:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007134:	e003      	b.n	800713e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007136:	f7fd fc5b 	bl	80049f0 <HAL_RCC_GetPCLK1Freq>
 800713a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800713e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007148:	f040 810c 	bne.w	8007364 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800714c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007150:	2200      	movs	r2, #0
 8007152:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007156:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800715a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800715e:	4622      	mov	r2, r4
 8007160:	462b      	mov	r3, r5
 8007162:	1891      	adds	r1, r2, r2
 8007164:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007166:	415b      	adcs	r3, r3
 8007168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800716a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800716e:	4621      	mov	r1, r4
 8007170:	eb12 0801 	adds.w	r8, r2, r1
 8007174:	4629      	mov	r1, r5
 8007176:	eb43 0901 	adc.w	r9, r3, r1
 800717a:	f04f 0200 	mov.w	r2, #0
 800717e:	f04f 0300 	mov.w	r3, #0
 8007182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800718a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800718e:	4690      	mov	r8, r2
 8007190:	4699      	mov	r9, r3
 8007192:	4623      	mov	r3, r4
 8007194:	eb18 0303 	adds.w	r3, r8, r3
 8007198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800719c:	462b      	mov	r3, r5
 800719e:	eb49 0303 	adc.w	r3, r9, r3
 80071a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071ba:	460b      	mov	r3, r1
 80071bc:	18db      	adds	r3, r3, r3
 80071be:	653b      	str	r3, [r7, #80]	@ 0x50
 80071c0:	4613      	mov	r3, r2
 80071c2:	eb42 0303 	adc.w	r3, r2, r3
 80071c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80071c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071d0:	f7f9 fd5a 	bl	8000c88 <__aeabi_uldivmod>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4b61      	ldr	r3, [pc, #388]	@ (8007360 <UART_SetConfig+0x2d4>)
 80071da:	fba3 2302 	umull	r2, r3, r3, r2
 80071de:	095b      	lsrs	r3, r3, #5
 80071e0:	011c      	lsls	r4, r3, #4
 80071e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071e6:	2200      	movs	r2, #0
 80071e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80071f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80071f4:	4642      	mov	r2, r8
 80071f6:	464b      	mov	r3, r9
 80071f8:	1891      	adds	r1, r2, r2
 80071fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80071fc:	415b      	adcs	r3, r3
 80071fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007204:	4641      	mov	r1, r8
 8007206:	eb12 0a01 	adds.w	sl, r2, r1
 800720a:	4649      	mov	r1, r9
 800720c:	eb43 0b01 	adc.w	fp, r3, r1
 8007210:	f04f 0200 	mov.w	r2, #0
 8007214:	f04f 0300 	mov.w	r3, #0
 8007218:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800721c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007224:	4692      	mov	sl, r2
 8007226:	469b      	mov	fp, r3
 8007228:	4643      	mov	r3, r8
 800722a:	eb1a 0303 	adds.w	r3, sl, r3
 800722e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007232:	464b      	mov	r3, r9
 8007234:	eb4b 0303 	adc.w	r3, fp, r3
 8007238:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800723c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007248:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800724c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007250:	460b      	mov	r3, r1
 8007252:	18db      	adds	r3, r3, r3
 8007254:	643b      	str	r3, [r7, #64]	@ 0x40
 8007256:	4613      	mov	r3, r2
 8007258:	eb42 0303 	adc.w	r3, r2, r3
 800725c:	647b      	str	r3, [r7, #68]	@ 0x44
 800725e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007262:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007266:	f7f9 fd0f 	bl	8000c88 <__aeabi_uldivmod>
 800726a:	4602      	mov	r2, r0
 800726c:	460b      	mov	r3, r1
 800726e:	4611      	mov	r1, r2
 8007270:	4b3b      	ldr	r3, [pc, #236]	@ (8007360 <UART_SetConfig+0x2d4>)
 8007272:	fba3 2301 	umull	r2, r3, r3, r1
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	2264      	movs	r2, #100	@ 0x64
 800727a:	fb02 f303 	mul.w	r3, r2, r3
 800727e:	1acb      	subs	r3, r1, r3
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007286:	4b36      	ldr	r3, [pc, #216]	@ (8007360 <UART_SetConfig+0x2d4>)
 8007288:	fba3 2302 	umull	r2, r3, r3, r2
 800728c:	095b      	lsrs	r3, r3, #5
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007294:	441c      	add	r4, r3
 8007296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800729a:	2200      	movs	r2, #0
 800729c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072a8:	4642      	mov	r2, r8
 80072aa:	464b      	mov	r3, r9
 80072ac:	1891      	adds	r1, r2, r2
 80072ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072b0:	415b      	adcs	r3, r3
 80072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072b8:	4641      	mov	r1, r8
 80072ba:	1851      	adds	r1, r2, r1
 80072bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80072be:	4649      	mov	r1, r9
 80072c0:	414b      	adcs	r3, r1
 80072c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c4:	f04f 0200 	mov.w	r2, #0
 80072c8:	f04f 0300 	mov.w	r3, #0
 80072cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072d0:	4659      	mov	r1, fp
 80072d2:	00cb      	lsls	r3, r1, #3
 80072d4:	4651      	mov	r1, sl
 80072d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072da:	4651      	mov	r1, sl
 80072dc:	00ca      	lsls	r2, r1, #3
 80072de:	4610      	mov	r0, r2
 80072e0:	4619      	mov	r1, r3
 80072e2:	4603      	mov	r3, r0
 80072e4:	4642      	mov	r2, r8
 80072e6:	189b      	adds	r3, r3, r2
 80072e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072ec:	464b      	mov	r3, r9
 80072ee:	460a      	mov	r2, r1
 80072f0:	eb42 0303 	adc.w	r3, r2, r3
 80072f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007304:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800730c:	460b      	mov	r3, r1
 800730e:	18db      	adds	r3, r3, r3
 8007310:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007312:	4613      	mov	r3, r2
 8007314:	eb42 0303 	adc.w	r3, r2, r3
 8007318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800731a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800731e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007322:	f7f9 fcb1 	bl	8000c88 <__aeabi_uldivmod>
 8007326:	4602      	mov	r2, r0
 8007328:	460b      	mov	r3, r1
 800732a:	4b0d      	ldr	r3, [pc, #52]	@ (8007360 <UART_SetConfig+0x2d4>)
 800732c:	fba3 1302 	umull	r1, r3, r3, r2
 8007330:	095b      	lsrs	r3, r3, #5
 8007332:	2164      	movs	r1, #100	@ 0x64
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	00db      	lsls	r3, r3, #3
 800733c:	3332      	adds	r3, #50	@ 0x32
 800733e:	4a08      	ldr	r2, [pc, #32]	@ (8007360 <UART_SetConfig+0x2d4>)
 8007340:	fba2 2303 	umull	r2, r3, r2, r3
 8007344:	095b      	lsrs	r3, r3, #5
 8007346:	f003 0207 	and.w	r2, r3, #7
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4422      	add	r2, r4
 8007352:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007354:	e106      	b.n	8007564 <UART_SetConfig+0x4d8>
 8007356:	bf00      	nop
 8007358:	40011000 	.word	0x40011000
 800735c:	40011400 	.word	0x40011400
 8007360:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007368:	2200      	movs	r2, #0
 800736a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800736e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007372:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007376:	4642      	mov	r2, r8
 8007378:	464b      	mov	r3, r9
 800737a:	1891      	adds	r1, r2, r2
 800737c:	6239      	str	r1, [r7, #32]
 800737e:	415b      	adcs	r3, r3
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
 8007382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007386:	4641      	mov	r1, r8
 8007388:	1854      	adds	r4, r2, r1
 800738a:	4649      	mov	r1, r9
 800738c:	eb43 0501 	adc.w	r5, r3, r1
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 0300 	mov.w	r3, #0
 8007398:	00eb      	lsls	r3, r5, #3
 800739a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800739e:	00e2      	lsls	r2, r4, #3
 80073a0:	4614      	mov	r4, r2
 80073a2:	461d      	mov	r5, r3
 80073a4:	4643      	mov	r3, r8
 80073a6:	18e3      	adds	r3, r4, r3
 80073a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073ac:	464b      	mov	r3, r9
 80073ae:	eb45 0303 	adc.w	r3, r5, r3
 80073b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	2200      	movs	r2, #0
 80073be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073c6:	f04f 0200 	mov.w	r2, #0
 80073ca:	f04f 0300 	mov.w	r3, #0
 80073ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073d2:	4629      	mov	r1, r5
 80073d4:	008b      	lsls	r3, r1, #2
 80073d6:	4621      	mov	r1, r4
 80073d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073dc:	4621      	mov	r1, r4
 80073de:	008a      	lsls	r2, r1, #2
 80073e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80073e4:	f7f9 fc50 	bl	8000c88 <__aeabi_uldivmod>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	4b60      	ldr	r3, [pc, #384]	@ (8007570 <UART_SetConfig+0x4e4>)
 80073ee:	fba3 2302 	umull	r2, r3, r3, r2
 80073f2:	095b      	lsrs	r3, r3, #5
 80073f4:	011c      	lsls	r4, r3, #4
 80073f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007400:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007404:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	1891      	adds	r1, r2, r2
 800740e:	61b9      	str	r1, [r7, #24]
 8007410:	415b      	adcs	r3, r3
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007418:	4641      	mov	r1, r8
 800741a:	1851      	adds	r1, r2, r1
 800741c:	6139      	str	r1, [r7, #16]
 800741e:	4649      	mov	r1, r9
 8007420:	414b      	adcs	r3, r1
 8007422:	617b      	str	r3, [r7, #20]
 8007424:	f04f 0200 	mov.w	r2, #0
 8007428:	f04f 0300 	mov.w	r3, #0
 800742c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007430:	4659      	mov	r1, fp
 8007432:	00cb      	lsls	r3, r1, #3
 8007434:	4651      	mov	r1, sl
 8007436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800743a:	4651      	mov	r1, sl
 800743c:	00ca      	lsls	r2, r1, #3
 800743e:	4610      	mov	r0, r2
 8007440:	4619      	mov	r1, r3
 8007442:	4603      	mov	r3, r0
 8007444:	4642      	mov	r2, r8
 8007446:	189b      	adds	r3, r3, r2
 8007448:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800744c:	464b      	mov	r3, r9
 800744e:	460a      	mov	r2, r1
 8007450:	eb42 0303 	adc.w	r3, r2, r3
 8007454:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007462:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007464:	f04f 0200 	mov.w	r2, #0
 8007468:	f04f 0300 	mov.w	r3, #0
 800746c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007470:	4649      	mov	r1, r9
 8007472:	008b      	lsls	r3, r1, #2
 8007474:	4641      	mov	r1, r8
 8007476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800747a:	4641      	mov	r1, r8
 800747c:	008a      	lsls	r2, r1, #2
 800747e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007482:	f7f9 fc01 	bl	8000c88 <__aeabi_uldivmod>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	4611      	mov	r1, r2
 800748c:	4b38      	ldr	r3, [pc, #224]	@ (8007570 <UART_SetConfig+0x4e4>)
 800748e:	fba3 2301 	umull	r2, r3, r3, r1
 8007492:	095b      	lsrs	r3, r3, #5
 8007494:	2264      	movs	r2, #100	@ 0x64
 8007496:	fb02 f303 	mul.w	r3, r2, r3
 800749a:	1acb      	subs	r3, r1, r3
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	3332      	adds	r3, #50	@ 0x32
 80074a0:	4a33      	ldr	r2, [pc, #204]	@ (8007570 <UART_SetConfig+0x4e4>)
 80074a2:	fba2 2303 	umull	r2, r3, r2, r3
 80074a6:	095b      	lsrs	r3, r3, #5
 80074a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074ac:	441c      	add	r4, r3
 80074ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074b2:	2200      	movs	r2, #0
 80074b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80074b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80074b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074bc:	4642      	mov	r2, r8
 80074be:	464b      	mov	r3, r9
 80074c0:	1891      	adds	r1, r2, r2
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	415b      	adcs	r3, r3
 80074c6:	60fb      	str	r3, [r7, #12]
 80074c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074cc:	4641      	mov	r1, r8
 80074ce:	1851      	adds	r1, r2, r1
 80074d0:	6039      	str	r1, [r7, #0]
 80074d2:	4649      	mov	r1, r9
 80074d4:	414b      	adcs	r3, r1
 80074d6:	607b      	str	r3, [r7, #4]
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074e4:	4659      	mov	r1, fp
 80074e6:	00cb      	lsls	r3, r1, #3
 80074e8:	4651      	mov	r1, sl
 80074ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ee:	4651      	mov	r1, sl
 80074f0:	00ca      	lsls	r2, r1, #3
 80074f2:	4610      	mov	r0, r2
 80074f4:	4619      	mov	r1, r3
 80074f6:	4603      	mov	r3, r0
 80074f8:	4642      	mov	r2, r8
 80074fa:	189b      	adds	r3, r3, r2
 80074fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074fe:	464b      	mov	r3, r9
 8007500:	460a      	mov	r2, r1
 8007502:	eb42 0303 	adc.w	r3, r2, r3
 8007506:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	663b      	str	r3, [r7, #96]	@ 0x60
 8007512:	667a      	str	r2, [r7, #100]	@ 0x64
 8007514:	f04f 0200 	mov.w	r2, #0
 8007518:	f04f 0300 	mov.w	r3, #0
 800751c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007520:	4649      	mov	r1, r9
 8007522:	008b      	lsls	r3, r1, #2
 8007524:	4641      	mov	r1, r8
 8007526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800752a:	4641      	mov	r1, r8
 800752c:	008a      	lsls	r2, r1, #2
 800752e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007532:	f7f9 fba9 	bl	8000c88 <__aeabi_uldivmod>
 8007536:	4602      	mov	r2, r0
 8007538:	460b      	mov	r3, r1
 800753a:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <UART_SetConfig+0x4e4>)
 800753c:	fba3 1302 	umull	r1, r3, r3, r2
 8007540:	095b      	lsrs	r3, r3, #5
 8007542:	2164      	movs	r1, #100	@ 0x64
 8007544:	fb01 f303 	mul.w	r3, r1, r3
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	3332      	adds	r3, #50	@ 0x32
 800754e:	4a08      	ldr	r2, [pc, #32]	@ (8007570 <UART_SetConfig+0x4e4>)
 8007550:	fba2 2303 	umull	r2, r3, r2, r3
 8007554:	095b      	lsrs	r3, r3, #5
 8007556:	f003 020f 	and.w	r2, r3, #15
 800755a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4422      	add	r2, r4
 8007562:	609a      	str	r2, [r3, #8]
}
 8007564:	bf00      	nop
 8007566:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800756a:	46bd      	mov	sp, r7
 800756c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007570:	51eb851f 	.word	0x51eb851f

08007574 <__cvt>:
 8007574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007578:	ec57 6b10 	vmov	r6, r7, d0
 800757c:	2f00      	cmp	r7, #0
 800757e:	460c      	mov	r4, r1
 8007580:	4619      	mov	r1, r3
 8007582:	463b      	mov	r3, r7
 8007584:	bfbb      	ittet	lt
 8007586:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800758a:	461f      	movlt	r7, r3
 800758c:	2300      	movge	r3, #0
 800758e:	232d      	movlt	r3, #45	@ 0x2d
 8007590:	700b      	strb	r3, [r1, #0]
 8007592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007594:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007598:	4691      	mov	r9, r2
 800759a:	f023 0820 	bic.w	r8, r3, #32
 800759e:	bfbc      	itt	lt
 80075a0:	4632      	movlt	r2, r6
 80075a2:	4616      	movlt	r6, r2
 80075a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075a8:	d005      	beq.n	80075b6 <__cvt+0x42>
 80075aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80075ae:	d100      	bne.n	80075b2 <__cvt+0x3e>
 80075b0:	3401      	adds	r4, #1
 80075b2:	2102      	movs	r1, #2
 80075b4:	e000      	b.n	80075b8 <__cvt+0x44>
 80075b6:	2103      	movs	r1, #3
 80075b8:	ab03      	add	r3, sp, #12
 80075ba:	9301      	str	r3, [sp, #4]
 80075bc:	ab02      	add	r3, sp, #8
 80075be:	9300      	str	r3, [sp, #0]
 80075c0:	ec47 6b10 	vmov	d0, r6, r7
 80075c4:	4653      	mov	r3, sl
 80075c6:	4622      	mov	r2, r4
 80075c8:	f000 ff3e 	bl	8008448 <_dtoa_r>
 80075cc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075d0:	4605      	mov	r5, r0
 80075d2:	d119      	bne.n	8007608 <__cvt+0x94>
 80075d4:	f019 0f01 	tst.w	r9, #1
 80075d8:	d00e      	beq.n	80075f8 <__cvt+0x84>
 80075da:	eb00 0904 	add.w	r9, r0, r4
 80075de:	2200      	movs	r2, #0
 80075e0:	2300      	movs	r3, #0
 80075e2:	4630      	mov	r0, r6
 80075e4:	4639      	mov	r1, r7
 80075e6:	f7f9 fa8f 	bl	8000b08 <__aeabi_dcmpeq>
 80075ea:	b108      	cbz	r0, 80075f0 <__cvt+0x7c>
 80075ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80075f0:	2230      	movs	r2, #48	@ 0x30
 80075f2:	9b03      	ldr	r3, [sp, #12]
 80075f4:	454b      	cmp	r3, r9
 80075f6:	d31e      	bcc.n	8007636 <__cvt+0xc2>
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075fc:	1b5b      	subs	r3, r3, r5
 80075fe:	4628      	mov	r0, r5
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	b004      	add	sp, #16
 8007604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007608:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800760c:	eb00 0904 	add.w	r9, r0, r4
 8007610:	d1e5      	bne.n	80075de <__cvt+0x6a>
 8007612:	7803      	ldrb	r3, [r0, #0]
 8007614:	2b30      	cmp	r3, #48	@ 0x30
 8007616:	d10a      	bne.n	800762e <__cvt+0xba>
 8007618:	2200      	movs	r2, #0
 800761a:	2300      	movs	r3, #0
 800761c:	4630      	mov	r0, r6
 800761e:	4639      	mov	r1, r7
 8007620:	f7f9 fa72 	bl	8000b08 <__aeabi_dcmpeq>
 8007624:	b918      	cbnz	r0, 800762e <__cvt+0xba>
 8007626:	f1c4 0401 	rsb	r4, r4, #1
 800762a:	f8ca 4000 	str.w	r4, [sl]
 800762e:	f8da 3000 	ldr.w	r3, [sl]
 8007632:	4499      	add	r9, r3
 8007634:	e7d3      	b.n	80075de <__cvt+0x6a>
 8007636:	1c59      	adds	r1, r3, #1
 8007638:	9103      	str	r1, [sp, #12]
 800763a:	701a      	strb	r2, [r3, #0]
 800763c:	e7d9      	b.n	80075f2 <__cvt+0x7e>

0800763e <__exponent>:
 800763e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007640:	2900      	cmp	r1, #0
 8007642:	bfba      	itte	lt
 8007644:	4249      	neglt	r1, r1
 8007646:	232d      	movlt	r3, #45	@ 0x2d
 8007648:	232b      	movge	r3, #43	@ 0x2b
 800764a:	2909      	cmp	r1, #9
 800764c:	7002      	strb	r2, [r0, #0]
 800764e:	7043      	strb	r3, [r0, #1]
 8007650:	dd29      	ble.n	80076a6 <__exponent+0x68>
 8007652:	f10d 0307 	add.w	r3, sp, #7
 8007656:	461d      	mov	r5, r3
 8007658:	270a      	movs	r7, #10
 800765a:	461a      	mov	r2, r3
 800765c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007660:	fb07 1416 	mls	r4, r7, r6, r1
 8007664:	3430      	adds	r4, #48	@ 0x30
 8007666:	f802 4c01 	strb.w	r4, [r2, #-1]
 800766a:	460c      	mov	r4, r1
 800766c:	2c63      	cmp	r4, #99	@ 0x63
 800766e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007672:	4631      	mov	r1, r6
 8007674:	dcf1      	bgt.n	800765a <__exponent+0x1c>
 8007676:	3130      	adds	r1, #48	@ 0x30
 8007678:	1e94      	subs	r4, r2, #2
 800767a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800767e:	1c41      	adds	r1, r0, #1
 8007680:	4623      	mov	r3, r4
 8007682:	42ab      	cmp	r3, r5
 8007684:	d30a      	bcc.n	800769c <__exponent+0x5e>
 8007686:	f10d 0309 	add.w	r3, sp, #9
 800768a:	1a9b      	subs	r3, r3, r2
 800768c:	42ac      	cmp	r4, r5
 800768e:	bf88      	it	hi
 8007690:	2300      	movhi	r3, #0
 8007692:	3302      	adds	r3, #2
 8007694:	4403      	add	r3, r0
 8007696:	1a18      	subs	r0, r3, r0
 8007698:	b003      	add	sp, #12
 800769a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800769c:	f813 6b01 	ldrb.w	r6, [r3], #1
 80076a0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80076a4:	e7ed      	b.n	8007682 <__exponent+0x44>
 80076a6:	2330      	movs	r3, #48	@ 0x30
 80076a8:	3130      	adds	r1, #48	@ 0x30
 80076aa:	7083      	strb	r3, [r0, #2]
 80076ac:	70c1      	strb	r1, [r0, #3]
 80076ae:	1d03      	adds	r3, r0, #4
 80076b0:	e7f1      	b.n	8007696 <__exponent+0x58>
	...

080076b4 <_printf_float>:
 80076b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b8:	b08d      	sub	sp, #52	@ 0x34
 80076ba:	460c      	mov	r4, r1
 80076bc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80076c0:	4616      	mov	r6, r2
 80076c2:	461f      	mov	r7, r3
 80076c4:	4605      	mov	r5, r0
 80076c6:	f000 fdbf 	bl	8008248 <_localeconv_r>
 80076ca:	6803      	ldr	r3, [r0, #0]
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7f8 fdee 	bl	80002b0 <strlen>
 80076d4:	2300      	movs	r3, #0
 80076d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80076d8:	f8d8 3000 	ldr.w	r3, [r8]
 80076dc:	9005      	str	r0, [sp, #20]
 80076de:	3307      	adds	r3, #7
 80076e0:	f023 0307 	bic.w	r3, r3, #7
 80076e4:	f103 0208 	add.w	r2, r3, #8
 80076e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80076ec:	f8d4 b000 	ldr.w	fp, [r4]
 80076f0:	f8c8 2000 	str.w	r2, [r8]
 80076f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80076fc:	9307      	str	r3, [sp, #28]
 80076fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8007702:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800770a:	4b9c      	ldr	r3, [pc, #624]	@ (800797c <_printf_float+0x2c8>)
 800770c:	f04f 32ff 	mov.w	r2, #4294967295
 8007710:	f7f9 fa2c 	bl	8000b6c <__aeabi_dcmpun>
 8007714:	bb70      	cbnz	r0, 8007774 <_printf_float+0xc0>
 8007716:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800771a:	4b98      	ldr	r3, [pc, #608]	@ (800797c <_printf_float+0x2c8>)
 800771c:	f04f 32ff 	mov.w	r2, #4294967295
 8007720:	f7f9 fa06 	bl	8000b30 <__aeabi_dcmple>
 8007724:	bb30      	cbnz	r0, 8007774 <_printf_float+0xc0>
 8007726:	2200      	movs	r2, #0
 8007728:	2300      	movs	r3, #0
 800772a:	4640      	mov	r0, r8
 800772c:	4649      	mov	r1, r9
 800772e:	f7f9 f9f5 	bl	8000b1c <__aeabi_dcmplt>
 8007732:	b110      	cbz	r0, 800773a <_printf_float+0x86>
 8007734:	232d      	movs	r3, #45	@ 0x2d
 8007736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773a:	4a91      	ldr	r2, [pc, #580]	@ (8007980 <_printf_float+0x2cc>)
 800773c:	4b91      	ldr	r3, [pc, #580]	@ (8007984 <_printf_float+0x2d0>)
 800773e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007742:	bf94      	ite	ls
 8007744:	4690      	movls	r8, r2
 8007746:	4698      	movhi	r8, r3
 8007748:	2303      	movs	r3, #3
 800774a:	6123      	str	r3, [r4, #16]
 800774c:	f02b 0304 	bic.w	r3, fp, #4
 8007750:	6023      	str	r3, [r4, #0]
 8007752:	f04f 0900 	mov.w	r9, #0
 8007756:	9700      	str	r7, [sp, #0]
 8007758:	4633      	mov	r3, r6
 800775a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800775c:	4621      	mov	r1, r4
 800775e:	4628      	mov	r0, r5
 8007760:	f000 f9d2 	bl	8007b08 <_printf_common>
 8007764:	3001      	adds	r0, #1
 8007766:	f040 808d 	bne.w	8007884 <_printf_float+0x1d0>
 800776a:	f04f 30ff 	mov.w	r0, #4294967295
 800776e:	b00d      	add	sp, #52	@ 0x34
 8007770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007774:	4642      	mov	r2, r8
 8007776:	464b      	mov	r3, r9
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f9 f9f6 	bl	8000b6c <__aeabi_dcmpun>
 8007780:	b140      	cbz	r0, 8007794 <_printf_float+0xe0>
 8007782:	464b      	mov	r3, r9
 8007784:	2b00      	cmp	r3, #0
 8007786:	bfbc      	itt	lt
 8007788:	232d      	movlt	r3, #45	@ 0x2d
 800778a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800778e:	4a7e      	ldr	r2, [pc, #504]	@ (8007988 <_printf_float+0x2d4>)
 8007790:	4b7e      	ldr	r3, [pc, #504]	@ (800798c <_printf_float+0x2d8>)
 8007792:	e7d4      	b.n	800773e <_printf_float+0x8a>
 8007794:	6863      	ldr	r3, [r4, #4]
 8007796:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800779a:	9206      	str	r2, [sp, #24]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	d13b      	bne.n	8007818 <_printf_float+0x164>
 80077a0:	2306      	movs	r3, #6
 80077a2:	6063      	str	r3, [r4, #4]
 80077a4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80077a8:	2300      	movs	r3, #0
 80077aa:	6022      	str	r2, [r4, #0]
 80077ac:	9303      	str	r3, [sp, #12]
 80077ae:	ab0a      	add	r3, sp, #40	@ 0x28
 80077b0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80077b4:	ab09      	add	r3, sp, #36	@ 0x24
 80077b6:	9300      	str	r3, [sp, #0]
 80077b8:	6861      	ldr	r1, [r4, #4]
 80077ba:	ec49 8b10 	vmov	d0, r8, r9
 80077be:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80077c2:	4628      	mov	r0, r5
 80077c4:	f7ff fed6 	bl	8007574 <__cvt>
 80077c8:	9b06      	ldr	r3, [sp, #24]
 80077ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077cc:	2b47      	cmp	r3, #71	@ 0x47
 80077ce:	4680      	mov	r8, r0
 80077d0:	d129      	bne.n	8007826 <_printf_float+0x172>
 80077d2:	1cc8      	adds	r0, r1, #3
 80077d4:	db02      	blt.n	80077dc <_printf_float+0x128>
 80077d6:	6863      	ldr	r3, [r4, #4]
 80077d8:	4299      	cmp	r1, r3
 80077da:	dd41      	ble.n	8007860 <_printf_float+0x1ac>
 80077dc:	f1aa 0a02 	sub.w	sl, sl, #2
 80077e0:	fa5f fa8a 	uxtb.w	sl, sl
 80077e4:	3901      	subs	r1, #1
 80077e6:	4652      	mov	r2, sl
 80077e8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80077ec:	9109      	str	r1, [sp, #36]	@ 0x24
 80077ee:	f7ff ff26 	bl	800763e <__exponent>
 80077f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077f4:	1813      	adds	r3, r2, r0
 80077f6:	2a01      	cmp	r2, #1
 80077f8:	4681      	mov	r9, r0
 80077fa:	6123      	str	r3, [r4, #16]
 80077fc:	dc02      	bgt.n	8007804 <_printf_float+0x150>
 80077fe:	6822      	ldr	r2, [r4, #0]
 8007800:	07d2      	lsls	r2, r2, #31
 8007802:	d501      	bpl.n	8007808 <_printf_float+0x154>
 8007804:	3301      	adds	r3, #1
 8007806:	6123      	str	r3, [r4, #16]
 8007808:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0a2      	beq.n	8007756 <_printf_float+0xa2>
 8007810:	232d      	movs	r3, #45	@ 0x2d
 8007812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007816:	e79e      	b.n	8007756 <_printf_float+0xa2>
 8007818:	9a06      	ldr	r2, [sp, #24]
 800781a:	2a47      	cmp	r2, #71	@ 0x47
 800781c:	d1c2      	bne.n	80077a4 <_printf_float+0xf0>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d1c0      	bne.n	80077a4 <_printf_float+0xf0>
 8007822:	2301      	movs	r3, #1
 8007824:	e7bd      	b.n	80077a2 <_printf_float+0xee>
 8007826:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800782a:	d9db      	bls.n	80077e4 <_printf_float+0x130>
 800782c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007830:	d118      	bne.n	8007864 <_printf_float+0x1b0>
 8007832:	2900      	cmp	r1, #0
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	dd0b      	ble.n	8007850 <_printf_float+0x19c>
 8007838:	6121      	str	r1, [r4, #16]
 800783a:	b913      	cbnz	r3, 8007842 <_printf_float+0x18e>
 800783c:	6822      	ldr	r2, [r4, #0]
 800783e:	07d0      	lsls	r0, r2, #31
 8007840:	d502      	bpl.n	8007848 <_printf_float+0x194>
 8007842:	3301      	adds	r3, #1
 8007844:	440b      	add	r3, r1
 8007846:	6123      	str	r3, [r4, #16]
 8007848:	65a1      	str	r1, [r4, #88]	@ 0x58
 800784a:	f04f 0900 	mov.w	r9, #0
 800784e:	e7db      	b.n	8007808 <_printf_float+0x154>
 8007850:	b913      	cbnz	r3, 8007858 <_printf_float+0x1a4>
 8007852:	6822      	ldr	r2, [r4, #0]
 8007854:	07d2      	lsls	r2, r2, #31
 8007856:	d501      	bpl.n	800785c <_printf_float+0x1a8>
 8007858:	3302      	adds	r3, #2
 800785a:	e7f4      	b.n	8007846 <_printf_float+0x192>
 800785c:	2301      	movs	r3, #1
 800785e:	e7f2      	b.n	8007846 <_printf_float+0x192>
 8007860:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007864:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007866:	4299      	cmp	r1, r3
 8007868:	db05      	blt.n	8007876 <_printf_float+0x1c2>
 800786a:	6823      	ldr	r3, [r4, #0]
 800786c:	6121      	str	r1, [r4, #16]
 800786e:	07d8      	lsls	r0, r3, #31
 8007870:	d5ea      	bpl.n	8007848 <_printf_float+0x194>
 8007872:	1c4b      	adds	r3, r1, #1
 8007874:	e7e7      	b.n	8007846 <_printf_float+0x192>
 8007876:	2900      	cmp	r1, #0
 8007878:	bfd4      	ite	le
 800787a:	f1c1 0202 	rsble	r2, r1, #2
 800787e:	2201      	movgt	r2, #1
 8007880:	4413      	add	r3, r2
 8007882:	e7e0      	b.n	8007846 <_printf_float+0x192>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	055a      	lsls	r2, r3, #21
 8007888:	d407      	bmi.n	800789a <_printf_float+0x1e6>
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	4642      	mov	r2, r8
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	47b8      	blx	r7
 8007894:	3001      	adds	r0, #1
 8007896:	d12b      	bne.n	80078f0 <_printf_float+0x23c>
 8007898:	e767      	b.n	800776a <_printf_float+0xb6>
 800789a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800789e:	f240 80dd 	bls.w	8007a5c <_printf_float+0x3a8>
 80078a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078a6:	2200      	movs	r2, #0
 80078a8:	2300      	movs	r3, #0
 80078aa:	f7f9 f92d 	bl	8000b08 <__aeabi_dcmpeq>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	d033      	beq.n	800791a <_printf_float+0x266>
 80078b2:	4a37      	ldr	r2, [pc, #220]	@ (8007990 <_printf_float+0x2dc>)
 80078b4:	2301      	movs	r3, #1
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	f43f af54 	beq.w	800776a <_printf_float+0xb6>
 80078c2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80078c6:	4543      	cmp	r3, r8
 80078c8:	db02      	blt.n	80078d0 <_printf_float+0x21c>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	07d8      	lsls	r0, r3, #31
 80078ce:	d50f      	bpl.n	80078f0 <_printf_float+0x23c>
 80078d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078d4:	4631      	mov	r1, r6
 80078d6:	4628      	mov	r0, r5
 80078d8:	47b8      	blx	r7
 80078da:	3001      	adds	r0, #1
 80078dc:	f43f af45 	beq.w	800776a <_printf_float+0xb6>
 80078e0:	f04f 0900 	mov.w	r9, #0
 80078e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80078e8:	f104 0a1a 	add.w	sl, r4, #26
 80078ec:	45c8      	cmp	r8, r9
 80078ee:	dc09      	bgt.n	8007904 <_printf_float+0x250>
 80078f0:	6823      	ldr	r3, [r4, #0]
 80078f2:	079b      	lsls	r3, r3, #30
 80078f4:	f100 8103 	bmi.w	8007afe <_printf_float+0x44a>
 80078f8:	68e0      	ldr	r0, [r4, #12]
 80078fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078fc:	4298      	cmp	r0, r3
 80078fe:	bfb8      	it	lt
 8007900:	4618      	movlt	r0, r3
 8007902:	e734      	b.n	800776e <_printf_float+0xba>
 8007904:	2301      	movs	r3, #1
 8007906:	4652      	mov	r2, sl
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f af2b 	beq.w	800776a <_printf_float+0xb6>
 8007914:	f109 0901 	add.w	r9, r9, #1
 8007918:	e7e8      	b.n	80078ec <_printf_float+0x238>
 800791a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	dc39      	bgt.n	8007994 <_printf_float+0x2e0>
 8007920:	4a1b      	ldr	r2, [pc, #108]	@ (8007990 <_printf_float+0x2dc>)
 8007922:	2301      	movs	r3, #1
 8007924:	4631      	mov	r1, r6
 8007926:	4628      	mov	r0, r5
 8007928:	47b8      	blx	r7
 800792a:	3001      	adds	r0, #1
 800792c:	f43f af1d 	beq.w	800776a <_printf_float+0xb6>
 8007930:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007934:	ea59 0303 	orrs.w	r3, r9, r3
 8007938:	d102      	bne.n	8007940 <_printf_float+0x28c>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	07d9      	lsls	r1, r3, #31
 800793e:	d5d7      	bpl.n	80078f0 <_printf_float+0x23c>
 8007940:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	f43f af0d 	beq.w	800776a <_printf_float+0xb6>
 8007950:	f04f 0a00 	mov.w	sl, #0
 8007954:	f104 0b1a 	add.w	fp, r4, #26
 8007958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800795a:	425b      	negs	r3, r3
 800795c:	4553      	cmp	r3, sl
 800795e:	dc01      	bgt.n	8007964 <_printf_float+0x2b0>
 8007960:	464b      	mov	r3, r9
 8007962:	e793      	b.n	800788c <_printf_float+0x1d8>
 8007964:	2301      	movs	r3, #1
 8007966:	465a      	mov	r2, fp
 8007968:	4631      	mov	r1, r6
 800796a:	4628      	mov	r0, r5
 800796c:	47b8      	blx	r7
 800796e:	3001      	adds	r0, #1
 8007970:	f43f aefb 	beq.w	800776a <_printf_float+0xb6>
 8007974:	f10a 0a01 	add.w	sl, sl, #1
 8007978:	e7ee      	b.n	8007958 <_printf_float+0x2a4>
 800797a:	bf00      	nop
 800797c:	7fefffff 	.word	0x7fefffff
 8007980:	0800b80c 	.word	0x0800b80c
 8007984:	0800b810 	.word	0x0800b810
 8007988:	0800b814 	.word	0x0800b814
 800798c:	0800b818 	.word	0x0800b818
 8007990:	0800b81c 	.word	0x0800b81c
 8007994:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007996:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800799a:	4553      	cmp	r3, sl
 800799c:	bfa8      	it	ge
 800799e:	4653      	movge	r3, sl
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	4699      	mov	r9, r3
 80079a4:	dc36      	bgt.n	8007a14 <_printf_float+0x360>
 80079a6:	f04f 0b00 	mov.w	fp, #0
 80079aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079ae:	f104 021a 	add.w	r2, r4, #26
 80079b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80079b4:	9306      	str	r3, [sp, #24]
 80079b6:	eba3 0309 	sub.w	r3, r3, r9
 80079ba:	455b      	cmp	r3, fp
 80079bc:	dc31      	bgt.n	8007a22 <_printf_float+0x36e>
 80079be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079c0:	459a      	cmp	sl, r3
 80079c2:	dc3a      	bgt.n	8007a3a <_printf_float+0x386>
 80079c4:	6823      	ldr	r3, [r4, #0]
 80079c6:	07da      	lsls	r2, r3, #31
 80079c8:	d437      	bmi.n	8007a3a <_printf_float+0x386>
 80079ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079cc:	ebaa 0903 	sub.w	r9, sl, r3
 80079d0:	9b06      	ldr	r3, [sp, #24]
 80079d2:	ebaa 0303 	sub.w	r3, sl, r3
 80079d6:	4599      	cmp	r9, r3
 80079d8:	bfa8      	it	ge
 80079da:	4699      	movge	r9, r3
 80079dc:	f1b9 0f00 	cmp.w	r9, #0
 80079e0:	dc33      	bgt.n	8007a4a <_printf_float+0x396>
 80079e2:	f04f 0800 	mov.w	r8, #0
 80079e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079ea:	f104 0b1a 	add.w	fp, r4, #26
 80079ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079f0:	ebaa 0303 	sub.w	r3, sl, r3
 80079f4:	eba3 0309 	sub.w	r3, r3, r9
 80079f8:	4543      	cmp	r3, r8
 80079fa:	f77f af79 	ble.w	80078f0 <_printf_float+0x23c>
 80079fe:	2301      	movs	r3, #1
 8007a00:	465a      	mov	r2, fp
 8007a02:	4631      	mov	r1, r6
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b8      	blx	r7
 8007a08:	3001      	adds	r0, #1
 8007a0a:	f43f aeae 	beq.w	800776a <_printf_float+0xb6>
 8007a0e:	f108 0801 	add.w	r8, r8, #1
 8007a12:	e7ec      	b.n	80079ee <_printf_float+0x33a>
 8007a14:	4642      	mov	r2, r8
 8007a16:	4631      	mov	r1, r6
 8007a18:	4628      	mov	r0, r5
 8007a1a:	47b8      	blx	r7
 8007a1c:	3001      	adds	r0, #1
 8007a1e:	d1c2      	bne.n	80079a6 <_printf_float+0x2f2>
 8007a20:	e6a3      	b.n	800776a <_printf_float+0xb6>
 8007a22:	2301      	movs	r3, #1
 8007a24:	4631      	mov	r1, r6
 8007a26:	4628      	mov	r0, r5
 8007a28:	9206      	str	r2, [sp, #24]
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	f43f ae9c 	beq.w	800776a <_printf_float+0xb6>
 8007a32:	9a06      	ldr	r2, [sp, #24]
 8007a34:	f10b 0b01 	add.w	fp, fp, #1
 8007a38:	e7bb      	b.n	80079b2 <_printf_float+0x2fe>
 8007a3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a3e:	4631      	mov	r1, r6
 8007a40:	4628      	mov	r0, r5
 8007a42:	47b8      	blx	r7
 8007a44:	3001      	adds	r0, #1
 8007a46:	d1c0      	bne.n	80079ca <_printf_float+0x316>
 8007a48:	e68f      	b.n	800776a <_printf_float+0xb6>
 8007a4a:	9a06      	ldr	r2, [sp, #24]
 8007a4c:	464b      	mov	r3, r9
 8007a4e:	4442      	add	r2, r8
 8007a50:	4631      	mov	r1, r6
 8007a52:	4628      	mov	r0, r5
 8007a54:	47b8      	blx	r7
 8007a56:	3001      	adds	r0, #1
 8007a58:	d1c3      	bne.n	80079e2 <_printf_float+0x32e>
 8007a5a:	e686      	b.n	800776a <_printf_float+0xb6>
 8007a5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a60:	f1ba 0f01 	cmp.w	sl, #1
 8007a64:	dc01      	bgt.n	8007a6a <_printf_float+0x3b6>
 8007a66:	07db      	lsls	r3, r3, #31
 8007a68:	d536      	bpl.n	8007ad8 <_printf_float+0x424>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4642      	mov	r2, r8
 8007a6e:	4631      	mov	r1, r6
 8007a70:	4628      	mov	r0, r5
 8007a72:	47b8      	blx	r7
 8007a74:	3001      	adds	r0, #1
 8007a76:	f43f ae78 	beq.w	800776a <_printf_float+0xb6>
 8007a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a7e:	4631      	mov	r1, r6
 8007a80:	4628      	mov	r0, r5
 8007a82:	47b8      	blx	r7
 8007a84:	3001      	adds	r0, #1
 8007a86:	f43f ae70 	beq.w	800776a <_printf_float+0xb6>
 8007a8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2300      	movs	r3, #0
 8007a92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a96:	f7f9 f837 	bl	8000b08 <__aeabi_dcmpeq>
 8007a9a:	b9c0      	cbnz	r0, 8007ace <_printf_float+0x41a>
 8007a9c:	4653      	mov	r3, sl
 8007a9e:	f108 0201 	add.w	r2, r8, #1
 8007aa2:	4631      	mov	r1, r6
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b8      	blx	r7
 8007aa8:	3001      	adds	r0, #1
 8007aaa:	d10c      	bne.n	8007ac6 <_printf_float+0x412>
 8007aac:	e65d      	b.n	800776a <_printf_float+0xb6>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	465a      	mov	r2, fp
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	4628      	mov	r0, r5
 8007ab6:	47b8      	blx	r7
 8007ab8:	3001      	adds	r0, #1
 8007aba:	f43f ae56 	beq.w	800776a <_printf_float+0xb6>
 8007abe:	f108 0801 	add.w	r8, r8, #1
 8007ac2:	45d0      	cmp	r8, sl
 8007ac4:	dbf3      	blt.n	8007aae <_printf_float+0x3fa>
 8007ac6:	464b      	mov	r3, r9
 8007ac8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007acc:	e6df      	b.n	800788e <_printf_float+0x1da>
 8007ace:	f04f 0800 	mov.w	r8, #0
 8007ad2:	f104 0b1a 	add.w	fp, r4, #26
 8007ad6:	e7f4      	b.n	8007ac2 <_printf_float+0x40e>
 8007ad8:	2301      	movs	r3, #1
 8007ada:	4642      	mov	r2, r8
 8007adc:	e7e1      	b.n	8007aa2 <_printf_float+0x3ee>
 8007ade:	2301      	movs	r3, #1
 8007ae0:	464a      	mov	r2, r9
 8007ae2:	4631      	mov	r1, r6
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	47b8      	blx	r7
 8007ae8:	3001      	adds	r0, #1
 8007aea:	f43f ae3e 	beq.w	800776a <_printf_float+0xb6>
 8007aee:	f108 0801 	add.w	r8, r8, #1
 8007af2:	68e3      	ldr	r3, [r4, #12]
 8007af4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007af6:	1a5b      	subs	r3, r3, r1
 8007af8:	4543      	cmp	r3, r8
 8007afa:	dcf0      	bgt.n	8007ade <_printf_float+0x42a>
 8007afc:	e6fc      	b.n	80078f8 <_printf_float+0x244>
 8007afe:	f04f 0800 	mov.w	r8, #0
 8007b02:	f104 0919 	add.w	r9, r4, #25
 8007b06:	e7f4      	b.n	8007af2 <_printf_float+0x43e>

08007b08 <_printf_common>:
 8007b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	4698      	mov	r8, r3
 8007b10:	688a      	ldr	r2, [r1, #8]
 8007b12:	690b      	ldr	r3, [r1, #16]
 8007b14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	bfb8      	it	lt
 8007b1c:	4613      	movlt	r3, r2
 8007b1e:	6033      	str	r3, [r6, #0]
 8007b20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b24:	4607      	mov	r7, r0
 8007b26:	460c      	mov	r4, r1
 8007b28:	b10a      	cbz	r2, 8007b2e <_printf_common+0x26>
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	6033      	str	r3, [r6, #0]
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	0699      	lsls	r1, r3, #26
 8007b32:	bf42      	ittt	mi
 8007b34:	6833      	ldrmi	r3, [r6, #0]
 8007b36:	3302      	addmi	r3, #2
 8007b38:	6033      	strmi	r3, [r6, #0]
 8007b3a:	6825      	ldr	r5, [r4, #0]
 8007b3c:	f015 0506 	ands.w	r5, r5, #6
 8007b40:	d106      	bne.n	8007b50 <_printf_common+0x48>
 8007b42:	f104 0a19 	add.w	sl, r4, #25
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	6832      	ldr	r2, [r6, #0]
 8007b4a:	1a9b      	subs	r3, r3, r2
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	dc26      	bgt.n	8007b9e <_printf_common+0x96>
 8007b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b54:	6822      	ldr	r2, [r4, #0]
 8007b56:	3b00      	subs	r3, #0
 8007b58:	bf18      	it	ne
 8007b5a:	2301      	movne	r3, #1
 8007b5c:	0692      	lsls	r2, r2, #26
 8007b5e:	d42b      	bmi.n	8007bb8 <_printf_common+0xb0>
 8007b60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b64:	4641      	mov	r1, r8
 8007b66:	4638      	mov	r0, r7
 8007b68:	47c8      	blx	r9
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d01e      	beq.n	8007bac <_printf_common+0xa4>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	6922      	ldr	r2, [r4, #16]
 8007b72:	f003 0306 	and.w	r3, r3, #6
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	bf02      	ittt	eq
 8007b7a:	68e5      	ldreq	r5, [r4, #12]
 8007b7c:	6833      	ldreq	r3, [r6, #0]
 8007b7e:	1aed      	subeq	r5, r5, r3
 8007b80:	68a3      	ldr	r3, [r4, #8]
 8007b82:	bf0c      	ite	eq
 8007b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b88:	2500      	movne	r5, #0
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	bfc4      	itt	gt
 8007b8e:	1a9b      	subgt	r3, r3, r2
 8007b90:	18ed      	addgt	r5, r5, r3
 8007b92:	2600      	movs	r6, #0
 8007b94:	341a      	adds	r4, #26
 8007b96:	42b5      	cmp	r5, r6
 8007b98:	d11a      	bne.n	8007bd0 <_printf_common+0xc8>
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	e008      	b.n	8007bb0 <_printf_common+0xa8>
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	4652      	mov	r2, sl
 8007ba2:	4641      	mov	r1, r8
 8007ba4:	4638      	mov	r0, r7
 8007ba6:	47c8      	blx	r9
 8007ba8:	3001      	adds	r0, #1
 8007baa:	d103      	bne.n	8007bb4 <_printf_common+0xac>
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	e7c6      	b.n	8007b46 <_printf_common+0x3e>
 8007bb8:	18e1      	adds	r1, r4, r3
 8007bba:	1c5a      	adds	r2, r3, #1
 8007bbc:	2030      	movs	r0, #48	@ 0x30
 8007bbe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bc2:	4422      	add	r2, r4
 8007bc4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bc8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bcc:	3302      	adds	r3, #2
 8007bce:	e7c7      	b.n	8007b60 <_printf_common+0x58>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4622      	mov	r2, r4
 8007bd4:	4641      	mov	r1, r8
 8007bd6:	4638      	mov	r0, r7
 8007bd8:	47c8      	blx	r9
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d0e6      	beq.n	8007bac <_printf_common+0xa4>
 8007bde:	3601      	adds	r6, #1
 8007be0:	e7d9      	b.n	8007b96 <_printf_common+0x8e>
	...

08007be4 <_printf_i>:
 8007be4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be8:	7e0f      	ldrb	r7, [r1, #24]
 8007bea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bec:	2f78      	cmp	r7, #120	@ 0x78
 8007bee:	4691      	mov	r9, r2
 8007bf0:	4680      	mov	r8, r0
 8007bf2:	460c      	mov	r4, r1
 8007bf4:	469a      	mov	sl, r3
 8007bf6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bfa:	d807      	bhi.n	8007c0c <_printf_i+0x28>
 8007bfc:	2f62      	cmp	r7, #98	@ 0x62
 8007bfe:	d80a      	bhi.n	8007c16 <_printf_i+0x32>
 8007c00:	2f00      	cmp	r7, #0
 8007c02:	f000 80d2 	beq.w	8007daa <_printf_i+0x1c6>
 8007c06:	2f58      	cmp	r7, #88	@ 0x58
 8007c08:	f000 80b9 	beq.w	8007d7e <_printf_i+0x19a>
 8007c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c14:	e03a      	b.n	8007c8c <_printf_i+0xa8>
 8007c16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c1a:	2b15      	cmp	r3, #21
 8007c1c:	d8f6      	bhi.n	8007c0c <_printf_i+0x28>
 8007c1e:	a101      	add	r1, pc, #4	@ (adr r1, 8007c24 <_printf_i+0x40>)
 8007c20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c24:	08007c7d 	.word	0x08007c7d
 8007c28:	08007c91 	.word	0x08007c91
 8007c2c:	08007c0d 	.word	0x08007c0d
 8007c30:	08007c0d 	.word	0x08007c0d
 8007c34:	08007c0d 	.word	0x08007c0d
 8007c38:	08007c0d 	.word	0x08007c0d
 8007c3c:	08007c91 	.word	0x08007c91
 8007c40:	08007c0d 	.word	0x08007c0d
 8007c44:	08007c0d 	.word	0x08007c0d
 8007c48:	08007c0d 	.word	0x08007c0d
 8007c4c:	08007c0d 	.word	0x08007c0d
 8007c50:	08007d91 	.word	0x08007d91
 8007c54:	08007cbb 	.word	0x08007cbb
 8007c58:	08007d4b 	.word	0x08007d4b
 8007c5c:	08007c0d 	.word	0x08007c0d
 8007c60:	08007c0d 	.word	0x08007c0d
 8007c64:	08007db3 	.word	0x08007db3
 8007c68:	08007c0d 	.word	0x08007c0d
 8007c6c:	08007cbb 	.word	0x08007cbb
 8007c70:	08007c0d 	.word	0x08007c0d
 8007c74:	08007c0d 	.word	0x08007c0d
 8007c78:	08007d53 	.word	0x08007d53
 8007c7c:	6833      	ldr	r3, [r6, #0]
 8007c7e:	1d1a      	adds	r2, r3, #4
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6032      	str	r2, [r6, #0]
 8007c84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e09d      	b.n	8007dcc <_printf_i+0x1e8>
 8007c90:	6833      	ldr	r3, [r6, #0]
 8007c92:	6820      	ldr	r0, [r4, #0]
 8007c94:	1d19      	adds	r1, r3, #4
 8007c96:	6031      	str	r1, [r6, #0]
 8007c98:	0606      	lsls	r6, r0, #24
 8007c9a:	d501      	bpl.n	8007ca0 <_printf_i+0xbc>
 8007c9c:	681d      	ldr	r5, [r3, #0]
 8007c9e:	e003      	b.n	8007ca8 <_printf_i+0xc4>
 8007ca0:	0645      	lsls	r5, r0, #25
 8007ca2:	d5fb      	bpl.n	8007c9c <_printf_i+0xb8>
 8007ca4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	da03      	bge.n	8007cb4 <_printf_i+0xd0>
 8007cac:	232d      	movs	r3, #45	@ 0x2d
 8007cae:	426d      	negs	r5, r5
 8007cb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cb4:	4859      	ldr	r0, [pc, #356]	@ (8007e1c <_printf_i+0x238>)
 8007cb6:	230a      	movs	r3, #10
 8007cb8:	e011      	b.n	8007cde <_printf_i+0xfa>
 8007cba:	6821      	ldr	r1, [r4, #0]
 8007cbc:	6833      	ldr	r3, [r6, #0]
 8007cbe:	0608      	lsls	r0, r1, #24
 8007cc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007cc4:	d402      	bmi.n	8007ccc <_printf_i+0xe8>
 8007cc6:	0649      	lsls	r1, r1, #25
 8007cc8:	bf48      	it	mi
 8007cca:	b2ad      	uxthmi	r5, r5
 8007ccc:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cce:	4853      	ldr	r0, [pc, #332]	@ (8007e1c <_printf_i+0x238>)
 8007cd0:	6033      	str	r3, [r6, #0]
 8007cd2:	bf14      	ite	ne
 8007cd4:	230a      	movne	r3, #10
 8007cd6:	2308      	moveq	r3, #8
 8007cd8:	2100      	movs	r1, #0
 8007cda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007cde:	6866      	ldr	r6, [r4, #4]
 8007ce0:	60a6      	str	r6, [r4, #8]
 8007ce2:	2e00      	cmp	r6, #0
 8007ce4:	bfa2      	ittt	ge
 8007ce6:	6821      	ldrge	r1, [r4, #0]
 8007ce8:	f021 0104 	bicge.w	r1, r1, #4
 8007cec:	6021      	strge	r1, [r4, #0]
 8007cee:	b90d      	cbnz	r5, 8007cf4 <_printf_i+0x110>
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	d04b      	beq.n	8007d8c <_printf_i+0x1a8>
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8007cfe:	5dc7      	ldrb	r7, [r0, r7]
 8007d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d04:	462f      	mov	r7, r5
 8007d06:	42bb      	cmp	r3, r7
 8007d08:	460d      	mov	r5, r1
 8007d0a:	d9f4      	bls.n	8007cf6 <_printf_i+0x112>
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d10b      	bne.n	8007d28 <_printf_i+0x144>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	07df      	lsls	r7, r3, #31
 8007d14:	d508      	bpl.n	8007d28 <_printf_i+0x144>
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	6861      	ldr	r1, [r4, #4]
 8007d1a:	4299      	cmp	r1, r3
 8007d1c:	bfde      	ittt	le
 8007d1e:	2330      	movle	r3, #48	@ 0x30
 8007d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d28:	1b92      	subs	r2, r2, r6
 8007d2a:	6122      	str	r2, [r4, #16]
 8007d2c:	f8cd a000 	str.w	sl, [sp]
 8007d30:	464b      	mov	r3, r9
 8007d32:	aa03      	add	r2, sp, #12
 8007d34:	4621      	mov	r1, r4
 8007d36:	4640      	mov	r0, r8
 8007d38:	f7ff fee6 	bl	8007b08 <_printf_common>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d14a      	bne.n	8007dd6 <_printf_i+0x1f2>
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295
 8007d44:	b004      	add	sp, #16
 8007d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4a:	6823      	ldr	r3, [r4, #0]
 8007d4c:	f043 0320 	orr.w	r3, r3, #32
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	4833      	ldr	r0, [pc, #204]	@ (8007e20 <_printf_i+0x23c>)
 8007d54:	2778      	movs	r7, #120	@ 0x78
 8007d56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	6831      	ldr	r1, [r6, #0]
 8007d5e:	061f      	lsls	r7, r3, #24
 8007d60:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d64:	d402      	bmi.n	8007d6c <_printf_i+0x188>
 8007d66:	065f      	lsls	r7, r3, #25
 8007d68:	bf48      	it	mi
 8007d6a:	b2ad      	uxthmi	r5, r5
 8007d6c:	6031      	str	r1, [r6, #0]
 8007d6e:	07d9      	lsls	r1, r3, #31
 8007d70:	bf44      	itt	mi
 8007d72:	f043 0320 	orrmi.w	r3, r3, #32
 8007d76:	6023      	strmi	r3, [r4, #0]
 8007d78:	b11d      	cbz	r5, 8007d82 <_printf_i+0x19e>
 8007d7a:	2310      	movs	r3, #16
 8007d7c:	e7ac      	b.n	8007cd8 <_printf_i+0xf4>
 8007d7e:	4827      	ldr	r0, [pc, #156]	@ (8007e1c <_printf_i+0x238>)
 8007d80:	e7e9      	b.n	8007d56 <_printf_i+0x172>
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	f023 0320 	bic.w	r3, r3, #32
 8007d88:	6023      	str	r3, [r4, #0]
 8007d8a:	e7f6      	b.n	8007d7a <_printf_i+0x196>
 8007d8c:	4616      	mov	r6, r2
 8007d8e:	e7bd      	b.n	8007d0c <_printf_i+0x128>
 8007d90:	6833      	ldr	r3, [r6, #0]
 8007d92:	6825      	ldr	r5, [r4, #0]
 8007d94:	6961      	ldr	r1, [r4, #20]
 8007d96:	1d18      	adds	r0, r3, #4
 8007d98:	6030      	str	r0, [r6, #0]
 8007d9a:	062e      	lsls	r6, r5, #24
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	d501      	bpl.n	8007da4 <_printf_i+0x1c0>
 8007da0:	6019      	str	r1, [r3, #0]
 8007da2:	e002      	b.n	8007daa <_printf_i+0x1c6>
 8007da4:	0668      	lsls	r0, r5, #25
 8007da6:	d5fb      	bpl.n	8007da0 <_printf_i+0x1bc>
 8007da8:	8019      	strh	r1, [r3, #0]
 8007daa:	2300      	movs	r3, #0
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	4616      	mov	r6, r2
 8007db0:	e7bc      	b.n	8007d2c <_printf_i+0x148>
 8007db2:	6833      	ldr	r3, [r6, #0]
 8007db4:	1d1a      	adds	r2, r3, #4
 8007db6:	6032      	str	r2, [r6, #0]
 8007db8:	681e      	ldr	r6, [r3, #0]
 8007dba:	6862      	ldr	r2, [r4, #4]
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	4630      	mov	r0, r6
 8007dc0:	f7f8 fa26 	bl	8000210 <memchr>
 8007dc4:	b108      	cbz	r0, 8007dca <_printf_i+0x1e6>
 8007dc6:	1b80      	subs	r0, r0, r6
 8007dc8:	6060      	str	r0, [r4, #4]
 8007dca:	6863      	ldr	r3, [r4, #4]
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	2300      	movs	r3, #0
 8007dd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dd4:	e7aa      	b.n	8007d2c <_printf_i+0x148>
 8007dd6:	6923      	ldr	r3, [r4, #16]
 8007dd8:	4632      	mov	r2, r6
 8007dda:	4649      	mov	r1, r9
 8007ddc:	4640      	mov	r0, r8
 8007dde:	47d0      	blx	sl
 8007de0:	3001      	adds	r0, #1
 8007de2:	d0ad      	beq.n	8007d40 <_printf_i+0x15c>
 8007de4:	6823      	ldr	r3, [r4, #0]
 8007de6:	079b      	lsls	r3, r3, #30
 8007de8:	d413      	bmi.n	8007e12 <_printf_i+0x22e>
 8007dea:	68e0      	ldr	r0, [r4, #12]
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	4298      	cmp	r0, r3
 8007df0:	bfb8      	it	lt
 8007df2:	4618      	movlt	r0, r3
 8007df4:	e7a6      	b.n	8007d44 <_printf_i+0x160>
 8007df6:	2301      	movs	r3, #1
 8007df8:	4632      	mov	r2, r6
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	4640      	mov	r0, r8
 8007dfe:	47d0      	blx	sl
 8007e00:	3001      	adds	r0, #1
 8007e02:	d09d      	beq.n	8007d40 <_printf_i+0x15c>
 8007e04:	3501      	adds	r5, #1
 8007e06:	68e3      	ldr	r3, [r4, #12]
 8007e08:	9903      	ldr	r1, [sp, #12]
 8007e0a:	1a5b      	subs	r3, r3, r1
 8007e0c:	42ab      	cmp	r3, r5
 8007e0e:	dcf2      	bgt.n	8007df6 <_printf_i+0x212>
 8007e10:	e7eb      	b.n	8007dea <_printf_i+0x206>
 8007e12:	2500      	movs	r5, #0
 8007e14:	f104 0619 	add.w	r6, r4, #25
 8007e18:	e7f5      	b.n	8007e06 <_printf_i+0x222>
 8007e1a:	bf00      	nop
 8007e1c:	0800b81e 	.word	0x0800b81e
 8007e20:	0800b82f 	.word	0x0800b82f

08007e24 <std>:
 8007e24:	2300      	movs	r3, #0
 8007e26:	b510      	push	{r4, lr}
 8007e28:	4604      	mov	r4, r0
 8007e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e32:	6083      	str	r3, [r0, #8]
 8007e34:	8181      	strh	r1, [r0, #12]
 8007e36:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e38:	81c2      	strh	r2, [r0, #14]
 8007e3a:	6183      	str	r3, [r0, #24]
 8007e3c:	4619      	mov	r1, r3
 8007e3e:	2208      	movs	r2, #8
 8007e40:	305c      	adds	r0, #92	@ 0x5c
 8007e42:	f000 f9f9 	bl	8008238 <memset>
 8007e46:	4b0d      	ldr	r3, [pc, #52]	@ (8007e7c <std+0x58>)
 8007e48:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e80 <std+0x5c>)
 8007e4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e84 <std+0x60>)
 8007e50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e52:	4b0d      	ldr	r3, [pc, #52]	@ (8007e88 <std+0x64>)
 8007e54:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e56:	4b0d      	ldr	r3, [pc, #52]	@ (8007e8c <std+0x68>)
 8007e58:	6224      	str	r4, [r4, #32]
 8007e5a:	429c      	cmp	r4, r3
 8007e5c:	d006      	beq.n	8007e6c <std+0x48>
 8007e5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e62:	4294      	cmp	r4, r2
 8007e64:	d002      	beq.n	8007e6c <std+0x48>
 8007e66:	33d0      	adds	r3, #208	@ 0xd0
 8007e68:	429c      	cmp	r4, r3
 8007e6a:	d105      	bne.n	8007e78 <std+0x54>
 8007e6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e74:	f000 ba5c 	b.w	8008330 <__retarget_lock_init_recursive>
 8007e78:	bd10      	pop	{r4, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08008089 	.word	0x08008089
 8007e80:	080080ab 	.word	0x080080ab
 8007e84:	080080e3 	.word	0x080080e3
 8007e88:	08008107 	.word	0x08008107
 8007e8c:	200004b8 	.word	0x200004b8

08007e90 <stdio_exit_handler>:
 8007e90:	4a02      	ldr	r2, [pc, #8]	@ (8007e9c <stdio_exit_handler+0xc>)
 8007e92:	4903      	ldr	r1, [pc, #12]	@ (8007ea0 <stdio_exit_handler+0x10>)
 8007e94:	4803      	ldr	r0, [pc, #12]	@ (8007ea4 <stdio_exit_handler+0x14>)
 8007e96:	f000 b869 	b.w	8007f6c <_fwalk_sglue>
 8007e9a:	bf00      	nop
 8007e9c:	2000001c 	.word	0x2000001c
 8007ea0:	08009c61 	.word	0x08009c61
 8007ea4:	2000002c 	.word	0x2000002c

08007ea8 <cleanup_stdio>:
 8007ea8:	6841      	ldr	r1, [r0, #4]
 8007eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8007edc <cleanup_stdio+0x34>)
 8007eac:	4299      	cmp	r1, r3
 8007eae:	b510      	push	{r4, lr}
 8007eb0:	4604      	mov	r4, r0
 8007eb2:	d001      	beq.n	8007eb8 <cleanup_stdio+0x10>
 8007eb4:	f001 fed4 	bl	8009c60 <_fflush_r>
 8007eb8:	68a1      	ldr	r1, [r4, #8]
 8007eba:	4b09      	ldr	r3, [pc, #36]	@ (8007ee0 <cleanup_stdio+0x38>)
 8007ebc:	4299      	cmp	r1, r3
 8007ebe:	d002      	beq.n	8007ec6 <cleanup_stdio+0x1e>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	f001 fecd 	bl	8009c60 <_fflush_r>
 8007ec6:	68e1      	ldr	r1, [r4, #12]
 8007ec8:	4b06      	ldr	r3, [pc, #24]	@ (8007ee4 <cleanup_stdio+0x3c>)
 8007eca:	4299      	cmp	r1, r3
 8007ecc:	d004      	beq.n	8007ed8 <cleanup_stdio+0x30>
 8007ece:	4620      	mov	r0, r4
 8007ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ed4:	f001 bec4 	b.w	8009c60 <_fflush_r>
 8007ed8:	bd10      	pop	{r4, pc}
 8007eda:	bf00      	nop
 8007edc:	200004b8 	.word	0x200004b8
 8007ee0:	20000520 	.word	0x20000520
 8007ee4:	20000588 	.word	0x20000588

08007ee8 <global_stdio_init.part.0>:
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	4b0b      	ldr	r3, [pc, #44]	@ (8007f18 <global_stdio_init.part.0+0x30>)
 8007eec:	4c0b      	ldr	r4, [pc, #44]	@ (8007f1c <global_stdio_init.part.0+0x34>)
 8007eee:	4a0c      	ldr	r2, [pc, #48]	@ (8007f20 <global_stdio_init.part.0+0x38>)
 8007ef0:	601a      	str	r2, [r3, #0]
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	2104      	movs	r1, #4
 8007ef8:	f7ff ff94 	bl	8007e24 <std>
 8007efc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f00:	2201      	movs	r2, #1
 8007f02:	2109      	movs	r1, #9
 8007f04:	f7ff ff8e 	bl	8007e24 <std>
 8007f08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f12:	2112      	movs	r1, #18
 8007f14:	f7ff bf86 	b.w	8007e24 <std>
 8007f18:	200005f0 	.word	0x200005f0
 8007f1c:	200004b8 	.word	0x200004b8
 8007f20:	08007e91 	.word	0x08007e91

08007f24 <__sfp_lock_acquire>:
 8007f24:	4801      	ldr	r0, [pc, #4]	@ (8007f2c <__sfp_lock_acquire+0x8>)
 8007f26:	f000 ba04 	b.w	8008332 <__retarget_lock_acquire_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	200005f9 	.word	0x200005f9

08007f30 <__sfp_lock_release>:
 8007f30:	4801      	ldr	r0, [pc, #4]	@ (8007f38 <__sfp_lock_release+0x8>)
 8007f32:	f000 b9ff 	b.w	8008334 <__retarget_lock_release_recursive>
 8007f36:	bf00      	nop
 8007f38:	200005f9 	.word	0x200005f9

08007f3c <__sinit>:
 8007f3c:	b510      	push	{r4, lr}
 8007f3e:	4604      	mov	r4, r0
 8007f40:	f7ff fff0 	bl	8007f24 <__sfp_lock_acquire>
 8007f44:	6a23      	ldr	r3, [r4, #32]
 8007f46:	b11b      	cbz	r3, 8007f50 <__sinit+0x14>
 8007f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f4c:	f7ff bff0 	b.w	8007f30 <__sfp_lock_release>
 8007f50:	4b04      	ldr	r3, [pc, #16]	@ (8007f64 <__sinit+0x28>)
 8007f52:	6223      	str	r3, [r4, #32]
 8007f54:	4b04      	ldr	r3, [pc, #16]	@ (8007f68 <__sinit+0x2c>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1f5      	bne.n	8007f48 <__sinit+0xc>
 8007f5c:	f7ff ffc4 	bl	8007ee8 <global_stdio_init.part.0>
 8007f60:	e7f2      	b.n	8007f48 <__sinit+0xc>
 8007f62:	bf00      	nop
 8007f64:	08007ea9 	.word	0x08007ea9
 8007f68:	200005f0 	.word	0x200005f0

08007f6c <_fwalk_sglue>:
 8007f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f70:	4607      	mov	r7, r0
 8007f72:	4688      	mov	r8, r1
 8007f74:	4614      	mov	r4, r2
 8007f76:	2600      	movs	r6, #0
 8007f78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f7c:	f1b9 0901 	subs.w	r9, r9, #1
 8007f80:	d505      	bpl.n	8007f8e <_fwalk_sglue+0x22>
 8007f82:	6824      	ldr	r4, [r4, #0]
 8007f84:	2c00      	cmp	r4, #0
 8007f86:	d1f7      	bne.n	8007f78 <_fwalk_sglue+0xc>
 8007f88:	4630      	mov	r0, r6
 8007f8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f8e:	89ab      	ldrh	r3, [r5, #12]
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d907      	bls.n	8007fa4 <_fwalk_sglue+0x38>
 8007f94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f98:	3301      	adds	r3, #1
 8007f9a:	d003      	beq.n	8007fa4 <_fwalk_sglue+0x38>
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	47c0      	blx	r8
 8007fa2:	4306      	orrs	r6, r0
 8007fa4:	3568      	adds	r5, #104	@ 0x68
 8007fa6:	e7e9      	b.n	8007f7c <_fwalk_sglue+0x10>

08007fa8 <iprintf>:
 8007fa8:	b40f      	push	{r0, r1, r2, r3}
 8007faa:	b507      	push	{r0, r1, r2, lr}
 8007fac:	4906      	ldr	r1, [pc, #24]	@ (8007fc8 <iprintf+0x20>)
 8007fae:	ab04      	add	r3, sp, #16
 8007fb0:	6808      	ldr	r0, [r1, #0]
 8007fb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb6:	6881      	ldr	r1, [r0, #8]
 8007fb8:	9301      	str	r3, [sp, #4]
 8007fba:	f001 fcb5 	bl	8009928 <_vfiprintf_r>
 8007fbe:	b003      	add	sp, #12
 8007fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fc4:	b004      	add	sp, #16
 8007fc6:	4770      	bx	lr
 8007fc8:	20000028 	.word	0x20000028

08007fcc <_puts_r>:
 8007fcc:	6a03      	ldr	r3, [r0, #32]
 8007fce:	b570      	push	{r4, r5, r6, lr}
 8007fd0:	6884      	ldr	r4, [r0, #8]
 8007fd2:	4605      	mov	r5, r0
 8007fd4:	460e      	mov	r6, r1
 8007fd6:	b90b      	cbnz	r3, 8007fdc <_puts_r+0x10>
 8007fd8:	f7ff ffb0 	bl	8007f3c <__sinit>
 8007fdc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007fde:	07db      	lsls	r3, r3, #31
 8007fe0:	d405      	bmi.n	8007fee <_puts_r+0x22>
 8007fe2:	89a3      	ldrh	r3, [r4, #12]
 8007fe4:	0598      	lsls	r0, r3, #22
 8007fe6:	d402      	bmi.n	8007fee <_puts_r+0x22>
 8007fe8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007fea:	f000 f9a2 	bl	8008332 <__retarget_lock_acquire_recursive>
 8007fee:	89a3      	ldrh	r3, [r4, #12]
 8007ff0:	0719      	lsls	r1, r3, #28
 8007ff2:	d502      	bpl.n	8007ffa <_puts_r+0x2e>
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d135      	bne.n	8008066 <_puts_r+0x9a>
 8007ffa:	4621      	mov	r1, r4
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	f000 f8c5 	bl	800818c <__swsetup_r>
 8008002:	b380      	cbz	r0, 8008066 <_puts_r+0x9a>
 8008004:	f04f 35ff 	mov.w	r5, #4294967295
 8008008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800800a:	07da      	lsls	r2, r3, #31
 800800c:	d405      	bmi.n	800801a <_puts_r+0x4e>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	059b      	lsls	r3, r3, #22
 8008012:	d402      	bmi.n	800801a <_puts_r+0x4e>
 8008014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008016:	f000 f98d 	bl	8008334 <__retarget_lock_release_recursive>
 800801a:	4628      	mov	r0, r5
 800801c:	bd70      	pop	{r4, r5, r6, pc}
 800801e:	2b00      	cmp	r3, #0
 8008020:	da04      	bge.n	800802c <_puts_r+0x60>
 8008022:	69a2      	ldr	r2, [r4, #24]
 8008024:	429a      	cmp	r2, r3
 8008026:	dc17      	bgt.n	8008058 <_puts_r+0x8c>
 8008028:	290a      	cmp	r1, #10
 800802a:	d015      	beq.n	8008058 <_puts_r+0x8c>
 800802c:	6823      	ldr	r3, [r4, #0]
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	6022      	str	r2, [r4, #0]
 8008032:	7019      	strb	r1, [r3, #0]
 8008034:	68a3      	ldr	r3, [r4, #8]
 8008036:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800803a:	3b01      	subs	r3, #1
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	2900      	cmp	r1, #0
 8008040:	d1ed      	bne.n	800801e <_puts_r+0x52>
 8008042:	2b00      	cmp	r3, #0
 8008044:	da11      	bge.n	800806a <_puts_r+0x9e>
 8008046:	4622      	mov	r2, r4
 8008048:	210a      	movs	r1, #10
 800804a:	4628      	mov	r0, r5
 800804c:	f000 f85f 	bl	800810e <__swbuf_r>
 8008050:	3001      	adds	r0, #1
 8008052:	d0d7      	beq.n	8008004 <_puts_r+0x38>
 8008054:	250a      	movs	r5, #10
 8008056:	e7d7      	b.n	8008008 <_puts_r+0x3c>
 8008058:	4622      	mov	r2, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f000 f857 	bl	800810e <__swbuf_r>
 8008060:	3001      	adds	r0, #1
 8008062:	d1e7      	bne.n	8008034 <_puts_r+0x68>
 8008064:	e7ce      	b.n	8008004 <_puts_r+0x38>
 8008066:	3e01      	subs	r6, #1
 8008068:	e7e4      	b.n	8008034 <_puts_r+0x68>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	1c5a      	adds	r2, r3, #1
 800806e:	6022      	str	r2, [r4, #0]
 8008070:	220a      	movs	r2, #10
 8008072:	701a      	strb	r2, [r3, #0]
 8008074:	e7ee      	b.n	8008054 <_puts_r+0x88>
	...

08008078 <puts>:
 8008078:	4b02      	ldr	r3, [pc, #8]	@ (8008084 <puts+0xc>)
 800807a:	4601      	mov	r1, r0
 800807c:	6818      	ldr	r0, [r3, #0]
 800807e:	f7ff bfa5 	b.w	8007fcc <_puts_r>
 8008082:	bf00      	nop
 8008084:	20000028 	.word	0x20000028

08008088 <__sread>:
 8008088:	b510      	push	{r4, lr}
 800808a:	460c      	mov	r4, r1
 800808c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008090:	f000 f900 	bl	8008294 <_read_r>
 8008094:	2800      	cmp	r0, #0
 8008096:	bfab      	itete	ge
 8008098:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800809a:	89a3      	ldrhlt	r3, [r4, #12]
 800809c:	181b      	addge	r3, r3, r0
 800809e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080a2:	bfac      	ite	ge
 80080a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080a6:	81a3      	strhlt	r3, [r4, #12]
 80080a8:	bd10      	pop	{r4, pc}

080080aa <__swrite>:
 80080aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ae:	461f      	mov	r7, r3
 80080b0:	898b      	ldrh	r3, [r1, #12]
 80080b2:	05db      	lsls	r3, r3, #23
 80080b4:	4605      	mov	r5, r0
 80080b6:	460c      	mov	r4, r1
 80080b8:	4616      	mov	r6, r2
 80080ba:	d505      	bpl.n	80080c8 <__swrite+0x1e>
 80080bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080c0:	2302      	movs	r3, #2
 80080c2:	2200      	movs	r2, #0
 80080c4:	f000 f8d4 	bl	8008270 <_lseek_r>
 80080c8:	89a3      	ldrh	r3, [r4, #12]
 80080ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80080d2:	81a3      	strh	r3, [r4, #12]
 80080d4:	4632      	mov	r2, r6
 80080d6:	463b      	mov	r3, r7
 80080d8:	4628      	mov	r0, r5
 80080da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80080de:	f000 b8eb 	b.w	80082b8 <_write_r>

080080e2 <__sseek>:
 80080e2:	b510      	push	{r4, lr}
 80080e4:	460c      	mov	r4, r1
 80080e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080ea:	f000 f8c1 	bl	8008270 <_lseek_r>
 80080ee:	1c43      	adds	r3, r0, #1
 80080f0:	89a3      	ldrh	r3, [r4, #12]
 80080f2:	bf15      	itete	ne
 80080f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80080f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80080fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80080fe:	81a3      	strheq	r3, [r4, #12]
 8008100:	bf18      	it	ne
 8008102:	81a3      	strhne	r3, [r4, #12]
 8008104:	bd10      	pop	{r4, pc}

08008106 <__sclose>:
 8008106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800810a:	f000 b8a1 	b.w	8008250 <_close_r>

0800810e <__swbuf_r>:
 800810e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008110:	460e      	mov	r6, r1
 8008112:	4614      	mov	r4, r2
 8008114:	4605      	mov	r5, r0
 8008116:	b118      	cbz	r0, 8008120 <__swbuf_r+0x12>
 8008118:	6a03      	ldr	r3, [r0, #32]
 800811a:	b90b      	cbnz	r3, 8008120 <__swbuf_r+0x12>
 800811c:	f7ff ff0e 	bl	8007f3c <__sinit>
 8008120:	69a3      	ldr	r3, [r4, #24]
 8008122:	60a3      	str	r3, [r4, #8]
 8008124:	89a3      	ldrh	r3, [r4, #12]
 8008126:	071a      	lsls	r2, r3, #28
 8008128:	d501      	bpl.n	800812e <__swbuf_r+0x20>
 800812a:	6923      	ldr	r3, [r4, #16]
 800812c:	b943      	cbnz	r3, 8008140 <__swbuf_r+0x32>
 800812e:	4621      	mov	r1, r4
 8008130:	4628      	mov	r0, r5
 8008132:	f000 f82b 	bl	800818c <__swsetup_r>
 8008136:	b118      	cbz	r0, 8008140 <__swbuf_r+0x32>
 8008138:	f04f 37ff 	mov.w	r7, #4294967295
 800813c:	4638      	mov	r0, r7
 800813e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	6922      	ldr	r2, [r4, #16]
 8008144:	1a98      	subs	r0, r3, r2
 8008146:	6963      	ldr	r3, [r4, #20]
 8008148:	b2f6      	uxtb	r6, r6
 800814a:	4283      	cmp	r3, r0
 800814c:	4637      	mov	r7, r6
 800814e:	dc05      	bgt.n	800815c <__swbuf_r+0x4e>
 8008150:	4621      	mov	r1, r4
 8008152:	4628      	mov	r0, r5
 8008154:	f001 fd84 	bl	8009c60 <_fflush_r>
 8008158:	2800      	cmp	r0, #0
 800815a:	d1ed      	bne.n	8008138 <__swbuf_r+0x2a>
 800815c:	68a3      	ldr	r3, [r4, #8]
 800815e:	3b01      	subs	r3, #1
 8008160:	60a3      	str	r3, [r4, #8]
 8008162:	6823      	ldr	r3, [r4, #0]
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	6022      	str	r2, [r4, #0]
 8008168:	701e      	strb	r6, [r3, #0]
 800816a:	6962      	ldr	r2, [r4, #20]
 800816c:	1c43      	adds	r3, r0, #1
 800816e:	429a      	cmp	r2, r3
 8008170:	d004      	beq.n	800817c <__swbuf_r+0x6e>
 8008172:	89a3      	ldrh	r3, [r4, #12]
 8008174:	07db      	lsls	r3, r3, #31
 8008176:	d5e1      	bpl.n	800813c <__swbuf_r+0x2e>
 8008178:	2e0a      	cmp	r6, #10
 800817a:	d1df      	bne.n	800813c <__swbuf_r+0x2e>
 800817c:	4621      	mov	r1, r4
 800817e:	4628      	mov	r0, r5
 8008180:	f001 fd6e 	bl	8009c60 <_fflush_r>
 8008184:	2800      	cmp	r0, #0
 8008186:	d0d9      	beq.n	800813c <__swbuf_r+0x2e>
 8008188:	e7d6      	b.n	8008138 <__swbuf_r+0x2a>
	...

0800818c <__swsetup_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4b29      	ldr	r3, [pc, #164]	@ (8008234 <__swsetup_r+0xa8>)
 8008190:	4605      	mov	r5, r0
 8008192:	6818      	ldr	r0, [r3, #0]
 8008194:	460c      	mov	r4, r1
 8008196:	b118      	cbz	r0, 80081a0 <__swsetup_r+0x14>
 8008198:	6a03      	ldr	r3, [r0, #32]
 800819a:	b90b      	cbnz	r3, 80081a0 <__swsetup_r+0x14>
 800819c:	f7ff fece 	bl	8007f3c <__sinit>
 80081a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081a4:	0719      	lsls	r1, r3, #28
 80081a6:	d422      	bmi.n	80081ee <__swsetup_r+0x62>
 80081a8:	06da      	lsls	r2, r3, #27
 80081aa:	d407      	bmi.n	80081bc <__swsetup_r+0x30>
 80081ac:	2209      	movs	r2, #9
 80081ae:	602a      	str	r2, [r5, #0]
 80081b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081b4:	81a3      	strh	r3, [r4, #12]
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ba:	e033      	b.n	8008224 <__swsetup_r+0x98>
 80081bc:	0758      	lsls	r0, r3, #29
 80081be:	d512      	bpl.n	80081e6 <__swsetup_r+0x5a>
 80081c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081c2:	b141      	cbz	r1, 80081d6 <__swsetup_r+0x4a>
 80081c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081c8:	4299      	cmp	r1, r3
 80081ca:	d002      	beq.n	80081d2 <__swsetup_r+0x46>
 80081cc:	4628      	mov	r0, r5
 80081ce:	f000 feff 	bl	8008fd0 <_free_r>
 80081d2:	2300      	movs	r3, #0
 80081d4:	6363      	str	r3, [r4, #52]	@ 0x34
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081dc:	81a3      	strh	r3, [r4, #12]
 80081de:	2300      	movs	r3, #0
 80081e0:	6063      	str	r3, [r4, #4]
 80081e2:	6923      	ldr	r3, [r4, #16]
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	89a3      	ldrh	r3, [r4, #12]
 80081e8:	f043 0308 	orr.w	r3, r3, #8
 80081ec:	81a3      	strh	r3, [r4, #12]
 80081ee:	6923      	ldr	r3, [r4, #16]
 80081f0:	b94b      	cbnz	r3, 8008206 <__swsetup_r+0x7a>
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081fc:	d003      	beq.n	8008206 <__swsetup_r+0x7a>
 80081fe:	4621      	mov	r1, r4
 8008200:	4628      	mov	r0, r5
 8008202:	f001 fd7b 	bl	8009cfc <__smakebuf_r>
 8008206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800820a:	f013 0201 	ands.w	r2, r3, #1
 800820e:	d00a      	beq.n	8008226 <__swsetup_r+0x9a>
 8008210:	2200      	movs	r2, #0
 8008212:	60a2      	str	r2, [r4, #8]
 8008214:	6962      	ldr	r2, [r4, #20]
 8008216:	4252      	negs	r2, r2
 8008218:	61a2      	str	r2, [r4, #24]
 800821a:	6922      	ldr	r2, [r4, #16]
 800821c:	b942      	cbnz	r2, 8008230 <__swsetup_r+0xa4>
 800821e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008222:	d1c5      	bne.n	80081b0 <__swsetup_r+0x24>
 8008224:	bd38      	pop	{r3, r4, r5, pc}
 8008226:	0799      	lsls	r1, r3, #30
 8008228:	bf58      	it	pl
 800822a:	6962      	ldrpl	r2, [r4, #20]
 800822c:	60a2      	str	r2, [r4, #8]
 800822e:	e7f4      	b.n	800821a <__swsetup_r+0x8e>
 8008230:	2000      	movs	r0, #0
 8008232:	e7f7      	b.n	8008224 <__swsetup_r+0x98>
 8008234:	20000028 	.word	0x20000028

08008238 <memset>:
 8008238:	4402      	add	r2, r0
 800823a:	4603      	mov	r3, r0
 800823c:	4293      	cmp	r3, r2
 800823e:	d100      	bne.n	8008242 <memset+0xa>
 8008240:	4770      	bx	lr
 8008242:	f803 1b01 	strb.w	r1, [r3], #1
 8008246:	e7f9      	b.n	800823c <memset+0x4>

08008248 <_localeconv_r>:
 8008248:	4800      	ldr	r0, [pc, #0]	@ (800824c <_localeconv_r+0x4>)
 800824a:	4770      	bx	lr
 800824c:	20000168 	.word	0x20000168

08008250 <_close_r>:
 8008250:	b538      	push	{r3, r4, r5, lr}
 8008252:	4d06      	ldr	r5, [pc, #24]	@ (800826c <_close_r+0x1c>)
 8008254:	2300      	movs	r3, #0
 8008256:	4604      	mov	r4, r0
 8008258:	4608      	mov	r0, r1
 800825a:	602b      	str	r3, [r5, #0]
 800825c:	f7fa fade 	bl	800281c <_close>
 8008260:	1c43      	adds	r3, r0, #1
 8008262:	d102      	bne.n	800826a <_close_r+0x1a>
 8008264:	682b      	ldr	r3, [r5, #0]
 8008266:	b103      	cbz	r3, 800826a <_close_r+0x1a>
 8008268:	6023      	str	r3, [r4, #0]
 800826a:	bd38      	pop	{r3, r4, r5, pc}
 800826c:	200005f4 	.word	0x200005f4

08008270 <_lseek_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4d07      	ldr	r5, [pc, #28]	@ (8008290 <_lseek_r+0x20>)
 8008274:	4604      	mov	r4, r0
 8008276:	4608      	mov	r0, r1
 8008278:	4611      	mov	r1, r2
 800827a:	2200      	movs	r2, #0
 800827c:	602a      	str	r2, [r5, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	f7fa faf3 	bl	800286a <_lseek>
 8008284:	1c43      	adds	r3, r0, #1
 8008286:	d102      	bne.n	800828e <_lseek_r+0x1e>
 8008288:	682b      	ldr	r3, [r5, #0]
 800828a:	b103      	cbz	r3, 800828e <_lseek_r+0x1e>
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	bd38      	pop	{r3, r4, r5, pc}
 8008290:	200005f4 	.word	0x200005f4

08008294 <_read_r>:
 8008294:	b538      	push	{r3, r4, r5, lr}
 8008296:	4d07      	ldr	r5, [pc, #28]	@ (80082b4 <_read_r+0x20>)
 8008298:	4604      	mov	r4, r0
 800829a:	4608      	mov	r0, r1
 800829c:	4611      	mov	r1, r2
 800829e:	2200      	movs	r2, #0
 80082a0:	602a      	str	r2, [r5, #0]
 80082a2:	461a      	mov	r2, r3
 80082a4:	f7fa fa9d 	bl	80027e2 <_read>
 80082a8:	1c43      	adds	r3, r0, #1
 80082aa:	d102      	bne.n	80082b2 <_read_r+0x1e>
 80082ac:	682b      	ldr	r3, [r5, #0]
 80082ae:	b103      	cbz	r3, 80082b2 <_read_r+0x1e>
 80082b0:	6023      	str	r3, [r4, #0]
 80082b2:	bd38      	pop	{r3, r4, r5, pc}
 80082b4:	200005f4 	.word	0x200005f4

080082b8 <_write_r>:
 80082b8:	b538      	push	{r3, r4, r5, lr}
 80082ba:	4d07      	ldr	r5, [pc, #28]	@ (80082d8 <_write_r+0x20>)
 80082bc:	4604      	mov	r4, r0
 80082be:	4608      	mov	r0, r1
 80082c0:	4611      	mov	r1, r2
 80082c2:	2200      	movs	r2, #0
 80082c4:	602a      	str	r2, [r5, #0]
 80082c6:	461a      	mov	r2, r3
 80082c8:	f7fa f86c 	bl	80023a4 <_write>
 80082cc:	1c43      	adds	r3, r0, #1
 80082ce:	d102      	bne.n	80082d6 <_write_r+0x1e>
 80082d0:	682b      	ldr	r3, [r5, #0]
 80082d2:	b103      	cbz	r3, 80082d6 <_write_r+0x1e>
 80082d4:	6023      	str	r3, [r4, #0]
 80082d6:	bd38      	pop	{r3, r4, r5, pc}
 80082d8:	200005f4 	.word	0x200005f4

080082dc <__errno>:
 80082dc:	4b01      	ldr	r3, [pc, #4]	@ (80082e4 <__errno+0x8>)
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000028 	.word	0x20000028

080082e8 <__libc_init_array>:
 80082e8:	b570      	push	{r4, r5, r6, lr}
 80082ea:	4d0d      	ldr	r5, [pc, #52]	@ (8008320 <__libc_init_array+0x38>)
 80082ec:	4c0d      	ldr	r4, [pc, #52]	@ (8008324 <__libc_init_array+0x3c>)
 80082ee:	1b64      	subs	r4, r4, r5
 80082f0:	10a4      	asrs	r4, r4, #2
 80082f2:	2600      	movs	r6, #0
 80082f4:	42a6      	cmp	r6, r4
 80082f6:	d109      	bne.n	800830c <__libc_init_array+0x24>
 80082f8:	4d0b      	ldr	r5, [pc, #44]	@ (8008328 <__libc_init_array+0x40>)
 80082fa:	4c0c      	ldr	r4, [pc, #48]	@ (800832c <__libc_init_array+0x44>)
 80082fc:	f003 fa18 	bl	800b730 <_init>
 8008300:	1b64      	subs	r4, r4, r5
 8008302:	10a4      	asrs	r4, r4, #2
 8008304:	2600      	movs	r6, #0
 8008306:	42a6      	cmp	r6, r4
 8008308:	d105      	bne.n	8008316 <__libc_init_array+0x2e>
 800830a:	bd70      	pop	{r4, r5, r6, pc}
 800830c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008310:	4798      	blx	r3
 8008312:	3601      	adds	r6, #1
 8008314:	e7ee      	b.n	80082f4 <__libc_init_array+0xc>
 8008316:	f855 3b04 	ldr.w	r3, [r5], #4
 800831a:	4798      	blx	r3
 800831c:	3601      	adds	r6, #1
 800831e:	e7f2      	b.n	8008306 <__libc_init_array+0x1e>
 8008320:	0800bdd0 	.word	0x0800bdd0
 8008324:	0800bdd0 	.word	0x0800bdd0
 8008328:	0800bdd0 	.word	0x0800bdd0
 800832c:	0800bdd4 	.word	0x0800bdd4

08008330 <__retarget_lock_init_recursive>:
 8008330:	4770      	bx	lr

08008332 <__retarget_lock_acquire_recursive>:
 8008332:	4770      	bx	lr

08008334 <__retarget_lock_release_recursive>:
 8008334:	4770      	bx	lr

08008336 <quorem>:
 8008336:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833a:	6903      	ldr	r3, [r0, #16]
 800833c:	690c      	ldr	r4, [r1, #16]
 800833e:	42a3      	cmp	r3, r4
 8008340:	4607      	mov	r7, r0
 8008342:	db7e      	blt.n	8008442 <quorem+0x10c>
 8008344:	3c01      	subs	r4, #1
 8008346:	f101 0814 	add.w	r8, r1, #20
 800834a:	00a3      	lsls	r3, r4, #2
 800834c:	f100 0514 	add.w	r5, r0, #20
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008356:	9301      	str	r3, [sp, #4]
 8008358:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800835c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008360:	3301      	adds	r3, #1
 8008362:	429a      	cmp	r2, r3
 8008364:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008368:	fbb2 f6f3 	udiv	r6, r2, r3
 800836c:	d32e      	bcc.n	80083cc <quorem+0x96>
 800836e:	f04f 0a00 	mov.w	sl, #0
 8008372:	46c4      	mov	ip, r8
 8008374:	46ae      	mov	lr, r5
 8008376:	46d3      	mov	fp, sl
 8008378:	f85c 3b04 	ldr.w	r3, [ip], #4
 800837c:	b298      	uxth	r0, r3
 800837e:	fb06 a000 	mla	r0, r6, r0, sl
 8008382:	0c02      	lsrs	r2, r0, #16
 8008384:	0c1b      	lsrs	r3, r3, #16
 8008386:	fb06 2303 	mla	r3, r6, r3, r2
 800838a:	f8de 2000 	ldr.w	r2, [lr]
 800838e:	b280      	uxth	r0, r0
 8008390:	b292      	uxth	r2, r2
 8008392:	1a12      	subs	r2, r2, r0
 8008394:	445a      	add	r2, fp
 8008396:	f8de 0000 	ldr.w	r0, [lr]
 800839a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800839e:	b29b      	uxth	r3, r3
 80083a0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80083a4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80083a8:	b292      	uxth	r2, r2
 80083aa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80083ae:	45e1      	cmp	r9, ip
 80083b0:	f84e 2b04 	str.w	r2, [lr], #4
 80083b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80083b8:	d2de      	bcs.n	8008378 <quorem+0x42>
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	58eb      	ldr	r3, [r5, r3]
 80083be:	b92b      	cbnz	r3, 80083cc <quorem+0x96>
 80083c0:	9b01      	ldr	r3, [sp, #4]
 80083c2:	3b04      	subs	r3, #4
 80083c4:	429d      	cmp	r5, r3
 80083c6:	461a      	mov	r2, r3
 80083c8:	d32f      	bcc.n	800842a <quorem+0xf4>
 80083ca:	613c      	str	r4, [r7, #16]
 80083cc:	4638      	mov	r0, r7
 80083ce:	f001 f979 	bl	80096c4 <__mcmp>
 80083d2:	2800      	cmp	r0, #0
 80083d4:	db25      	blt.n	8008422 <quorem+0xec>
 80083d6:	4629      	mov	r1, r5
 80083d8:	2000      	movs	r0, #0
 80083da:	f858 2b04 	ldr.w	r2, [r8], #4
 80083de:	f8d1 c000 	ldr.w	ip, [r1]
 80083e2:	fa1f fe82 	uxth.w	lr, r2
 80083e6:	fa1f f38c 	uxth.w	r3, ip
 80083ea:	eba3 030e 	sub.w	r3, r3, lr
 80083ee:	4403      	add	r3, r0
 80083f0:	0c12      	lsrs	r2, r2, #16
 80083f2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80083f6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008400:	45c1      	cmp	r9, r8
 8008402:	f841 3b04 	str.w	r3, [r1], #4
 8008406:	ea4f 4022 	mov.w	r0, r2, asr #16
 800840a:	d2e6      	bcs.n	80083da <quorem+0xa4>
 800840c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008410:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008414:	b922      	cbnz	r2, 8008420 <quorem+0xea>
 8008416:	3b04      	subs	r3, #4
 8008418:	429d      	cmp	r5, r3
 800841a:	461a      	mov	r2, r3
 800841c:	d30b      	bcc.n	8008436 <quorem+0x100>
 800841e:	613c      	str	r4, [r7, #16]
 8008420:	3601      	adds	r6, #1
 8008422:	4630      	mov	r0, r6
 8008424:	b003      	add	sp, #12
 8008426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800842a:	6812      	ldr	r2, [r2, #0]
 800842c:	3b04      	subs	r3, #4
 800842e:	2a00      	cmp	r2, #0
 8008430:	d1cb      	bne.n	80083ca <quorem+0x94>
 8008432:	3c01      	subs	r4, #1
 8008434:	e7c6      	b.n	80083c4 <quorem+0x8e>
 8008436:	6812      	ldr	r2, [r2, #0]
 8008438:	3b04      	subs	r3, #4
 800843a:	2a00      	cmp	r2, #0
 800843c:	d1ef      	bne.n	800841e <quorem+0xe8>
 800843e:	3c01      	subs	r4, #1
 8008440:	e7ea      	b.n	8008418 <quorem+0xe2>
 8008442:	2000      	movs	r0, #0
 8008444:	e7ee      	b.n	8008424 <quorem+0xee>
	...

08008448 <_dtoa_r>:
 8008448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800844c:	69c7      	ldr	r7, [r0, #28]
 800844e:	b099      	sub	sp, #100	@ 0x64
 8008450:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008454:	ec55 4b10 	vmov	r4, r5, d0
 8008458:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800845a:	9109      	str	r1, [sp, #36]	@ 0x24
 800845c:	4683      	mov	fp, r0
 800845e:	920e      	str	r2, [sp, #56]	@ 0x38
 8008460:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008462:	b97f      	cbnz	r7, 8008484 <_dtoa_r+0x3c>
 8008464:	2010      	movs	r0, #16
 8008466:	f000 fdfd 	bl	8009064 <malloc>
 800846a:	4602      	mov	r2, r0
 800846c:	f8cb 001c 	str.w	r0, [fp, #28]
 8008470:	b920      	cbnz	r0, 800847c <_dtoa_r+0x34>
 8008472:	4ba7      	ldr	r3, [pc, #668]	@ (8008710 <_dtoa_r+0x2c8>)
 8008474:	21ef      	movs	r1, #239	@ 0xef
 8008476:	48a7      	ldr	r0, [pc, #668]	@ (8008714 <_dtoa_r+0x2cc>)
 8008478:	f001 fcbc 	bl	8009df4 <__assert_func>
 800847c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008480:	6007      	str	r7, [r0, #0]
 8008482:	60c7      	str	r7, [r0, #12]
 8008484:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008488:	6819      	ldr	r1, [r3, #0]
 800848a:	b159      	cbz	r1, 80084a4 <_dtoa_r+0x5c>
 800848c:	685a      	ldr	r2, [r3, #4]
 800848e:	604a      	str	r2, [r1, #4]
 8008490:	2301      	movs	r3, #1
 8008492:	4093      	lsls	r3, r2
 8008494:	608b      	str	r3, [r1, #8]
 8008496:	4658      	mov	r0, fp
 8008498:	f000 feda 	bl	8009250 <_Bfree>
 800849c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	1e2b      	subs	r3, r5, #0
 80084a6:	bfb9      	ittee	lt
 80084a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80084ac:	9303      	strlt	r3, [sp, #12]
 80084ae:	2300      	movge	r3, #0
 80084b0:	6033      	strge	r3, [r6, #0]
 80084b2:	9f03      	ldr	r7, [sp, #12]
 80084b4:	4b98      	ldr	r3, [pc, #608]	@ (8008718 <_dtoa_r+0x2d0>)
 80084b6:	bfbc      	itt	lt
 80084b8:	2201      	movlt	r2, #1
 80084ba:	6032      	strlt	r2, [r6, #0]
 80084bc:	43bb      	bics	r3, r7
 80084be:	d112      	bne.n	80084e6 <_dtoa_r+0x9e>
 80084c0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80084c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80084c6:	6013      	str	r3, [r2, #0]
 80084c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80084cc:	4323      	orrs	r3, r4
 80084ce:	f000 854d 	beq.w	8008f6c <_dtoa_r+0xb24>
 80084d2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80084d4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800872c <_dtoa_r+0x2e4>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 854f 	beq.w	8008f7c <_dtoa_r+0xb34>
 80084de:	f10a 0303 	add.w	r3, sl, #3
 80084e2:	f000 bd49 	b.w	8008f78 <_dtoa_r+0xb30>
 80084e6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084ea:	2200      	movs	r2, #0
 80084ec:	ec51 0b17 	vmov	r0, r1, d7
 80084f0:	2300      	movs	r3, #0
 80084f2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80084f6:	f7f8 fb07 	bl	8000b08 <__aeabi_dcmpeq>
 80084fa:	4680      	mov	r8, r0
 80084fc:	b158      	cbz	r0, 8008516 <_dtoa_r+0xce>
 80084fe:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008500:	2301      	movs	r3, #1
 8008502:	6013      	str	r3, [r2, #0]
 8008504:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008506:	b113      	cbz	r3, 800850e <_dtoa_r+0xc6>
 8008508:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800850a:	4b84      	ldr	r3, [pc, #528]	@ (800871c <_dtoa_r+0x2d4>)
 800850c:	6013      	str	r3, [r2, #0]
 800850e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008730 <_dtoa_r+0x2e8>
 8008512:	f000 bd33 	b.w	8008f7c <_dtoa_r+0xb34>
 8008516:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800851a:	aa16      	add	r2, sp, #88	@ 0x58
 800851c:	a917      	add	r1, sp, #92	@ 0x5c
 800851e:	4658      	mov	r0, fp
 8008520:	f001 f980 	bl	8009824 <__d2b>
 8008524:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008528:	4681      	mov	r9, r0
 800852a:	2e00      	cmp	r6, #0
 800852c:	d077      	beq.n	800861e <_dtoa_r+0x1d6>
 800852e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008530:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008538:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800853c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008540:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008544:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008548:	4619      	mov	r1, r3
 800854a:	2200      	movs	r2, #0
 800854c:	4b74      	ldr	r3, [pc, #464]	@ (8008720 <_dtoa_r+0x2d8>)
 800854e:	f7f7 febb 	bl	80002c8 <__aeabi_dsub>
 8008552:	a369      	add	r3, pc, #420	@ (adr r3, 80086f8 <_dtoa_r+0x2b0>)
 8008554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008558:	f7f8 f86e 	bl	8000638 <__aeabi_dmul>
 800855c:	a368      	add	r3, pc, #416	@ (adr r3, 8008700 <_dtoa_r+0x2b8>)
 800855e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008562:	f7f7 feb3 	bl	80002cc <__adddf3>
 8008566:	4604      	mov	r4, r0
 8008568:	4630      	mov	r0, r6
 800856a:	460d      	mov	r5, r1
 800856c:	f7f7 fffa 	bl	8000564 <__aeabi_i2d>
 8008570:	a365      	add	r3, pc, #404	@ (adr r3, 8008708 <_dtoa_r+0x2c0>)
 8008572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008576:	f7f8 f85f 	bl	8000638 <__aeabi_dmul>
 800857a:	4602      	mov	r2, r0
 800857c:	460b      	mov	r3, r1
 800857e:	4620      	mov	r0, r4
 8008580:	4629      	mov	r1, r5
 8008582:	f7f7 fea3 	bl	80002cc <__adddf3>
 8008586:	4604      	mov	r4, r0
 8008588:	460d      	mov	r5, r1
 800858a:	f7f8 fb05 	bl	8000b98 <__aeabi_d2iz>
 800858e:	2200      	movs	r2, #0
 8008590:	4607      	mov	r7, r0
 8008592:	2300      	movs	r3, #0
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f8 fac0 	bl	8000b1c <__aeabi_dcmplt>
 800859c:	b140      	cbz	r0, 80085b0 <_dtoa_r+0x168>
 800859e:	4638      	mov	r0, r7
 80085a0:	f7f7 ffe0 	bl	8000564 <__aeabi_i2d>
 80085a4:	4622      	mov	r2, r4
 80085a6:	462b      	mov	r3, r5
 80085a8:	f7f8 faae 	bl	8000b08 <__aeabi_dcmpeq>
 80085ac:	b900      	cbnz	r0, 80085b0 <_dtoa_r+0x168>
 80085ae:	3f01      	subs	r7, #1
 80085b0:	2f16      	cmp	r7, #22
 80085b2:	d851      	bhi.n	8008658 <_dtoa_r+0x210>
 80085b4:	4b5b      	ldr	r3, [pc, #364]	@ (8008724 <_dtoa_r+0x2dc>)
 80085b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085c2:	f7f8 faab 	bl	8000b1c <__aeabi_dcmplt>
 80085c6:	2800      	cmp	r0, #0
 80085c8:	d048      	beq.n	800865c <_dtoa_r+0x214>
 80085ca:	3f01      	subs	r7, #1
 80085cc:	2300      	movs	r3, #0
 80085ce:	9312      	str	r3, [sp, #72]	@ 0x48
 80085d0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80085d2:	1b9b      	subs	r3, r3, r6
 80085d4:	1e5a      	subs	r2, r3, #1
 80085d6:	bf44      	itt	mi
 80085d8:	f1c3 0801 	rsbmi	r8, r3, #1
 80085dc:	2300      	movmi	r3, #0
 80085de:	9208      	str	r2, [sp, #32]
 80085e0:	bf54      	ite	pl
 80085e2:	f04f 0800 	movpl.w	r8, #0
 80085e6:	9308      	strmi	r3, [sp, #32]
 80085e8:	2f00      	cmp	r7, #0
 80085ea:	db39      	blt.n	8008660 <_dtoa_r+0x218>
 80085ec:	9b08      	ldr	r3, [sp, #32]
 80085ee:	970f      	str	r7, [sp, #60]	@ 0x3c
 80085f0:	443b      	add	r3, r7
 80085f2:	9308      	str	r3, [sp, #32]
 80085f4:	2300      	movs	r3, #0
 80085f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fa:	2b09      	cmp	r3, #9
 80085fc:	d864      	bhi.n	80086c8 <_dtoa_r+0x280>
 80085fe:	2b05      	cmp	r3, #5
 8008600:	bfc4      	itt	gt
 8008602:	3b04      	subgt	r3, #4
 8008604:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008608:	f1a3 0302 	sub.w	r3, r3, #2
 800860c:	bfcc      	ite	gt
 800860e:	2400      	movgt	r4, #0
 8008610:	2401      	movle	r4, #1
 8008612:	2b03      	cmp	r3, #3
 8008614:	d863      	bhi.n	80086de <_dtoa_r+0x296>
 8008616:	e8df f003 	tbb	[pc, r3]
 800861a:	372a      	.short	0x372a
 800861c:	5535      	.short	0x5535
 800861e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008622:	441e      	add	r6, r3
 8008624:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008628:	2b20      	cmp	r3, #32
 800862a:	bfc1      	itttt	gt
 800862c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008630:	409f      	lslgt	r7, r3
 8008632:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008636:	fa24 f303 	lsrgt.w	r3, r4, r3
 800863a:	bfd6      	itet	le
 800863c:	f1c3 0320 	rsble	r3, r3, #32
 8008640:	ea47 0003 	orrgt.w	r0, r7, r3
 8008644:	fa04 f003 	lslle.w	r0, r4, r3
 8008648:	f7f7 ff7c 	bl	8000544 <__aeabi_ui2d>
 800864c:	2201      	movs	r2, #1
 800864e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008652:	3e01      	subs	r6, #1
 8008654:	9214      	str	r2, [sp, #80]	@ 0x50
 8008656:	e777      	b.n	8008548 <_dtoa_r+0x100>
 8008658:	2301      	movs	r3, #1
 800865a:	e7b8      	b.n	80085ce <_dtoa_r+0x186>
 800865c:	9012      	str	r0, [sp, #72]	@ 0x48
 800865e:	e7b7      	b.n	80085d0 <_dtoa_r+0x188>
 8008660:	427b      	negs	r3, r7
 8008662:	930a      	str	r3, [sp, #40]	@ 0x28
 8008664:	2300      	movs	r3, #0
 8008666:	eba8 0807 	sub.w	r8, r8, r7
 800866a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800866c:	e7c4      	b.n	80085f8 <_dtoa_r+0x1b0>
 800866e:	2300      	movs	r3, #0
 8008670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008672:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008674:	2b00      	cmp	r3, #0
 8008676:	dc35      	bgt.n	80086e4 <_dtoa_r+0x29c>
 8008678:	2301      	movs	r3, #1
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	9307      	str	r3, [sp, #28]
 800867e:	461a      	mov	r2, r3
 8008680:	920e      	str	r2, [sp, #56]	@ 0x38
 8008682:	e00b      	b.n	800869c <_dtoa_r+0x254>
 8008684:	2301      	movs	r3, #1
 8008686:	e7f3      	b.n	8008670 <_dtoa_r+0x228>
 8008688:	2300      	movs	r3, #0
 800868a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800868c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800868e:	18fb      	adds	r3, r7, r3
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	3301      	adds	r3, #1
 8008694:	2b01      	cmp	r3, #1
 8008696:	9307      	str	r3, [sp, #28]
 8008698:	bfb8      	it	lt
 800869a:	2301      	movlt	r3, #1
 800869c:	f8db 001c 	ldr.w	r0, [fp, #28]
 80086a0:	2100      	movs	r1, #0
 80086a2:	2204      	movs	r2, #4
 80086a4:	f102 0514 	add.w	r5, r2, #20
 80086a8:	429d      	cmp	r5, r3
 80086aa:	d91f      	bls.n	80086ec <_dtoa_r+0x2a4>
 80086ac:	6041      	str	r1, [r0, #4]
 80086ae:	4658      	mov	r0, fp
 80086b0:	f000 fd8e 	bl	80091d0 <_Balloc>
 80086b4:	4682      	mov	sl, r0
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d13c      	bne.n	8008734 <_dtoa_r+0x2ec>
 80086ba:	4b1b      	ldr	r3, [pc, #108]	@ (8008728 <_dtoa_r+0x2e0>)
 80086bc:	4602      	mov	r2, r0
 80086be:	f240 11af 	movw	r1, #431	@ 0x1af
 80086c2:	e6d8      	b.n	8008476 <_dtoa_r+0x2e>
 80086c4:	2301      	movs	r3, #1
 80086c6:	e7e0      	b.n	800868a <_dtoa_r+0x242>
 80086c8:	2401      	movs	r4, #1
 80086ca:	2300      	movs	r3, #0
 80086cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ce:	940b      	str	r4, [sp, #44]	@ 0x2c
 80086d0:	f04f 33ff 	mov.w	r3, #4294967295
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	9307      	str	r3, [sp, #28]
 80086d8:	2200      	movs	r2, #0
 80086da:	2312      	movs	r3, #18
 80086dc:	e7d0      	b.n	8008680 <_dtoa_r+0x238>
 80086de:	2301      	movs	r3, #1
 80086e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086e2:	e7f5      	b.n	80086d0 <_dtoa_r+0x288>
 80086e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086e6:	9300      	str	r3, [sp, #0]
 80086e8:	9307      	str	r3, [sp, #28]
 80086ea:	e7d7      	b.n	800869c <_dtoa_r+0x254>
 80086ec:	3101      	adds	r1, #1
 80086ee:	0052      	lsls	r2, r2, #1
 80086f0:	e7d8      	b.n	80086a4 <_dtoa_r+0x25c>
 80086f2:	bf00      	nop
 80086f4:	f3af 8000 	nop.w
 80086f8:	636f4361 	.word	0x636f4361
 80086fc:	3fd287a7 	.word	0x3fd287a7
 8008700:	8b60c8b3 	.word	0x8b60c8b3
 8008704:	3fc68a28 	.word	0x3fc68a28
 8008708:	509f79fb 	.word	0x509f79fb
 800870c:	3fd34413 	.word	0x3fd34413
 8008710:	0800b84d 	.word	0x0800b84d
 8008714:	0800b864 	.word	0x0800b864
 8008718:	7ff00000 	.word	0x7ff00000
 800871c:	0800b81d 	.word	0x0800b81d
 8008720:	3ff80000 	.word	0x3ff80000
 8008724:	0800b960 	.word	0x0800b960
 8008728:	0800b8bc 	.word	0x0800b8bc
 800872c:	0800b849 	.word	0x0800b849
 8008730:	0800b81c 	.word	0x0800b81c
 8008734:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008738:	6018      	str	r0, [r3, #0]
 800873a:	9b07      	ldr	r3, [sp, #28]
 800873c:	2b0e      	cmp	r3, #14
 800873e:	f200 80a4 	bhi.w	800888a <_dtoa_r+0x442>
 8008742:	2c00      	cmp	r4, #0
 8008744:	f000 80a1 	beq.w	800888a <_dtoa_r+0x442>
 8008748:	2f00      	cmp	r7, #0
 800874a:	dd33      	ble.n	80087b4 <_dtoa_r+0x36c>
 800874c:	4bad      	ldr	r3, [pc, #692]	@ (8008a04 <_dtoa_r+0x5bc>)
 800874e:	f007 020f 	and.w	r2, r7, #15
 8008752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008756:	ed93 7b00 	vldr	d7, [r3]
 800875a:	05f8      	lsls	r0, r7, #23
 800875c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008760:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008764:	d516      	bpl.n	8008794 <_dtoa_r+0x34c>
 8008766:	4ba8      	ldr	r3, [pc, #672]	@ (8008a08 <_dtoa_r+0x5c0>)
 8008768:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800876c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008770:	f7f8 f88c 	bl	800088c <__aeabi_ddiv>
 8008774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008778:	f004 040f 	and.w	r4, r4, #15
 800877c:	2603      	movs	r6, #3
 800877e:	4da2      	ldr	r5, [pc, #648]	@ (8008a08 <_dtoa_r+0x5c0>)
 8008780:	b954      	cbnz	r4, 8008798 <_dtoa_r+0x350>
 8008782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800878a:	f7f8 f87f 	bl	800088c <__aeabi_ddiv>
 800878e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008792:	e028      	b.n	80087e6 <_dtoa_r+0x39e>
 8008794:	2602      	movs	r6, #2
 8008796:	e7f2      	b.n	800877e <_dtoa_r+0x336>
 8008798:	07e1      	lsls	r1, r4, #31
 800879a:	d508      	bpl.n	80087ae <_dtoa_r+0x366>
 800879c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087a4:	f7f7 ff48 	bl	8000638 <__aeabi_dmul>
 80087a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087ac:	3601      	adds	r6, #1
 80087ae:	1064      	asrs	r4, r4, #1
 80087b0:	3508      	adds	r5, #8
 80087b2:	e7e5      	b.n	8008780 <_dtoa_r+0x338>
 80087b4:	f000 80d2 	beq.w	800895c <_dtoa_r+0x514>
 80087b8:	427c      	negs	r4, r7
 80087ba:	4b92      	ldr	r3, [pc, #584]	@ (8008a04 <_dtoa_r+0x5bc>)
 80087bc:	4d92      	ldr	r5, [pc, #584]	@ (8008a08 <_dtoa_r+0x5c0>)
 80087be:	f004 020f 	and.w	r2, r4, #15
 80087c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ca:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087ce:	f7f7 ff33 	bl	8000638 <__aeabi_dmul>
 80087d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087d6:	1124      	asrs	r4, r4, #4
 80087d8:	2300      	movs	r3, #0
 80087da:	2602      	movs	r6, #2
 80087dc:	2c00      	cmp	r4, #0
 80087de:	f040 80b2 	bne.w	8008946 <_dtoa_r+0x4fe>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1d3      	bne.n	800878e <_dtoa_r+0x346>
 80087e6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80087e8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80b7 	beq.w	8008960 <_dtoa_r+0x518>
 80087f2:	4b86      	ldr	r3, [pc, #536]	@ (8008a0c <_dtoa_r+0x5c4>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	4620      	mov	r0, r4
 80087f8:	4629      	mov	r1, r5
 80087fa:	f7f8 f98f 	bl	8000b1c <__aeabi_dcmplt>
 80087fe:	2800      	cmp	r0, #0
 8008800:	f000 80ae 	beq.w	8008960 <_dtoa_r+0x518>
 8008804:	9b07      	ldr	r3, [sp, #28]
 8008806:	2b00      	cmp	r3, #0
 8008808:	f000 80aa 	beq.w	8008960 <_dtoa_r+0x518>
 800880c:	9b00      	ldr	r3, [sp, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	dd37      	ble.n	8008882 <_dtoa_r+0x43a>
 8008812:	1e7b      	subs	r3, r7, #1
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	4620      	mov	r0, r4
 8008818:	4b7d      	ldr	r3, [pc, #500]	@ (8008a10 <_dtoa_r+0x5c8>)
 800881a:	2200      	movs	r2, #0
 800881c:	4629      	mov	r1, r5
 800881e:	f7f7 ff0b 	bl	8000638 <__aeabi_dmul>
 8008822:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008826:	9c00      	ldr	r4, [sp, #0]
 8008828:	3601      	adds	r6, #1
 800882a:	4630      	mov	r0, r6
 800882c:	f7f7 fe9a 	bl	8000564 <__aeabi_i2d>
 8008830:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008834:	f7f7 ff00 	bl	8000638 <__aeabi_dmul>
 8008838:	4b76      	ldr	r3, [pc, #472]	@ (8008a14 <_dtoa_r+0x5cc>)
 800883a:	2200      	movs	r2, #0
 800883c:	f7f7 fd46 	bl	80002cc <__adddf3>
 8008840:	4605      	mov	r5, r0
 8008842:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008846:	2c00      	cmp	r4, #0
 8008848:	f040 808d 	bne.w	8008966 <_dtoa_r+0x51e>
 800884c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008850:	4b71      	ldr	r3, [pc, #452]	@ (8008a18 <_dtoa_r+0x5d0>)
 8008852:	2200      	movs	r2, #0
 8008854:	f7f7 fd38 	bl	80002c8 <__aeabi_dsub>
 8008858:	4602      	mov	r2, r0
 800885a:	460b      	mov	r3, r1
 800885c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008860:	462a      	mov	r2, r5
 8008862:	4633      	mov	r3, r6
 8008864:	f7f8 f978 	bl	8000b58 <__aeabi_dcmpgt>
 8008868:	2800      	cmp	r0, #0
 800886a:	f040 828b 	bne.w	8008d84 <_dtoa_r+0x93c>
 800886e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008872:	462a      	mov	r2, r5
 8008874:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008878:	f7f8 f950 	bl	8000b1c <__aeabi_dcmplt>
 800887c:	2800      	cmp	r0, #0
 800887e:	f040 8128 	bne.w	8008ad2 <_dtoa_r+0x68a>
 8008882:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008886:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800888a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800888c:	2b00      	cmp	r3, #0
 800888e:	f2c0 815a 	blt.w	8008b46 <_dtoa_r+0x6fe>
 8008892:	2f0e      	cmp	r7, #14
 8008894:	f300 8157 	bgt.w	8008b46 <_dtoa_r+0x6fe>
 8008898:	4b5a      	ldr	r3, [pc, #360]	@ (8008a04 <_dtoa_r+0x5bc>)
 800889a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800889e:	ed93 7b00 	vldr	d7, [r3]
 80088a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	ed8d 7b00 	vstr	d7, [sp]
 80088aa:	da03      	bge.n	80088b4 <_dtoa_r+0x46c>
 80088ac:	9b07      	ldr	r3, [sp, #28]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f340 8101 	ble.w	8008ab6 <_dtoa_r+0x66e>
 80088b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088b8:	4656      	mov	r6, sl
 80088ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088be:	4620      	mov	r0, r4
 80088c0:	4629      	mov	r1, r5
 80088c2:	f7f7 ffe3 	bl	800088c <__aeabi_ddiv>
 80088c6:	f7f8 f967 	bl	8000b98 <__aeabi_d2iz>
 80088ca:	4680      	mov	r8, r0
 80088cc:	f7f7 fe4a 	bl	8000564 <__aeabi_i2d>
 80088d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088d4:	f7f7 feb0 	bl	8000638 <__aeabi_dmul>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4620      	mov	r0, r4
 80088de:	4629      	mov	r1, r5
 80088e0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80088e4:	f7f7 fcf0 	bl	80002c8 <__aeabi_dsub>
 80088e8:	f806 4b01 	strb.w	r4, [r6], #1
 80088ec:	9d07      	ldr	r5, [sp, #28]
 80088ee:	eba6 040a 	sub.w	r4, r6, sl
 80088f2:	42a5      	cmp	r5, r4
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	f040 8117 	bne.w	8008b2a <_dtoa_r+0x6e2>
 80088fc:	f7f7 fce6 	bl	80002cc <__adddf3>
 8008900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008904:	4604      	mov	r4, r0
 8008906:	460d      	mov	r5, r1
 8008908:	f7f8 f926 	bl	8000b58 <__aeabi_dcmpgt>
 800890c:	2800      	cmp	r0, #0
 800890e:	f040 80f9 	bne.w	8008b04 <_dtoa_r+0x6bc>
 8008912:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008916:	4620      	mov	r0, r4
 8008918:	4629      	mov	r1, r5
 800891a:	f7f8 f8f5 	bl	8000b08 <__aeabi_dcmpeq>
 800891e:	b118      	cbz	r0, 8008928 <_dtoa_r+0x4e0>
 8008920:	f018 0f01 	tst.w	r8, #1
 8008924:	f040 80ee 	bne.w	8008b04 <_dtoa_r+0x6bc>
 8008928:	4649      	mov	r1, r9
 800892a:	4658      	mov	r0, fp
 800892c:	f000 fc90 	bl	8009250 <_Bfree>
 8008930:	2300      	movs	r3, #0
 8008932:	7033      	strb	r3, [r6, #0]
 8008934:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008936:	3701      	adds	r7, #1
 8008938:	601f      	str	r7, [r3, #0]
 800893a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800893c:	2b00      	cmp	r3, #0
 800893e:	f000 831d 	beq.w	8008f7c <_dtoa_r+0xb34>
 8008942:	601e      	str	r6, [r3, #0]
 8008944:	e31a      	b.n	8008f7c <_dtoa_r+0xb34>
 8008946:	07e2      	lsls	r2, r4, #31
 8008948:	d505      	bpl.n	8008956 <_dtoa_r+0x50e>
 800894a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800894e:	f7f7 fe73 	bl	8000638 <__aeabi_dmul>
 8008952:	3601      	adds	r6, #1
 8008954:	2301      	movs	r3, #1
 8008956:	1064      	asrs	r4, r4, #1
 8008958:	3508      	adds	r5, #8
 800895a:	e73f      	b.n	80087dc <_dtoa_r+0x394>
 800895c:	2602      	movs	r6, #2
 800895e:	e742      	b.n	80087e6 <_dtoa_r+0x39e>
 8008960:	9c07      	ldr	r4, [sp, #28]
 8008962:	9704      	str	r7, [sp, #16]
 8008964:	e761      	b.n	800882a <_dtoa_r+0x3e2>
 8008966:	4b27      	ldr	r3, [pc, #156]	@ (8008a04 <_dtoa_r+0x5bc>)
 8008968:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800896a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800896e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008972:	4454      	add	r4, sl
 8008974:	2900      	cmp	r1, #0
 8008976:	d053      	beq.n	8008a20 <_dtoa_r+0x5d8>
 8008978:	4928      	ldr	r1, [pc, #160]	@ (8008a1c <_dtoa_r+0x5d4>)
 800897a:	2000      	movs	r0, #0
 800897c:	f7f7 ff86 	bl	800088c <__aeabi_ddiv>
 8008980:	4633      	mov	r3, r6
 8008982:	462a      	mov	r2, r5
 8008984:	f7f7 fca0 	bl	80002c8 <__aeabi_dsub>
 8008988:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800898c:	4656      	mov	r6, sl
 800898e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008992:	f7f8 f901 	bl	8000b98 <__aeabi_d2iz>
 8008996:	4605      	mov	r5, r0
 8008998:	f7f7 fde4 	bl	8000564 <__aeabi_i2d>
 800899c:	4602      	mov	r2, r0
 800899e:	460b      	mov	r3, r1
 80089a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a4:	f7f7 fc90 	bl	80002c8 <__aeabi_dsub>
 80089a8:	3530      	adds	r5, #48	@ 0x30
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089b2:	f806 5b01 	strb.w	r5, [r6], #1
 80089b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089ba:	f7f8 f8af 	bl	8000b1c <__aeabi_dcmplt>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d171      	bne.n	8008aa6 <_dtoa_r+0x65e>
 80089c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089c6:	4911      	ldr	r1, [pc, #68]	@ (8008a0c <_dtoa_r+0x5c4>)
 80089c8:	2000      	movs	r0, #0
 80089ca:	f7f7 fc7d 	bl	80002c8 <__aeabi_dsub>
 80089ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089d2:	f7f8 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	f040 8095 	bne.w	8008b06 <_dtoa_r+0x6be>
 80089dc:	42a6      	cmp	r6, r4
 80089de:	f43f af50 	beq.w	8008882 <_dtoa_r+0x43a>
 80089e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a10 <_dtoa_r+0x5c8>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	f7f7 fe25 	bl	8000638 <__aeabi_dmul>
 80089ee:	4b08      	ldr	r3, [pc, #32]	@ (8008a10 <_dtoa_r+0x5c8>)
 80089f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089f4:	2200      	movs	r2, #0
 80089f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089fa:	f7f7 fe1d 	bl	8000638 <__aeabi_dmul>
 80089fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a02:	e7c4      	b.n	800898e <_dtoa_r+0x546>
 8008a04:	0800b960 	.word	0x0800b960
 8008a08:	0800b938 	.word	0x0800b938
 8008a0c:	3ff00000 	.word	0x3ff00000
 8008a10:	40240000 	.word	0x40240000
 8008a14:	401c0000 	.word	0x401c0000
 8008a18:	40140000 	.word	0x40140000
 8008a1c:	3fe00000 	.word	0x3fe00000
 8008a20:	4631      	mov	r1, r6
 8008a22:	4628      	mov	r0, r5
 8008a24:	f7f7 fe08 	bl	8000638 <__aeabi_dmul>
 8008a28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a2c:	9415      	str	r4, [sp, #84]	@ 0x54
 8008a2e:	4656      	mov	r6, sl
 8008a30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a34:	f7f8 f8b0 	bl	8000b98 <__aeabi_d2iz>
 8008a38:	4605      	mov	r5, r0
 8008a3a:	f7f7 fd93 	bl	8000564 <__aeabi_i2d>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a46:	f7f7 fc3f 	bl	80002c8 <__aeabi_dsub>
 8008a4a:	3530      	adds	r5, #48	@ 0x30
 8008a4c:	f806 5b01 	strb.w	r5, [r6], #1
 8008a50:	4602      	mov	r2, r0
 8008a52:	460b      	mov	r3, r1
 8008a54:	42a6      	cmp	r6, r4
 8008a56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a5a:	f04f 0200 	mov.w	r2, #0
 8008a5e:	d124      	bne.n	8008aaa <_dtoa_r+0x662>
 8008a60:	4bac      	ldr	r3, [pc, #688]	@ (8008d14 <_dtoa_r+0x8cc>)
 8008a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a66:	f7f7 fc31 	bl	80002cc <__adddf3>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	460b      	mov	r3, r1
 8008a6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a72:	f7f8 f871 	bl	8000b58 <__aeabi_dcmpgt>
 8008a76:	2800      	cmp	r0, #0
 8008a78:	d145      	bne.n	8008b06 <_dtoa_r+0x6be>
 8008a7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a7e:	49a5      	ldr	r1, [pc, #660]	@ (8008d14 <_dtoa_r+0x8cc>)
 8008a80:	2000      	movs	r0, #0
 8008a82:	f7f7 fc21 	bl	80002c8 <__aeabi_dsub>
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a8e:	f7f8 f845 	bl	8000b1c <__aeabi_dcmplt>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f43f aef5 	beq.w	8008882 <_dtoa_r+0x43a>
 8008a98:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008a9a:	1e73      	subs	r3, r6, #1
 8008a9c:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a9e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008aa2:	2b30      	cmp	r3, #48	@ 0x30
 8008aa4:	d0f8      	beq.n	8008a98 <_dtoa_r+0x650>
 8008aa6:	9f04      	ldr	r7, [sp, #16]
 8008aa8:	e73e      	b.n	8008928 <_dtoa_r+0x4e0>
 8008aaa:	4b9b      	ldr	r3, [pc, #620]	@ (8008d18 <_dtoa_r+0x8d0>)
 8008aac:	f7f7 fdc4 	bl	8000638 <__aeabi_dmul>
 8008ab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ab4:	e7bc      	b.n	8008a30 <_dtoa_r+0x5e8>
 8008ab6:	d10c      	bne.n	8008ad2 <_dtoa_r+0x68a>
 8008ab8:	4b98      	ldr	r3, [pc, #608]	@ (8008d1c <_dtoa_r+0x8d4>)
 8008aba:	2200      	movs	r2, #0
 8008abc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ac0:	f7f7 fdba 	bl	8000638 <__aeabi_dmul>
 8008ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ac8:	f7f8 f83c 	bl	8000b44 <__aeabi_dcmpge>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	f000 8157 	beq.w	8008d80 <_dtoa_r+0x938>
 8008ad2:	2400      	movs	r4, #0
 8008ad4:	4625      	mov	r5, r4
 8008ad6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	9304      	str	r3, [sp, #16]
 8008adc:	4656      	mov	r6, sl
 8008ade:	2700      	movs	r7, #0
 8008ae0:	4621      	mov	r1, r4
 8008ae2:	4658      	mov	r0, fp
 8008ae4:	f000 fbb4 	bl	8009250 <_Bfree>
 8008ae8:	2d00      	cmp	r5, #0
 8008aea:	d0dc      	beq.n	8008aa6 <_dtoa_r+0x65e>
 8008aec:	b12f      	cbz	r7, 8008afa <_dtoa_r+0x6b2>
 8008aee:	42af      	cmp	r7, r5
 8008af0:	d003      	beq.n	8008afa <_dtoa_r+0x6b2>
 8008af2:	4639      	mov	r1, r7
 8008af4:	4658      	mov	r0, fp
 8008af6:	f000 fbab 	bl	8009250 <_Bfree>
 8008afa:	4629      	mov	r1, r5
 8008afc:	4658      	mov	r0, fp
 8008afe:	f000 fba7 	bl	8009250 <_Bfree>
 8008b02:	e7d0      	b.n	8008aa6 <_dtoa_r+0x65e>
 8008b04:	9704      	str	r7, [sp, #16]
 8008b06:	4633      	mov	r3, r6
 8008b08:	461e      	mov	r6, r3
 8008b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b0e:	2a39      	cmp	r2, #57	@ 0x39
 8008b10:	d107      	bne.n	8008b22 <_dtoa_r+0x6da>
 8008b12:	459a      	cmp	sl, r3
 8008b14:	d1f8      	bne.n	8008b08 <_dtoa_r+0x6c0>
 8008b16:	9a04      	ldr	r2, [sp, #16]
 8008b18:	3201      	adds	r2, #1
 8008b1a:	9204      	str	r2, [sp, #16]
 8008b1c:	2230      	movs	r2, #48	@ 0x30
 8008b1e:	f88a 2000 	strb.w	r2, [sl]
 8008b22:	781a      	ldrb	r2, [r3, #0]
 8008b24:	3201      	adds	r2, #1
 8008b26:	701a      	strb	r2, [r3, #0]
 8008b28:	e7bd      	b.n	8008aa6 <_dtoa_r+0x65e>
 8008b2a:	4b7b      	ldr	r3, [pc, #492]	@ (8008d18 <_dtoa_r+0x8d0>)
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f7f7 fd83 	bl	8000638 <__aeabi_dmul>
 8008b32:	2200      	movs	r2, #0
 8008b34:	2300      	movs	r3, #0
 8008b36:	4604      	mov	r4, r0
 8008b38:	460d      	mov	r5, r1
 8008b3a:	f7f7 ffe5 	bl	8000b08 <__aeabi_dcmpeq>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	f43f aebb 	beq.w	80088ba <_dtoa_r+0x472>
 8008b44:	e6f0      	b.n	8008928 <_dtoa_r+0x4e0>
 8008b46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b48:	2a00      	cmp	r2, #0
 8008b4a:	f000 80db 	beq.w	8008d04 <_dtoa_r+0x8bc>
 8008b4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b50:	2a01      	cmp	r2, #1
 8008b52:	f300 80bf 	bgt.w	8008cd4 <_dtoa_r+0x88c>
 8008b56:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008b58:	2a00      	cmp	r2, #0
 8008b5a:	f000 80b7 	beq.w	8008ccc <_dtoa_r+0x884>
 8008b5e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008b62:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b64:	4646      	mov	r6, r8
 8008b66:	9a08      	ldr	r2, [sp, #32]
 8008b68:	2101      	movs	r1, #1
 8008b6a:	441a      	add	r2, r3
 8008b6c:	4658      	mov	r0, fp
 8008b6e:	4498      	add	r8, r3
 8008b70:	9208      	str	r2, [sp, #32]
 8008b72:	f000 fc21 	bl	80093b8 <__i2b>
 8008b76:	4605      	mov	r5, r0
 8008b78:	b15e      	cbz	r6, 8008b92 <_dtoa_r+0x74a>
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	dd08      	ble.n	8008b92 <_dtoa_r+0x74a>
 8008b80:	42b3      	cmp	r3, r6
 8008b82:	9a08      	ldr	r2, [sp, #32]
 8008b84:	bfa8      	it	ge
 8008b86:	4633      	movge	r3, r6
 8008b88:	eba8 0803 	sub.w	r8, r8, r3
 8008b8c:	1af6      	subs	r6, r6, r3
 8008b8e:	1ad3      	subs	r3, r2, r3
 8008b90:	9308      	str	r3, [sp, #32]
 8008b92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b94:	b1f3      	cbz	r3, 8008bd4 <_dtoa_r+0x78c>
 8008b96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 80b7 	beq.w	8008d0c <_dtoa_r+0x8c4>
 8008b9e:	b18c      	cbz	r4, 8008bc4 <_dtoa_r+0x77c>
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	4622      	mov	r2, r4
 8008ba4:	4658      	mov	r0, fp
 8008ba6:	f000 fcc7 	bl	8009538 <__pow5mult>
 8008baa:	464a      	mov	r2, r9
 8008bac:	4601      	mov	r1, r0
 8008bae:	4605      	mov	r5, r0
 8008bb0:	4658      	mov	r0, fp
 8008bb2:	f000 fc17 	bl	80093e4 <__multiply>
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	9004      	str	r0, [sp, #16]
 8008bba:	4658      	mov	r0, fp
 8008bbc:	f000 fb48 	bl	8009250 <_Bfree>
 8008bc0:	9b04      	ldr	r3, [sp, #16]
 8008bc2:	4699      	mov	r9, r3
 8008bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bc6:	1b1a      	subs	r2, r3, r4
 8008bc8:	d004      	beq.n	8008bd4 <_dtoa_r+0x78c>
 8008bca:	4649      	mov	r1, r9
 8008bcc:	4658      	mov	r0, fp
 8008bce:	f000 fcb3 	bl	8009538 <__pow5mult>
 8008bd2:	4681      	mov	r9, r0
 8008bd4:	2101      	movs	r1, #1
 8008bd6:	4658      	mov	r0, fp
 8008bd8:	f000 fbee 	bl	80093b8 <__i2b>
 8008bdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bde:	4604      	mov	r4, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 81cf 	beq.w	8008f84 <_dtoa_r+0xb3c>
 8008be6:	461a      	mov	r2, r3
 8008be8:	4601      	mov	r1, r0
 8008bea:	4658      	mov	r0, fp
 8008bec:	f000 fca4 	bl	8009538 <__pow5mult>
 8008bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	f300 8095 	bgt.w	8008d24 <_dtoa_r+0x8dc>
 8008bfa:	9b02      	ldr	r3, [sp, #8]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	f040 8087 	bne.w	8008d10 <_dtoa_r+0x8c8>
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f040 8089 	bne.w	8008d20 <_dtoa_r+0x8d8>
 8008c0e:	9b03      	ldr	r3, [sp, #12]
 8008c10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c14:	0d1b      	lsrs	r3, r3, #20
 8008c16:	051b      	lsls	r3, r3, #20
 8008c18:	b12b      	cbz	r3, 8008c26 <_dtoa_r+0x7de>
 8008c1a:	9b08      	ldr	r3, [sp, #32]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	9308      	str	r3, [sp, #32]
 8008c20:	f108 0801 	add.w	r8, r8, #1
 8008c24:	2301      	movs	r3, #1
 8008c26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f000 81b0 	beq.w	8008f90 <_dtoa_r+0xb48>
 8008c30:	6923      	ldr	r3, [r4, #16]
 8008c32:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c36:	6918      	ldr	r0, [r3, #16]
 8008c38:	f000 fb72 	bl	8009320 <__hi0bits>
 8008c3c:	f1c0 0020 	rsb	r0, r0, #32
 8008c40:	9b08      	ldr	r3, [sp, #32]
 8008c42:	4418      	add	r0, r3
 8008c44:	f010 001f 	ands.w	r0, r0, #31
 8008c48:	d077      	beq.n	8008d3a <_dtoa_r+0x8f2>
 8008c4a:	f1c0 0320 	rsb	r3, r0, #32
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	dd6b      	ble.n	8008d2a <_dtoa_r+0x8e2>
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	f1c0 001c 	rsb	r0, r0, #28
 8008c58:	4403      	add	r3, r0
 8008c5a:	4480      	add	r8, r0
 8008c5c:	4406      	add	r6, r0
 8008c5e:	9308      	str	r3, [sp, #32]
 8008c60:	f1b8 0f00 	cmp.w	r8, #0
 8008c64:	dd05      	ble.n	8008c72 <_dtoa_r+0x82a>
 8008c66:	4649      	mov	r1, r9
 8008c68:	4642      	mov	r2, r8
 8008c6a:	4658      	mov	r0, fp
 8008c6c:	f000 fcbe 	bl	80095ec <__lshift>
 8008c70:	4681      	mov	r9, r0
 8008c72:	9b08      	ldr	r3, [sp, #32]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	dd05      	ble.n	8008c84 <_dtoa_r+0x83c>
 8008c78:	4621      	mov	r1, r4
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4658      	mov	r0, fp
 8008c7e:	f000 fcb5 	bl	80095ec <__lshift>
 8008c82:	4604      	mov	r4, r0
 8008c84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d059      	beq.n	8008d3e <_dtoa_r+0x8f6>
 8008c8a:	4621      	mov	r1, r4
 8008c8c:	4648      	mov	r0, r9
 8008c8e:	f000 fd19 	bl	80096c4 <__mcmp>
 8008c92:	2800      	cmp	r0, #0
 8008c94:	da53      	bge.n	8008d3e <_dtoa_r+0x8f6>
 8008c96:	1e7b      	subs	r3, r7, #1
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	4649      	mov	r1, r9
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	220a      	movs	r2, #10
 8008ca0:	4658      	mov	r0, fp
 8008ca2:	f000 faf7 	bl	8009294 <__multadd>
 8008ca6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca8:	4681      	mov	r9, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f000 8172 	beq.w	8008f94 <_dtoa_r+0xb4c>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	220a      	movs	r2, #10
 8008cb6:	4658      	mov	r0, fp
 8008cb8:	f000 faec 	bl	8009294 <__multadd>
 8008cbc:	9b00      	ldr	r3, [sp, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	4605      	mov	r5, r0
 8008cc2:	dc67      	bgt.n	8008d94 <_dtoa_r+0x94c>
 8008cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	dc41      	bgt.n	8008d4e <_dtoa_r+0x906>
 8008cca:	e063      	b.n	8008d94 <_dtoa_r+0x94c>
 8008ccc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008cce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008cd2:	e746      	b.n	8008b62 <_dtoa_r+0x71a>
 8008cd4:	9b07      	ldr	r3, [sp, #28]
 8008cd6:	1e5c      	subs	r4, r3, #1
 8008cd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cda:	42a3      	cmp	r3, r4
 8008cdc:	bfbf      	itttt	lt
 8008cde:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ce0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008ce2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008ce4:	1ae3      	sublt	r3, r4, r3
 8008ce6:	bfb4      	ite	lt
 8008ce8:	18d2      	addlt	r2, r2, r3
 8008cea:	1b1c      	subge	r4, r3, r4
 8008cec:	9b07      	ldr	r3, [sp, #28]
 8008cee:	bfbc      	itt	lt
 8008cf0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008cf2:	2400      	movlt	r4, #0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	bfb5      	itete	lt
 8008cf8:	eba8 0603 	sublt.w	r6, r8, r3
 8008cfc:	9b07      	ldrge	r3, [sp, #28]
 8008cfe:	2300      	movlt	r3, #0
 8008d00:	4646      	movge	r6, r8
 8008d02:	e730      	b.n	8008b66 <_dtoa_r+0x71e>
 8008d04:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d06:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008d08:	4646      	mov	r6, r8
 8008d0a:	e735      	b.n	8008b78 <_dtoa_r+0x730>
 8008d0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d0e:	e75c      	b.n	8008bca <_dtoa_r+0x782>
 8008d10:	2300      	movs	r3, #0
 8008d12:	e788      	b.n	8008c26 <_dtoa_r+0x7de>
 8008d14:	3fe00000 	.word	0x3fe00000
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	40140000 	.word	0x40140000
 8008d20:	9b02      	ldr	r3, [sp, #8]
 8008d22:	e780      	b.n	8008c26 <_dtoa_r+0x7de>
 8008d24:	2300      	movs	r3, #0
 8008d26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d28:	e782      	b.n	8008c30 <_dtoa_r+0x7e8>
 8008d2a:	d099      	beq.n	8008c60 <_dtoa_r+0x818>
 8008d2c:	9a08      	ldr	r2, [sp, #32]
 8008d2e:	331c      	adds	r3, #28
 8008d30:	441a      	add	r2, r3
 8008d32:	4498      	add	r8, r3
 8008d34:	441e      	add	r6, r3
 8008d36:	9208      	str	r2, [sp, #32]
 8008d38:	e792      	b.n	8008c60 <_dtoa_r+0x818>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	e7f6      	b.n	8008d2c <_dtoa_r+0x8e4>
 8008d3e:	9b07      	ldr	r3, [sp, #28]
 8008d40:	9704      	str	r7, [sp, #16]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	dc20      	bgt.n	8008d88 <_dtoa_r+0x940>
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	dd1e      	ble.n	8008d8c <_dtoa_r+0x944>
 8008d4e:	9b00      	ldr	r3, [sp, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f47f aec0 	bne.w	8008ad6 <_dtoa_r+0x68e>
 8008d56:	4621      	mov	r1, r4
 8008d58:	2205      	movs	r2, #5
 8008d5a:	4658      	mov	r0, fp
 8008d5c:	f000 fa9a 	bl	8009294 <__multadd>
 8008d60:	4601      	mov	r1, r0
 8008d62:	4604      	mov	r4, r0
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 fcad 	bl	80096c4 <__mcmp>
 8008d6a:	2800      	cmp	r0, #0
 8008d6c:	f77f aeb3 	ble.w	8008ad6 <_dtoa_r+0x68e>
 8008d70:	4656      	mov	r6, sl
 8008d72:	2331      	movs	r3, #49	@ 0x31
 8008d74:	f806 3b01 	strb.w	r3, [r6], #1
 8008d78:	9b04      	ldr	r3, [sp, #16]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	9304      	str	r3, [sp, #16]
 8008d7e:	e6ae      	b.n	8008ade <_dtoa_r+0x696>
 8008d80:	9c07      	ldr	r4, [sp, #28]
 8008d82:	9704      	str	r7, [sp, #16]
 8008d84:	4625      	mov	r5, r4
 8008d86:	e7f3      	b.n	8008d70 <_dtoa_r+0x928>
 8008d88:	9b07      	ldr	r3, [sp, #28]
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 8104 	beq.w	8008f9c <_dtoa_r+0xb54>
 8008d94:	2e00      	cmp	r6, #0
 8008d96:	dd05      	ble.n	8008da4 <_dtoa_r+0x95c>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4632      	mov	r2, r6
 8008d9c:	4658      	mov	r0, fp
 8008d9e:	f000 fc25 	bl	80095ec <__lshift>
 8008da2:	4605      	mov	r5, r0
 8008da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d05a      	beq.n	8008e60 <_dtoa_r+0xa18>
 8008daa:	6869      	ldr	r1, [r5, #4]
 8008dac:	4658      	mov	r0, fp
 8008dae:	f000 fa0f 	bl	80091d0 <_Balloc>
 8008db2:	4606      	mov	r6, r0
 8008db4:	b928      	cbnz	r0, 8008dc2 <_dtoa_r+0x97a>
 8008db6:	4b84      	ldr	r3, [pc, #528]	@ (8008fc8 <_dtoa_r+0xb80>)
 8008db8:	4602      	mov	r2, r0
 8008dba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008dbe:	f7ff bb5a 	b.w	8008476 <_dtoa_r+0x2e>
 8008dc2:	692a      	ldr	r2, [r5, #16]
 8008dc4:	3202      	adds	r2, #2
 8008dc6:	0092      	lsls	r2, r2, #2
 8008dc8:	f105 010c 	add.w	r1, r5, #12
 8008dcc:	300c      	adds	r0, #12
 8008dce:	f001 f803 	bl	8009dd8 <memcpy>
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	4631      	mov	r1, r6
 8008dd6:	4658      	mov	r0, fp
 8008dd8:	f000 fc08 	bl	80095ec <__lshift>
 8008ddc:	f10a 0301 	add.w	r3, sl, #1
 8008de0:	9307      	str	r3, [sp, #28]
 8008de2:	9b00      	ldr	r3, [sp, #0]
 8008de4:	4453      	add	r3, sl
 8008de6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	462f      	mov	r7, r5
 8008df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008df2:	4605      	mov	r5, r0
 8008df4:	9b07      	ldr	r3, [sp, #28]
 8008df6:	4621      	mov	r1, r4
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	4648      	mov	r0, r9
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	f7ff fa9a 	bl	8008336 <quorem>
 8008e02:	4639      	mov	r1, r7
 8008e04:	9002      	str	r0, [sp, #8]
 8008e06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e0a:	4648      	mov	r0, r9
 8008e0c:	f000 fc5a 	bl	80096c4 <__mcmp>
 8008e10:	462a      	mov	r2, r5
 8008e12:	9008      	str	r0, [sp, #32]
 8008e14:	4621      	mov	r1, r4
 8008e16:	4658      	mov	r0, fp
 8008e18:	f000 fc70 	bl	80096fc <__mdiff>
 8008e1c:	68c2      	ldr	r2, [r0, #12]
 8008e1e:	4606      	mov	r6, r0
 8008e20:	bb02      	cbnz	r2, 8008e64 <_dtoa_r+0xa1c>
 8008e22:	4601      	mov	r1, r0
 8008e24:	4648      	mov	r0, r9
 8008e26:	f000 fc4d 	bl	80096c4 <__mcmp>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4658      	mov	r0, fp
 8008e30:	920e      	str	r2, [sp, #56]	@ 0x38
 8008e32:	f000 fa0d 	bl	8009250 <_Bfree>
 8008e36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e3a:	9e07      	ldr	r6, [sp, #28]
 8008e3c:	ea43 0102 	orr.w	r1, r3, r2
 8008e40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e42:	4319      	orrs	r1, r3
 8008e44:	d110      	bne.n	8008e68 <_dtoa_r+0xa20>
 8008e46:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e4a:	d029      	beq.n	8008ea0 <_dtoa_r+0xa58>
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	dd02      	ble.n	8008e58 <_dtoa_r+0xa10>
 8008e52:	9b02      	ldr	r3, [sp, #8]
 8008e54:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008e58:	9b00      	ldr	r3, [sp, #0]
 8008e5a:	f883 8000 	strb.w	r8, [r3]
 8008e5e:	e63f      	b.n	8008ae0 <_dtoa_r+0x698>
 8008e60:	4628      	mov	r0, r5
 8008e62:	e7bb      	b.n	8008ddc <_dtoa_r+0x994>
 8008e64:	2201      	movs	r2, #1
 8008e66:	e7e1      	b.n	8008e2c <_dtoa_r+0x9e4>
 8008e68:	9b08      	ldr	r3, [sp, #32]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	db04      	blt.n	8008e78 <_dtoa_r+0xa30>
 8008e6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e70:	430b      	orrs	r3, r1
 8008e72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e74:	430b      	orrs	r3, r1
 8008e76:	d120      	bne.n	8008eba <_dtoa_r+0xa72>
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	dded      	ble.n	8008e58 <_dtoa_r+0xa10>
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	2201      	movs	r2, #1
 8008e80:	4658      	mov	r0, fp
 8008e82:	f000 fbb3 	bl	80095ec <__lshift>
 8008e86:	4621      	mov	r1, r4
 8008e88:	4681      	mov	r9, r0
 8008e8a:	f000 fc1b 	bl	80096c4 <__mcmp>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	dc03      	bgt.n	8008e9a <_dtoa_r+0xa52>
 8008e92:	d1e1      	bne.n	8008e58 <_dtoa_r+0xa10>
 8008e94:	f018 0f01 	tst.w	r8, #1
 8008e98:	d0de      	beq.n	8008e58 <_dtoa_r+0xa10>
 8008e9a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e9e:	d1d8      	bne.n	8008e52 <_dtoa_r+0xa0a>
 8008ea0:	9a00      	ldr	r2, [sp, #0]
 8008ea2:	2339      	movs	r3, #57	@ 0x39
 8008ea4:	7013      	strb	r3, [r2, #0]
 8008ea6:	4633      	mov	r3, r6
 8008ea8:	461e      	mov	r6, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008eb0:	2a39      	cmp	r2, #57	@ 0x39
 8008eb2:	d052      	beq.n	8008f5a <_dtoa_r+0xb12>
 8008eb4:	3201      	adds	r2, #1
 8008eb6:	701a      	strb	r2, [r3, #0]
 8008eb8:	e612      	b.n	8008ae0 <_dtoa_r+0x698>
 8008eba:	2a00      	cmp	r2, #0
 8008ebc:	dd07      	ble.n	8008ece <_dtoa_r+0xa86>
 8008ebe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ec2:	d0ed      	beq.n	8008ea0 <_dtoa_r+0xa58>
 8008ec4:	9a00      	ldr	r2, [sp, #0]
 8008ec6:	f108 0301 	add.w	r3, r8, #1
 8008eca:	7013      	strb	r3, [r2, #0]
 8008ecc:	e608      	b.n	8008ae0 <_dtoa_r+0x698>
 8008ece:	9b07      	ldr	r3, [sp, #28]
 8008ed0:	9a07      	ldr	r2, [sp, #28]
 8008ed2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ed6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d028      	beq.n	8008f2e <_dtoa_r+0xae6>
 8008edc:	4649      	mov	r1, r9
 8008ede:	2300      	movs	r3, #0
 8008ee0:	220a      	movs	r2, #10
 8008ee2:	4658      	mov	r0, fp
 8008ee4:	f000 f9d6 	bl	8009294 <__multadd>
 8008ee8:	42af      	cmp	r7, r5
 8008eea:	4681      	mov	r9, r0
 8008eec:	f04f 0300 	mov.w	r3, #0
 8008ef0:	f04f 020a 	mov.w	r2, #10
 8008ef4:	4639      	mov	r1, r7
 8008ef6:	4658      	mov	r0, fp
 8008ef8:	d107      	bne.n	8008f0a <_dtoa_r+0xac2>
 8008efa:	f000 f9cb 	bl	8009294 <__multadd>
 8008efe:	4607      	mov	r7, r0
 8008f00:	4605      	mov	r5, r0
 8008f02:	9b07      	ldr	r3, [sp, #28]
 8008f04:	3301      	adds	r3, #1
 8008f06:	9307      	str	r3, [sp, #28]
 8008f08:	e774      	b.n	8008df4 <_dtoa_r+0x9ac>
 8008f0a:	f000 f9c3 	bl	8009294 <__multadd>
 8008f0e:	4629      	mov	r1, r5
 8008f10:	4607      	mov	r7, r0
 8008f12:	2300      	movs	r3, #0
 8008f14:	220a      	movs	r2, #10
 8008f16:	4658      	mov	r0, fp
 8008f18:	f000 f9bc 	bl	8009294 <__multadd>
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	e7f0      	b.n	8008f02 <_dtoa_r+0xaba>
 8008f20:	9b00      	ldr	r3, [sp, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bfcc      	ite	gt
 8008f26:	461e      	movgt	r6, r3
 8008f28:	2601      	movle	r6, #1
 8008f2a:	4456      	add	r6, sl
 8008f2c:	2700      	movs	r7, #0
 8008f2e:	4649      	mov	r1, r9
 8008f30:	2201      	movs	r2, #1
 8008f32:	4658      	mov	r0, fp
 8008f34:	f000 fb5a 	bl	80095ec <__lshift>
 8008f38:	4621      	mov	r1, r4
 8008f3a:	4681      	mov	r9, r0
 8008f3c:	f000 fbc2 	bl	80096c4 <__mcmp>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	dcb0      	bgt.n	8008ea6 <_dtoa_r+0xa5e>
 8008f44:	d102      	bne.n	8008f4c <_dtoa_r+0xb04>
 8008f46:	f018 0f01 	tst.w	r8, #1
 8008f4a:	d1ac      	bne.n	8008ea6 <_dtoa_r+0xa5e>
 8008f4c:	4633      	mov	r3, r6
 8008f4e:	461e      	mov	r6, r3
 8008f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f54:	2a30      	cmp	r2, #48	@ 0x30
 8008f56:	d0fa      	beq.n	8008f4e <_dtoa_r+0xb06>
 8008f58:	e5c2      	b.n	8008ae0 <_dtoa_r+0x698>
 8008f5a:	459a      	cmp	sl, r3
 8008f5c:	d1a4      	bne.n	8008ea8 <_dtoa_r+0xa60>
 8008f5e:	9b04      	ldr	r3, [sp, #16]
 8008f60:	3301      	adds	r3, #1
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	2331      	movs	r3, #49	@ 0x31
 8008f66:	f88a 3000 	strb.w	r3, [sl]
 8008f6a:	e5b9      	b.n	8008ae0 <_dtoa_r+0x698>
 8008f6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008f6e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008fcc <_dtoa_r+0xb84>
 8008f72:	b11b      	cbz	r3, 8008f7c <_dtoa_r+0xb34>
 8008f74:	f10a 0308 	add.w	r3, sl, #8
 8008f78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	4650      	mov	r0, sl
 8008f7e:	b019      	add	sp, #100	@ 0x64
 8008f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	f77f ae37 	ble.w	8008bfa <_dtoa_r+0x7b2>
 8008f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f90:	2001      	movs	r0, #1
 8008f92:	e655      	b.n	8008c40 <_dtoa_r+0x7f8>
 8008f94:	9b00      	ldr	r3, [sp, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f77f aed6 	ble.w	8008d48 <_dtoa_r+0x900>
 8008f9c:	4656      	mov	r6, sl
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	4648      	mov	r0, r9
 8008fa2:	f7ff f9c8 	bl	8008336 <quorem>
 8008fa6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008faa:	f806 8b01 	strb.w	r8, [r6], #1
 8008fae:	9b00      	ldr	r3, [sp, #0]
 8008fb0:	eba6 020a 	sub.w	r2, r6, sl
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	ddb3      	ble.n	8008f20 <_dtoa_r+0xad8>
 8008fb8:	4649      	mov	r1, r9
 8008fba:	2300      	movs	r3, #0
 8008fbc:	220a      	movs	r2, #10
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f000 f968 	bl	8009294 <__multadd>
 8008fc4:	4681      	mov	r9, r0
 8008fc6:	e7ea      	b.n	8008f9e <_dtoa_r+0xb56>
 8008fc8:	0800b8bc 	.word	0x0800b8bc
 8008fcc:	0800b840 	.word	0x0800b840

08008fd0 <_free_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4605      	mov	r5, r0
 8008fd4:	2900      	cmp	r1, #0
 8008fd6:	d041      	beq.n	800905c <_free_r+0x8c>
 8008fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fdc:	1f0c      	subs	r4, r1, #4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bfb8      	it	lt
 8008fe2:	18e4      	addlt	r4, r4, r3
 8008fe4:	f000 f8e8 	bl	80091b8 <__malloc_lock>
 8008fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8009060 <_free_r+0x90>)
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	b933      	cbnz	r3, 8008ffc <_free_r+0x2c>
 8008fee:	6063      	str	r3, [r4, #4]
 8008ff0:	6014      	str	r4, [r2, #0]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff8:	f000 b8e4 	b.w	80091c4 <__malloc_unlock>
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	d908      	bls.n	8009012 <_free_r+0x42>
 8009000:	6820      	ldr	r0, [r4, #0]
 8009002:	1821      	adds	r1, r4, r0
 8009004:	428b      	cmp	r3, r1
 8009006:	bf01      	itttt	eq
 8009008:	6819      	ldreq	r1, [r3, #0]
 800900a:	685b      	ldreq	r3, [r3, #4]
 800900c:	1809      	addeq	r1, r1, r0
 800900e:	6021      	streq	r1, [r4, #0]
 8009010:	e7ed      	b.n	8008fee <_free_r+0x1e>
 8009012:	461a      	mov	r2, r3
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	b10b      	cbz	r3, 800901c <_free_r+0x4c>
 8009018:	42a3      	cmp	r3, r4
 800901a:	d9fa      	bls.n	8009012 <_free_r+0x42>
 800901c:	6811      	ldr	r1, [r2, #0]
 800901e:	1850      	adds	r0, r2, r1
 8009020:	42a0      	cmp	r0, r4
 8009022:	d10b      	bne.n	800903c <_free_r+0x6c>
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	4401      	add	r1, r0
 8009028:	1850      	adds	r0, r2, r1
 800902a:	4283      	cmp	r3, r0
 800902c:	6011      	str	r1, [r2, #0]
 800902e:	d1e0      	bne.n	8008ff2 <_free_r+0x22>
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	6053      	str	r3, [r2, #4]
 8009036:	4408      	add	r0, r1
 8009038:	6010      	str	r0, [r2, #0]
 800903a:	e7da      	b.n	8008ff2 <_free_r+0x22>
 800903c:	d902      	bls.n	8009044 <_free_r+0x74>
 800903e:	230c      	movs	r3, #12
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	e7d6      	b.n	8008ff2 <_free_r+0x22>
 8009044:	6820      	ldr	r0, [r4, #0]
 8009046:	1821      	adds	r1, r4, r0
 8009048:	428b      	cmp	r3, r1
 800904a:	bf04      	itt	eq
 800904c:	6819      	ldreq	r1, [r3, #0]
 800904e:	685b      	ldreq	r3, [r3, #4]
 8009050:	6063      	str	r3, [r4, #4]
 8009052:	bf04      	itt	eq
 8009054:	1809      	addeq	r1, r1, r0
 8009056:	6021      	streq	r1, [r4, #0]
 8009058:	6054      	str	r4, [r2, #4]
 800905a:	e7ca      	b.n	8008ff2 <_free_r+0x22>
 800905c:	bd38      	pop	{r3, r4, r5, pc}
 800905e:	bf00      	nop
 8009060:	20000600 	.word	0x20000600

08009064 <malloc>:
 8009064:	4b02      	ldr	r3, [pc, #8]	@ (8009070 <malloc+0xc>)
 8009066:	4601      	mov	r1, r0
 8009068:	6818      	ldr	r0, [r3, #0]
 800906a:	f000 b825 	b.w	80090b8 <_malloc_r>
 800906e:	bf00      	nop
 8009070:	20000028 	.word	0x20000028

08009074 <sbrk_aligned>:
 8009074:	b570      	push	{r4, r5, r6, lr}
 8009076:	4e0f      	ldr	r6, [pc, #60]	@ (80090b4 <sbrk_aligned+0x40>)
 8009078:	460c      	mov	r4, r1
 800907a:	6831      	ldr	r1, [r6, #0]
 800907c:	4605      	mov	r5, r0
 800907e:	b911      	cbnz	r1, 8009086 <sbrk_aligned+0x12>
 8009080:	f000 fe9a 	bl	8009db8 <_sbrk_r>
 8009084:	6030      	str	r0, [r6, #0]
 8009086:	4621      	mov	r1, r4
 8009088:	4628      	mov	r0, r5
 800908a:	f000 fe95 	bl	8009db8 <_sbrk_r>
 800908e:	1c43      	adds	r3, r0, #1
 8009090:	d103      	bne.n	800909a <sbrk_aligned+0x26>
 8009092:	f04f 34ff 	mov.w	r4, #4294967295
 8009096:	4620      	mov	r0, r4
 8009098:	bd70      	pop	{r4, r5, r6, pc}
 800909a:	1cc4      	adds	r4, r0, #3
 800909c:	f024 0403 	bic.w	r4, r4, #3
 80090a0:	42a0      	cmp	r0, r4
 80090a2:	d0f8      	beq.n	8009096 <sbrk_aligned+0x22>
 80090a4:	1a21      	subs	r1, r4, r0
 80090a6:	4628      	mov	r0, r5
 80090a8:	f000 fe86 	bl	8009db8 <_sbrk_r>
 80090ac:	3001      	adds	r0, #1
 80090ae:	d1f2      	bne.n	8009096 <sbrk_aligned+0x22>
 80090b0:	e7ef      	b.n	8009092 <sbrk_aligned+0x1e>
 80090b2:	bf00      	nop
 80090b4:	200005fc 	.word	0x200005fc

080090b8 <_malloc_r>:
 80090b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090bc:	1ccd      	adds	r5, r1, #3
 80090be:	f025 0503 	bic.w	r5, r5, #3
 80090c2:	3508      	adds	r5, #8
 80090c4:	2d0c      	cmp	r5, #12
 80090c6:	bf38      	it	cc
 80090c8:	250c      	movcc	r5, #12
 80090ca:	2d00      	cmp	r5, #0
 80090cc:	4606      	mov	r6, r0
 80090ce:	db01      	blt.n	80090d4 <_malloc_r+0x1c>
 80090d0:	42a9      	cmp	r1, r5
 80090d2:	d904      	bls.n	80090de <_malloc_r+0x26>
 80090d4:	230c      	movs	r3, #12
 80090d6:	6033      	str	r3, [r6, #0]
 80090d8:	2000      	movs	r0, #0
 80090da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091b4 <_malloc_r+0xfc>
 80090e2:	f000 f869 	bl	80091b8 <__malloc_lock>
 80090e6:	f8d8 3000 	ldr.w	r3, [r8]
 80090ea:	461c      	mov	r4, r3
 80090ec:	bb44      	cbnz	r4, 8009140 <_malloc_r+0x88>
 80090ee:	4629      	mov	r1, r5
 80090f0:	4630      	mov	r0, r6
 80090f2:	f7ff ffbf 	bl	8009074 <sbrk_aligned>
 80090f6:	1c43      	adds	r3, r0, #1
 80090f8:	4604      	mov	r4, r0
 80090fa:	d158      	bne.n	80091ae <_malloc_r+0xf6>
 80090fc:	f8d8 4000 	ldr.w	r4, [r8]
 8009100:	4627      	mov	r7, r4
 8009102:	2f00      	cmp	r7, #0
 8009104:	d143      	bne.n	800918e <_malloc_r+0xd6>
 8009106:	2c00      	cmp	r4, #0
 8009108:	d04b      	beq.n	80091a2 <_malloc_r+0xea>
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	4639      	mov	r1, r7
 800910e:	4630      	mov	r0, r6
 8009110:	eb04 0903 	add.w	r9, r4, r3
 8009114:	f000 fe50 	bl	8009db8 <_sbrk_r>
 8009118:	4581      	cmp	r9, r0
 800911a:	d142      	bne.n	80091a2 <_malloc_r+0xea>
 800911c:	6821      	ldr	r1, [r4, #0]
 800911e:	1a6d      	subs	r5, r5, r1
 8009120:	4629      	mov	r1, r5
 8009122:	4630      	mov	r0, r6
 8009124:	f7ff ffa6 	bl	8009074 <sbrk_aligned>
 8009128:	3001      	adds	r0, #1
 800912a:	d03a      	beq.n	80091a2 <_malloc_r+0xea>
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	442b      	add	r3, r5
 8009130:	6023      	str	r3, [r4, #0]
 8009132:	f8d8 3000 	ldr.w	r3, [r8]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	bb62      	cbnz	r2, 8009194 <_malloc_r+0xdc>
 800913a:	f8c8 7000 	str.w	r7, [r8]
 800913e:	e00f      	b.n	8009160 <_malloc_r+0xa8>
 8009140:	6822      	ldr	r2, [r4, #0]
 8009142:	1b52      	subs	r2, r2, r5
 8009144:	d420      	bmi.n	8009188 <_malloc_r+0xd0>
 8009146:	2a0b      	cmp	r2, #11
 8009148:	d917      	bls.n	800917a <_malloc_r+0xc2>
 800914a:	1961      	adds	r1, r4, r5
 800914c:	42a3      	cmp	r3, r4
 800914e:	6025      	str	r5, [r4, #0]
 8009150:	bf18      	it	ne
 8009152:	6059      	strne	r1, [r3, #4]
 8009154:	6863      	ldr	r3, [r4, #4]
 8009156:	bf08      	it	eq
 8009158:	f8c8 1000 	streq.w	r1, [r8]
 800915c:	5162      	str	r2, [r4, r5]
 800915e:	604b      	str	r3, [r1, #4]
 8009160:	4630      	mov	r0, r6
 8009162:	f000 f82f 	bl	80091c4 <__malloc_unlock>
 8009166:	f104 000b 	add.w	r0, r4, #11
 800916a:	1d23      	adds	r3, r4, #4
 800916c:	f020 0007 	bic.w	r0, r0, #7
 8009170:	1ac2      	subs	r2, r0, r3
 8009172:	bf1c      	itt	ne
 8009174:	1a1b      	subne	r3, r3, r0
 8009176:	50a3      	strne	r3, [r4, r2]
 8009178:	e7af      	b.n	80090da <_malloc_r+0x22>
 800917a:	6862      	ldr	r2, [r4, #4]
 800917c:	42a3      	cmp	r3, r4
 800917e:	bf0c      	ite	eq
 8009180:	f8c8 2000 	streq.w	r2, [r8]
 8009184:	605a      	strne	r2, [r3, #4]
 8009186:	e7eb      	b.n	8009160 <_malloc_r+0xa8>
 8009188:	4623      	mov	r3, r4
 800918a:	6864      	ldr	r4, [r4, #4]
 800918c:	e7ae      	b.n	80090ec <_malloc_r+0x34>
 800918e:	463c      	mov	r4, r7
 8009190:	687f      	ldr	r7, [r7, #4]
 8009192:	e7b6      	b.n	8009102 <_malloc_r+0x4a>
 8009194:	461a      	mov	r2, r3
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	42a3      	cmp	r3, r4
 800919a:	d1fb      	bne.n	8009194 <_malloc_r+0xdc>
 800919c:	2300      	movs	r3, #0
 800919e:	6053      	str	r3, [r2, #4]
 80091a0:	e7de      	b.n	8009160 <_malloc_r+0xa8>
 80091a2:	230c      	movs	r3, #12
 80091a4:	6033      	str	r3, [r6, #0]
 80091a6:	4630      	mov	r0, r6
 80091a8:	f000 f80c 	bl	80091c4 <__malloc_unlock>
 80091ac:	e794      	b.n	80090d8 <_malloc_r+0x20>
 80091ae:	6005      	str	r5, [r0, #0]
 80091b0:	e7d6      	b.n	8009160 <_malloc_r+0xa8>
 80091b2:	bf00      	nop
 80091b4:	20000600 	.word	0x20000600

080091b8 <__malloc_lock>:
 80091b8:	4801      	ldr	r0, [pc, #4]	@ (80091c0 <__malloc_lock+0x8>)
 80091ba:	f7ff b8ba 	b.w	8008332 <__retarget_lock_acquire_recursive>
 80091be:	bf00      	nop
 80091c0:	200005f8 	.word	0x200005f8

080091c4 <__malloc_unlock>:
 80091c4:	4801      	ldr	r0, [pc, #4]	@ (80091cc <__malloc_unlock+0x8>)
 80091c6:	f7ff b8b5 	b.w	8008334 <__retarget_lock_release_recursive>
 80091ca:	bf00      	nop
 80091cc:	200005f8 	.word	0x200005f8

080091d0 <_Balloc>:
 80091d0:	b570      	push	{r4, r5, r6, lr}
 80091d2:	69c6      	ldr	r6, [r0, #28]
 80091d4:	4604      	mov	r4, r0
 80091d6:	460d      	mov	r5, r1
 80091d8:	b976      	cbnz	r6, 80091f8 <_Balloc+0x28>
 80091da:	2010      	movs	r0, #16
 80091dc:	f7ff ff42 	bl	8009064 <malloc>
 80091e0:	4602      	mov	r2, r0
 80091e2:	61e0      	str	r0, [r4, #28]
 80091e4:	b920      	cbnz	r0, 80091f0 <_Balloc+0x20>
 80091e6:	4b18      	ldr	r3, [pc, #96]	@ (8009248 <_Balloc+0x78>)
 80091e8:	4818      	ldr	r0, [pc, #96]	@ (800924c <_Balloc+0x7c>)
 80091ea:	216b      	movs	r1, #107	@ 0x6b
 80091ec:	f000 fe02 	bl	8009df4 <__assert_func>
 80091f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091f4:	6006      	str	r6, [r0, #0]
 80091f6:	60c6      	str	r6, [r0, #12]
 80091f8:	69e6      	ldr	r6, [r4, #28]
 80091fa:	68f3      	ldr	r3, [r6, #12]
 80091fc:	b183      	cbz	r3, 8009220 <_Balloc+0x50>
 80091fe:	69e3      	ldr	r3, [r4, #28]
 8009200:	68db      	ldr	r3, [r3, #12]
 8009202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009206:	b9b8      	cbnz	r0, 8009238 <_Balloc+0x68>
 8009208:	2101      	movs	r1, #1
 800920a:	fa01 f605 	lsl.w	r6, r1, r5
 800920e:	1d72      	adds	r2, r6, #5
 8009210:	0092      	lsls	r2, r2, #2
 8009212:	4620      	mov	r0, r4
 8009214:	f000 fe0c 	bl	8009e30 <_calloc_r>
 8009218:	b160      	cbz	r0, 8009234 <_Balloc+0x64>
 800921a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800921e:	e00e      	b.n	800923e <_Balloc+0x6e>
 8009220:	2221      	movs	r2, #33	@ 0x21
 8009222:	2104      	movs	r1, #4
 8009224:	4620      	mov	r0, r4
 8009226:	f000 fe03 	bl	8009e30 <_calloc_r>
 800922a:	69e3      	ldr	r3, [r4, #28]
 800922c:	60f0      	str	r0, [r6, #12]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e4      	bne.n	80091fe <_Balloc+0x2e>
 8009234:	2000      	movs	r0, #0
 8009236:	bd70      	pop	{r4, r5, r6, pc}
 8009238:	6802      	ldr	r2, [r0, #0]
 800923a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800923e:	2300      	movs	r3, #0
 8009240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009244:	e7f7      	b.n	8009236 <_Balloc+0x66>
 8009246:	bf00      	nop
 8009248:	0800b84d 	.word	0x0800b84d
 800924c:	0800b8cd 	.word	0x0800b8cd

08009250 <_Bfree>:
 8009250:	b570      	push	{r4, r5, r6, lr}
 8009252:	69c6      	ldr	r6, [r0, #28]
 8009254:	4605      	mov	r5, r0
 8009256:	460c      	mov	r4, r1
 8009258:	b976      	cbnz	r6, 8009278 <_Bfree+0x28>
 800925a:	2010      	movs	r0, #16
 800925c:	f7ff ff02 	bl	8009064 <malloc>
 8009260:	4602      	mov	r2, r0
 8009262:	61e8      	str	r0, [r5, #28]
 8009264:	b920      	cbnz	r0, 8009270 <_Bfree+0x20>
 8009266:	4b09      	ldr	r3, [pc, #36]	@ (800928c <_Bfree+0x3c>)
 8009268:	4809      	ldr	r0, [pc, #36]	@ (8009290 <_Bfree+0x40>)
 800926a:	218f      	movs	r1, #143	@ 0x8f
 800926c:	f000 fdc2 	bl	8009df4 <__assert_func>
 8009270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009274:	6006      	str	r6, [r0, #0]
 8009276:	60c6      	str	r6, [r0, #12]
 8009278:	b13c      	cbz	r4, 800928a <_Bfree+0x3a>
 800927a:	69eb      	ldr	r3, [r5, #28]
 800927c:	6862      	ldr	r2, [r4, #4]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009284:	6021      	str	r1, [r4, #0]
 8009286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	0800b84d 	.word	0x0800b84d
 8009290:	0800b8cd 	.word	0x0800b8cd

08009294 <__multadd>:
 8009294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009298:	690d      	ldr	r5, [r1, #16]
 800929a:	4607      	mov	r7, r0
 800929c:	460c      	mov	r4, r1
 800929e:	461e      	mov	r6, r3
 80092a0:	f101 0c14 	add.w	ip, r1, #20
 80092a4:	2000      	movs	r0, #0
 80092a6:	f8dc 3000 	ldr.w	r3, [ip]
 80092aa:	b299      	uxth	r1, r3
 80092ac:	fb02 6101 	mla	r1, r2, r1, r6
 80092b0:	0c1e      	lsrs	r6, r3, #16
 80092b2:	0c0b      	lsrs	r3, r1, #16
 80092b4:	fb02 3306 	mla	r3, r2, r6, r3
 80092b8:	b289      	uxth	r1, r1
 80092ba:	3001      	adds	r0, #1
 80092bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80092c0:	4285      	cmp	r5, r0
 80092c2:	f84c 1b04 	str.w	r1, [ip], #4
 80092c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80092ca:	dcec      	bgt.n	80092a6 <__multadd+0x12>
 80092cc:	b30e      	cbz	r6, 8009312 <__multadd+0x7e>
 80092ce:	68a3      	ldr	r3, [r4, #8]
 80092d0:	42ab      	cmp	r3, r5
 80092d2:	dc19      	bgt.n	8009308 <__multadd+0x74>
 80092d4:	6861      	ldr	r1, [r4, #4]
 80092d6:	4638      	mov	r0, r7
 80092d8:	3101      	adds	r1, #1
 80092da:	f7ff ff79 	bl	80091d0 <_Balloc>
 80092de:	4680      	mov	r8, r0
 80092e0:	b928      	cbnz	r0, 80092ee <__multadd+0x5a>
 80092e2:	4602      	mov	r2, r0
 80092e4:	4b0c      	ldr	r3, [pc, #48]	@ (8009318 <__multadd+0x84>)
 80092e6:	480d      	ldr	r0, [pc, #52]	@ (800931c <__multadd+0x88>)
 80092e8:	21ba      	movs	r1, #186	@ 0xba
 80092ea:	f000 fd83 	bl	8009df4 <__assert_func>
 80092ee:	6922      	ldr	r2, [r4, #16]
 80092f0:	3202      	adds	r2, #2
 80092f2:	f104 010c 	add.w	r1, r4, #12
 80092f6:	0092      	lsls	r2, r2, #2
 80092f8:	300c      	adds	r0, #12
 80092fa:	f000 fd6d 	bl	8009dd8 <memcpy>
 80092fe:	4621      	mov	r1, r4
 8009300:	4638      	mov	r0, r7
 8009302:	f7ff ffa5 	bl	8009250 <_Bfree>
 8009306:	4644      	mov	r4, r8
 8009308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800930c:	3501      	adds	r5, #1
 800930e:	615e      	str	r6, [r3, #20]
 8009310:	6125      	str	r5, [r4, #16]
 8009312:	4620      	mov	r0, r4
 8009314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009318:	0800b8bc 	.word	0x0800b8bc
 800931c:	0800b8cd 	.word	0x0800b8cd

08009320 <__hi0bits>:
 8009320:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009324:	4603      	mov	r3, r0
 8009326:	bf36      	itet	cc
 8009328:	0403      	lslcc	r3, r0, #16
 800932a:	2000      	movcs	r0, #0
 800932c:	2010      	movcc	r0, #16
 800932e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009332:	bf3c      	itt	cc
 8009334:	021b      	lslcc	r3, r3, #8
 8009336:	3008      	addcc	r0, #8
 8009338:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800933c:	bf3c      	itt	cc
 800933e:	011b      	lslcc	r3, r3, #4
 8009340:	3004      	addcc	r0, #4
 8009342:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009346:	bf3c      	itt	cc
 8009348:	009b      	lslcc	r3, r3, #2
 800934a:	3002      	addcc	r0, #2
 800934c:	2b00      	cmp	r3, #0
 800934e:	db05      	blt.n	800935c <__hi0bits+0x3c>
 8009350:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009354:	f100 0001 	add.w	r0, r0, #1
 8009358:	bf08      	it	eq
 800935a:	2020      	moveq	r0, #32
 800935c:	4770      	bx	lr

0800935e <__lo0bits>:
 800935e:	6803      	ldr	r3, [r0, #0]
 8009360:	4602      	mov	r2, r0
 8009362:	f013 0007 	ands.w	r0, r3, #7
 8009366:	d00b      	beq.n	8009380 <__lo0bits+0x22>
 8009368:	07d9      	lsls	r1, r3, #31
 800936a:	d421      	bmi.n	80093b0 <__lo0bits+0x52>
 800936c:	0798      	lsls	r0, r3, #30
 800936e:	bf49      	itett	mi
 8009370:	085b      	lsrmi	r3, r3, #1
 8009372:	089b      	lsrpl	r3, r3, #2
 8009374:	2001      	movmi	r0, #1
 8009376:	6013      	strmi	r3, [r2, #0]
 8009378:	bf5c      	itt	pl
 800937a:	6013      	strpl	r3, [r2, #0]
 800937c:	2002      	movpl	r0, #2
 800937e:	4770      	bx	lr
 8009380:	b299      	uxth	r1, r3
 8009382:	b909      	cbnz	r1, 8009388 <__lo0bits+0x2a>
 8009384:	0c1b      	lsrs	r3, r3, #16
 8009386:	2010      	movs	r0, #16
 8009388:	b2d9      	uxtb	r1, r3
 800938a:	b909      	cbnz	r1, 8009390 <__lo0bits+0x32>
 800938c:	3008      	adds	r0, #8
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	0719      	lsls	r1, r3, #28
 8009392:	bf04      	itt	eq
 8009394:	091b      	lsreq	r3, r3, #4
 8009396:	3004      	addeq	r0, #4
 8009398:	0799      	lsls	r1, r3, #30
 800939a:	bf04      	itt	eq
 800939c:	089b      	lsreq	r3, r3, #2
 800939e:	3002      	addeq	r0, #2
 80093a0:	07d9      	lsls	r1, r3, #31
 80093a2:	d403      	bmi.n	80093ac <__lo0bits+0x4e>
 80093a4:	085b      	lsrs	r3, r3, #1
 80093a6:	f100 0001 	add.w	r0, r0, #1
 80093aa:	d003      	beq.n	80093b4 <__lo0bits+0x56>
 80093ac:	6013      	str	r3, [r2, #0]
 80093ae:	4770      	bx	lr
 80093b0:	2000      	movs	r0, #0
 80093b2:	4770      	bx	lr
 80093b4:	2020      	movs	r0, #32
 80093b6:	4770      	bx	lr

080093b8 <__i2b>:
 80093b8:	b510      	push	{r4, lr}
 80093ba:	460c      	mov	r4, r1
 80093bc:	2101      	movs	r1, #1
 80093be:	f7ff ff07 	bl	80091d0 <_Balloc>
 80093c2:	4602      	mov	r2, r0
 80093c4:	b928      	cbnz	r0, 80093d2 <__i2b+0x1a>
 80093c6:	4b05      	ldr	r3, [pc, #20]	@ (80093dc <__i2b+0x24>)
 80093c8:	4805      	ldr	r0, [pc, #20]	@ (80093e0 <__i2b+0x28>)
 80093ca:	f240 1145 	movw	r1, #325	@ 0x145
 80093ce:	f000 fd11 	bl	8009df4 <__assert_func>
 80093d2:	2301      	movs	r3, #1
 80093d4:	6144      	str	r4, [r0, #20]
 80093d6:	6103      	str	r3, [r0, #16]
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	bf00      	nop
 80093dc:	0800b8bc 	.word	0x0800b8bc
 80093e0:	0800b8cd 	.word	0x0800b8cd

080093e4 <__multiply>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	4614      	mov	r4, r2
 80093ea:	690a      	ldr	r2, [r1, #16]
 80093ec:	6923      	ldr	r3, [r4, #16]
 80093ee:	429a      	cmp	r2, r3
 80093f0:	bfa8      	it	ge
 80093f2:	4623      	movge	r3, r4
 80093f4:	460f      	mov	r7, r1
 80093f6:	bfa4      	itt	ge
 80093f8:	460c      	movge	r4, r1
 80093fa:	461f      	movge	r7, r3
 80093fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009400:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009404:	68a3      	ldr	r3, [r4, #8]
 8009406:	6861      	ldr	r1, [r4, #4]
 8009408:	eb0a 0609 	add.w	r6, sl, r9
 800940c:	42b3      	cmp	r3, r6
 800940e:	b085      	sub	sp, #20
 8009410:	bfb8      	it	lt
 8009412:	3101      	addlt	r1, #1
 8009414:	f7ff fedc 	bl	80091d0 <_Balloc>
 8009418:	b930      	cbnz	r0, 8009428 <__multiply+0x44>
 800941a:	4602      	mov	r2, r0
 800941c:	4b44      	ldr	r3, [pc, #272]	@ (8009530 <__multiply+0x14c>)
 800941e:	4845      	ldr	r0, [pc, #276]	@ (8009534 <__multiply+0x150>)
 8009420:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009424:	f000 fce6 	bl	8009df4 <__assert_func>
 8009428:	f100 0514 	add.w	r5, r0, #20
 800942c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009430:	462b      	mov	r3, r5
 8009432:	2200      	movs	r2, #0
 8009434:	4543      	cmp	r3, r8
 8009436:	d321      	bcc.n	800947c <__multiply+0x98>
 8009438:	f107 0114 	add.w	r1, r7, #20
 800943c:	f104 0214 	add.w	r2, r4, #20
 8009440:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009444:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009448:	9302      	str	r3, [sp, #8]
 800944a:	1b13      	subs	r3, r2, r4
 800944c:	3b15      	subs	r3, #21
 800944e:	f023 0303 	bic.w	r3, r3, #3
 8009452:	3304      	adds	r3, #4
 8009454:	f104 0715 	add.w	r7, r4, #21
 8009458:	42ba      	cmp	r2, r7
 800945a:	bf38      	it	cc
 800945c:	2304      	movcc	r3, #4
 800945e:	9301      	str	r3, [sp, #4]
 8009460:	9b02      	ldr	r3, [sp, #8]
 8009462:	9103      	str	r1, [sp, #12]
 8009464:	428b      	cmp	r3, r1
 8009466:	d80c      	bhi.n	8009482 <__multiply+0x9e>
 8009468:	2e00      	cmp	r6, #0
 800946a:	dd03      	ble.n	8009474 <__multiply+0x90>
 800946c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009470:	2b00      	cmp	r3, #0
 8009472:	d05b      	beq.n	800952c <__multiply+0x148>
 8009474:	6106      	str	r6, [r0, #16]
 8009476:	b005      	add	sp, #20
 8009478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947c:	f843 2b04 	str.w	r2, [r3], #4
 8009480:	e7d8      	b.n	8009434 <__multiply+0x50>
 8009482:	f8b1 a000 	ldrh.w	sl, [r1]
 8009486:	f1ba 0f00 	cmp.w	sl, #0
 800948a:	d024      	beq.n	80094d6 <__multiply+0xf2>
 800948c:	f104 0e14 	add.w	lr, r4, #20
 8009490:	46a9      	mov	r9, r5
 8009492:	f04f 0c00 	mov.w	ip, #0
 8009496:	f85e 7b04 	ldr.w	r7, [lr], #4
 800949a:	f8d9 3000 	ldr.w	r3, [r9]
 800949e:	fa1f fb87 	uxth.w	fp, r7
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80094a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80094ac:	f8d9 7000 	ldr.w	r7, [r9]
 80094b0:	4463      	add	r3, ip
 80094b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80094b6:	fb0a c70b 	mla	r7, sl, fp, ip
 80094ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80094be:	b29b      	uxth	r3, r3
 80094c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80094c4:	4572      	cmp	r2, lr
 80094c6:	f849 3b04 	str.w	r3, [r9], #4
 80094ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80094ce:	d8e2      	bhi.n	8009496 <__multiply+0xb2>
 80094d0:	9b01      	ldr	r3, [sp, #4]
 80094d2:	f845 c003 	str.w	ip, [r5, r3]
 80094d6:	9b03      	ldr	r3, [sp, #12]
 80094d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80094dc:	3104      	adds	r1, #4
 80094de:	f1b9 0f00 	cmp.w	r9, #0
 80094e2:	d021      	beq.n	8009528 <__multiply+0x144>
 80094e4:	682b      	ldr	r3, [r5, #0]
 80094e6:	f104 0c14 	add.w	ip, r4, #20
 80094ea:	46ae      	mov	lr, r5
 80094ec:	f04f 0a00 	mov.w	sl, #0
 80094f0:	f8bc b000 	ldrh.w	fp, [ip]
 80094f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80094f8:	fb09 770b 	mla	r7, r9, fp, r7
 80094fc:	4457      	add	r7, sl
 80094fe:	b29b      	uxth	r3, r3
 8009500:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009504:	f84e 3b04 	str.w	r3, [lr], #4
 8009508:	f85c 3b04 	ldr.w	r3, [ip], #4
 800950c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009510:	f8be 3000 	ldrh.w	r3, [lr]
 8009514:	fb09 330a 	mla	r3, r9, sl, r3
 8009518:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800951c:	4562      	cmp	r2, ip
 800951e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009522:	d8e5      	bhi.n	80094f0 <__multiply+0x10c>
 8009524:	9f01      	ldr	r7, [sp, #4]
 8009526:	51eb      	str	r3, [r5, r7]
 8009528:	3504      	adds	r5, #4
 800952a:	e799      	b.n	8009460 <__multiply+0x7c>
 800952c:	3e01      	subs	r6, #1
 800952e:	e79b      	b.n	8009468 <__multiply+0x84>
 8009530:	0800b8bc 	.word	0x0800b8bc
 8009534:	0800b8cd 	.word	0x0800b8cd

08009538 <__pow5mult>:
 8009538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800953c:	4615      	mov	r5, r2
 800953e:	f012 0203 	ands.w	r2, r2, #3
 8009542:	4607      	mov	r7, r0
 8009544:	460e      	mov	r6, r1
 8009546:	d007      	beq.n	8009558 <__pow5mult+0x20>
 8009548:	4c25      	ldr	r4, [pc, #148]	@ (80095e0 <__pow5mult+0xa8>)
 800954a:	3a01      	subs	r2, #1
 800954c:	2300      	movs	r3, #0
 800954e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009552:	f7ff fe9f 	bl	8009294 <__multadd>
 8009556:	4606      	mov	r6, r0
 8009558:	10ad      	asrs	r5, r5, #2
 800955a:	d03d      	beq.n	80095d8 <__pow5mult+0xa0>
 800955c:	69fc      	ldr	r4, [r7, #28]
 800955e:	b97c      	cbnz	r4, 8009580 <__pow5mult+0x48>
 8009560:	2010      	movs	r0, #16
 8009562:	f7ff fd7f 	bl	8009064 <malloc>
 8009566:	4602      	mov	r2, r0
 8009568:	61f8      	str	r0, [r7, #28]
 800956a:	b928      	cbnz	r0, 8009578 <__pow5mult+0x40>
 800956c:	4b1d      	ldr	r3, [pc, #116]	@ (80095e4 <__pow5mult+0xac>)
 800956e:	481e      	ldr	r0, [pc, #120]	@ (80095e8 <__pow5mult+0xb0>)
 8009570:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009574:	f000 fc3e 	bl	8009df4 <__assert_func>
 8009578:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800957c:	6004      	str	r4, [r0, #0]
 800957e:	60c4      	str	r4, [r0, #12]
 8009580:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009584:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009588:	b94c      	cbnz	r4, 800959e <__pow5mult+0x66>
 800958a:	f240 2171 	movw	r1, #625	@ 0x271
 800958e:	4638      	mov	r0, r7
 8009590:	f7ff ff12 	bl	80093b8 <__i2b>
 8009594:	2300      	movs	r3, #0
 8009596:	f8c8 0008 	str.w	r0, [r8, #8]
 800959a:	4604      	mov	r4, r0
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	f04f 0900 	mov.w	r9, #0
 80095a2:	07eb      	lsls	r3, r5, #31
 80095a4:	d50a      	bpl.n	80095bc <__pow5mult+0x84>
 80095a6:	4631      	mov	r1, r6
 80095a8:	4622      	mov	r2, r4
 80095aa:	4638      	mov	r0, r7
 80095ac:	f7ff ff1a 	bl	80093e4 <__multiply>
 80095b0:	4631      	mov	r1, r6
 80095b2:	4680      	mov	r8, r0
 80095b4:	4638      	mov	r0, r7
 80095b6:	f7ff fe4b 	bl	8009250 <_Bfree>
 80095ba:	4646      	mov	r6, r8
 80095bc:	106d      	asrs	r5, r5, #1
 80095be:	d00b      	beq.n	80095d8 <__pow5mult+0xa0>
 80095c0:	6820      	ldr	r0, [r4, #0]
 80095c2:	b938      	cbnz	r0, 80095d4 <__pow5mult+0x9c>
 80095c4:	4622      	mov	r2, r4
 80095c6:	4621      	mov	r1, r4
 80095c8:	4638      	mov	r0, r7
 80095ca:	f7ff ff0b 	bl	80093e4 <__multiply>
 80095ce:	6020      	str	r0, [r4, #0]
 80095d0:	f8c0 9000 	str.w	r9, [r0]
 80095d4:	4604      	mov	r4, r0
 80095d6:	e7e4      	b.n	80095a2 <__pow5mult+0x6a>
 80095d8:	4630      	mov	r0, r6
 80095da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095de:	bf00      	nop
 80095e0:	0800b928 	.word	0x0800b928
 80095e4:	0800b84d 	.word	0x0800b84d
 80095e8:	0800b8cd 	.word	0x0800b8cd

080095ec <__lshift>:
 80095ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f0:	460c      	mov	r4, r1
 80095f2:	6849      	ldr	r1, [r1, #4]
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	4607      	mov	r7, r0
 80095fe:	4691      	mov	r9, r2
 8009600:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009604:	f108 0601 	add.w	r6, r8, #1
 8009608:	42b3      	cmp	r3, r6
 800960a:	db0b      	blt.n	8009624 <__lshift+0x38>
 800960c:	4638      	mov	r0, r7
 800960e:	f7ff fddf 	bl	80091d0 <_Balloc>
 8009612:	4605      	mov	r5, r0
 8009614:	b948      	cbnz	r0, 800962a <__lshift+0x3e>
 8009616:	4602      	mov	r2, r0
 8009618:	4b28      	ldr	r3, [pc, #160]	@ (80096bc <__lshift+0xd0>)
 800961a:	4829      	ldr	r0, [pc, #164]	@ (80096c0 <__lshift+0xd4>)
 800961c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009620:	f000 fbe8 	bl	8009df4 <__assert_func>
 8009624:	3101      	adds	r1, #1
 8009626:	005b      	lsls	r3, r3, #1
 8009628:	e7ee      	b.n	8009608 <__lshift+0x1c>
 800962a:	2300      	movs	r3, #0
 800962c:	f100 0114 	add.w	r1, r0, #20
 8009630:	f100 0210 	add.w	r2, r0, #16
 8009634:	4618      	mov	r0, r3
 8009636:	4553      	cmp	r3, sl
 8009638:	db33      	blt.n	80096a2 <__lshift+0xb6>
 800963a:	6920      	ldr	r0, [r4, #16]
 800963c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009640:	f104 0314 	add.w	r3, r4, #20
 8009644:	f019 091f 	ands.w	r9, r9, #31
 8009648:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800964c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009650:	d02b      	beq.n	80096aa <__lshift+0xbe>
 8009652:	f1c9 0e20 	rsb	lr, r9, #32
 8009656:	468a      	mov	sl, r1
 8009658:	2200      	movs	r2, #0
 800965a:	6818      	ldr	r0, [r3, #0]
 800965c:	fa00 f009 	lsl.w	r0, r0, r9
 8009660:	4310      	orrs	r0, r2
 8009662:	f84a 0b04 	str.w	r0, [sl], #4
 8009666:	f853 2b04 	ldr.w	r2, [r3], #4
 800966a:	459c      	cmp	ip, r3
 800966c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009670:	d8f3      	bhi.n	800965a <__lshift+0x6e>
 8009672:	ebac 0304 	sub.w	r3, ip, r4
 8009676:	3b15      	subs	r3, #21
 8009678:	f023 0303 	bic.w	r3, r3, #3
 800967c:	3304      	adds	r3, #4
 800967e:	f104 0015 	add.w	r0, r4, #21
 8009682:	4584      	cmp	ip, r0
 8009684:	bf38      	it	cc
 8009686:	2304      	movcc	r3, #4
 8009688:	50ca      	str	r2, [r1, r3]
 800968a:	b10a      	cbz	r2, 8009690 <__lshift+0xa4>
 800968c:	f108 0602 	add.w	r6, r8, #2
 8009690:	3e01      	subs	r6, #1
 8009692:	4638      	mov	r0, r7
 8009694:	612e      	str	r6, [r5, #16]
 8009696:	4621      	mov	r1, r4
 8009698:	f7ff fdda 	bl	8009250 <_Bfree>
 800969c:	4628      	mov	r0, r5
 800969e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80096a6:	3301      	adds	r3, #1
 80096a8:	e7c5      	b.n	8009636 <__lshift+0x4a>
 80096aa:	3904      	subs	r1, #4
 80096ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80096b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096b4:	459c      	cmp	ip, r3
 80096b6:	d8f9      	bhi.n	80096ac <__lshift+0xc0>
 80096b8:	e7ea      	b.n	8009690 <__lshift+0xa4>
 80096ba:	bf00      	nop
 80096bc:	0800b8bc 	.word	0x0800b8bc
 80096c0:	0800b8cd 	.word	0x0800b8cd

080096c4 <__mcmp>:
 80096c4:	690a      	ldr	r2, [r1, #16]
 80096c6:	4603      	mov	r3, r0
 80096c8:	6900      	ldr	r0, [r0, #16]
 80096ca:	1a80      	subs	r0, r0, r2
 80096cc:	b530      	push	{r4, r5, lr}
 80096ce:	d10e      	bne.n	80096ee <__mcmp+0x2a>
 80096d0:	3314      	adds	r3, #20
 80096d2:	3114      	adds	r1, #20
 80096d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80096d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80096dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80096e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80096e4:	4295      	cmp	r5, r2
 80096e6:	d003      	beq.n	80096f0 <__mcmp+0x2c>
 80096e8:	d205      	bcs.n	80096f6 <__mcmp+0x32>
 80096ea:	f04f 30ff 	mov.w	r0, #4294967295
 80096ee:	bd30      	pop	{r4, r5, pc}
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	d3f3      	bcc.n	80096dc <__mcmp+0x18>
 80096f4:	e7fb      	b.n	80096ee <__mcmp+0x2a>
 80096f6:	2001      	movs	r0, #1
 80096f8:	e7f9      	b.n	80096ee <__mcmp+0x2a>
	...

080096fc <__mdiff>:
 80096fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009700:	4689      	mov	r9, r1
 8009702:	4606      	mov	r6, r0
 8009704:	4611      	mov	r1, r2
 8009706:	4648      	mov	r0, r9
 8009708:	4614      	mov	r4, r2
 800970a:	f7ff ffdb 	bl	80096c4 <__mcmp>
 800970e:	1e05      	subs	r5, r0, #0
 8009710:	d112      	bne.n	8009738 <__mdiff+0x3c>
 8009712:	4629      	mov	r1, r5
 8009714:	4630      	mov	r0, r6
 8009716:	f7ff fd5b 	bl	80091d0 <_Balloc>
 800971a:	4602      	mov	r2, r0
 800971c:	b928      	cbnz	r0, 800972a <__mdiff+0x2e>
 800971e:	4b3f      	ldr	r3, [pc, #252]	@ (800981c <__mdiff+0x120>)
 8009720:	f240 2137 	movw	r1, #567	@ 0x237
 8009724:	483e      	ldr	r0, [pc, #248]	@ (8009820 <__mdiff+0x124>)
 8009726:	f000 fb65 	bl	8009df4 <__assert_func>
 800972a:	2301      	movs	r3, #1
 800972c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009730:	4610      	mov	r0, r2
 8009732:	b003      	add	sp, #12
 8009734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009738:	bfbc      	itt	lt
 800973a:	464b      	movlt	r3, r9
 800973c:	46a1      	movlt	r9, r4
 800973e:	4630      	mov	r0, r6
 8009740:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009744:	bfba      	itte	lt
 8009746:	461c      	movlt	r4, r3
 8009748:	2501      	movlt	r5, #1
 800974a:	2500      	movge	r5, #0
 800974c:	f7ff fd40 	bl	80091d0 <_Balloc>
 8009750:	4602      	mov	r2, r0
 8009752:	b918      	cbnz	r0, 800975c <__mdiff+0x60>
 8009754:	4b31      	ldr	r3, [pc, #196]	@ (800981c <__mdiff+0x120>)
 8009756:	f240 2145 	movw	r1, #581	@ 0x245
 800975a:	e7e3      	b.n	8009724 <__mdiff+0x28>
 800975c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009760:	6926      	ldr	r6, [r4, #16]
 8009762:	60c5      	str	r5, [r0, #12]
 8009764:	f109 0310 	add.w	r3, r9, #16
 8009768:	f109 0514 	add.w	r5, r9, #20
 800976c:	f104 0e14 	add.w	lr, r4, #20
 8009770:	f100 0b14 	add.w	fp, r0, #20
 8009774:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009778:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800977c:	9301      	str	r3, [sp, #4]
 800977e:	46d9      	mov	r9, fp
 8009780:	f04f 0c00 	mov.w	ip, #0
 8009784:	9b01      	ldr	r3, [sp, #4]
 8009786:	f85e 0b04 	ldr.w	r0, [lr], #4
 800978a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	fa1f f38a 	uxth.w	r3, sl
 8009794:	4619      	mov	r1, r3
 8009796:	b283      	uxth	r3, r0
 8009798:	1acb      	subs	r3, r1, r3
 800979a:	0c00      	lsrs	r0, r0, #16
 800979c:	4463      	add	r3, ip
 800979e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80097a2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80097ac:	4576      	cmp	r6, lr
 80097ae:	f849 3b04 	str.w	r3, [r9], #4
 80097b2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097b6:	d8e5      	bhi.n	8009784 <__mdiff+0x88>
 80097b8:	1b33      	subs	r3, r6, r4
 80097ba:	3b15      	subs	r3, #21
 80097bc:	f023 0303 	bic.w	r3, r3, #3
 80097c0:	3415      	adds	r4, #21
 80097c2:	3304      	adds	r3, #4
 80097c4:	42a6      	cmp	r6, r4
 80097c6:	bf38      	it	cc
 80097c8:	2304      	movcc	r3, #4
 80097ca:	441d      	add	r5, r3
 80097cc:	445b      	add	r3, fp
 80097ce:	461e      	mov	r6, r3
 80097d0:	462c      	mov	r4, r5
 80097d2:	4544      	cmp	r4, r8
 80097d4:	d30e      	bcc.n	80097f4 <__mdiff+0xf8>
 80097d6:	f108 0103 	add.w	r1, r8, #3
 80097da:	1b49      	subs	r1, r1, r5
 80097dc:	f021 0103 	bic.w	r1, r1, #3
 80097e0:	3d03      	subs	r5, #3
 80097e2:	45a8      	cmp	r8, r5
 80097e4:	bf38      	it	cc
 80097e6:	2100      	movcc	r1, #0
 80097e8:	440b      	add	r3, r1
 80097ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80097ee:	b191      	cbz	r1, 8009816 <__mdiff+0x11a>
 80097f0:	6117      	str	r7, [r2, #16]
 80097f2:	e79d      	b.n	8009730 <__mdiff+0x34>
 80097f4:	f854 1b04 	ldr.w	r1, [r4], #4
 80097f8:	46e6      	mov	lr, ip
 80097fa:	0c08      	lsrs	r0, r1, #16
 80097fc:	fa1c fc81 	uxtah	ip, ip, r1
 8009800:	4471      	add	r1, lr
 8009802:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009806:	b289      	uxth	r1, r1
 8009808:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800980c:	f846 1b04 	str.w	r1, [r6], #4
 8009810:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009814:	e7dd      	b.n	80097d2 <__mdiff+0xd6>
 8009816:	3f01      	subs	r7, #1
 8009818:	e7e7      	b.n	80097ea <__mdiff+0xee>
 800981a:	bf00      	nop
 800981c:	0800b8bc 	.word	0x0800b8bc
 8009820:	0800b8cd 	.word	0x0800b8cd

08009824 <__d2b>:
 8009824:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009828:	460f      	mov	r7, r1
 800982a:	2101      	movs	r1, #1
 800982c:	ec59 8b10 	vmov	r8, r9, d0
 8009830:	4616      	mov	r6, r2
 8009832:	f7ff fccd 	bl	80091d0 <_Balloc>
 8009836:	4604      	mov	r4, r0
 8009838:	b930      	cbnz	r0, 8009848 <__d2b+0x24>
 800983a:	4602      	mov	r2, r0
 800983c:	4b23      	ldr	r3, [pc, #140]	@ (80098cc <__d2b+0xa8>)
 800983e:	4824      	ldr	r0, [pc, #144]	@ (80098d0 <__d2b+0xac>)
 8009840:	f240 310f 	movw	r1, #783	@ 0x30f
 8009844:	f000 fad6 	bl	8009df4 <__assert_func>
 8009848:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800984c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009850:	b10d      	cbz	r5, 8009856 <__d2b+0x32>
 8009852:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009856:	9301      	str	r3, [sp, #4]
 8009858:	f1b8 0300 	subs.w	r3, r8, #0
 800985c:	d023      	beq.n	80098a6 <__d2b+0x82>
 800985e:	4668      	mov	r0, sp
 8009860:	9300      	str	r3, [sp, #0]
 8009862:	f7ff fd7c 	bl	800935e <__lo0bits>
 8009866:	e9dd 1200 	ldrd	r1, r2, [sp]
 800986a:	b1d0      	cbz	r0, 80098a2 <__d2b+0x7e>
 800986c:	f1c0 0320 	rsb	r3, r0, #32
 8009870:	fa02 f303 	lsl.w	r3, r2, r3
 8009874:	430b      	orrs	r3, r1
 8009876:	40c2      	lsrs	r2, r0
 8009878:	6163      	str	r3, [r4, #20]
 800987a:	9201      	str	r2, [sp, #4]
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	61a3      	str	r3, [r4, #24]
 8009880:	2b00      	cmp	r3, #0
 8009882:	bf0c      	ite	eq
 8009884:	2201      	moveq	r2, #1
 8009886:	2202      	movne	r2, #2
 8009888:	6122      	str	r2, [r4, #16]
 800988a:	b1a5      	cbz	r5, 80098b6 <__d2b+0x92>
 800988c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009890:	4405      	add	r5, r0
 8009892:	603d      	str	r5, [r7, #0]
 8009894:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009898:	6030      	str	r0, [r6, #0]
 800989a:	4620      	mov	r0, r4
 800989c:	b003      	add	sp, #12
 800989e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098a2:	6161      	str	r1, [r4, #20]
 80098a4:	e7ea      	b.n	800987c <__d2b+0x58>
 80098a6:	a801      	add	r0, sp, #4
 80098a8:	f7ff fd59 	bl	800935e <__lo0bits>
 80098ac:	9b01      	ldr	r3, [sp, #4]
 80098ae:	6163      	str	r3, [r4, #20]
 80098b0:	3020      	adds	r0, #32
 80098b2:	2201      	movs	r2, #1
 80098b4:	e7e8      	b.n	8009888 <__d2b+0x64>
 80098b6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80098be:	6038      	str	r0, [r7, #0]
 80098c0:	6918      	ldr	r0, [r3, #16]
 80098c2:	f7ff fd2d 	bl	8009320 <__hi0bits>
 80098c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098ca:	e7e5      	b.n	8009898 <__d2b+0x74>
 80098cc:	0800b8bc 	.word	0x0800b8bc
 80098d0:	0800b8cd 	.word	0x0800b8cd

080098d4 <__sfputc_r>:
 80098d4:	6893      	ldr	r3, [r2, #8]
 80098d6:	3b01      	subs	r3, #1
 80098d8:	2b00      	cmp	r3, #0
 80098da:	b410      	push	{r4}
 80098dc:	6093      	str	r3, [r2, #8]
 80098de:	da08      	bge.n	80098f2 <__sfputc_r+0x1e>
 80098e0:	6994      	ldr	r4, [r2, #24]
 80098e2:	42a3      	cmp	r3, r4
 80098e4:	db01      	blt.n	80098ea <__sfputc_r+0x16>
 80098e6:	290a      	cmp	r1, #10
 80098e8:	d103      	bne.n	80098f2 <__sfputc_r+0x1e>
 80098ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098ee:	f7fe bc0e 	b.w	800810e <__swbuf_r>
 80098f2:	6813      	ldr	r3, [r2, #0]
 80098f4:	1c58      	adds	r0, r3, #1
 80098f6:	6010      	str	r0, [r2, #0]
 80098f8:	7019      	strb	r1, [r3, #0]
 80098fa:	4608      	mov	r0, r1
 80098fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009900:	4770      	bx	lr

08009902 <__sfputs_r>:
 8009902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009904:	4606      	mov	r6, r0
 8009906:	460f      	mov	r7, r1
 8009908:	4614      	mov	r4, r2
 800990a:	18d5      	adds	r5, r2, r3
 800990c:	42ac      	cmp	r4, r5
 800990e:	d101      	bne.n	8009914 <__sfputs_r+0x12>
 8009910:	2000      	movs	r0, #0
 8009912:	e007      	b.n	8009924 <__sfputs_r+0x22>
 8009914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009918:	463a      	mov	r2, r7
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff ffda 	bl	80098d4 <__sfputc_r>
 8009920:	1c43      	adds	r3, r0, #1
 8009922:	d1f3      	bne.n	800990c <__sfputs_r+0xa>
 8009924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009928 <_vfiprintf_r>:
 8009928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800992c:	460d      	mov	r5, r1
 800992e:	b09d      	sub	sp, #116	@ 0x74
 8009930:	4614      	mov	r4, r2
 8009932:	4698      	mov	r8, r3
 8009934:	4606      	mov	r6, r0
 8009936:	b118      	cbz	r0, 8009940 <_vfiprintf_r+0x18>
 8009938:	6a03      	ldr	r3, [r0, #32]
 800993a:	b90b      	cbnz	r3, 8009940 <_vfiprintf_r+0x18>
 800993c:	f7fe fafe 	bl	8007f3c <__sinit>
 8009940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009942:	07d9      	lsls	r1, r3, #31
 8009944:	d405      	bmi.n	8009952 <_vfiprintf_r+0x2a>
 8009946:	89ab      	ldrh	r3, [r5, #12]
 8009948:	059a      	lsls	r2, r3, #22
 800994a:	d402      	bmi.n	8009952 <_vfiprintf_r+0x2a>
 800994c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800994e:	f7fe fcf0 	bl	8008332 <__retarget_lock_acquire_recursive>
 8009952:	89ab      	ldrh	r3, [r5, #12]
 8009954:	071b      	lsls	r3, r3, #28
 8009956:	d501      	bpl.n	800995c <_vfiprintf_r+0x34>
 8009958:	692b      	ldr	r3, [r5, #16]
 800995a:	b99b      	cbnz	r3, 8009984 <_vfiprintf_r+0x5c>
 800995c:	4629      	mov	r1, r5
 800995e:	4630      	mov	r0, r6
 8009960:	f7fe fc14 	bl	800818c <__swsetup_r>
 8009964:	b170      	cbz	r0, 8009984 <_vfiprintf_r+0x5c>
 8009966:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009968:	07dc      	lsls	r4, r3, #31
 800996a:	d504      	bpl.n	8009976 <_vfiprintf_r+0x4e>
 800996c:	f04f 30ff 	mov.w	r0, #4294967295
 8009970:	b01d      	add	sp, #116	@ 0x74
 8009972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009976:	89ab      	ldrh	r3, [r5, #12]
 8009978:	0598      	lsls	r0, r3, #22
 800997a:	d4f7      	bmi.n	800996c <_vfiprintf_r+0x44>
 800997c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800997e:	f7fe fcd9 	bl	8008334 <__retarget_lock_release_recursive>
 8009982:	e7f3      	b.n	800996c <_vfiprintf_r+0x44>
 8009984:	2300      	movs	r3, #0
 8009986:	9309      	str	r3, [sp, #36]	@ 0x24
 8009988:	2320      	movs	r3, #32
 800998a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800998e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009992:	2330      	movs	r3, #48	@ 0x30
 8009994:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b44 <_vfiprintf_r+0x21c>
 8009998:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800999c:	f04f 0901 	mov.w	r9, #1
 80099a0:	4623      	mov	r3, r4
 80099a2:	469a      	mov	sl, r3
 80099a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099a8:	b10a      	cbz	r2, 80099ae <_vfiprintf_r+0x86>
 80099aa:	2a25      	cmp	r2, #37	@ 0x25
 80099ac:	d1f9      	bne.n	80099a2 <_vfiprintf_r+0x7a>
 80099ae:	ebba 0b04 	subs.w	fp, sl, r4
 80099b2:	d00b      	beq.n	80099cc <_vfiprintf_r+0xa4>
 80099b4:	465b      	mov	r3, fp
 80099b6:	4622      	mov	r2, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	4630      	mov	r0, r6
 80099bc:	f7ff ffa1 	bl	8009902 <__sfputs_r>
 80099c0:	3001      	adds	r0, #1
 80099c2:	f000 80a7 	beq.w	8009b14 <_vfiprintf_r+0x1ec>
 80099c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099c8:	445a      	add	r2, fp
 80099ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80099cc:	f89a 3000 	ldrb.w	r3, [sl]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f000 809f 	beq.w	8009b14 <_vfiprintf_r+0x1ec>
 80099d6:	2300      	movs	r3, #0
 80099d8:	f04f 32ff 	mov.w	r2, #4294967295
 80099dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099e0:	f10a 0a01 	add.w	sl, sl, #1
 80099e4:	9304      	str	r3, [sp, #16]
 80099e6:	9307      	str	r3, [sp, #28]
 80099e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80099ee:	4654      	mov	r4, sl
 80099f0:	2205      	movs	r2, #5
 80099f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099f6:	4853      	ldr	r0, [pc, #332]	@ (8009b44 <_vfiprintf_r+0x21c>)
 80099f8:	f7f6 fc0a 	bl	8000210 <memchr>
 80099fc:	9a04      	ldr	r2, [sp, #16]
 80099fe:	b9d8      	cbnz	r0, 8009a38 <_vfiprintf_r+0x110>
 8009a00:	06d1      	lsls	r1, r2, #27
 8009a02:	bf44      	itt	mi
 8009a04:	2320      	movmi	r3, #32
 8009a06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a0a:	0713      	lsls	r3, r2, #28
 8009a0c:	bf44      	itt	mi
 8009a0e:	232b      	movmi	r3, #43	@ 0x2b
 8009a10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a14:	f89a 3000 	ldrb.w	r3, [sl]
 8009a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a1a:	d015      	beq.n	8009a48 <_vfiprintf_r+0x120>
 8009a1c:	9a07      	ldr	r2, [sp, #28]
 8009a1e:	4654      	mov	r4, sl
 8009a20:	2000      	movs	r0, #0
 8009a22:	f04f 0c0a 	mov.w	ip, #10
 8009a26:	4621      	mov	r1, r4
 8009a28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a2c:	3b30      	subs	r3, #48	@ 0x30
 8009a2e:	2b09      	cmp	r3, #9
 8009a30:	d94b      	bls.n	8009aca <_vfiprintf_r+0x1a2>
 8009a32:	b1b0      	cbz	r0, 8009a62 <_vfiprintf_r+0x13a>
 8009a34:	9207      	str	r2, [sp, #28]
 8009a36:	e014      	b.n	8009a62 <_vfiprintf_r+0x13a>
 8009a38:	eba0 0308 	sub.w	r3, r0, r8
 8009a3c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a40:	4313      	orrs	r3, r2
 8009a42:	9304      	str	r3, [sp, #16]
 8009a44:	46a2      	mov	sl, r4
 8009a46:	e7d2      	b.n	80099ee <_vfiprintf_r+0xc6>
 8009a48:	9b03      	ldr	r3, [sp, #12]
 8009a4a:	1d19      	adds	r1, r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	9103      	str	r1, [sp, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	bfbb      	ittet	lt
 8009a54:	425b      	neglt	r3, r3
 8009a56:	f042 0202 	orrlt.w	r2, r2, #2
 8009a5a:	9307      	strge	r3, [sp, #28]
 8009a5c:	9307      	strlt	r3, [sp, #28]
 8009a5e:	bfb8      	it	lt
 8009a60:	9204      	strlt	r2, [sp, #16]
 8009a62:	7823      	ldrb	r3, [r4, #0]
 8009a64:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a66:	d10a      	bne.n	8009a7e <_vfiprintf_r+0x156>
 8009a68:	7863      	ldrb	r3, [r4, #1]
 8009a6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a6c:	d132      	bne.n	8009ad4 <_vfiprintf_r+0x1ac>
 8009a6e:	9b03      	ldr	r3, [sp, #12]
 8009a70:	1d1a      	adds	r2, r3, #4
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	9203      	str	r2, [sp, #12]
 8009a76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a7a:	3402      	adds	r4, #2
 8009a7c:	9305      	str	r3, [sp, #20]
 8009a7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b54 <_vfiprintf_r+0x22c>
 8009a82:	7821      	ldrb	r1, [r4, #0]
 8009a84:	2203      	movs	r2, #3
 8009a86:	4650      	mov	r0, sl
 8009a88:	f7f6 fbc2 	bl	8000210 <memchr>
 8009a8c:	b138      	cbz	r0, 8009a9e <_vfiprintf_r+0x176>
 8009a8e:	9b04      	ldr	r3, [sp, #16]
 8009a90:	eba0 000a 	sub.w	r0, r0, sl
 8009a94:	2240      	movs	r2, #64	@ 0x40
 8009a96:	4082      	lsls	r2, r0
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	9304      	str	r3, [sp, #16]
 8009a9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa2:	4829      	ldr	r0, [pc, #164]	@ (8009b48 <_vfiprintf_r+0x220>)
 8009aa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009aa8:	2206      	movs	r2, #6
 8009aaa:	f7f6 fbb1 	bl	8000210 <memchr>
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	d03f      	beq.n	8009b32 <_vfiprintf_r+0x20a>
 8009ab2:	4b26      	ldr	r3, [pc, #152]	@ (8009b4c <_vfiprintf_r+0x224>)
 8009ab4:	bb1b      	cbnz	r3, 8009afe <_vfiprintf_r+0x1d6>
 8009ab6:	9b03      	ldr	r3, [sp, #12]
 8009ab8:	3307      	adds	r3, #7
 8009aba:	f023 0307 	bic.w	r3, r3, #7
 8009abe:	3308      	adds	r3, #8
 8009ac0:	9303      	str	r3, [sp, #12]
 8009ac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ac4:	443b      	add	r3, r7
 8009ac6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ac8:	e76a      	b.n	80099a0 <_vfiprintf_r+0x78>
 8009aca:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ace:	460c      	mov	r4, r1
 8009ad0:	2001      	movs	r0, #1
 8009ad2:	e7a8      	b.n	8009a26 <_vfiprintf_r+0xfe>
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	3401      	adds	r4, #1
 8009ad8:	9305      	str	r3, [sp, #20]
 8009ada:	4619      	mov	r1, r3
 8009adc:	f04f 0c0a 	mov.w	ip, #10
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae6:	3a30      	subs	r2, #48	@ 0x30
 8009ae8:	2a09      	cmp	r2, #9
 8009aea:	d903      	bls.n	8009af4 <_vfiprintf_r+0x1cc>
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d0c6      	beq.n	8009a7e <_vfiprintf_r+0x156>
 8009af0:	9105      	str	r1, [sp, #20]
 8009af2:	e7c4      	b.n	8009a7e <_vfiprintf_r+0x156>
 8009af4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009af8:	4604      	mov	r4, r0
 8009afa:	2301      	movs	r3, #1
 8009afc:	e7f0      	b.n	8009ae0 <_vfiprintf_r+0x1b8>
 8009afe:	ab03      	add	r3, sp, #12
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	462a      	mov	r2, r5
 8009b04:	4b12      	ldr	r3, [pc, #72]	@ (8009b50 <_vfiprintf_r+0x228>)
 8009b06:	a904      	add	r1, sp, #16
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f7fd fdd3 	bl	80076b4 <_printf_float>
 8009b0e:	4607      	mov	r7, r0
 8009b10:	1c78      	adds	r0, r7, #1
 8009b12:	d1d6      	bne.n	8009ac2 <_vfiprintf_r+0x19a>
 8009b14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b16:	07d9      	lsls	r1, r3, #31
 8009b18:	d405      	bmi.n	8009b26 <_vfiprintf_r+0x1fe>
 8009b1a:	89ab      	ldrh	r3, [r5, #12]
 8009b1c:	059a      	lsls	r2, r3, #22
 8009b1e:	d402      	bmi.n	8009b26 <_vfiprintf_r+0x1fe>
 8009b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b22:	f7fe fc07 	bl	8008334 <__retarget_lock_release_recursive>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	065b      	lsls	r3, r3, #25
 8009b2a:	f53f af1f 	bmi.w	800996c <_vfiprintf_r+0x44>
 8009b2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b30:	e71e      	b.n	8009970 <_vfiprintf_r+0x48>
 8009b32:	ab03      	add	r3, sp, #12
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	462a      	mov	r2, r5
 8009b38:	4b05      	ldr	r3, [pc, #20]	@ (8009b50 <_vfiprintf_r+0x228>)
 8009b3a:	a904      	add	r1, sp, #16
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f7fe f851 	bl	8007be4 <_printf_i>
 8009b42:	e7e4      	b.n	8009b0e <_vfiprintf_r+0x1e6>
 8009b44:	0800ba28 	.word	0x0800ba28
 8009b48:	0800ba32 	.word	0x0800ba32
 8009b4c:	080076b5 	.word	0x080076b5
 8009b50:	08009903 	.word	0x08009903
 8009b54:	0800ba2e 	.word	0x0800ba2e

08009b58 <__sflush_r>:
 8009b58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b60:	0716      	lsls	r6, r2, #28
 8009b62:	4605      	mov	r5, r0
 8009b64:	460c      	mov	r4, r1
 8009b66:	d454      	bmi.n	8009c12 <__sflush_r+0xba>
 8009b68:	684b      	ldr	r3, [r1, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	dc02      	bgt.n	8009b74 <__sflush_r+0x1c>
 8009b6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	dd48      	ble.n	8009c06 <__sflush_r+0xae>
 8009b74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b76:	2e00      	cmp	r6, #0
 8009b78:	d045      	beq.n	8009c06 <__sflush_r+0xae>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009b80:	682f      	ldr	r7, [r5, #0]
 8009b82:	6a21      	ldr	r1, [r4, #32]
 8009b84:	602b      	str	r3, [r5, #0]
 8009b86:	d030      	beq.n	8009bea <__sflush_r+0x92>
 8009b88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	0759      	lsls	r1, r3, #29
 8009b8e:	d505      	bpl.n	8009b9c <__sflush_r+0x44>
 8009b90:	6863      	ldr	r3, [r4, #4]
 8009b92:	1ad2      	subs	r2, r2, r3
 8009b94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009b96:	b10b      	cbz	r3, 8009b9c <__sflush_r+0x44>
 8009b98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b9a:	1ad2      	subs	r2, r2, r3
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ba0:	6a21      	ldr	r1, [r4, #32]
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b0      	blx	r6
 8009ba6:	1c43      	adds	r3, r0, #1
 8009ba8:	89a3      	ldrh	r3, [r4, #12]
 8009baa:	d106      	bne.n	8009bba <__sflush_r+0x62>
 8009bac:	6829      	ldr	r1, [r5, #0]
 8009bae:	291d      	cmp	r1, #29
 8009bb0:	d82b      	bhi.n	8009c0a <__sflush_r+0xb2>
 8009bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c5c <__sflush_r+0x104>)
 8009bb4:	410a      	asrs	r2, r1
 8009bb6:	07d6      	lsls	r6, r2, #31
 8009bb8:	d427      	bmi.n	8009c0a <__sflush_r+0xb2>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	6062      	str	r2, [r4, #4]
 8009bbe:	04d9      	lsls	r1, r3, #19
 8009bc0:	6922      	ldr	r2, [r4, #16]
 8009bc2:	6022      	str	r2, [r4, #0]
 8009bc4:	d504      	bpl.n	8009bd0 <__sflush_r+0x78>
 8009bc6:	1c42      	adds	r2, r0, #1
 8009bc8:	d101      	bne.n	8009bce <__sflush_r+0x76>
 8009bca:	682b      	ldr	r3, [r5, #0]
 8009bcc:	b903      	cbnz	r3, 8009bd0 <__sflush_r+0x78>
 8009bce:	6560      	str	r0, [r4, #84]	@ 0x54
 8009bd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bd2:	602f      	str	r7, [r5, #0]
 8009bd4:	b1b9      	cbz	r1, 8009c06 <__sflush_r+0xae>
 8009bd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009bda:	4299      	cmp	r1, r3
 8009bdc:	d002      	beq.n	8009be4 <__sflush_r+0x8c>
 8009bde:	4628      	mov	r0, r5
 8009be0:	f7ff f9f6 	bl	8008fd0 <_free_r>
 8009be4:	2300      	movs	r3, #0
 8009be6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009be8:	e00d      	b.n	8009c06 <__sflush_r+0xae>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4628      	mov	r0, r5
 8009bee:	47b0      	blx	r6
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	1c50      	adds	r0, r2, #1
 8009bf4:	d1c9      	bne.n	8009b8a <__sflush_r+0x32>
 8009bf6:	682b      	ldr	r3, [r5, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0c6      	beq.n	8009b8a <__sflush_r+0x32>
 8009bfc:	2b1d      	cmp	r3, #29
 8009bfe:	d001      	beq.n	8009c04 <__sflush_r+0xac>
 8009c00:	2b16      	cmp	r3, #22
 8009c02:	d11e      	bne.n	8009c42 <__sflush_r+0xea>
 8009c04:	602f      	str	r7, [r5, #0]
 8009c06:	2000      	movs	r0, #0
 8009c08:	e022      	b.n	8009c50 <__sflush_r+0xf8>
 8009c0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c0e:	b21b      	sxth	r3, r3
 8009c10:	e01b      	b.n	8009c4a <__sflush_r+0xf2>
 8009c12:	690f      	ldr	r7, [r1, #16]
 8009c14:	2f00      	cmp	r7, #0
 8009c16:	d0f6      	beq.n	8009c06 <__sflush_r+0xae>
 8009c18:	0793      	lsls	r3, r2, #30
 8009c1a:	680e      	ldr	r6, [r1, #0]
 8009c1c:	bf08      	it	eq
 8009c1e:	694b      	ldreq	r3, [r1, #20]
 8009c20:	600f      	str	r7, [r1, #0]
 8009c22:	bf18      	it	ne
 8009c24:	2300      	movne	r3, #0
 8009c26:	eba6 0807 	sub.w	r8, r6, r7
 8009c2a:	608b      	str	r3, [r1, #8]
 8009c2c:	f1b8 0f00 	cmp.w	r8, #0
 8009c30:	dde9      	ble.n	8009c06 <__sflush_r+0xae>
 8009c32:	6a21      	ldr	r1, [r4, #32]
 8009c34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c36:	4643      	mov	r3, r8
 8009c38:	463a      	mov	r2, r7
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	47b0      	blx	r6
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	dc08      	bgt.n	8009c54 <__sflush_r+0xfc>
 8009c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	4407      	add	r7, r0
 8009c56:	eba8 0800 	sub.w	r8, r8, r0
 8009c5a:	e7e7      	b.n	8009c2c <__sflush_r+0xd4>
 8009c5c:	dfbffffe 	.word	0xdfbffffe

08009c60 <_fflush_r>:
 8009c60:	b538      	push	{r3, r4, r5, lr}
 8009c62:	690b      	ldr	r3, [r1, #16]
 8009c64:	4605      	mov	r5, r0
 8009c66:	460c      	mov	r4, r1
 8009c68:	b913      	cbnz	r3, 8009c70 <_fflush_r+0x10>
 8009c6a:	2500      	movs	r5, #0
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	b118      	cbz	r0, 8009c7a <_fflush_r+0x1a>
 8009c72:	6a03      	ldr	r3, [r0, #32]
 8009c74:	b90b      	cbnz	r3, 8009c7a <_fflush_r+0x1a>
 8009c76:	f7fe f961 	bl	8007f3c <__sinit>
 8009c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d0f3      	beq.n	8009c6a <_fflush_r+0xa>
 8009c82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009c84:	07d0      	lsls	r0, r2, #31
 8009c86:	d404      	bmi.n	8009c92 <_fflush_r+0x32>
 8009c88:	0599      	lsls	r1, r3, #22
 8009c8a:	d402      	bmi.n	8009c92 <_fflush_r+0x32>
 8009c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c8e:	f7fe fb50 	bl	8008332 <__retarget_lock_acquire_recursive>
 8009c92:	4628      	mov	r0, r5
 8009c94:	4621      	mov	r1, r4
 8009c96:	f7ff ff5f 	bl	8009b58 <__sflush_r>
 8009c9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c9c:	07da      	lsls	r2, r3, #31
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	d4e4      	bmi.n	8009c6c <_fflush_r+0xc>
 8009ca2:	89a3      	ldrh	r3, [r4, #12]
 8009ca4:	059b      	lsls	r3, r3, #22
 8009ca6:	d4e1      	bmi.n	8009c6c <_fflush_r+0xc>
 8009ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009caa:	f7fe fb43 	bl	8008334 <__retarget_lock_release_recursive>
 8009cae:	e7dd      	b.n	8009c6c <_fflush_r+0xc>

08009cb0 <__swhatbuf_r>:
 8009cb0:	b570      	push	{r4, r5, r6, lr}
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb8:	2900      	cmp	r1, #0
 8009cba:	b096      	sub	sp, #88	@ 0x58
 8009cbc:	4615      	mov	r5, r2
 8009cbe:	461e      	mov	r6, r3
 8009cc0:	da0d      	bge.n	8009cde <__swhatbuf_r+0x2e>
 8009cc2:	89a3      	ldrh	r3, [r4, #12]
 8009cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cc8:	f04f 0100 	mov.w	r1, #0
 8009ccc:	bf14      	ite	ne
 8009cce:	2340      	movne	r3, #64	@ 0x40
 8009cd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	6031      	str	r1, [r6, #0]
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	b016      	add	sp, #88	@ 0x58
 8009cdc:	bd70      	pop	{r4, r5, r6, pc}
 8009cde:	466a      	mov	r2, sp
 8009ce0:	f000 f848 	bl	8009d74 <_fstat_r>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	dbec      	blt.n	8009cc2 <__swhatbuf_r+0x12>
 8009ce8:	9901      	ldr	r1, [sp, #4]
 8009cea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cf2:	4259      	negs	r1, r3
 8009cf4:	4159      	adcs	r1, r3
 8009cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009cfa:	e7eb      	b.n	8009cd4 <__swhatbuf_r+0x24>

08009cfc <__smakebuf_r>:
 8009cfc:	898b      	ldrh	r3, [r1, #12]
 8009cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d00:	079d      	lsls	r5, r3, #30
 8009d02:	4606      	mov	r6, r0
 8009d04:	460c      	mov	r4, r1
 8009d06:	d507      	bpl.n	8009d18 <__smakebuf_r+0x1c>
 8009d08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	6123      	str	r3, [r4, #16]
 8009d10:	2301      	movs	r3, #1
 8009d12:	6163      	str	r3, [r4, #20]
 8009d14:	b003      	add	sp, #12
 8009d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d18:	ab01      	add	r3, sp, #4
 8009d1a:	466a      	mov	r2, sp
 8009d1c:	f7ff ffc8 	bl	8009cb0 <__swhatbuf_r>
 8009d20:	9f00      	ldr	r7, [sp, #0]
 8009d22:	4605      	mov	r5, r0
 8009d24:	4639      	mov	r1, r7
 8009d26:	4630      	mov	r0, r6
 8009d28:	f7ff f9c6 	bl	80090b8 <_malloc_r>
 8009d2c:	b948      	cbnz	r0, 8009d42 <__smakebuf_r+0x46>
 8009d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d32:	059a      	lsls	r2, r3, #22
 8009d34:	d4ee      	bmi.n	8009d14 <__smakebuf_r+0x18>
 8009d36:	f023 0303 	bic.w	r3, r3, #3
 8009d3a:	f043 0302 	orr.w	r3, r3, #2
 8009d3e:	81a3      	strh	r3, [r4, #12]
 8009d40:	e7e2      	b.n	8009d08 <__smakebuf_r+0xc>
 8009d42:	89a3      	ldrh	r3, [r4, #12]
 8009d44:	6020      	str	r0, [r4, #0]
 8009d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	9b01      	ldr	r3, [sp, #4]
 8009d4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d52:	b15b      	cbz	r3, 8009d6c <__smakebuf_r+0x70>
 8009d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f000 f81d 	bl	8009d98 <_isatty_r>
 8009d5e:	b128      	cbz	r0, 8009d6c <__smakebuf_r+0x70>
 8009d60:	89a3      	ldrh	r3, [r4, #12]
 8009d62:	f023 0303 	bic.w	r3, r3, #3
 8009d66:	f043 0301 	orr.w	r3, r3, #1
 8009d6a:	81a3      	strh	r3, [r4, #12]
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	431d      	orrs	r5, r3
 8009d70:	81a5      	strh	r5, [r4, #12]
 8009d72:	e7cf      	b.n	8009d14 <__smakebuf_r+0x18>

08009d74 <_fstat_r>:
 8009d74:	b538      	push	{r3, r4, r5, lr}
 8009d76:	4d07      	ldr	r5, [pc, #28]	@ (8009d94 <_fstat_r+0x20>)
 8009d78:	2300      	movs	r3, #0
 8009d7a:	4604      	mov	r4, r0
 8009d7c:	4608      	mov	r0, r1
 8009d7e:	4611      	mov	r1, r2
 8009d80:	602b      	str	r3, [r5, #0]
 8009d82:	f7f8 fd57 	bl	8002834 <_fstat>
 8009d86:	1c43      	adds	r3, r0, #1
 8009d88:	d102      	bne.n	8009d90 <_fstat_r+0x1c>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	b103      	cbz	r3, 8009d90 <_fstat_r+0x1c>
 8009d8e:	6023      	str	r3, [r4, #0]
 8009d90:	bd38      	pop	{r3, r4, r5, pc}
 8009d92:	bf00      	nop
 8009d94:	200005f4 	.word	0x200005f4

08009d98 <_isatty_r>:
 8009d98:	b538      	push	{r3, r4, r5, lr}
 8009d9a:	4d06      	ldr	r5, [pc, #24]	@ (8009db4 <_isatty_r+0x1c>)
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	4604      	mov	r4, r0
 8009da0:	4608      	mov	r0, r1
 8009da2:	602b      	str	r3, [r5, #0]
 8009da4:	f7f8 fd56 	bl	8002854 <_isatty>
 8009da8:	1c43      	adds	r3, r0, #1
 8009daa:	d102      	bne.n	8009db2 <_isatty_r+0x1a>
 8009dac:	682b      	ldr	r3, [r5, #0]
 8009dae:	b103      	cbz	r3, 8009db2 <_isatty_r+0x1a>
 8009db0:	6023      	str	r3, [r4, #0]
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	200005f4 	.word	0x200005f4

08009db8 <_sbrk_r>:
 8009db8:	b538      	push	{r3, r4, r5, lr}
 8009dba:	4d06      	ldr	r5, [pc, #24]	@ (8009dd4 <_sbrk_r+0x1c>)
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	4604      	mov	r4, r0
 8009dc0:	4608      	mov	r0, r1
 8009dc2:	602b      	str	r3, [r5, #0]
 8009dc4:	f7f8 fd5e 	bl	8002884 <_sbrk>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d102      	bne.n	8009dd2 <_sbrk_r+0x1a>
 8009dcc:	682b      	ldr	r3, [r5, #0]
 8009dce:	b103      	cbz	r3, 8009dd2 <_sbrk_r+0x1a>
 8009dd0:	6023      	str	r3, [r4, #0]
 8009dd2:	bd38      	pop	{r3, r4, r5, pc}
 8009dd4:	200005f4 	.word	0x200005f4

08009dd8 <memcpy>:
 8009dd8:	440a      	add	r2, r1
 8009dda:	4291      	cmp	r1, r2
 8009ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009de0:	d100      	bne.n	8009de4 <memcpy+0xc>
 8009de2:	4770      	bx	lr
 8009de4:	b510      	push	{r4, lr}
 8009de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dee:	4291      	cmp	r1, r2
 8009df0:	d1f9      	bne.n	8009de6 <memcpy+0xe>
 8009df2:	bd10      	pop	{r4, pc}

08009df4 <__assert_func>:
 8009df4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009df6:	4614      	mov	r4, r2
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4b09      	ldr	r3, [pc, #36]	@ (8009e20 <__assert_func+0x2c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4605      	mov	r5, r0
 8009e00:	68d8      	ldr	r0, [r3, #12]
 8009e02:	b954      	cbnz	r4, 8009e1a <__assert_func+0x26>
 8009e04:	4b07      	ldr	r3, [pc, #28]	@ (8009e24 <__assert_func+0x30>)
 8009e06:	461c      	mov	r4, r3
 8009e08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e0c:	9100      	str	r1, [sp, #0]
 8009e0e:	462b      	mov	r3, r5
 8009e10:	4905      	ldr	r1, [pc, #20]	@ (8009e28 <__assert_func+0x34>)
 8009e12:	f000 f841 	bl	8009e98 <fiprintf>
 8009e16:	f000 f851 	bl	8009ebc <abort>
 8009e1a:	4b04      	ldr	r3, [pc, #16]	@ (8009e2c <__assert_func+0x38>)
 8009e1c:	e7f4      	b.n	8009e08 <__assert_func+0x14>
 8009e1e:	bf00      	nop
 8009e20:	20000028 	.word	0x20000028
 8009e24:	0800ba7e 	.word	0x0800ba7e
 8009e28:	0800ba50 	.word	0x0800ba50
 8009e2c:	0800ba43 	.word	0x0800ba43

08009e30 <_calloc_r>:
 8009e30:	b570      	push	{r4, r5, r6, lr}
 8009e32:	fba1 5402 	umull	r5, r4, r1, r2
 8009e36:	b93c      	cbnz	r4, 8009e48 <_calloc_r+0x18>
 8009e38:	4629      	mov	r1, r5
 8009e3a:	f7ff f93d 	bl	80090b8 <_malloc_r>
 8009e3e:	4606      	mov	r6, r0
 8009e40:	b928      	cbnz	r0, 8009e4e <_calloc_r+0x1e>
 8009e42:	2600      	movs	r6, #0
 8009e44:	4630      	mov	r0, r6
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	220c      	movs	r2, #12
 8009e4a:	6002      	str	r2, [r0, #0]
 8009e4c:	e7f9      	b.n	8009e42 <_calloc_r+0x12>
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4621      	mov	r1, r4
 8009e52:	f7fe f9f1 	bl	8008238 <memset>
 8009e56:	e7f5      	b.n	8009e44 <_calloc_r+0x14>

08009e58 <__ascii_mbtowc>:
 8009e58:	b082      	sub	sp, #8
 8009e5a:	b901      	cbnz	r1, 8009e5e <__ascii_mbtowc+0x6>
 8009e5c:	a901      	add	r1, sp, #4
 8009e5e:	b142      	cbz	r2, 8009e72 <__ascii_mbtowc+0x1a>
 8009e60:	b14b      	cbz	r3, 8009e76 <__ascii_mbtowc+0x1e>
 8009e62:	7813      	ldrb	r3, [r2, #0]
 8009e64:	600b      	str	r3, [r1, #0]
 8009e66:	7812      	ldrb	r2, [r2, #0]
 8009e68:	1e10      	subs	r0, r2, #0
 8009e6a:	bf18      	it	ne
 8009e6c:	2001      	movne	r0, #1
 8009e6e:	b002      	add	sp, #8
 8009e70:	4770      	bx	lr
 8009e72:	4610      	mov	r0, r2
 8009e74:	e7fb      	b.n	8009e6e <__ascii_mbtowc+0x16>
 8009e76:	f06f 0001 	mvn.w	r0, #1
 8009e7a:	e7f8      	b.n	8009e6e <__ascii_mbtowc+0x16>

08009e7c <__ascii_wctomb>:
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	4608      	mov	r0, r1
 8009e80:	b141      	cbz	r1, 8009e94 <__ascii_wctomb+0x18>
 8009e82:	2aff      	cmp	r2, #255	@ 0xff
 8009e84:	d904      	bls.n	8009e90 <__ascii_wctomb+0x14>
 8009e86:	228a      	movs	r2, #138	@ 0x8a
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8e:	4770      	bx	lr
 8009e90:	700a      	strb	r2, [r1, #0]
 8009e92:	2001      	movs	r0, #1
 8009e94:	4770      	bx	lr
	...

08009e98 <fiprintf>:
 8009e98:	b40e      	push	{r1, r2, r3}
 8009e9a:	b503      	push	{r0, r1, lr}
 8009e9c:	4601      	mov	r1, r0
 8009e9e:	ab03      	add	r3, sp, #12
 8009ea0:	4805      	ldr	r0, [pc, #20]	@ (8009eb8 <fiprintf+0x20>)
 8009ea2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ea6:	6800      	ldr	r0, [r0, #0]
 8009ea8:	9301      	str	r3, [sp, #4]
 8009eaa:	f7ff fd3d 	bl	8009928 <_vfiprintf_r>
 8009eae:	b002      	add	sp, #8
 8009eb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eb4:	b003      	add	sp, #12
 8009eb6:	4770      	bx	lr
 8009eb8:	20000028 	.word	0x20000028

08009ebc <abort>:
 8009ebc:	b508      	push	{r3, lr}
 8009ebe:	2006      	movs	r0, #6
 8009ec0:	f000 f82c 	bl	8009f1c <raise>
 8009ec4:	2001      	movs	r0, #1
 8009ec6:	f7f8 fc81 	bl	80027cc <_exit>

08009eca <_raise_r>:
 8009eca:	291f      	cmp	r1, #31
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4605      	mov	r5, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	d904      	bls.n	8009ede <_raise_r+0x14>
 8009ed4:	2316      	movs	r3, #22
 8009ed6:	6003      	str	r3, [r0, #0]
 8009ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8009edc:	bd38      	pop	{r3, r4, r5, pc}
 8009ede:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ee0:	b112      	cbz	r2, 8009ee8 <_raise_r+0x1e>
 8009ee2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ee6:	b94b      	cbnz	r3, 8009efc <_raise_r+0x32>
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f000 f831 	bl	8009f50 <_getpid_r>
 8009eee:	4622      	mov	r2, r4
 8009ef0:	4601      	mov	r1, r0
 8009ef2:	4628      	mov	r0, r5
 8009ef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ef8:	f000 b818 	b.w	8009f2c <_kill_r>
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d00a      	beq.n	8009f16 <_raise_r+0x4c>
 8009f00:	1c59      	adds	r1, r3, #1
 8009f02:	d103      	bne.n	8009f0c <_raise_r+0x42>
 8009f04:	2316      	movs	r3, #22
 8009f06:	6003      	str	r3, [r0, #0]
 8009f08:	2001      	movs	r0, #1
 8009f0a:	e7e7      	b.n	8009edc <_raise_r+0x12>
 8009f0c:	2100      	movs	r1, #0
 8009f0e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f12:	4620      	mov	r0, r4
 8009f14:	4798      	blx	r3
 8009f16:	2000      	movs	r0, #0
 8009f18:	e7e0      	b.n	8009edc <_raise_r+0x12>
	...

08009f1c <raise>:
 8009f1c:	4b02      	ldr	r3, [pc, #8]	@ (8009f28 <raise+0xc>)
 8009f1e:	4601      	mov	r1, r0
 8009f20:	6818      	ldr	r0, [r3, #0]
 8009f22:	f7ff bfd2 	b.w	8009eca <_raise_r>
 8009f26:	bf00      	nop
 8009f28:	20000028 	.word	0x20000028

08009f2c <_kill_r>:
 8009f2c:	b538      	push	{r3, r4, r5, lr}
 8009f2e:	4d07      	ldr	r5, [pc, #28]	@ (8009f4c <_kill_r+0x20>)
 8009f30:	2300      	movs	r3, #0
 8009f32:	4604      	mov	r4, r0
 8009f34:	4608      	mov	r0, r1
 8009f36:	4611      	mov	r1, r2
 8009f38:	602b      	str	r3, [r5, #0]
 8009f3a:	f7f8 fc37 	bl	80027ac <_kill>
 8009f3e:	1c43      	adds	r3, r0, #1
 8009f40:	d102      	bne.n	8009f48 <_kill_r+0x1c>
 8009f42:	682b      	ldr	r3, [r5, #0]
 8009f44:	b103      	cbz	r3, 8009f48 <_kill_r+0x1c>
 8009f46:	6023      	str	r3, [r4, #0]
 8009f48:	bd38      	pop	{r3, r4, r5, pc}
 8009f4a:	bf00      	nop
 8009f4c:	200005f4 	.word	0x200005f4

08009f50 <_getpid_r>:
 8009f50:	f7f8 bc24 	b.w	800279c <_getpid>

08009f54 <atan2>:
 8009f54:	f000 bb34 	b.w	800a5c0 <__ieee754_atan2>

08009f58 <sqrt>:
 8009f58:	b538      	push	{r3, r4, r5, lr}
 8009f5a:	ed2d 8b02 	vpush	{d8}
 8009f5e:	ec55 4b10 	vmov	r4, r5, d0
 8009f62:	f000 f8cd 	bl	800a100 <__ieee754_sqrt>
 8009f66:	4622      	mov	r2, r4
 8009f68:	462b      	mov	r3, r5
 8009f6a:	4620      	mov	r0, r4
 8009f6c:	4629      	mov	r1, r5
 8009f6e:	eeb0 8a40 	vmov.f32	s16, s0
 8009f72:	eef0 8a60 	vmov.f32	s17, s1
 8009f76:	f7f6 fdf9 	bl	8000b6c <__aeabi_dcmpun>
 8009f7a:	b990      	cbnz	r0, 8009fa2 <sqrt+0x4a>
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	2300      	movs	r3, #0
 8009f80:	4620      	mov	r0, r4
 8009f82:	4629      	mov	r1, r5
 8009f84:	f7f6 fdca 	bl	8000b1c <__aeabi_dcmplt>
 8009f88:	b158      	cbz	r0, 8009fa2 <sqrt+0x4a>
 8009f8a:	f7fe f9a7 	bl	80082dc <__errno>
 8009f8e:	2321      	movs	r3, #33	@ 0x21
 8009f90:	6003      	str	r3, [r0, #0]
 8009f92:	2200      	movs	r2, #0
 8009f94:	2300      	movs	r3, #0
 8009f96:	4610      	mov	r0, r2
 8009f98:	4619      	mov	r1, r3
 8009f9a:	f7f6 fc77 	bl	800088c <__aeabi_ddiv>
 8009f9e:	ec41 0b18 	vmov	d8, r0, r1
 8009fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8009fa6:	eef0 0a68 	vmov.f32	s1, s17
 8009faa:	ecbd 8b02 	vpop	{d8}
 8009fae:	bd38      	pop	{r3, r4, r5, pc}

08009fb0 <cos>:
 8009fb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fb2:	ec53 2b10 	vmov	r2, r3, d0
 8009fb6:	4826      	ldr	r0, [pc, #152]	@ (800a050 <cos+0xa0>)
 8009fb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009fbc:	4281      	cmp	r1, r0
 8009fbe:	d806      	bhi.n	8009fce <cos+0x1e>
 8009fc0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a048 <cos+0x98>
 8009fc4:	b005      	add	sp, #20
 8009fc6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fca:	f000 b975 	b.w	800a2b8 <__kernel_cos>
 8009fce:	4821      	ldr	r0, [pc, #132]	@ (800a054 <cos+0xa4>)
 8009fd0:	4281      	cmp	r1, r0
 8009fd2:	d908      	bls.n	8009fe6 <cos+0x36>
 8009fd4:	4610      	mov	r0, r2
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	f7f6 f976 	bl	80002c8 <__aeabi_dsub>
 8009fdc:	ec41 0b10 	vmov	d0, r0, r1
 8009fe0:	b005      	add	sp, #20
 8009fe2:	f85d fb04 	ldr.w	pc, [sp], #4
 8009fe6:	4668      	mov	r0, sp
 8009fe8:	f000 fbb2 	bl	800a750 <__ieee754_rem_pio2>
 8009fec:	f000 0003 	and.w	r0, r0, #3
 8009ff0:	2801      	cmp	r0, #1
 8009ff2:	d00b      	beq.n	800a00c <cos+0x5c>
 8009ff4:	2802      	cmp	r0, #2
 8009ff6:	d015      	beq.n	800a024 <cos+0x74>
 8009ff8:	b9d8      	cbnz	r0, 800a032 <cos+0x82>
 8009ffa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ffe:	ed9d 0b00 	vldr	d0, [sp]
 800a002:	f000 f959 	bl	800a2b8 <__kernel_cos>
 800a006:	ec51 0b10 	vmov	r0, r1, d0
 800a00a:	e7e7      	b.n	8009fdc <cos+0x2c>
 800a00c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a010:	ed9d 0b00 	vldr	d0, [sp]
 800a014:	f000 fa18 	bl	800a448 <__kernel_sin>
 800a018:	ec53 2b10 	vmov	r2, r3, d0
 800a01c:	4610      	mov	r0, r2
 800a01e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a022:	e7db      	b.n	8009fdc <cos+0x2c>
 800a024:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a028:	ed9d 0b00 	vldr	d0, [sp]
 800a02c:	f000 f944 	bl	800a2b8 <__kernel_cos>
 800a030:	e7f2      	b.n	800a018 <cos+0x68>
 800a032:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a036:	ed9d 0b00 	vldr	d0, [sp]
 800a03a:	2001      	movs	r0, #1
 800a03c:	f000 fa04 	bl	800a448 <__kernel_sin>
 800a040:	e7e1      	b.n	800a006 <cos+0x56>
 800a042:	bf00      	nop
 800a044:	f3af 8000 	nop.w
	...
 800a050:	3fe921fb 	.word	0x3fe921fb
 800a054:	7fefffff 	.word	0x7fefffff

0800a058 <sin>:
 800a058:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a05a:	ec53 2b10 	vmov	r2, r3, d0
 800a05e:	4826      	ldr	r0, [pc, #152]	@ (800a0f8 <sin+0xa0>)
 800a060:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a064:	4281      	cmp	r1, r0
 800a066:	d807      	bhi.n	800a078 <sin+0x20>
 800a068:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800a0f0 <sin+0x98>
 800a06c:	2000      	movs	r0, #0
 800a06e:	b005      	add	sp, #20
 800a070:	f85d eb04 	ldr.w	lr, [sp], #4
 800a074:	f000 b9e8 	b.w	800a448 <__kernel_sin>
 800a078:	4820      	ldr	r0, [pc, #128]	@ (800a0fc <sin+0xa4>)
 800a07a:	4281      	cmp	r1, r0
 800a07c:	d908      	bls.n	800a090 <sin+0x38>
 800a07e:	4610      	mov	r0, r2
 800a080:	4619      	mov	r1, r3
 800a082:	f7f6 f921 	bl	80002c8 <__aeabi_dsub>
 800a086:	ec41 0b10 	vmov	d0, r0, r1
 800a08a:	b005      	add	sp, #20
 800a08c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a090:	4668      	mov	r0, sp
 800a092:	f000 fb5d 	bl	800a750 <__ieee754_rem_pio2>
 800a096:	f000 0003 	and.w	r0, r0, #3
 800a09a:	2801      	cmp	r0, #1
 800a09c:	d00c      	beq.n	800a0b8 <sin+0x60>
 800a09e:	2802      	cmp	r0, #2
 800a0a0:	d011      	beq.n	800a0c6 <sin+0x6e>
 800a0a2:	b9e8      	cbnz	r0, 800a0e0 <sin+0x88>
 800a0a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0a8:	ed9d 0b00 	vldr	d0, [sp]
 800a0ac:	2001      	movs	r0, #1
 800a0ae:	f000 f9cb 	bl	800a448 <__kernel_sin>
 800a0b2:	ec51 0b10 	vmov	r0, r1, d0
 800a0b6:	e7e6      	b.n	800a086 <sin+0x2e>
 800a0b8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0bc:	ed9d 0b00 	vldr	d0, [sp]
 800a0c0:	f000 f8fa 	bl	800a2b8 <__kernel_cos>
 800a0c4:	e7f5      	b.n	800a0b2 <sin+0x5a>
 800a0c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0ca:	ed9d 0b00 	vldr	d0, [sp]
 800a0ce:	2001      	movs	r0, #1
 800a0d0:	f000 f9ba 	bl	800a448 <__kernel_sin>
 800a0d4:	ec53 2b10 	vmov	r2, r3, d0
 800a0d8:	4610      	mov	r0, r2
 800a0da:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a0de:	e7d2      	b.n	800a086 <sin+0x2e>
 800a0e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a0e4:	ed9d 0b00 	vldr	d0, [sp]
 800a0e8:	f000 f8e6 	bl	800a2b8 <__kernel_cos>
 800a0ec:	e7f2      	b.n	800a0d4 <sin+0x7c>
 800a0ee:	bf00      	nop
	...
 800a0f8:	3fe921fb 	.word	0x3fe921fb
 800a0fc:	7fefffff 	.word	0x7fefffff

0800a100 <__ieee754_sqrt>:
 800a100:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	4a68      	ldr	r2, [pc, #416]	@ (800a2a8 <__ieee754_sqrt+0x1a8>)
 800a106:	ec55 4b10 	vmov	r4, r5, d0
 800a10a:	43aa      	bics	r2, r5
 800a10c:	462b      	mov	r3, r5
 800a10e:	4621      	mov	r1, r4
 800a110:	d110      	bne.n	800a134 <__ieee754_sqrt+0x34>
 800a112:	4622      	mov	r2, r4
 800a114:	4620      	mov	r0, r4
 800a116:	4629      	mov	r1, r5
 800a118:	f7f6 fa8e 	bl	8000638 <__aeabi_dmul>
 800a11c:	4602      	mov	r2, r0
 800a11e:	460b      	mov	r3, r1
 800a120:	4620      	mov	r0, r4
 800a122:	4629      	mov	r1, r5
 800a124:	f7f6 f8d2 	bl	80002cc <__adddf3>
 800a128:	4604      	mov	r4, r0
 800a12a:	460d      	mov	r5, r1
 800a12c:	ec45 4b10 	vmov	d0, r4, r5
 800a130:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a134:	2d00      	cmp	r5, #0
 800a136:	dc0e      	bgt.n	800a156 <__ieee754_sqrt+0x56>
 800a138:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a13c:	4322      	orrs	r2, r4
 800a13e:	d0f5      	beq.n	800a12c <__ieee754_sqrt+0x2c>
 800a140:	b19d      	cbz	r5, 800a16a <__ieee754_sqrt+0x6a>
 800a142:	4622      	mov	r2, r4
 800a144:	4620      	mov	r0, r4
 800a146:	4629      	mov	r1, r5
 800a148:	f7f6 f8be 	bl	80002c8 <__aeabi_dsub>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	f7f6 fb9c 	bl	800088c <__aeabi_ddiv>
 800a154:	e7e8      	b.n	800a128 <__ieee754_sqrt+0x28>
 800a156:	152a      	asrs	r2, r5, #20
 800a158:	d115      	bne.n	800a186 <__ieee754_sqrt+0x86>
 800a15a:	2000      	movs	r0, #0
 800a15c:	e009      	b.n	800a172 <__ieee754_sqrt+0x72>
 800a15e:	0acb      	lsrs	r3, r1, #11
 800a160:	3a15      	subs	r2, #21
 800a162:	0549      	lsls	r1, r1, #21
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0fa      	beq.n	800a15e <__ieee754_sqrt+0x5e>
 800a168:	e7f7      	b.n	800a15a <__ieee754_sqrt+0x5a>
 800a16a:	462a      	mov	r2, r5
 800a16c:	e7fa      	b.n	800a164 <__ieee754_sqrt+0x64>
 800a16e:	005b      	lsls	r3, r3, #1
 800a170:	3001      	adds	r0, #1
 800a172:	02dc      	lsls	r4, r3, #11
 800a174:	d5fb      	bpl.n	800a16e <__ieee754_sqrt+0x6e>
 800a176:	1e44      	subs	r4, r0, #1
 800a178:	1b12      	subs	r2, r2, r4
 800a17a:	f1c0 0420 	rsb	r4, r0, #32
 800a17e:	fa21 f404 	lsr.w	r4, r1, r4
 800a182:	4323      	orrs	r3, r4
 800a184:	4081      	lsls	r1, r0
 800a186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a18a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a18e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a192:	07d2      	lsls	r2, r2, #31
 800a194:	bf5c      	itt	pl
 800a196:	005b      	lslpl	r3, r3, #1
 800a198:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a19c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a1a0:	bf58      	it	pl
 800a1a2:	0049      	lslpl	r1, r1, #1
 800a1a4:	2600      	movs	r6, #0
 800a1a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a1aa:	106d      	asrs	r5, r5, #1
 800a1ac:	0049      	lsls	r1, r1, #1
 800a1ae:	2016      	movs	r0, #22
 800a1b0:	4632      	mov	r2, r6
 800a1b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a1b6:	1917      	adds	r7, r2, r4
 800a1b8:	429f      	cmp	r7, r3
 800a1ba:	bfde      	ittt	le
 800a1bc:	193a      	addle	r2, r7, r4
 800a1be:	1bdb      	suble	r3, r3, r7
 800a1c0:	1936      	addle	r6, r6, r4
 800a1c2:	0fcf      	lsrs	r7, r1, #31
 800a1c4:	3801      	subs	r0, #1
 800a1c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a1ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a1ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a1d2:	d1f0      	bne.n	800a1b6 <__ieee754_sqrt+0xb6>
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	2720      	movs	r7, #32
 800a1d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a1dc:	429a      	cmp	r2, r3
 800a1de:	eb00 0e0c 	add.w	lr, r0, ip
 800a1e2:	db02      	blt.n	800a1ea <__ieee754_sqrt+0xea>
 800a1e4:	d113      	bne.n	800a20e <__ieee754_sqrt+0x10e>
 800a1e6:	458e      	cmp	lr, r1
 800a1e8:	d811      	bhi.n	800a20e <__ieee754_sqrt+0x10e>
 800a1ea:	f1be 0f00 	cmp.w	lr, #0
 800a1ee:	eb0e 000c 	add.w	r0, lr, ip
 800a1f2:	da42      	bge.n	800a27a <__ieee754_sqrt+0x17a>
 800a1f4:	2800      	cmp	r0, #0
 800a1f6:	db40      	blt.n	800a27a <__ieee754_sqrt+0x17a>
 800a1f8:	f102 0801 	add.w	r8, r2, #1
 800a1fc:	1a9b      	subs	r3, r3, r2
 800a1fe:	458e      	cmp	lr, r1
 800a200:	bf88      	it	hi
 800a202:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a206:	eba1 010e 	sub.w	r1, r1, lr
 800a20a:	4464      	add	r4, ip
 800a20c:	4642      	mov	r2, r8
 800a20e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a212:	3f01      	subs	r7, #1
 800a214:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a218:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a21c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a220:	d1dc      	bne.n	800a1dc <__ieee754_sqrt+0xdc>
 800a222:	4319      	orrs	r1, r3
 800a224:	d01b      	beq.n	800a25e <__ieee754_sqrt+0x15e>
 800a226:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a2ac <__ieee754_sqrt+0x1ac>
 800a22a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a2b0 <__ieee754_sqrt+0x1b0>
 800a22e:	e9da 0100 	ldrd	r0, r1, [sl]
 800a232:	e9db 2300 	ldrd	r2, r3, [fp]
 800a236:	f7f6 f847 	bl	80002c8 <__aeabi_dsub>
 800a23a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a23e:	4602      	mov	r2, r0
 800a240:	460b      	mov	r3, r1
 800a242:	4640      	mov	r0, r8
 800a244:	4649      	mov	r1, r9
 800a246:	f7f6 fc73 	bl	8000b30 <__aeabi_dcmple>
 800a24a:	b140      	cbz	r0, 800a25e <__ieee754_sqrt+0x15e>
 800a24c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a250:	e9da 0100 	ldrd	r0, r1, [sl]
 800a254:	e9db 2300 	ldrd	r2, r3, [fp]
 800a258:	d111      	bne.n	800a27e <__ieee754_sqrt+0x17e>
 800a25a:	3601      	adds	r6, #1
 800a25c:	463c      	mov	r4, r7
 800a25e:	1072      	asrs	r2, r6, #1
 800a260:	0863      	lsrs	r3, r4, #1
 800a262:	07f1      	lsls	r1, r6, #31
 800a264:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a268:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a26c:	bf48      	it	mi
 800a26e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a272:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a276:	4618      	mov	r0, r3
 800a278:	e756      	b.n	800a128 <__ieee754_sqrt+0x28>
 800a27a:	4690      	mov	r8, r2
 800a27c:	e7be      	b.n	800a1fc <__ieee754_sqrt+0xfc>
 800a27e:	f7f6 f825 	bl	80002cc <__adddf3>
 800a282:	e9da 8900 	ldrd	r8, r9, [sl]
 800a286:	4602      	mov	r2, r0
 800a288:	460b      	mov	r3, r1
 800a28a:	4640      	mov	r0, r8
 800a28c:	4649      	mov	r1, r9
 800a28e:	f7f6 fc45 	bl	8000b1c <__aeabi_dcmplt>
 800a292:	b120      	cbz	r0, 800a29e <__ieee754_sqrt+0x19e>
 800a294:	1ca0      	adds	r0, r4, #2
 800a296:	bf08      	it	eq
 800a298:	3601      	addeq	r6, #1
 800a29a:	3402      	adds	r4, #2
 800a29c:	e7df      	b.n	800a25e <__ieee754_sqrt+0x15e>
 800a29e:	1c63      	adds	r3, r4, #1
 800a2a0:	f023 0401 	bic.w	r4, r3, #1
 800a2a4:	e7db      	b.n	800a25e <__ieee754_sqrt+0x15e>
 800a2a6:	bf00      	nop
 800a2a8:	7ff00000 	.word	0x7ff00000
 800a2ac:	200001f0 	.word	0x200001f0
 800a2b0:	200001e8 	.word	0x200001e8
 800a2b4:	00000000 	.word	0x00000000

0800a2b8 <__kernel_cos>:
 800a2b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2bc:	ec57 6b10 	vmov	r6, r7, d0
 800a2c0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a2c4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800a2c8:	ed8d 1b00 	vstr	d1, [sp]
 800a2cc:	d206      	bcs.n	800a2dc <__kernel_cos+0x24>
 800a2ce:	4630      	mov	r0, r6
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	f7f6 fc61 	bl	8000b98 <__aeabi_d2iz>
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	f000 8088 	beq.w	800a3ec <__kernel_cos+0x134>
 800a2dc:	4632      	mov	r2, r6
 800a2de:	463b      	mov	r3, r7
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	4639      	mov	r1, r7
 800a2e4:	f7f6 f9a8 	bl	8000638 <__aeabi_dmul>
 800a2e8:	4b51      	ldr	r3, [pc, #324]	@ (800a430 <__kernel_cos+0x178>)
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	460d      	mov	r5, r1
 800a2f0:	f7f6 f9a2 	bl	8000638 <__aeabi_dmul>
 800a2f4:	a340      	add	r3, pc, #256	@ (adr r3, 800a3f8 <__kernel_cos+0x140>)
 800a2f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fa:	4682      	mov	sl, r0
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	4620      	mov	r0, r4
 800a300:	4629      	mov	r1, r5
 800a302:	f7f6 f999 	bl	8000638 <__aeabi_dmul>
 800a306:	a33e      	add	r3, pc, #248	@ (adr r3, 800a400 <__kernel_cos+0x148>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f5 ffde 	bl	80002cc <__adddf3>
 800a310:	4622      	mov	r2, r4
 800a312:	462b      	mov	r3, r5
 800a314:	f7f6 f990 	bl	8000638 <__aeabi_dmul>
 800a318:	a33b      	add	r3, pc, #236	@ (adr r3, 800a408 <__kernel_cos+0x150>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ffd3 	bl	80002c8 <__aeabi_dsub>
 800a322:	4622      	mov	r2, r4
 800a324:	462b      	mov	r3, r5
 800a326:	f7f6 f987 	bl	8000638 <__aeabi_dmul>
 800a32a:	a339      	add	r3, pc, #228	@ (adr r3, 800a410 <__kernel_cos+0x158>)
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f7f5 ffcc 	bl	80002cc <__adddf3>
 800a334:	4622      	mov	r2, r4
 800a336:	462b      	mov	r3, r5
 800a338:	f7f6 f97e 	bl	8000638 <__aeabi_dmul>
 800a33c:	a336      	add	r3, pc, #216	@ (adr r3, 800a418 <__kernel_cos+0x160>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f5 ffc1 	bl	80002c8 <__aeabi_dsub>
 800a346:	4622      	mov	r2, r4
 800a348:	462b      	mov	r3, r5
 800a34a:	f7f6 f975 	bl	8000638 <__aeabi_dmul>
 800a34e:	a334      	add	r3, pc, #208	@ (adr r3, 800a420 <__kernel_cos+0x168>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f5 ffba 	bl	80002cc <__adddf3>
 800a358:	4622      	mov	r2, r4
 800a35a:	462b      	mov	r3, r5
 800a35c:	f7f6 f96c 	bl	8000638 <__aeabi_dmul>
 800a360:	4622      	mov	r2, r4
 800a362:	462b      	mov	r3, r5
 800a364:	f7f6 f968 	bl	8000638 <__aeabi_dmul>
 800a368:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a36c:	4604      	mov	r4, r0
 800a36e:	460d      	mov	r5, r1
 800a370:	4630      	mov	r0, r6
 800a372:	4639      	mov	r1, r7
 800a374:	f7f6 f960 	bl	8000638 <__aeabi_dmul>
 800a378:	460b      	mov	r3, r1
 800a37a:	4602      	mov	r2, r0
 800a37c:	4629      	mov	r1, r5
 800a37e:	4620      	mov	r0, r4
 800a380:	f7f5 ffa2 	bl	80002c8 <__aeabi_dsub>
 800a384:	4b2b      	ldr	r3, [pc, #172]	@ (800a434 <__kernel_cos+0x17c>)
 800a386:	4598      	cmp	r8, r3
 800a388:	4606      	mov	r6, r0
 800a38a:	460f      	mov	r7, r1
 800a38c:	d810      	bhi.n	800a3b0 <__kernel_cos+0xf8>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4650      	mov	r0, sl
 800a394:	4659      	mov	r1, fp
 800a396:	f7f5 ff97 	bl	80002c8 <__aeabi_dsub>
 800a39a:	460b      	mov	r3, r1
 800a39c:	4926      	ldr	r1, [pc, #152]	@ (800a438 <__kernel_cos+0x180>)
 800a39e:	4602      	mov	r2, r0
 800a3a0:	2000      	movs	r0, #0
 800a3a2:	f7f5 ff91 	bl	80002c8 <__aeabi_dsub>
 800a3a6:	ec41 0b10 	vmov	d0, r0, r1
 800a3aa:	b003      	add	sp, #12
 800a3ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b0:	4b22      	ldr	r3, [pc, #136]	@ (800a43c <__kernel_cos+0x184>)
 800a3b2:	4921      	ldr	r1, [pc, #132]	@ (800a438 <__kernel_cos+0x180>)
 800a3b4:	4598      	cmp	r8, r3
 800a3b6:	bf8c      	ite	hi
 800a3b8:	4d21      	ldrhi	r5, [pc, #132]	@ (800a440 <__kernel_cos+0x188>)
 800a3ba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800a3be:	2400      	movs	r4, #0
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	462b      	mov	r3, r5
 800a3c4:	2000      	movs	r0, #0
 800a3c6:	f7f5 ff7f 	bl	80002c8 <__aeabi_dsub>
 800a3ca:	4622      	mov	r2, r4
 800a3cc:	4680      	mov	r8, r0
 800a3ce:	4689      	mov	r9, r1
 800a3d0:	462b      	mov	r3, r5
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	4659      	mov	r1, fp
 800a3d6:	f7f5 ff77 	bl	80002c8 <__aeabi_dsub>
 800a3da:	4632      	mov	r2, r6
 800a3dc:	463b      	mov	r3, r7
 800a3de:	f7f5 ff73 	bl	80002c8 <__aeabi_dsub>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4649      	mov	r1, r9
 800a3ea:	e7da      	b.n	800a3a2 <__kernel_cos+0xea>
 800a3ec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800a428 <__kernel_cos+0x170>
 800a3f0:	e7db      	b.n	800a3aa <__kernel_cos+0xf2>
 800a3f2:	bf00      	nop
 800a3f4:	f3af 8000 	nop.w
 800a3f8:	be8838d4 	.word	0xbe8838d4
 800a3fc:	bda8fae9 	.word	0xbda8fae9
 800a400:	bdb4b1c4 	.word	0xbdb4b1c4
 800a404:	3e21ee9e 	.word	0x3e21ee9e
 800a408:	809c52ad 	.word	0x809c52ad
 800a40c:	3e927e4f 	.word	0x3e927e4f
 800a410:	19cb1590 	.word	0x19cb1590
 800a414:	3efa01a0 	.word	0x3efa01a0
 800a418:	16c15177 	.word	0x16c15177
 800a41c:	3f56c16c 	.word	0x3f56c16c
 800a420:	5555554c 	.word	0x5555554c
 800a424:	3fa55555 	.word	0x3fa55555
 800a428:	00000000 	.word	0x00000000
 800a42c:	3ff00000 	.word	0x3ff00000
 800a430:	3fe00000 	.word	0x3fe00000
 800a434:	3fd33332 	.word	0x3fd33332
 800a438:	3ff00000 	.word	0x3ff00000
 800a43c:	3fe90000 	.word	0x3fe90000
 800a440:	3fd20000 	.word	0x3fd20000
 800a444:	00000000 	.word	0x00000000

0800a448 <__kernel_sin>:
 800a448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a44c:	ec55 4b10 	vmov	r4, r5, d0
 800a450:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a454:	b085      	sub	sp, #20
 800a456:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800a45a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800a45e:	4680      	mov	r8, r0
 800a460:	d205      	bcs.n	800a46e <__kernel_sin+0x26>
 800a462:	4620      	mov	r0, r4
 800a464:	4629      	mov	r1, r5
 800a466:	f7f6 fb97 	bl	8000b98 <__aeabi_d2iz>
 800a46a:	2800      	cmp	r0, #0
 800a46c:	d052      	beq.n	800a514 <__kernel_sin+0xcc>
 800a46e:	4622      	mov	r2, r4
 800a470:	462b      	mov	r3, r5
 800a472:	4620      	mov	r0, r4
 800a474:	4629      	mov	r1, r5
 800a476:	f7f6 f8df 	bl	8000638 <__aeabi_dmul>
 800a47a:	4682      	mov	sl, r0
 800a47c:	468b      	mov	fp, r1
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	4620      	mov	r0, r4
 800a484:	4629      	mov	r1, r5
 800a486:	f7f6 f8d7 	bl	8000638 <__aeabi_dmul>
 800a48a:	a342      	add	r3, pc, #264	@ (adr r3, 800a594 <__kernel_sin+0x14c>)
 800a48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a490:	e9cd 0100 	strd	r0, r1, [sp]
 800a494:	4650      	mov	r0, sl
 800a496:	4659      	mov	r1, fp
 800a498:	f7f6 f8ce 	bl	8000638 <__aeabi_dmul>
 800a49c:	a33f      	add	r3, pc, #252	@ (adr r3, 800a59c <__kernel_sin+0x154>)
 800a49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a2:	f7f5 ff11 	bl	80002c8 <__aeabi_dsub>
 800a4a6:	4652      	mov	r2, sl
 800a4a8:	465b      	mov	r3, fp
 800a4aa:	f7f6 f8c5 	bl	8000638 <__aeabi_dmul>
 800a4ae:	a33d      	add	r3, pc, #244	@ (adr r3, 800a5a4 <__kernel_sin+0x15c>)
 800a4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b4:	f7f5 ff0a 	bl	80002cc <__adddf3>
 800a4b8:	4652      	mov	r2, sl
 800a4ba:	465b      	mov	r3, fp
 800a4bc:	f7f6 f8bc 	bl	8000638 <__aeabi_dmul>
 800a4c0:	a33a      	add	r3, pc, #232	@ (adr r3, 800a5ac <__kernel_sin+0x164>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f5 feff 	bl	80002c8 <__aeabi_dsub>
 800a4ca:	4652      	mov	r2, sl
 800a4cc:	465b      	mov	r3, fp
 800a4ce:	f7f6 f8b3 	bl	8000638 <__aeabi_dmul>
 800a4d2:	a338      	add	r3, pc, #224	@ (adr r3, 800a5b4 <__kernel_sin+0x16c>)
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	f7f5 fef8 	bl	80002cc <__adddf3>
 800a4dc:	4606      	mov	r6, r0
 800a4de:	460f      	mov	r7, r1
 800a4e0:	f1b8 0f00 	cmp.w	r8, #0
 800a4e4:	d11b      	bne.n	800a51e <__kernel_sin+0xd6>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	4650      	mov	r0, sl
 800a4ec:	4659      	mov	r1, fp
 800a4ee:	f7f6 f8a3 	bl	8000638 <__aeabi_dmul>
 800a4f2:	a325      	add	r3, pc, #148	@ (adr r3, 800a588 <__kernel_sin+0x140>)
 800a4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4f8:	f7f5 fee6 	bl	80002c8 <__aeabi_dsub>
 800a4fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a500:	f7f6 f89a 	bl	8000638 <__aeabi_dmul>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4620      	mov	r0, r4
 800a50a:	4629      	mov	r1, r5
 800a50c:	f7f5 fede 	bl	80002cc <__adddf3>
 800a510:	4604      	mov	r4, r0
 800a512:	460d      	mov	r5, r1
 800a514:	ec45 4b10 	vmov	d0, r4, r5
 800a518:	b005      	add	sp, #20
 800a51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a522:	4b1b      	ldr	r3, [pc, #108]	@ (800a590 <__kernel_sin+0x148>)
 800a524:	2200      	movs	r2, #0
 800a526:	f7f6 f887 	bl	8000638 <__aeabi_dmul>
 800a52a:	4632      	mov	r2, r6
 800a52c:	4680      	mov	r8, r0
 800a52e:	4689      	mov	r9, r1
 800a530:	463b      	mov	r3, r7
 800a532:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a536:	f7f6 f87f 	bl	8000638 <__aeabi_dmul>
 800a53a:	4602      	mov	r2, r0
 800a53c:	460b      	mov	r3, r1
 800a53e:	4640      	mov	r0, r8
 800a540:	4649      	mov	r1, r9
 800a542:	f7f5 fec1 	bl	80002c8 <__aeabi_dsub>
 800a546:	4652      	mov	r2, sl
 800a548:	465b      	mov	r3, fp
 800a54a:	f7f6 f875 	bl	8000638 <__aeabi_dmul>
 800a54e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a552:	f7f5 feb9 	bl	80002c8 <__aeabi_dsub>
 800a556:	a30c      	add	r3, pc, #48	@ (adr r3, 800a588 <__kernel_sin+0x140>)
 800a558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55c:	4606      	mov	r6, r0
 800a55e:	460f      	mov	r7, r1
 800a560:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a564:	f7f6 f868 	bl	8000638 <__aeabi_dmul>
 800a568:	4602      	mov	r2, r0
 800a56a:	460b      	mov	r3, r1
 800a56c:	4630      	mov	r0, r6
 800a56e:	4639      	mov	r1, r7
 800a570:	f7f5 feac 	bl	80002cc <__adddf3>
 800a574:	4602      	mov	r2, r0
 800a576:	460b      	mov	r3, r1
 800a578:	4620      	mov	r0, r4
 800a57a:	4629      	mov	r1, r5
 800a57c:	f7f5 fea4 	bl	80002c8 <__aeabi_dsub>
 800a580:	e7c6      	b.n	800a510 <__kernel_sin+0xc8>
 800a582:	bf00      	nop
 800a584:	f3af 8000 	nop.w
 800a588:	55555549 	.word	0x55555549
 800a58c:	3fc55555 	.word	0x3fc55555
 800a590:	3fe00000 	.word	0x3fe00000
 800a594:	5acfd57c 	.word	0x5acfd57c
 800a598:	3de5d93a 	.word	0x3de5d93a
 800a59c:	8a2b9ceb 	.word	0x8a2b9ceb
 800a5a0:	3e5ae5e6 	.word	0x3e5ae5e6
 800a5a4:	57b1fe7d 	.word	0x57b1fe7d
 800a5a8:	3ec71de3 	.word	0x3ec71de3
 800a5ac:	19c161d5 	.word	0x19c161d5
 800a5b0:	3f2a01a0 	.word	0x3f2a01a0
 800a5b4:	1110f8a6 	.word	0x1110f8a6
 800a5b8:	3f811111 	.word	0x3f811111
 800a5bc:	00000000 	.word	0x00000000

0800a5c0 <__ieee754_atan2>:
 800a5c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5c4:	ec57 6b11 	vmov	r6, r7, d1
 800a5c8:	4273      	negs	r3, r6
 800a5ca:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800a748 <__ieee754_atan2+0x188>
 800a5ce:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800a5d2:	4333      	orrs	r3, r6
 800a5d4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a5d8:	4543      	cmp	r3, r8
 800a5da:	ec51 0b10 	vmov	r0, r1, d0
 800a5de:	4635      	mov	r5, r6
 800a5e0:	d809      	bhi.n	800a5f6 <__ieee754_atan2+0x36>
 800a5e2:	4244      	negs	r4, r0
 800a5e4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a5e8:	4304      	orrs	r4, r0
 800a5ea:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a5ee:	4544      	cmp	r4, r8
 800a5f0:	468e      	mov	lr, r1
 800a5f2:	4681      	mov	r9, r0
 800a5f4:	d907      	bls.n	800a606 <__ieee754_atan2+0x46>
 800a5f6:	4632      	mov	r2, r6
 800a5f8:	463b      	mov	r3, r7
 800a5fa:	f7f5 fe67 	bl	80002cc <__adddf3>
 800a5fe:	ec41 0b10 	vmov	d0, r0, r1
 800a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a606:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800a60a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800a60e:	4334      	orrs	r4, r6
 800a610:	d103      	bne.n	800a61a <__ieee754_atan2+0x5a>
 800a612:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a616:	f000 ba97 	b.w	800ab48 <atan>
 800a61a:	17bc      	asrs	r4, r7, #30
 800a61c:	f004 0402 	and.w	r4, r4, #2
 800a620:	ea53 0909 	orrs.w	r9, r3, r9
 800a624:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a628:	d107      	bne.n	800a63a <__ieee754_atan2+0x7a>
 800a62a:	2c02      	cmp	r4, #2
 800a62c:	d05f      	beq.n	800a6ee <__ieee754_atan2+0x12e>
 800a62e:	2c03      	cmp	r4, #3
 800a630:	d1e5      	bne.n	800a5fe <__ieee754_atan2+0x3e>
 800a632:	a141      	add	r1, pc, #260	@ (adr r1, 800a738 <__ieee754_atan2+0x178>)
 800a634:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a638:	e7e1      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a63a:	4315      	orrs	r5, r2
 800a63c:	d106      	bne.n	800a64c <__ieee754_atan2+0x8c>
 800a63e:	f1be 0f00 	cmp.w	lr, #0
 800a642:	da5f      	bge.n	800a704 <__ieee754_atan2+0x144>
 800a644:	a13e      	add	r1, pc, #248	@ (adr r1, 800a740 <__ieee754_atan2+0x180>)
 800a646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a64a:	e7d8      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a64c:	4542      	cmp	r2, r8
 800a64e:	d10f      	bne.n	800a670 <__ieee754_atan2+0xb0>
 800a650:	4293      	cmp	r3, r2
 800a652:	f104 34ff 	add.w	r4, r4, #4294967295
 800a656:	d107      	bne.n	800a668 <__ieee754_atan2+0xa8>
 800a658:	2c02      	cmp	r4, #2
 800a65a:	d84c      	bhi.n	800a6f6 <__ieee754_atan2+0x136>
 800a65c:	4b34      	ldr	r3, [pc, #208]	@ (800a730 <__ieee754_atan2+0x170>)
 800a65e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a662:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a666:	e7ca      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a668:	2c02      	cmp	r4, #2
 800a66a:	d848      	bhi.n	800a6fe <__ieee754_atan2+0x13e>
 800a66c:	4b31      	ldr	r3, [pc, #196]	@ (800a734 <__ieee754_atan2+0x174>)
 800a66e:	e7f6      	b.n	800a65e <__ieee754_atan2+0x9e>
 800a670:	4543      	cmp	r3, r8
 800a672:	d0e4      	beq.n	800a63e <__ieee754_atan2+0x7e>
 800a674:	1a9b      	subs	r3, r3, r2
 800a676:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800a67a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a67e:	da1e      	bge.n	800a6be <__ieee754_atan2+0xfe>
 800a680:	2f00      	cmp	r7, #0
 800a682:	da01      	bge.n	800a688 <__ieee754_atan2+0xc8>
 800a684:	323c      	adds	r2, #60	@ 0x3c
 800a686:	db1e      	blt.n	800a6c6 <__ieee754_atan2+0x106>
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	f7f6 f8fe 	bl	800088c <__aeabi_ddiv>
 800a690:	ec41 0b10 	vmov	d0, r0, r1
 800a694:	f000 fbf0 	bl	800ae78 <fabs>
 800a698:	f000 fa56 	bl	800ab48 <atan>
 800a69c:	ec51 0b10 	vmov	r0, r1, d0
 800a6a0:	2c01      	cmp	r4, #1
 800a6a2:	d013      	beq.n	800a6cc <__ieee754_atan2+0x10c>
 800a6a4:	2c02      	cmp	r4, #2
 800a6a6:	d015      	beq.n	800a6d4 <__ieee754_atan2+0x114>
 800a6a8:	2c00      	cmp	r4, #0
 800a6aa:	d0a8      	beq.n	800a5fe <__ieee754_atan2+0x3e>
 800a6ac:	a318      	add	r3, pc, #96	@ (adr r3, 800a710 <__ieee754_atan2+0x150>)
 800a6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6b2:	f7f5 fe09 	bl	80002c8 <__aeabi_dsub>
 800a6b6:	a318      	add	r3, pc, #96	@ (adr r3, 800a718 <__ieee754_atan2+0x158>)
 800a6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6bc:	e014      	b.n	800a6e8 <__ieee754_atan2+0x128>
 800a6be:	a118      	add	r1, pc, #96	@ (adr r1, 800a720 <__ieee754_atan2+0x160>)
 800a6c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6c4:	e7ec      	b.n	800a6a0 <__ieee754_atan2+0xe0>
 800a6c6:	2000      	movs	r0, #0
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	e7e9      	b.n	800a6a0 <__ieee754_atan2+0xe0>
 800a6cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	e794      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a6d4:	a30e      	add	r3, pc, #56	@ (adr r3, 800a710 <__ieee754_atan2+0x150>)
 800a6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6da:	f7f5 fdf5 	bl	80002c8 <__aeabi_dsub>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	a10d      	add	r1, pc, #52	@ (adr r1, 800a718 <__ieee754_atan2+0x158>)
 800a6e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6e8:	f7f5 fdee 	bl	80002c8 <__aeabi_dsub>
 800a6ec:	e787      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a6ee:	a10a      	add	r1, pc, #40	@ (adr r1, 800a718 <__ieee754_atan2+0x158>)
 800a6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6f4:	e783      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a6f6:	a10c      	add	r1, pc, #48	@ (adr r1, 800a728 <__ieee754_atan2+0x168>)
 800a6f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a6fc:	e77f      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a6fe:	2000      	movs	r0, #0
 800a700:	2100      	movs	r1, #0
 800a702:	e77c      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a704:	a106      	add	r1, pc, #24	@ (adr r1, 800a720 <__ieee754_atan2+0x160>)
 800a706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a70a:	e778      	b.n	800a5fe <__ieee754_atan2+0x3e>
 800a70c:	f3af 8000 	nop.w
 800a710:	33145c07 	.word	0x33145c07
 800a714:	3ca1a626 	.word	0x3ca1a626
 800a718:	54442d18 	.word	0x54442d18
 800a71c:	400921fb 	.word	0x400921fb
 800a720:	54442d18 	.word	0x54442d18
 800a724:	3ff921fb 	.word	0x3ff921fb
 800a728:	54442d18 	.word	0x54442d18
 800a72c:	3fe921fb 	.word	0x3fe921fb
 800a730:	0800bb98 	.word	0x0800bb98
 800a734:	0800bb80 	.word	0x0800bb80
 800a738:	54442d18 	.word	0x54442d18
 800a73c:	c00921fb 	.word	0xc00921fb
 800a740:	54442d18 	.word	0x54442d18
 800a744:	bff921fb 	.word	0xbff921fb
 800a748:	7ff00000 	.word	0x7ff00000
 800a74c:	00000000 	.word	0x00000000

0800a750 <__ieee754_rem_pio2>:
 800a750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a754:	ec57 6b10 	vmov	r6, r7, d0
 800a758:	4bc5      	ldr	r3, [pc, #788]	@ (800aa70 <__ieee754_rem_pio2+0x320>)
 800a75a:	b08d      	sub	sp, #52	@ 0x34
 800a75c:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a760:	4598      	cmp	r8, r3
 800a762:	4604      	mov	r4, r0
 800a764:	9704      	str	r7, [sp, #16]
 800a766:	d807      	bhi.n	800a778 <__ieee754_rem_pio2+0x28>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	ed80 0b00 	vstr	d0, [r0]
 800a770:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a774:	2500      	movs	r5, #0
 800a776:	e028      	b.n	800a7ca <__ieee754_rem_pio2+0x7a>
 800a778:	4bbe      	ldr	r3, [pc, #760]	@ (800aa74 <__ieee754_rem_pio2+0x324>)
 800a77a:	4598      	cmp	r8, r3
 800a77c:	d878      	bhi.n	800a870 <__ieee754_rem_pio2+0x120>
 800a77e:	9b04      	ldr	r3, [sp, #16]
 800a780:	4dbd      	ldr	r5, [pc, #756]	@ (800aa78 <__ieee754_rem_pio2+0x328>)
 800a782:	2b00      	cmp	r3, #0
 800a784:	4630      	mov	r0, r6
 800a786:	a3ac      	add	r3, pc, #688	@ (adr r3, 800aa38 <__ieee754_rem_pio2+0x2e8>)
 800a788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78c:	4639      	mov	r1, r7
 800a78e:	dd38      	ble.n	800a802 <__ieee754_rem_pio2+0xb2>
 800a790:	f7f5 fd9a 	bl	80002c8 <__aeabi_dsub>
 800a794:	45a8      	cmp	r8, r5
 800a796:	4606      	mov	r6, r0
 800a798:	460f      	mov	r7, r1
 800a79a:	d01a      	beq.n	800a7d2 <__ieee754_rem_pio2+0x82>
 800a79c:	a3a8      	add	r3, pc, #672	@ (adr r3, 800aa40 <__ieee754_rem_pio2+0x2f0>)
 800a79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a2:	f7f5 fd91 	bl	80002c8 <__aeabi_dsub>
 800a7a6:	4602      	mov	r2, r0
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	4680      	mov	r8, r0
 800a7ac:	4689      	mov	r9, r1
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	f7f5 fd89 	bl	80002c8 <__aeabi_dsub>
 800a7b6:	a3a2      	add	r3, pc, #648	@ (adr r3, 800aa40 <__ieee754_rem_pio2+0x2f0>)
 800a7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7bc:	f7f5 fd84 	bl	80002c8 <__aeabi_dsub>
 800a7c0:	e9c4 8900 	strd	r8, r9, [r4]
 800a7c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a7c8:	2501      	movs	r5, #1
 800a7ca:	4628      	mov	r0, r5
 800a7cc:	b00d      	add	sp, #52	@ 0x34
 800a7ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7d2:	a39d      	add	r3, pc, #628	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x2f8>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	f7f5 fd76 	bl	80002c8 <__aeabi_dsub>
 800a7dc:	a39c      	add	r3, pc, #624	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x300>)
 800a7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	460f      	mov	r7, r1
 800a7e6:	f7f5 fd6f 	bl	80002c8 <__aeabi_dsub>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	4680      	mov	r8, r0
 800a7f0:	4689      	mov	r9, r1
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	4639      	mov	r1, r7
 800a7f6:	f7f5 fd67 	bl	80002c8 <__aeabi_dsub>
 800a7fa:	a395      	add	r3, pc, #596	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x300>)
 800a7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a800:	e7dc      	b.n	800a7bc <__ieee754_rem_pio2+0x6c>
 800a802:	f7f5 fd63 	bl	80002cc <__adddf3>
 800a806:	45a8      	cmp	r8, r5
 800a808:	4606      	mov	r6, r0
 800a80a:	460f      	mov	r7, r1
 800a80c:	d018      	beq.n	800a840 <__ieee754_rem_pio2+0xf0>
 800a80e:	a38c      	add	r3, pc, #560	@ (adr r3, 800aa40 <__ieee754_rem_pio2+0x2f0>)
 800a810:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a814:	f7f5 fd5a 	bl	80002cc <__adddf3>
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	4680      	mov	r8, r0
 800a81e:	4689      	mov	r9, r1
 800a820:	4630      	mov	r0, r6
 800a822:	4639      	mov	r1, r7
 800a824:	f7f5 fd50 	bl	80002c8 <__aeabi_dsub>
 800a828:	a385      	add	r3, pc, #532	@ (adr r3, 800aa40 <__ieee754_rem_pio2+0x2f0>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f5 fd4d 	bl	80002cc <__adddf3>
 800a832:	f04f 35ff 	mov.w	r5, #4294967295
 800a836:	e9c4 8900 	strd	r8, r9, [r4]
 800a83a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a83e:	e7c4      	b.n	800a7ca <__ieee754_rem_pio2+0x7a>
 800a840:	a381      	add	r3, pc, #516	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x2f8>)
 800a842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a846:	f7f5 fd41 	bl	80002cc <__adddf3>
 800a84a:	a381      	add	r3, pc, #516	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x300>)
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	4606      	mov	r6, r0
 800a852:	460f      	mov	r7, r1
 800a854:	f7f5 fd3a 	bl	80002cc <__adddf3>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	4680      	mov	r8, r0
 800a85e:	4689      	mov	r9, r1
 800a860:	4630      	mov	r0, r6
 800a862:	4639      	mov	r1, r7
 800a864:	f7f5 fd30 	bl	80002c8 <__aeabi_dsub>
 800a868:	a379      	add	r3, pc, #484	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x300>)
 800a86a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a86e:	e7de      	b.n	800a82e <__ieee754_rem_pio2+0xde>
 800a870:	4b82      	ldr	r3, [pc, #520]	@ (800aa7c <__ieee754_rem_pio2+0x32c>)
 800a872:	4598      	cmp	r8, r3
 800a874:	f200 80d1 	bhi.w	800aa1a <__ieee754_rem_pio2+0x2ca>
 800a878:	f000 fafe 	bl	800ae78 <fabs>
 800a87c:	ec57 6b10 	vmov	r6, r7, d0
 800a880:	a375      	add	r3, pc, #468	@ (adr r3, 800aa58 <__ieee754_rem_pio2+0x308>)
 800a882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a886:	4630      	mov	r0, r6
 800a888:	4639      	mov	r1, r7
 800a88a:	f7f5 fed5 	bl	8000638 <__aeabi_dmul>
 800a88e:	4b7c      	ldr	r3, [pc, #496]	@ (800aa80 <__ieee754_rem_pio2+0x330>)
 800a890:	2200      	movs	r2, #0
 800a892:	f7f5 fd1b 	bl	80002cc <__adddf3>
 800a896:	f7f6 f97f 	bl	8000b98 <__aeabi_d2iz>
 800a89a:	4605      	mov	r5, r0
 800a89c:	f7f5 fe62 	bl	8000564 <__aeabi_i2d>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	460b      	mov	r3, r1
 800a8a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a8a8:	a363      	add	r3, pc, #396	@ (adr r3, 800aa38 <__ieee754_rem_pio2+0x2e8>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	f7f5 fec3 	bl	8000638 <__aeabi_dmul>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	4630      	mov	r0, r6
 800a8b8:	4639      	mov	r1, r7
 800a8ba:	f7f5 fd05 	bl	80002c8 <__aeabi_dsub>
 800a8be:	a360      	add	r3, pc, #384	@ (adr r3, 800aa40 <__ieee754_rem_pio2+0x2f0>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	4682      	mov	sl, r0
 800a8c6:	468b      	mov	fp, r1
 800a8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8cc:	f7f5 feb4 	bl	8000638 <__aeabi_dmul>
 800a8d0:	2d1f      	cmp	r5, #31
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460f      	mov	r7, r1
 800a8d6:	dc0c      	bgt.n	800a8f2 <__ieee754_rem_pio2+0x1a2>
 800a8d8:	4b6a      	ldr	r3, [pc, #424]	@ (800aa84 <__ieee754_rem_pio2+0x334>)
 800a8da:	1e6a      	subs	r2, r5, #1
 800a8dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8e0:	4543      	cmp	r3, r8
 800a8e2:	d006      	beq.n	800a8f2 <__ieee754_rem_pio2+0x1a2>
 800a8e4:	4632      	mov	r2, r6
 800a8e6:	463b      	mov	r3, r7
 800a8e8:	4650      	mov	r0, sl
 800a8ea:	4659      	mov	r1, fp
 800a8ec:	f7f5 fcec 	bl	80002c8 <__aeabi_dsub>
 800a8f0:	e00e      	b.n	800a910 <__ieee754_rem_pio2+0x1c0>
 800a8f2:	463b      	mov	r3, r7
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	4650      	mov	r0, sl
 800a8f8:	4659      	mov	r1, fp
 800a8fa:	f7f5 fce5 	bl	80002c8 <__aeabi_dsub>
 800a8fe:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a902:	9305      	str	r3, [sp, #20]
 800a904:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a908:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800a90c:	2b10      	cmp	r3, #16
 800a90e:	dc02      	bgt.n	800a916 <__ieee754_rem_pio2+0x1c6>
 800a910:	e9c4 0100 	strd	r0, r1, [r4]
 800a914:	e039      	b.n	800a98a <__ieee754_rem_pio2+0x23a>
 800a916:	a34c      	add	r3, pc, #304	@ (adr r3, 800aa48 <__ieee754_rem_pio2+0x2f8>)
 800a918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a920:	f7f5 fe8a 	bl	8000638 <__aeabi_dmul>
 800a924:	4606      	mov	r6, r0
 800a926:	460f      	mov	r7, r1
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4650      	mov	r0, sl
 800a92e:	4659      	mov	r1, fp
 800a930:	f7f5 fcca 	bl	80002c8 <__aeabi_dsub>
 800a934:	4602      	mov	r2, r0
 800a936:	460b      	mov	r3, r1
 800a938:	4680      	mov	r8, r0
 800a93a:	4689      	mov	r9, r1
 800a93c:	4650      	mov	r0, sl
 800a93e:	4659      	mov	r1, fp
 800a940:	f7f5 fcc2 	bl	80002c8 <__aeabi_dsub>
 800a944:	4632      	mov	r2, r6
 800a946:	463b      	mov	r3, r7
 800a948:	f7f5 fcbe 	bl	80002c8 <__aeabi_dsub>
 800a94c:	a340      	add	r3, pc, #256	@ (adr r3, 800aa50 <__ieee754_rem_pio2+0x300>)
 800a94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a95a:	f7f5 fe6d 	bl	8000638 <__aeabi_dmul>
 800a95e:	4632      	mov	r2, r6
 800a960:	463b      	mov	r3, r7
 800a962:	f7f5 fcb1 	bl	80002c8 <__aeabi_dsub>
 800a966:	4602      	mov	r2, r0
 800a968:	460b      	mov	r3, r1
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	4640      	mov	r0, r8
 800a970:	4649      	mov	r1, r9
 800a972:	f7f5 fca9 	bl	80002c8 <__aeabi_dsub>
 800a976:	9a05      	ldr	r2, [sp, #20]
 800a978:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a97c:	1ad3      	subs	r3, r2, r3
 800a97e:	2b31      	cmp	r3, #49	@ 0x31
 800a980:	dc20      	bgt.n	800a9c4 <__ieee754_rem_pio2+0x274>
 800a982:	e9c4 0100 	strd	r0, r1, [r4]
 800a986:	46c2      	mov	sl, r8
 800a988:	46cb      	mov	fp, r9
 800a98a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a98e:	4650      	mov	r0, sl
 800a990:	4642      	mov	r2, r8
 800a992:	464b      	mov	r3, r9
 800a994:	4659      	mov	r1, fp
 800a996:	f7f5 fc97 	bl	80002c8 <__aeabi_dsub>
 800a99a:	463b      	mov	r3, r7
 800a99c:	4632      	mov	r2, r6
 800a99e:	f7f5 fc93 	bl	80002c8 <__aeabi_dsub>
 800a9a2:	9b04      	ldr	r3, [sp, #16]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a9aa:	f6bf af0e 	bge.w	800a7ca <__ieee754_rem_pio2+0x7a>
 800a9ae:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800a9b2:	6063      	str	r3, [r4, #4]
 800a9b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a9b8:	f8c4 8000 	str.w	r8, [r4]
 800a9bc:	60a0      	str	r0, [r4, #8]
 800a9be:	60e3      	str	r3, [r4, #12]
 800a9c0:	426d      	negs	r5, r5
 800a9c2:	e702      	b.n	800a7ca <__ieee754_rem_pio2+0x7a>
 800a9c4:	a326      	add	r3, pc, #152	@ (adr r3, 800aa60 <__ieee754_rem_pio2+0x310>)
 800a9c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9ce:	f7f5 fe33 	bl	8000638 <__aeabi_dmul>
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	460b      	mov	r3, r1
 800a9da:	4640      	mov	r0, r8
 800a9dc:	4649      	mov	r1, r9
 800a9de:	f7f5 fc73 	bl	80002c8 <__aeabi_dsub>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4682      	mov	sl, r0
 800a9e8:	468b      	mov	fp, r1
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	4649      	mov	r1, r9
 800a9ee:	f7f5 fc6b 	bl	80002c8 <__aeabi_dsub>
 800a9f2:	4632      	mov	r2, r6
 800a9f4:	463b      	mov	r3, r7
 800a9f6:	f7f5 fc67 	bl	80002c8 <__aeabi_dsub>
 800a9fa:	a31b      	add	r3, pc, #108	@ (adr r3, 800aa68 <__ieee754_rem_pio2+0x318>)
 800a9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa00:	4606      	mov	r6, r0
 800aa02:	460f      	mov	r7, r1
 800aa04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa08:	f7f5 fe16 	bl	8000638 <__aeabi_dmul>
 800aa0c:	4632      	mov	r2, r6
 800aa0e:	463b      	mov	r3, r7
 800aa10:	f7f5 fc5a 	bl	80002c8 <__aeabi_dsub>
 800aa14:	4606      	mov	r6, r0
 800aa16:	460f      	mov	r7, r1
 800aa18:	e764      	b.n	800a8e4 <__ieee754_rem_pio2+0x194>
 800aa1a:	4b1b      	ldr	r3, [pc, #108]	@ (800aa88 <__ieee754_rem_pio2+0x338>)
 800aa1c:	4598      	cmp	r8, r3
 800aa1e:	d935      	bls.n	800aa8c <__ieee754_rem_pio2+0x33c>
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	4630      	mov	r0, r6
 800aa26:	4639      	mov	r1, r7
 800aa28:	f7f5 fc4e 	bl	80002c8 <__aeabi_dsub>
 800aa2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aa30:	e9c4 0100 	strd	r0, r1, [r4]
 800aa34:	e69e      	b.n	800a774 <__ieee754_rem_pio2+0x24>
 800aa36:	bf00      	nop
 800aa38:	54400000 	.word	0x54400000
 800aa3c:	3ff921fb 	.word	0x3ff921fb
 800aa40:	1a626331 	.word	0x1a626331
 800aa44:	3dd0b461 	.word	0x3dd0b461
 800aa48:	1a600000 	.word	0x1a600000
 800aa4c:	3dd0b461 	.word	0x3dd0b461
 800aa50:	2e037073 	.word	0x2e037073
 800aa54:	3ba3198a 	.word	0x3ba3198a
 800aa58:	6dc9c883 	.word	0x6dc9c883
 800aa5c:	3fe45f30 	.word	0x3fe45f30
 800aa60:	2e000000 	.word	0x2e000000
 800aa64:	3ba3198a 	.word	0x3ba3198a
 800aa68:	252049c1 	.word	0x252049c1
 800aa6c:	397b839a 	.word	0x397b839a
 800aa70:	3fe921fb 	.word	0x3fe921fb
 800aa74:	4002d97b 	.word	0x4002d97b
 800aa78:	3ff921fb 	.word	0x3ff921fb
 800aa7c:	413921fb 	.word	0x413921fb
 800aa80:	3fe00000 	.word	0x3fe00000
 800aa84:	0800bbb0 	.word	0x0800bbb0
 800aa88:	7fefffff 	.word	0x7fefffff
 800aa8c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800aa90:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800aa94:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800aa98:	4630      	mov	r0, r6
 800aa9a:	460f      	mov	r7, r1
 800aa9c:	f7f6 f87c 	bl	8000b98 <__aeabi_d2iz>
 800aaa0:	f7f5 fd60 	bl	8000564 <__aeabi_i2d>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	4639      	mov	r1, r7
 800aaac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aab0:	f7f5 fc0a 	bl	80002c8 <__aeabi_dsub>
 800aab4:	4b22      	ldr	r3, [pc, #136]	@ (800ab40 <__ieee754_rem_pio2+0x3f0>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	f7f5 fdbe 	bl	8000638 <__aeabi_dmul>
 800aabc:	460f      	mov	r7, r1
 800aabe:	4606      	mov	r6, r0
 800aac0:	f7f6 f86a 	bl	8000b98 <__aeabi_d2iz>
 800aac4:	f7f5 fd4e 	bl	8000564 <__aeabi_i2d>
 800aac8:	4602      	mov	r2, r0
 800aaca:	460b      	mov	r3, r1
 800aacc:	4630      	mov	r0, r6
 800aace:	4639      	mov	r1, r7
 800aad0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aad4:	f7f5 fbf8 	bl	80002c8 <__aeabi_dsub>
 800aad8:	4b19      	ldr	r3, [pc, #100]	@ (800ab40 <__ieee754_rem_pio2+0x3f0>)
 800aada:	2200      	movs	r2, #0
 800aadc:	f7f5 fdac 	bl	8000638 <__aeabi_dmul>
 800aae0:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800aae4:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800aae8:	f04f 0803 	mov.w	r8, #3
 800aaec:	2600      	movs	r6, #0
 800aaee:	2700      	movs	r7, #0
 800aaf0:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800aaf4:	4632      	mov	r2, r6
 800aaf6:	463b      	mov	r3, r7
 800aaf8:	46c2      	mov	sl, r8
 800aafa:	f108 38ff 	add.w	r8, r8, #4294967295
 800aafe:	f7f6 f803 	bl	8000b08 <__aeabi_dcmpeq>
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d1f4      	bne.n	800aaf0 <__ieee754_rem_pio2+0x3a0>
 800ab06:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <__ieee754_rem_pio2+0x3f4>)
 800ab08:	9301      	str	r3, [sp, #4]
 800ab0a:	2302      	movs	r3, #2
 800ab0c:	9300      	str	r3, [sp, #0]
 800ab0e:	462a      	mov	r2, r5
 800ab10:	4653      	mov	r3, sl
 800ab12:	4621      	mov	r1, r4
 800ab14:	a806      	add	r0, sp, #24
 800ab16:	f000 f9b7 	bl	800ae88 <__kernel_rem_pio2>
 800ab1a:	9b04      	ldr	r3, [sp, #16]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	4605      	mov	r5, r0
 800ab20:	f6bf ae53 	bge.w	800a7ca <__ieee754_rem_pio2+0x7a>
 800ab24:	e9d4 2100 	ldrd	r2, r1, [r4]
 800ab28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab2c:	e9c4 2300 	strd	r2, r3, [r4]
 800ab30:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800ab34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab38:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800ab3c:	e740      	b.n	800a9c0 <__ieee754_rem_pio2+0x270>
 800ab3e:	bf00      	nop
 800ab40:	41700000 	.word	0x41700000
 800ab44:	0800bc30 	.word	0x0800bc30

0800ab48 <atan>:
 800ab48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	ec55 4b10 	vmov	r4, r5, d0
 800ab50:	4bbf      	ldr	r3, [pc, #764]	@ (800ae50 <atan+0x308>)
 800ab52:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800ab56:	429e      	cmp	r6, r3
 800ab58:	46ab      	mov	fp, r5
 800ab5a:	d918      	bls.n	800ab8e <atan+0x46>
 800ab5c:	4bbd      	ldr	r3, [pc, #756]	@ (800ae54 <atan+0x30c>)
 800ab5e:	429e      	cmp	r6, r3
 800ab60:	d801      	bhi.n	800ab66 <atan+0x1e>
 800ab62:	d109      	bne.n	800ab78 <atan+0x30>
 800ab64:	b144      	cbz	r4, 800ab78 <atan+0x30>
 800ab66:	4622      	mov	r2, r4
 800ab68:	462b      	mov	r3, r5
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	4629      	mov	r1, r5
 800ab6e:	f7f5 fbad 	bl	80002cc <__adddf3>
 800ab72:	4604      	mov	r4, r0
 800ab74:	460d      	mov	r5, r1
 800ab76:	e006      	b.n	800ab86 <atan+0x3e>
 800ab78:	f1bb 0f00 	cmp.w	fp, #0
 800ab7c:	f340 812b 	ble.w	800add6 <atan+0x28e>
 800ab80:	a597      	add	r5, pc, #604	@ (adr r5, 800ade0 <atan+0x298>)
 800ab82:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ab86:	ec45 4b10 	vmov	d0, r4, r5
 800ab8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab8e:	4bb2      	ldr	r3, [pc, #712]	@ (800ae58 <atan+0x310>)
 800ab90:	429e      	cmp	r6, r3
 800ab92:	d813      	bhi.n	800abbc <atan+0x74>
 800ab94:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800ab98:	429e      	cmp	r6, r3
 800ab9a:	d80c      	bhi.n	800abb6 <atan+0x6e>
 800ab9c:	a392      	add	r3, pc, #584	@ (adr r3, 800ade8 <atan+0x2a0>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	4620      	mov	r0, r4
 800aba4:	4629      	mov	r1, r5
 800aba6:	f7f5 fb91 	bl	80002cc <__adddf3>
 800abaa:	4bac      	ldr	r3, [pc, #688]	@ (800ae5c <atan+0x314>)
 800abac:	2200      	movs	r2, #0
 800abae:	f7f5 ffd3 	bl	8000b58 <__aeabi_dcmpgt>
 800abb2:	2800      	cmp	r0, #0
 800abb4:	d1e7      	bne.n	800ab86 <atan+0x3e>
 800abb6:	f04f 3aff 	mov.w	sl, #4294967295
 800abba:	e029      	b.n	800ac10 <atan+0xc8>
 800abbc:	f000 f95c 	bl	800ae78 <fabs>
 800abc0:	4ba7      	ldr	r3, [pc, #668]	@ (800ae60 <atan+0x318>)
 800abc2:	429e      	cmp	r6, r3
 800abc4:	ec55 4b10 	vmov	r4, r5, d0
 800abc8:	f200 80bc 	bhi.w	800ad44 <atan+0x1fc>
 800abcc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800abd0:	429e      	cmp	r6, r3
 800abd2:	f200 809e 	bhi.w	800ad12 <atan+0x1ca>
 800abd6:	4622      	mov	r2, r4
 800abd8:	462b      	mov	r3, r5
 800abda:	4620      	mov	r0, r4
 800abdc:	4629      	mov	r1, r5
 800abde:	f7f5 fb75 	bl	80002cc <__adddf3>
 800abe2:	4b9e      	ldr	r3, [pc, #632]	@ (800ae5c <atan+0x314>)
 800abe4:	2200      	movs	r2, #0
 800abe6:	f7f5 fb6f 	bl	80002c8 <__aeabi_dsub>
 800abea:	2200      	movs	r2, #0
 800abec:	4606      	mov	r6, r0
 800abee:	460f      	mov	r7, r1
 800abf0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800abf4:	4620      	mov	r0, r4
 800abf6:	4629      	mov	r1, r5
 800abf8:	f7f5 fb68 	bl	80002cc <__adddf3>
 800abfc:	4602      	mov	r2, r0
 800abfe:	460b      	mov	r3, r1
 800ac00:	4630      	mov	r0, r6
 800ac02:	4639      	mov	r1, r7
 800ac04:	f7f5 fe42 	bl	800088c <__aeabi_ddiv>
 800ac08:	f04f 0a00 	mov.w	sl, #0
 800ac0c:	4604      	mov	r4, r0
 800ac0e:	460d      	mov	r5, r1
 800ac10:	4622      	mov	r2, r4
 800ac12:	462b      	mov	r3, r5
 800ac14:	4620      	mov	r0, r4
 800ac16:	4629      	mov	r1, r5
 800ac18:	f7f5 fd0e 	bl	8000638 <__aeabi_dmul>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4680      	mov	r8, r0
 800ac22:	4689      	mov	r9, r1
 800ac24:	f7f5 fd08 	bl	8000638 <__aeabi_dmul>
 800ac28:	a371      	add	r3, pc, #452	@ (adr r3, 800adf0 <atan+0x2a8>)
 800ac2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac2e:	4606      	mov	r6, r0
 800ac30:	460f      	mov	r7, r1
 800ac32:	f7f5 fd01 	bl	8000638 <__aeabi_dmul>
 800ac36:	a370      	add	r3, pc, #448	@ (adr r3, 800adf8 <atan+0x2b0>)
 800ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3c:	f7f5 fb46 	bl	80002cc <__adddf3>
 800ac40:	4632      	mov	r2, r6
 800ac42:	463b      	mov	r3, r7
 800ac44:	f7f5 fcf8 	bl	8000638 <__aeabi_dmul>
 800ac48:	a36d      	add	r3, pc, #436	@ (adr r3, 800ae00 <atan+0x2b8>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f7f5 fb3d 	bl	80002cc <__adddf3>
 800ac52:	4632      	mov	r2, r6
 800ac54:	463b      	mov	r3, r7
 800ac56:	f7f5 fcef 	bl	8000638 <__aeabi_dmul>
 800ac5a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ae08 <atan+0x2c0>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	f7f5 fb34 	bl	80002cc <__adddf3>
 800ac64:	4632      	mov	r2, r6
 800ac66:	463b      	mov	r3, r7
 800ac68:	f7f5 fce6 	bl	8000638 <__aeabi_dmul>
 800ac6c:	a368      	add	r3, pc, #416	@ (adr r3, 800ae10 <atan+0x2c8>)
 800ac6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac72:	f7f5 fb2b 	bl	80002cc <__adddf3>
 800ac76:	4632      	mov	r2, r6
 800ac78:	463b      	mov	r3, r7
 800ac7a:	f7f5 fcdd 	bl	8000638 <__aeabi_dmul>
 800ac7e:	a366      	add	r3, pc, #408	@ (adr r3, 800ae18 <atan+0x2d0>)
 800ac80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac84:	f7f5 fb22 	bl	80002cc <__adddf3>
 800ac88:	4642      	mov	r2, r8
 800ac8a:	464b      	mov	r3, r9
 800ac8c:	f7f5 fcd4 	bl	8000638 <__aeabi_dmul>
 800ac90:	a363      	add	r3, pc, #396	@ (adr r3, 800ae20 <atan+0x2d8>)
 800ac92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac96:	4680      	mov	r8, r0
 800ac98:	4689      	mov	r9, r1
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	f7f5 fccb 	bl	8000638 <__aeabi_dmul>
 800aca2:	a361      	add	r3, pc, #388	@ (adr r3, 800ae28 <atan+0x2e0>)
 800aca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca8:	f7f5 fb0e 	bl	80002c8 <__aeabi_dsub>
 800acac:	4632      	mov	r2, r6
 800acae:	463b      	mov	r3, r7
 800acb0:	f7f5 fcc2 	bl	8000638 <__aeabi_dmul>
 800acb4:	a35e      	add	r3, pc, #376	@ (adr r3, 800ae30 <atan+0x2e8>)
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	f7f5 fb05 	bl	80002c8 <__aeabi_dsub>
 800acbe:	4632      	mov	r2, r6
 800acc0:	463b      	mov	r3, r7
 800acc2:	f7f5 fcb9 	bl	8000638 <__aeabi_dmul>
 800acc6:	a35c      	add	r3, pc, #368	@ (adr r3, 800ae38 <atan+0x2f0>)
 800acc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800accc:	f7f5 fafc 	bl	80002c8 <__aeabi_dsub>
 800acd0:	4632      	mov	r2, r6
 800acd2:	463b      	mov	r3, r7
 800acd4:	f7f5 fcb0 	bl	8000638 <__aeabi_dmul>
 800acd8:	a359      	add	r3, pc, #356	@ (adr r3, 800ae40 <atan+0x2f8>)
 800acda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acde:	f7f5 faf3 	bl	80002c8 <__aeabi_dsub>
 800ace2:	4632      	mov	r2, r6
 800ace4:	463b      	mov	r3, r7
 800ace6:	f7f5 fca7 	bl	8000638 <__aeabi_dmul>
 800acea:	4602      	mov	r2, r0
 800acec:	460b      	mov	r3, r1
 800acee:	4640      	mov	r0, r8
 800acf0:	4649      	mov	r1, r9
 800acf2:	f7f5 faeb 	bl	80002cc <__adddf3>
 800acf6:	4622      	mov	r2, r4
 800acf8:	462b      	mov	r3, r5
 800acfa:	f7f5 fc9d 	bl	8000638 <__aeabi_dmul>
 800acfe:	f1ba 3fff 	cmp.w	sl, #4294967295
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	d148      	bne.n	800ad9a <atan+0x252>
 800ad08:	4620      	mov	r0, r4
 800ad0a:	4629      	mov	r1, r5
 800ad0c:	f7f5 fadc 	bl	80002c8 <__aeabi_dsub>
 800ad10:	e72f      	b.n	800ab72 <atan+0x2a>
 800ad12:	4b52      	ldr	r3, [pc, #328]	@ (800ae5c <atan+0x314>)
 800ad14:	2200      	movs	r2, #0
 800ad16:	4620      	mov	r0, r4
 800ad18:	4629      	mov	r1, r5
 800ad1a:	f7f5 fad5 	bl	80002c8 <__aeabi_dsub>
 800ad1e:	4b4f      	ldr	r3, [pc, #316]	@ (800ae5c <atan+0x314>)
 800ad20:	4606      	mov	r6, r0
 800ad22:	460f      	mov	r7, r1
 800ad24:	2200      	movs	r2, #0
 800ad26:	4620      	mov	r0, r4
 800ad28:	4629      	mov	r1, r5
 800ad2a:	f7f5 facf 	bl	80002cc <__adddf3>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	460b      	mov	r3, r1
 800ad32:	4630      	mov	r0, r6
 800ad34:	4639      	mov	r1, r7
 800ad36:	f7f5 fda9 	bl	800088c <__aeabi_ddiv>
 800ad3a:	f04f 0a01 	mov.w	sl, #1
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460d      	mov	r5, r1
 800ad42:	e765      	b.n	800ac10 <atan+0xc8>
 800ad44:	4b47      	ldr	r3, [pc, #284]	@ (800ae64 <atan+0x31c>)
 800ad46:	429e      	cmp	r6, r3
 800ad48:	d21c      	bcs.n	800ad84 <atan+0x23c>
 800ad4a:	4b47      	ldr	r3, [pc, #284]	@ (800ae68 <atan+0x320>)
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	4620      	mov	r0, r4
 800ad50:	4629      	mov	r1, r5
 800ad52:	f7f5 fab9 	bl	80002c8 <__aeabi_dsub>
 800ad56:	4b44      	ldr	r3, [pc, #272]	@ (800ae68 <atan+0x320>)
 800ad58:	4606      	mov	r6, r0
 800ad5a:	460f      	mov	r7, r1
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	4620      	mov	r0, r4
 800ad60:	4629      	mov	r1, r5
 800ad62:	f7f5 fc69 	bl	8000638 <__aeabi_dmul>
 800ad66:	4b3d      	ldr	r3, [pc, #244]	@ (800ae5c <atan+0x314>)
 800ad68:	2200      	movs	r2, #0
 800ad6a:	f7f5 faaf 	bl	80002cc <__adddf3>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	4630      	mov	r0, r6
 800ad74:	4639      	mov	r1, r7
 800ad76:	f7f5 fd89 	bl	800088c <__aeabi_ddiv>
 800ad7a:	f04f 0a02 	mov.w	sl, #2
 800ad7e:	4604      	mov	r4, r0
 800ad80:	460d      	mov	r5, r1
 800ad82:	e745      	b.n	800ac10 <atan+0xc8>
 800ad84:	4622      	mov	r2, r4
 800ad86:	462b      	mov	r3, r5
 800ad88:	4938      	ldr	r1, [pc, #224]	@ (800ae6c <atan+0x324>)
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	f7f5 fd7e 	bl	800088c <__aeabi_ddiv>
 800ad90:	f04f 0a03 	mov.w	sl, #3
 800ad94:	4604      	mov	r4, r0
 800ad96:	460d      	mov	r5, r1
 800ad98:	e73a      	b.n	800ac10 <atan+0xc8>
 800ad9a:	4b35      	ldr	r3, [pc, #212]	@ (800ae70 <atan+0x328>)
 800ad9c:	4e35      	ldr	r6, [pc, #212]	@ (800ae74 <atan+0x32c>)
 800ad9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ada2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada6:	f7f5 fa8f 	bl	80002c8 <__aeabi_dsub>
 800adaa:	4622      	mov	r2, r4
 800adac:	462b      	mov	r3, r5
 800adae:	f7f5 fa8b 	bl	80002c8 <__aeabi_dsub>
 800adb2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800adb6:	4602      	mov	r2, r0
 800adb8:	460b      	mov	r3, r1
 800adba:	e9d6 0100 	ldrd	r0, r1, [r6]
 800adbe:	f7f5 fa83 	bl	80002c8 <__aeabi_dsub>
 800adc2:	f1bb 0f00 	cmp.w	fp, #0
 800adc6:	4604      	mov	r4, r0
 800adc8:	460d      	mov	r5, r1
 800adca:	f6bf aedc 	bge.w	800ab86 <atan+0x3e>
 800adce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800add2:	461d      	mov	r5, r3
 800add4:	e6d7      	b.n	800ab86 <atan+0x3e>
 800add6:	a51c      	add	r5, pc, #112	@ (adr r5, 800ae48 <atan+0x300>)
 800add8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800addc:	e6d3      	b.n	800ab86 <atan+0x3e>
 800adde:	bf00      	nop
 800ade0:	54442d18 	.word	0x54442d18
 800ade4:	3ff921fb 	.word	0x3ff921fb
 800ade8:	8800759c 	.word	0x8800759c
 800adec:	7e37e43c 	.word	0x7e37e43c
 800adf0:	e322da11 	.word	0xe322da11
 800adf4:	3f90ad3a 	.word	0x3f90ad3a
 800adf8:	24760deb 	.word	0x24760deb
 800adfc:	3fa97b4b 	.word	0x3fa97b4b
 800ae00:	a0d03d51 	.word	0xa0d03d51
 800ae04:	3fb10d66 	.word	0x3fb10d66
 800ae08:	c54c206e 	.word	0xc54c206e
 800ae0c:	3fb745cd 	.word	0x3fb745cd
 800ae10:	920083ff 	.word	0x920083ff
 800ae14:	3fc24924 	.word	0x3fc24924
 800ae18:	5555550d 	.word	0x5555550d
 800ae1c:	3fd55555 	.word	0x3fd55555
 800ae20:	2c6a6c2f 	.word	0x2c6a6c2f
 800ae24:	bfa2b444 	.word	0xbfa2b444
 800ae28:	52defd9a 	.word	0x52defd9a
 800ae2c:	3fadde2d 	.word	0x3fadde2d
 800ae30:	af749a6d 	.word	0xaf749a6d
 800ae34:	3fb3b0f2 	.word	0x3fb3b0f2
 800ae38:	fe231671 	.word	0xfe231671
 800ae3c:	3fbc71c6 	.word	0x3fbc71c6
 800ae40:	9998ebc4 	.word	0x9998ebc4
 800ae44:	3fc99999 	.word	0x3fc99999
 800ae48:	54442d18 	.word	0x54442d18
 800ae4c:	bff921fb 	.word	0xbff921fb
 800ae50:	440fffff 	.word	0x440fffff
 800ae54:	7ff00000 	.word	0x7ff00000
 800ae58:	3fdbffff 	.word	0x3fdbffff
 800ae5c:	3ff00000 	.word	0x3ff00000
 800ae60:	3ff2ffff 	.word	0x3ff2ffff
 800ae64:	40038000 	.word	0x40038000
 800ae68:	3ff80000 	.word	0x3ff80000
 800ae6c:	bff00000 	.word	0xbff00000
 800ae70:	0800bd38 	.word	0x0800bd38
 800ae74:	0800bd58 	.word	0x0800bd58

0800ae78 <fabs>:
 800ae78:	ec51 0b10 	vmov	r0, r1, d0
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ae82:	ec43 2b10 	vmov	d0, r2, r3
 800ae86:	4770      	bx	lr

0800ae88 <__kernel_rem_pio2>:
 800ae88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae8c:	ed2d 8b02 	vpush	{d8}
 800ae90:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800ae94:	f112 0f14 	cmn.w	r2, #20
 800ae98:	9306      	str	r3, [sp, #24]
 800ae9a:	9104      	str	r1, [sp, #16]
 800ae9c:	4bbe      	ldr	r3, [pc, #760]	@ (800b198 <__kernel_rem_pio2+0x310>)
 800ae9e:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800aea0:	9008      	str	r0, [sp, #32]
 800aea2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	9b06      	ldr	r3, [sp, #24]
 800aeaa:	f103 33ff 	add.w	r3, r3, #4294967295
 800aeae:	bfa8      	it	ge
 800aeb0:	1ed4      	subge	r4, r2, #3
 800aeb2:	9305      	str	r3, [sp, #20]
 800aeb4:	bfb2      	itee	lt
 800aeb6:	2400      	movlt	r4, #0
 800aeb8:	2318      	movge	r3, #24
 800aeba:	fb94 f4f3 	sdivge	r4, r4, r3
 800aebe:	f06f 0317 	mvn.w	r3, #23
 800aec2:	fb04 3303 	mla	r3, r4, r3, r3
 800aec6:	eb03 0b02 	add.w	fp, r3, r2
 800aeca:	9b00      	ldr	r3, [sp, #0]
 800aecc:	9a05      	ldr	r2, [sp, #20]
 800aece:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800b188 <__kernel_rem_pio2+0x300>
 800aed2:	eb03 0802 	add.w	r8, r3, r2
 800aed6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800aed8:	1aa7      	subs	r7, r4, r2
 800aeda:	ae20      	add	r6, sp, #128	@ 0x80
 800aedc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800aee0:	2500      	movs	r5, #0
 800aee2:	4545      	cmp	r5, r8
 800aee4:	dd13      	ble.n	800af0e <__kernel_rem_pio2+0x86>
 800aee6:	9b06      	ldr	r3, [sp, #24]
 800aee8:	aa20      	add	r2, sp, #128	@ 0x80
 800aeea:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800aeee:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800aef2:	f04f 0800 	mov.w	r8, #0
 800aef6:	9b00      	ldr	r3, [sp, #0]
 800aef8:	4598      	cmp	r8, r3
 800aefa:	dc31      	bgt.n	800af60 <__kernel_rem_pio2+0xd8>
 800aefc:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800b188 <__kernel_rem_pio2+0x300>
 800af00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af04:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af08:	462f      	mov	r7, r5
 800af0a:	2600      	movs	r6, #0
 800af0c:	e01b      	b.n	800af46 <__kernel_rem_pio2+0xbe>
 800af0e:	42ef      	cmn	r7, r5
 800af10:	d407      	bmi.n	800af22 <__kernel_rem_pio2+0x9a>
 800af12:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800af16:	f7f5 fb25 	bl	8000564 <__aeabi_i2d>
 800af1a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800af1e:	3501      	adds	r5, #1
 800af20:	e7df      	b.n	800aee2 <__kernel_rem_pio2+0x5a>
 800af22:	ec51 0b18 	vmov	r0, r1, d8
 800af26:	e7f8      	b.n	800af1a <__kernel_rem_pio2+0x92>
 800af28:	e9d7 2300 	ldrd	r2, r3, [r7]
 800af2c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800af30:	f7f5 fb82 	bl	8000638 <__aeabi_dmul>
 800af34:	4602      	mov	r2, r0
 800af36:	460b      	mov	r3, r1
 800af38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800af3c:	f7f5 f9c6 	bl	80002cc <__adddf3>
 800af40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800af44:	3601      	adds	r6, #1
 800af46:	9b05      	ldr	r3, [sp, #20]
 800af48:	429e      	cmp	r6, r3
 800af4a:	f1a7 0708 	sub.w	r7, r7, #8
 800af4e:	ddeb      	ble.n	800af28 <__kernel_rem_pio2+0xa0>
 800af50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af54:	f108 0801 	add.w	r8, r8, #1
 800af58:	ecaa 7b02 	vstmia	sl!, {d7}
 800af5c:	3508      	adds	r5, #8
 800af5e:	e7ca      	b.n	800aef6 <__kernel_rem_pio2+0x6e>
 800af60:	9b00      	ldr	r3, [sp, #0]
 800af62:	f8dd 8000 	ldr.w	r8, [sp]
 800af66:	aa0c      	add	r2, sp, #48	@ 0x30
 800af68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800af6c:	930a      	str	r3, [sp, #40]	@ 0x28
 800af6e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800af70:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800af74:	9309      	str	r3, [sp, #36]	@ 0x24
 800af76:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800af7a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800af7c:	ab98      	add	r3, sp, #608	@ 0x260
 800af7e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800af82:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800af86:	ed8d 7b02 	vstr	d7, [sp, #8]
 800af8a:	ac0c      	add	r4, sp, #48	@ 0x30
 800af8c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800af8e:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800af92:	46a1      	mov	r9, r4
 800af94:	46c2      	mov	sl, r8
 800af96:	f1ba 0f00 	cmp.w	sl, #0
 800af9a:	f1a5 0508 	sub.w	r5, r5, #8
 800af9e:	dc77      	bgt.n	800b090 <__kernel_rem_pio2+0x208>
 800afa0:	4658      	mov	r0, fp
 800afa2:	ed9d 0b02 	vldr	d0, [sp, #8]
 800afa6:	f000 fac7 	bl	800b538 <scalbn>
 800afaa:	ec57 6b10 	vmov	r6, r7, d0
 800afae:	2200      	movs	r2, #0
 800afb0:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800afb4:	4630      	mov	r0, r6
 800afb6:	4639      	mov	r1, r7
 800afb8:	f7f5 fb3e 	bl	8000638 <__aeabi_dmul>
 800afbc:	ec41 0b10 	vmov	d0, r0, r1
 800afc0:	f000 fb3a 	bl	800b638 <floor>
 800afc4:	4b75      	ldr	r3, [pc, #468]	@ (800b19c <__kernel_rem_pio2+0x314>)
 800afc6:	ec51 0b10 	vmov	r0, r1, d0
 800afca:	2200      	movs	r2, #0
 800afcc:	f7f5 fb34 	bl	8000638 <__aeabi_dmul>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4630      	mov	r0, r6
 800afd6:	4639      	mov	r1, r7
 800afd8:	f7f5 f976 	bl	80002c8 <__aeabi_dsub>
 800afdc:	460f      	mov	r7, r1
 800afde:	4606      	mov	r6, r0
 800afe0:	f7f5 fdda 	bl	8000b98 <__aeabi_d2iz>
 800afe4:	9002      	str	r0, [sp, #8]
 800afe6:	f7f5 fabd 	bl	8000564 <__aeabi_i2d>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	4630      	mov	r0, r6
 800aff0:	4639      	mov	r1, r7
 800aff2:	f7f5 f969 	bl	80002c8 <__aeabi_dsub>
 800aff6:	f1bb 0f00 	cmp.w	fp, #0
 800affa:	4606      	mov	r6, r0
 800affc:	460f      	mov	r7, r1
 800affe:	dd6c      	ble.n	800b0da <__kernel_rem_pio2+0x252>
 800b000:	f108 31ff 	add.w	r1, r8, #4294967295
 800b004:	ab0c      	add	r3, sp, #48	@ 0x30
 800b006:	9d02      	ldr	r5, [sp, #8]
 800b008:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b00c:	f1cb 0018 	rsb	r0, fp, #24
 800b010:	fa43 f200 	asr.w	r2, r3, r0
 800b014:	4415      	add	r5, r2
 800b016:	4082      	lsls	r2, r0
 800b018:	1a9b      	subs	r3, r3, r2
 800b01a:	aa0c      	add	r2, sp, #48	@ 0x30
 800b01c:	9502      	str	r5, [sp, #8]
 800b01e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b022:	f1cb 0217 	rsb	r2, fp, #23
 800b026:	fa43 f902 	asr.w	r9, r3, r2
 800b02a:	f1b9 0f00 	cmp.w	r9, #0
 800b02e:	dd64      	ble.n	800b0fa <__kernel_rem_pio2+0x272>
 800b030:	9b02      	ldr	r3, [sp, #8]
 800b032:	2200      	movs	r2, #0
 800b034:	3301      	adds	r3, #1
 800b036:	9302      	str	r3, [sp, #8]
 800b038:	4615      	mov	r5, r2
 800b03a:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800b03e:	4590      	cmp	r8, r2
 800b040:	f300 80b8 	bgt.w	800b1b4 <__kernel_rem_pio2+0x32c>
 800b044:	f1bb 0f00 	cmp.w	fp, #0
 800b048:	dd07      	ble.n	800b05a <__kernel_rem_pio2+0x1d2>
 800b04a:	f1bb 0f01 	cmp.w	fp, #1
 800b04e:	f000 80bf 	beq.w	800b1d0 <__kernel_rem_pio2+0x348>
 800b052:	f1bb 0f02 	cmp.w	fp, #2
 800b056:	f000 80c6 	beq.w	800b1e6 <__kernel_rem_pio2+0x35e>
 800b05a:	f1b9 0f02 	cmp.w	r9, #2
 800b05e:	d14c      	bne.n	800b0fa <__kernel_rem_pio2+0x272>
 800b060:	4632      	mov	r2, r6
 800b062:	463b      	mov	r3, r7
 800b064:	494e      	ldr	r1, [pc, #312]	@ (800b1a0 <__kernel_rem_pio2+0x318>)
 800b066:	2000      	movs	r0, #0
 800b068:	f7f5 f92e 	bl	80002c8 <__aeabi_dsub>
 800b06c:	4606      	mov	r6, r0
 800b06e:	460f      	mov	r7, r1
 800b070:	2d00      	cmp	r5, #0
 800b072:	d042      	beq.n	800b0fa <__kernel_rem_pio2+0x272>
 800b074:	4658      	mov	r0, fp
 800b076:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800b190 <__kernel_rem_pio2+0x308>
 800b07a:	f000 fa5d 	bl	800b538 <scalbn>
 800b07e:	4630      	mov	r0, r6
 800b080:	4639      	mov	r1, r7
 800b082:	ec53 2b10 	vmov	r2, r3, d0
 800b086:	f7f5 f91f 	bl	80002c8 <__aeabi_dsub>
 800b08a:	4606      	mov	r6, r0
 800b08c:	460f      	mov	r7, r1
 800b08e:	e034      	b.n	800b0fa <__kernel_rem_pio2+0x272>
 800b090:	4b44      	ldr	r3, [pc, #272]	@ (800b1a4 <__kernel_rem_pio2+0x31c>)
 800b092:	2200      	movs	r2, #0
 800b094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b098:	f7f5 face 	bl	8000638 <__aeabi_dmul>
 800b09c:	f7f5 fd7c 	bl	8000b98 <__aeabi_d2iz>
 800b0a0:	f7f5 fa60 	bl	8000564 <__aeabi_i2d>
 800b0a4:	4b40      	ldr	r3, [pc, #256]	@ (800b1a8 <__kernel_rem_pio2+0x320>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4606      	mov	r6, r0
 800b0aa:	460f      	mov	r7, r1
 800b0ac:	f7f5 fac4 	bl	8000638 <__aeabi_dmul>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0b8:	f7f5 f906 	bl	80002c8 <__aeabi_dsub>
 800b0bc:	f7f5 fd6c 	bl	8000b98 <__aeabi_d2iz>
 800b0c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b0c4:	f849 0b04 	str.w	r0, [r9], #4
 800b0c8:	4639      	mov	r1, r7
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f7f5 f8fe 	bl	80002cc <__adddf3>
 800b0d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0d8:	e75d      	b.n	800af96 <__kernel_rem_pio2+0x10e>
 800b0da:	d107      	bne.n	800b0ec <__kernel_rem_pio2+0x264>
 800b0dc:	f108 33ff 	add.w	r3, r8, #4294967295
 800b0e0:	aa0c      	add	r2, sp, #48	@ 0x30
 800b0e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0e6:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800b0ea:	e79e      	b.n	800b02a <__kernel_rem_pio2+0x1a2>
 800b0ec:	4b2f      	ldr	r3, [pc, #188]	@ (800b1ac <__kernel_rem_pio2+0x324>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f7f5 fd28 	bl	8000b44 <__aeabi_dcmpge>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d143      	bne.n	800b180 <__kernel_rem_pio2+0x2f8>
 800b0f8:	4681      	mov	r9, r0
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	4630      	mov	r0, r6
 800b100:	4639      	mov	r1, r7
 800b102:	f7f5 fd01 	bl	8000b08 <__aeabi_dcmpeq>
 800b106:	2800      	cmp	r0, #0
 800b108:	f000 80bf 	beq.w	800b28a <__kernel_rem_pio2+0x402>
 800b10c:	f108 33ff 	add.w	r3, r8, #4294967295
 800b110:	2200      	movs	r2, #0
 800b112:	9900      	ldr	r1, [sp, #0]
 800b114:	428b      	cmp	r3, r1
 800b116:	da6e      	bge.n	800b1f6 <__kernel_rem_pio2+0x36e>
 800b118:	2a00      	cmp	r2, #0
 800b11a:	f000 8089 	beq.w	800b230 <__kernel_rem_pio2+0x3a8>
 800b11e:	f108 38ff 	add.w	r8, r8, #4294967295
 800b122:	ab0c      	add	r3, sp, #48	@ 0x30
 800b124:	f1ab 0b18 	sub.w	fp, fp, #24
 800b128:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d0f6      	beq.n	800b11e <__kernel_rem_pio2+0x296>
 800b130:	4658      	mov	r0, fp
 800b132:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b190 <__kernel_rem_pio2+0x308>
 800b136:	f000 f9ff 	bl	800b538 <scalbn>
 800b13a:	f108 0301 	add.w	r3, r8, #1
 800b13e:	00da      	lsls	r2, r3, #3
 800b140:	9205      	str	r2, [sp, #20]
 800b142:	ec55 4b10 	vmov	r4, r5, d0
 800b146:	aa70      	add	r2, sp, #448	@ 0x1c0
 800b148:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800b1a4 <__kernel_rem_pio2+0x31c>
 800b14c:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800b150:	4646      	mov	r6, r8
 800b152:	f04f 0a00 	mov.w	sl, #0
 800b156:	2e00      	cmp	r6, #0
 800b158:	f280 80cf 	bge.w	800b2fa <__kernel_rem_pio2+0x472>
 800b15c:	4644      	mov	r4, r8
 800b15e:	2c00      	cmp	r4, #0
 800b160:	f2c0 80fd 	blt.w	800b35e <__kernel_rem_pio2+0x4d6>
 800b164:	4b12      	ldr	r3, [pc, #72]	@ (800b1b0 <__kernel_rem_pio2+0x328>)
 800b166:	461f      	mov	r7, r3
 800b168:	ab70      	add	r3, sp, #448	@ 0x1c0
 800b16a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b16e:	9306      	str	r3, [sp, #24]
 800b170:	f04f 0a00 	mov.w	sl, #0
 800b174:	f04f 0b00 	mov.w	fp, #0
 800b178:	2600      	movs	r6, #0
 800b17a:	eba8 0504 	sub.w	r5, r8, r4
 800b17e:	e0e2      	b.n	800b346 <__kernel_rem_pio2+0x4be>
 800b180:	f04f 0902 	mov.w	r9, #2
 800b184:	e754      	b.n	800b030 <__kernel_rem_pio2+0x1a8>
 800b186:	bf00      	nop
	...
 800b194:	3ff00000 	.word	0x3ff00000
 800b198:	0800bdb8 	.word	0x0800bdb8
 800b19c:	40200000 	.word	0x40200000
 800b1a0:	3ff00000 	.word	0x3ff00000
 800b1a4:	3e700000 	.word	0x3e700000
 800b1a8:	41700000 	.word	0x41700000
 800b1ac:	3fe00000 	.word	0x3fe00000
 800b1b0:	0800bd78 	.word	0x0800bd78
 800b1b4:	f854 3b04 	ldr.w	r3, [r4], #4
 800b1b8:	b945      	cbnz	r5, 800b1cc <__kernel_rem_pio2+0x344>
 800b1ba:	b123      	cbz	r3, 800b1c6 <__kernel_rem_pio2+0x33e>
 800b1bc:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800b1c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	3201      	adds	r2, #1
 800b1c8:	461d      	mov	r5, r3
 800b1ca:	e738      	b.n	800b03e <__kernel_rem_pio2+0x1b6>
 800b1cc:	1acb      	subs	r3, r1, r3
 800b1ce:	e7f7      	b.n	800b1c0 <__kernel_rem_pio2+0x338>
 800b1d0:	f108 32ff 	add.w	r2, r8, #4294967295
 800b1d4:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1da:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b1de:	a90c      	add	r1, sp, #48	@ 0x30
 800b1e0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b1e4:	e739      	b.n	800b05a <__kernel_rem_pio2+0x1d2>
 800b1e6:	f108 32ff 	add.w	r2, r8, #4294967295
 800b1ea:	ab0c      	add	r3, sp, #48	@ 0x30
 800b1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b1f4:	e7f3      	b.n	800b1de <__kernel_rem_pio2+0x356>
 800b1f6:	a90c      	add	r1, sp, #48	@ 0x30
 800b1f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b1fc:	3b01      	subs	r3, #1
 800b1fe:	430a      	orrs	r2, r1
 800b200:	e787      	b.n	800b112 <__kernel_rem_pio2+0x28a>
 800b202:	3401      	adds	r4, #1
 800b204:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b208:	2a00      	cmp	r2, #0
 800b20a:	d0fa      	beq.n	800b202 <__kernel_rem_pio2+0x37a>
 800b20c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b20e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b212:	eb0d 0503 	add.w	r5, sp, r3
 800b216:	9b06      	ldr	r3, [sp, #24]
 800b218:	aa20      	add	r2, sp, #128	@ 0x80
 800b21a:	4443      	add	r3, r8
 800b21c:	f108 0701 	add.w	r7, r8, #1
 800b220:	3d98      	subs	r5, #152	@ 0x98
 800b222:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800b226:	4444      	add	r4, r8
 800b228:	42bc      	cmp	r4, r7
 800b22a:	da04      	bge.n	800b236 <__kernel_rem_pio2+0x3ae>
 800b22c:	46a0      	mov	r8, r4
 800b22e:	e6a2      	b.n	800af76 <__kernel_rem_pio2+0xee>
 800b230:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b232:	2401      	movs	r4, #1
 800b234:	e7e6      	b.n	800b204 <__kernel_rem_pio2+0x37c>
 800b236:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b238:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b23c:	f7f5 f992 	bl	8000564 <__aeabi_i2d>
 800b240:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800b508 <__kernel_rem_pio2+0x680>
 800b244:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b248:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b24c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b250:	46b2      	mov	sl, r6
 800b252:	f04f 0800 	mov.w	r8, #0
 800b256:	9b05      	ldr	r3, [sp, #20]
 800b258:	4598      	cmp	r8, r3
 800b25a:	dd05      	ble.n	800b268 <__kernel_rem_pio2+0x3e0>
 800b25c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b260:	3701      	adds	r7, #1
 800b262:	eca5 7b02 	vstmia	r5!, {d7}
 800b266:	e7df      	b.n	800b228 <__kernel_rem_pio2+0x3a0>
 800b268:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800b26c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b270:	f7f5 f9e2 	bl	8000638 <__aeabi_dmul>
 800b274:	4602      	mov	r2, r0
 800b276:	460b      	mov	r3, r1
 800b278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b27c:	f7f5 f826 	bl	80002cc <__adddf3>
 800b280:	f108 0801 	add.w	r8, r8, #1
 800b284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b288:	e7e5      	b.n	800b256 <__kernel_rem_pio2+0x3ce>
 800b28a:	f1cb 0000 	rsb	r0, fp, #0
 800b28e:	ec47 6b10 	vmov	d0, r6, r7
 800b292:	f000 f951 	bl	800b538 <scalbn>
 800b296:	ec55 4b10 	vmov	r4, r5, d0
 800b29a:	4b9d      	ldr	r3, [pc, #628]	@ (800b510 <__kernel_rem_pio2+0x688>)
 800b29c:	2200      	movs	r2, #0
 800b29e:	4620      	mov	r0, r4
 800b2a0:	4629      	mov	r1, r5
 800b2a2:	f7f5 fc4f 	bl	8000b44 <__aeabi_dcmpge>
 800b2a6:	b300      	cbz	r0, 800b2ea <__kernel_rem_pio2+0x462>
 800b2a8:	4b9a      	ldr	r3, [pc, #616]	@ (800b514 <__kernel_rem_pio2+0x68c>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	4629      	mov	r1, r5
 800b2b0:	f7f5 f9c2 	bl	8000638 <__aeabi_dmul>
 800b2b4:	f7f5 fc70 	bl	8000b98 <__aeabi_d2iz>
 800b2b8:	4606      	mov	r6, r0
 800b2ba:	f7f5 f953 	bl	8000564 <__aeabi_i2d>
 800b2be:	4b94      	ldr	r3, [pc, #592]	@ (800b510 <__kernel_rem_pio2+0x688>)
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f7f5 f9b9 	bl	8000638 <__aeabi_dmul>
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	4629      	mov	r1, r5
 800b2cc:	4620      	mov	r0, r4
 800b2ce:	f7f4 fffb 	bl	80002c8 <__aeabi_dsub>
 800b2d2:	f7f5 fc61 	bl	8000b98 <__aeabi_d2iz>
 800b2d6:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2d8:	f10b 0b18 	add.w	fp, fp, #24
 800b2dc:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b2e0:	f108 0801 	add.w	r8, r8, #1
 800b2e4:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800b2e8:	e722      	b.n	800b130 <__kernel_rem_pio2+0x2a8>
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	f7f5 fc53 	bl	8000b98 <__aeabi_d2iz>
 800b2f2:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2f4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800b2f8:	e71a      	b.n	800b130 <__kernel_rem_pio2+0x2a8>
 800b2fa:	ab0c      	add	r3, sp, #48	@ 0x30
 800b2fc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b300:	f7f5 f930 	bl	8000564 <__aeabi_i2d>
 800b304:	4622      	mov	r2, r4
 800b306:	462b      	mov	r3, r5
 800b308:	f7f5 f996 	bl	8000638 <__aeabi_dmul>
 800b30c:	4652      	mov	r2, sl
 800b30e:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800b312:	465b      	mov	r3, fp
 800b314:	4620      	mov	r0, r4
 800b316:	4629      	mov	r1, r5
 800b318:	f7f5 f98e 	bl	8000638 <__aeabi_dmul>
 800b31c:	3e01      	subs	r6, #1
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	e718      	b.n	800b156 <__kernel_rem_pio2+0x2ce>
 800b324:	9906      	ldr	r1, [sp, #24]
 800b326:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800b32a:	9106      	str	r1, [sp, #24]
 800b32c:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800b330:	f7f5 f982 	bl	8000638 <__aeabi_dmul>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4650      	mov	r0, sl
 800b33a:	4659      	mov	r1, fp
 800b33c:	f7f4 ffc6 	bl	80002cc <__adddf3>
 800b340:	3601      	adds	r6, #1
 800b342:	4682      	mov	sl, r0
 800b344:	468b      	mov	fp, r1
 800b346:	9b00      	ldr	r3, [sp, #0]
 800b348:	429e      	cmp	r6, r3
 800b34a:	dc01      	bgt.n	800b350 <__kernel_rem_pio2+0x4c8>
 800b34c:	42b5      	cmp	r5, r6
 800b34e:	dae9      	bge.n	800b324 <__kernel_rem_pio2+0x49c>
 800b350:	ab48      	add	r3, sp, #288	@ 0x120
 800b352:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b356:	e9c5 ab00 	strd	sl, fp, [r5]
 800b35a:	3c01      	subs	r4, #1
 800b35c:	e6ff      	b.n	800b15e <__kernel_rem_pio2+0x2d6>
 800b35e:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b360:	2b02      	cmp	r3, #2
 800b362:	dc0b      	bgt.n	800b37c <__kernel_rem_pio2+0x4f4>
 800b364:	2b00      	cmp	r3, #0
 800b366:	dc39      	bgt.n	800b3dc <__kernel_rem_pio2+0x554>
 800b368:	d05d      	beq.n	800b426 <__kernel_rem_pio2+0x59e>
 800b36a:	9b02      	ldr	r3, [sp, #8]
 800b36c:	f003 0007 	and.w	r0, r3, #7
 800b370:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800b374:	ecbd 8b02 	vpop	{d8}
 800b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800b37e:	2b03      	cmp	r3, #3
 800b380:	d1f3      	bne.n	800b36a <__kernel_rem_pio2+0x4e2>
 800b382:	9b05      	ldr	r3, [sp, #20]
 800b384:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b388:	eb0d 0403 	add.w	r4, sp, r3
 800b38c:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800b390:	4625      	mov	r5, r4
 800b392:	46c2      	mov	sl, r8
 800b394:	f1ba 0f00 	cmp.w	sl, #0
 800b398:	f1a5 0508 	sub.w	r5, r5, #8
 800b39c:	dc6b      	bgt.n	800b476 <__kernel_rem_pio2+0x5ee>
 800b39e:	4645      	mov	r5, r8
 800b3a0:	2d01      	cmp	r5, #1
 800b3a2:	f1a4 0408 	sub.w	r4, r4, #8
 800b3a6:	f300 8087 	bgt.w	800b4b8 <__kernel_rem_pio2+0x630>
 800b3aa:	9c05      	ldr	r4, [sp, #20]
 800b3ac:	ab48      	add	r3, sp, #288	@ 0x120
 800b3ae:	441c      	add	r4, r3
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	2100      	movs	r1, #0
 800b3b4:	f1b8 0f01 	cmp.w	r8, #1
 800b3b8:	f300 809c 	bgt.w	800b4f4 <__kernel_rem_pio2+0x66c>
 800b3bc:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800b3c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800b3c4:	f1b9 0f00 	cmp.w	r9, #0
 800b3c8:	f040 80a6 	bne.w	800b518 <__kernel_rem_pio2+0x690>
 800b3cc:	9b04      	ldr	r3, [sp, #16]
 800b3ce:	e9c3 7800 	strd	r7, r8, [r3]
 800b3d2:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b3d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b3da:	e7c6      	b.n	800b36a <__kernel_rem_pio2+0x4e2>
 800b3dc:	9d05      	ldr	r5, [sp, #20]
 800b3de:	ab48      	add	r3, sp, #288	@ 0x120
 800b3e0:	441d      	add	r5, r3
 800b3e2:	4644      	mov	r4, r8
 800b3e4:	2000      	movs	r0, #0
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	2c00      	cmp	r4, #0
 800b3ea:	da35      	bge.n	800b458 <__kernel_rem_pio2+0x5d0>
 800b3ec:	f1b9 0f00 	cmp.w	r9, #0
 800b3f0:	d038      	beq.n	800b464 <__kernel_rem_pio2+0x5dc>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3f8:	9c04      	ldr	r4, [sp, #16]
 800b3fa:	e9c4 2300 	strd	r2, r3, [r4]
 800b3fe:	4602      	mov	r2, r0
 800b400:	460b      	mov	r3, r1
 800b402:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800b406:	f7f4 ff5f 	bl	80002c8 <__aeabi_dsub>
 800b40a:	ad4a      	add	r5, sp, #296	@ 0x128
 800b40c:	2401      	movs	r4, #1
 800b40e:	45a0      	cmp	r8, r4
 800b410:	da2b      	bge.n	800b46a <__kernel_rem_pio2+0x5e2>
 800b412:	f1b9 0f00 	cmp.w	r9, #0
 800b416:	d002      	beq.n	800b41e <__kernel_rem_pio2+0x596>
 800b418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b41c:	4619      	mov	r1, r3
 800b41e:	9b04      	ldr	r3, [sp, #16]
 800b420:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b424:	e7a1      	b.n	800b36a <__kernel_rem_pio2+0x4e2>
 800b426:	9c05      	ldr	r4, [sp, #20]
 800b428:	ab48      	add	r3, sp, #288	@ 0x120
 800b42a:	441c      	add	r4, r3
 800b42c:	2000      	movs	r0, #0
 800b42e:	2100      	movs	r1, #0
 800b430:	f1b8 0f00 	cmp.w	r8, #0
 800b434:	da09      	bge.n	800b44a <__kernel_rem_pio2+0x5c2>
 800b436:	f1b9 0f00 	cmp.w	r9, #0
 800b43a:	d002      	beq.n	800b442 <__kernel_rem_pio2+0x5ba>
 800b43c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b440:	4619      	mov	r1, r3
 800b442:	9b04      	ldr	r3, [sp, #16]
 800b444:	e9c3 0100 	strd	r0, r1, [r3]
 800b448:	e78f      	b.n	800b36a <__kernel_rem_pio2+0x4e2>
 800b44a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b44e:	f7f4 ff3d 	bl	80002cc <__adddf3>
 800b452:	f108 38ff 	add.w	r8, r8, #4294967295
 800b456:	e7eb      	b.n	800b430 <__kernel_rem_pio2+0x5a8>
 800b458:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800b45c:	f7f4 ff36 	bl	80002cc <__adddf3>
 800b460:	3c01      	subs	r4, #1
 800b462:	e7c1      	b.n	800b3e8 <__kernel_rem_pio2+0x560>
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	e7c6      	b.n	800b3f8 <__kernel_rem_pio2+0x570>
 800b46a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b46e:	f7f4 ff2d 	bl	80002cc <__adddf3>
 800b472:	3401      	adds	r4, #1
 800b474:	e7cb      	b.n	800b40e <__kernel_rem_pio2+0x586>
 800b476:	ed95 7b00 	vldr	d7, [r5]
 800b47a:	ed8d 7b00 	vstr	d7, [sp]
 800b47e:	ed95 7b02 	vldr	d7, [r5, #8]
 800b482:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b486:	ec53 2b17 	vmov	r2, r3, d7
 800b48a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b48e:	f7f4 ff1d 	bl	80002cc <__adddf3>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	4606      	mov	r6, r0
 800b498:	460f      	mov	r7, r1
 800b49a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b49e:	f7f4 ff13 	bl	80002c8 <__aeabi_dsub>
 800b4a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b4a6:	f7f4 ff11 	bl	80002cc <__adddf3>
 800b4aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b4ae:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800b4b2:	e9c5 6700 	strd	r6, r7, [r5]
 800b4b6:	e76d      	b.n	800b394 <__kernel_rem_pio2+0x50c>
 800b4b8:	ed94 7b00 	vldr	d7, [r4]
 800b4bc:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800b4c0:	ec51 0b17 	vmov	r0, r1, d7
 800b4c4:	4652      	mov	r2, sl
 800b4c6:	465b      	mov	r3, fp
 800b4c8:	ed8d 7b00 	vstr	d7, [sp]
 800b4cc:	f7f4 fefe 	bl	80002cc <__adddf3>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	460f      	mov	r7, r1
 800b4d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4dc:	f7f4 fef4 	bl	80002c8 <__aeabi_dsub>
 800b4e0:	4652      	mov	r2, sl
 800b4e2:	465b      	mov	r3, fp
 800b4e4:	f7f4 fef2 	bl	80002cc <__adddf3>
 800b4e8:	3d01      	subs	r5, #1
 800b4ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b4ee:	e9c4 6700 	strd	r6, r7, [r4]
 800b4f2:	e755      	b.n	800b3a0 <__kernel_rem_pio2+0x518>
 800b4f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b4f8:	f7f4 fee8 	bl	80002cc <__adddf3>
 800b4fc:	f108 38ff 	add.w	r8, r8, #4294967295
 800b500:	e758      	b.n	800b3b4 <__kernel_rem_pio2+0x52c>
 800b502:	bf00      	nop
 800b504:	f3af 8000 	nop.w
	...
 800b510:	41700000 	.word	0x41700000
 800b514:	3e700000 	.word	0x3e700000
 800b518:	9b04      	ldr	r3, [sp, #16]
 800b51a:	9a04      	ldr	r2, [sp, #16]
 800b51c:	601f      	str	r7, [r3, #0]
 800b51e:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800b522:	605c      	str	r4, [r3, #4]
 800b524:	609d      	str	r5, [r3, #8]
 800b526:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b52a:	60d3      	str	r3, [r2, #12]
 800b52c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b530:	6110      	str	r0, [r2, #16]
 800b532:	6153      	str	r3, [r2, #20]
 800b534:	e719      	b.n	800b36a <__kernel_rem_pio2+0x4e2>
 800b536:	bf00      	nop

0800b538 <scalbn>:
 800b538:	b570      	push	{r4, r5, r6, lr}
 800b53a:	ec55 4b10 	vmov	r4, r5, d0
 800b53e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b542:	4606      	mov	r6, r0
 800b544:	462b      	mov	r3, r5
 800b546:	b991      	cbnz	r1, 800b56e <scalbn+0x36>
 800b548:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b54c:	4323      	orrs	r3, r4
 800b54e:	d03d      	beq.n	800b5cc <scalbn+0x94>
 800b550:	4b35      	ldr	r3, [pc, #212]	@ (800b628 <scalbn+0xf0>)
 800b552:	4620      	mov	r0, r4
 800b554:	4629      	mov	r1, r5
 800b556:	2200      	movs	r2, #0
 800b558:	f7f5 f86e 	bl	8000638 <__aeabi_dmul>
 800b55c:	4b33      	ldr	r3, [pc, #204]	@ (800b62c <scalbn+0xf4>)
 800b55e:	429e      	cmp	r6, r3
 800b560:	4604      	mov	r4, r0
 800b562:	460d      	mov	r5, r1
 800b564:	da0f      	bge.n	800b586 <scalbn+0x4e>
 800b566:	a328      	add	r3, pc, #160	@ (adr r3, 800b608 <scalbn+0xd0>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	e01e      	b.n	800b5ac <scalbn+0x74>
 800b56e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b572:	4291      	cmp	r1, r2
 800b574:	d10b      	bne.n	800b58e <scalbn+0x56>
 800b576:	4622      	mov	r2, r4
 800b578:	4620      	mov	r0, r4
 800b57a:	4629      	mov	r1, r5
 800b57c:	f7f4 fea6 	bl	80002cc <__adddf3>
 800b580:	4604      	mov	r4, r0
 800b582:	460d      	mov	r5, r1
 800b584:	e022      	b.n	800b5cc <scalbn+0x94>
 800b586:	460b      	mov	r3, r1
 800b588:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b58c:	3936      	subs	r1, #54	@ 0x36
 800b58e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b592:	4296      	cmp	r6, r2
 800b594:	dd0d      	ble.n	800b5b2 <scalbn+0x7a>
 800b596:	2d00      	cmp	r5, #0
 800b598:	a11d      	add	r1, pc, #116	@ (adr r1, 800b610 <scalbn+0xd8>)
 800b59a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b59e:	da02      	bge.n	800b5a6 <scalbn+0x6e>
 800b5a0:	a11d      	add	r1, pc, #116	@ (adr r1, 800b618 <scalbn+0xe0>)
 800b5a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a6:	a31a      	add	r3, pc, #104	@ (adr r3, 800b610 <scalbn+0xd8>)
 800b5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ac:	f7f5 f844 	bl	8000638 <__aeabi_dmul>
 800b5b0:	e7e6      	b.n	800b580 <scalbn+0x48>
 800b5b2:	1872      	adds	r2, r6, r1
 800b5b4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b5b8:	428a      	cmp	r2, r1
 800b5ba:	dcec      	bgt.n	800b596 <scalbn+0x5e>
 800b5bc:	2a00      	cmp	r2, #0
 800b5be:	dd08      	ble.n	800b5d2 <scalbn+0x9a>
 800b5c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b5c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b5c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5cc:	ec45 4b10 	vmov	d0, r4, r5
 800b5d0:	bd70      	pop	{r4, r5, r6, pc}
 800b5d2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b5d6:	da08      	bge.n	800b5ea <scalbn+0xb2>
 800b5d8:	2d00      	cmp	r5, #0
 800b5da:	a10b      	add	r1, pc, #44	@ (adr r1, 800b608 <scalbn+0xd0>)
 800b5dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e0:	dac1      	bge.n	800b566 <scalbn+0x2e>
 800b5e2:	a10f      	add	r1, pc, #60	@ (adr r1, 800b620 <scalbn+0xe8>)
 800b5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5e8:	e7bd      	b.n	800b566 <scalbn+0x2e>
 800b5ea:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b5ee:	3236      	adds	r2, #54	@ 0x36
 800b5f0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b5f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5f8:	4620      	mov	r0, r4
 800b5fa:	4b0d      	ldr	r3, [pc, #52]	@ (800b630 <scalbn+0xf8>)
 800b5fc:	4629      	mov	r1, r5
 800b5fe:	2200      	movs	r2, #0
 800b600:	e7d4      	b.n	800b5ac <scalbn+0x74>
 800b602:	bf00      	nop
 800b604:	f3af 8000 	nop.w
 800b608:	c2f8f359 	.word	0xc2f8f359
 800b60c:	01a56e1f 	.word	0x01a56e1f
 800b610:	8800759c 	.word	0x8800759c
 800b614:	7e37e43c 	.word	0x7e37e43c
 800b618:	8800759c 	.word	0x8800759c
 800b61c:	fe37e43c 	.word	0xfe37e43c
 800b620:	c2f8f359 	.word	0xc2f8f359
 800b624:	81a56e1f 	.word	0x81a56e1f
 800b628:	43500000 	.word	0x43500000
 800b62c:	ffff3cb0 	.word	0xffff3cb0
 800b630:	3c900000 	.word	0x3c900000
 800b634:	00000000 	.word	0x00000000

0800b638 <floor>:
 800b638:	ec51 0b10 	vmov	r0, r1, d0
 800b63c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b644:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800b648:	2e13      	cmp	r6, #19
 800b64a:	460c      	mov	r4, r1
 800b64c:	4605      	mov	r5, r0
 800b64e:	4680      	mov	r8, r0
 800b650:	dc34      	bgt.n	800b6bc <floor+0x84>
 800b652:	2e00      	cmp	r6, #0
 800b654:	da17      	bge.n	800b686 <floor+0x4e>
 800b656:	a332      	add	r3, pc, #200	@ (adr r3, 800b720 <floor+0xe8>)
 800b658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65c:	f7f4 fe36 	bl	80002cc <__adddf3>
 800b660:	2200      	movs	r2, #0
 800b662:	2300      	movs	r3, #0
 800b664:	f7f5 fa78 	bl	8000b58 <__aeabi_dcmpgt>
 800b668:	b150      	cbz	r0, 800b680 <floor+0x48>
 800b66a:	2c00      	cmp	r4, #0
 800b66c:	da55      	bge.n	800b71a <floor+0xe2>
 800b66e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800b672:	432c      	orrs	r4, r5
 800b674:	2500      	movs	r5, #0
 800b676:	42ac      	cmp	r4, r5
 800b678:	4c2b      	ldr	r4, [pc, #172]	@ (800b728 <floor+0xf0>)
 800b67a:	bf08      	it	eq
 800b67c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800b680:	4621      	mov	r1, r4
 800b682:	4628      	mov	r0, r5
 800b684:	e023      	b.n	800b6ce <floor+0x96>
 800b686:	4f29      	ldr	r7, [pc, #164]	@ (800b72c <floor+0xf4>)
 800b688:	4137      	asrs	r7, r6
 800b68a:	ea01 0307 	and.w	r3, r1, r7
 800b68e:	4303      	orrs	r3, r0
 800b690:	d01d      	beq.n	800b6ce <floor+0x96>
 800b692:	a323      	add	r3, pc, #140	@ (adr r3, 800b720 <floor+0xe8>)
 800b694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b698:	f7f4 fe18 	bl	80002cc <__adddf3>
 800b69c:	2200      	movs	r2, #0
 800b69e:	2300      	movs	r3, #0
 800b6a0:	f7f5 fa5a 	bl	8000b58 <__aeabi_dcmpgt>
 800b6a4:	2800      	cmp	r0, #0
 800b6a6:	d0eb      	beq.n	800b680 <floor+0x48>
 800b6a8:	2c00      	cmp	r4, #0
 800b6aa:	bfbe      	ittt	lt
 800b6ac:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800b6b0:	4133      	asrlt	r3, r6
 800b6b2:	18e4      	addlt	r4, r4, r3
 800b6b4:	ea24 0407 	bic.w	r4, r4, r7
 800b6b8:	2500      	movs	r5, #0
 800b6ba:	e7e1      	b.n	800b680 <floor+0x48>
 800b6bc:	2e33      	cmp	r6, #51	@ 0x33
 800b6be:	dd0a      	ble.n	800b6d6 <floor+0x9e>
 800b6c0:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800b6c4:	d103      	bne.n	800b6ce <floor+0x96>
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	f7f4 fdff 	bl	80002cc <__adddf3>
 800b6ce:	ec41 0b10 	vmov	d0, r0, r1
 800b6d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6d6:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800b6da:	f04f 37ff 	mov.w	r7, #4294967295
 800b6de:	40df      	lsrs	r7, r3
 800b6e0:	4207      	tst	r7, r0
 800b6e2:	d0f4      	beq.n	800b6ce <floor+0x96>
 800b6e4:	a30e      	add	r3, pc, #56	@ (adr r3, 800b720 <floor+0xe8>)
 800b6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ea:	f7f4 fdef 	bl	80002cc <__adddf3>
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	f7f5 fa31 	bl	8000b58 <__aeabi_dcmpgt>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d0c2      	beq.n	800b680 <floor+0x48>
 800b6fa:	2c00      	cmp	r4, #0
 800b6fc:	da0a      	bge.n	800b714 <floor+0xdc>
 800b6fe:	2e14      	cmp	r6, #20
 800b700:	d101      	bne.n	800b706 <floor+0xce>
 800b702:	3401      	adds	r4, #1
 800b704:	e006      	b.n	800b714 <floor+0xdc>
 800b706:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800b70a:	2301      	movs	r3, #1
 800b70c:	40b3      	lsls	r3, r6
 800b70e:	441d      	add	r5, r3
 800b710:	4545      	cmp	r5, r8
 800b712:	d3f6      	bcc.n	800b702 <floor+0xca>
 800b714:	ea25 0507 	bic.w	r5, r5, r7
 800b718:	e7b2      	b.n	800b680 <floor+0x48>
 800b71a:	2500      	movs	r5, #0
 800b71c:	462c      	mov	r4, r5
 800b71e:	e7af      	b.n	800b680 <floor+0x48>
 800b720:	8800759c 	.word	0x8800759c
 800b724:	7e37e43c 	.word	0x7e37e43c
 800b728:	bff00000 	.word	0xbff00000
 800b72c:	000fffff 	.word	0x000fffff

0800b730 <_init>:
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	bf00      	nop
 800b734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b736:	bc08      	pop	{r3}
 800b738:	469e      	mov	lr, r3
 800b73a:	4770      	bx	lr

0800b73c <_fini>:
 800b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73e:	bf00      	nop
 800b740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b742:	bc08      	pop	{r3}
 800b744:	469e      	mov	lr, r3
 800b746:	4770      	bx	lr
