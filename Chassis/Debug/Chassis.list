
Chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bd0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003da0  08003da0  00004da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e24  08003e24  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003e24  08003e24  00004e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e2c  08003e2c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e2c  08003e2c  00004e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003e30  08003e30  00004e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003e34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000068  08003e9c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000348  08003e9c  00005348  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cdca  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cbf  00000000  00000000  00011e62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  00013b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a00  00000000  00000000  000147f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022e23  00000000  00000000  000151f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4bb  00000000  00000000  00038013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d38af  00000000  00000000  000474ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011ad7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d40  00000000  00000000  0011adc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0011eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d88 	.word	0x08003d88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003d88 	.word	0x08003d88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005a2:	b08b      	sub	sp, #44	@ 0x2c
 80005a4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a6:	f000 fdeb 	bl	8001180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005aa:	f000 f993 	bl	80008d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ae:	f000 fb25 	bl	8000bfc <MX_GPIO_Init>
  MX_TIM2_Init();
 80005b2:	f000 f9fd 	bl	80009b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005b6:	f000 fa4f 	bl	8000a58 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005ba:	f000 faa1 	bl	8000b00 <MX_TIM4_Init>
  MX_UART4_Init();
 80005be:	f000 faf3 	bl	8000ba8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive(&huart4, rxbuff, 64,1000);
 80005c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005c6:	2240      	movs	r2, #64	@ 0x40
 80005c8:	4986      	ldr	r1, [pc, #536]	@ (80007e4 <main+0x244>)
 80005ca:	4887      	ldr	r0, [pc, #540]	@ (80007e8 <main+0x248>)
 80005cc:	f002 f8e4 	bl	8002798 <HAL_UART_Receive>
    {
      /* USER CODE END WHILE */

      /* USER CODE BEGIN 3 */
  	  HAL_StatusTypeDef status;
  	  status=HAL_UART_Receive(&huart4, rxbuff,64,1000);
 80005d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005d4:	2240      	movs	r2, #64	@ 0x40
 80005d6:	4983      	ldr	r1, [pc, #524]	@ (80007e4 <main+0x244>)
 80005d8:	4883      	ldr	r0, [pc, #524]	@ (80007e8 <main+0x248>)
 80005da:	f002 f8dd 	bl	8002798 <HAL_UART_Receive>
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]
  	  if (status == HAL_OK)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	f040 8123 	bne.w	8000830 <main+0x290>
  	  {
  		  	  	  	  // Convert the received bytes to signed integers
  	  	  	 	 	   lx = (rxbuff[1] & 0x80) ? (int32_t)rxbuff[1] - 256 : (int32_t)rxbuff[1];
 80005ea:	4b7e      	ldr	r3, [pc, #504]	@ (80007e4 <main+0x244>)
 80005ec:	785b      	ldrb	r3, [r3, #1]
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	da04      	bge.n	80005fe <main+0x5e>
 80005f4:	4b7b      	ldr	r3, [pc, #492]	@ (80007e4 <main+0x244>)
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80005fc:	e001      	b.n	8000602 <main+0x62>
 80005fe:	4b79      	ldr	r3, [pc, #484]	@ (80007e4 <main+0x244>)
 8000600:	785b      	ldrb	r3, [r3, #1]
 8000602:	4a7a      	ldr	r2, [pc, #488]	@ (80007ec <main+0x24c>)
 8000604:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   ly = (rxbuff[2] & 0x80) ? (int32_t)rxbuff[2] - 256 : (int32_t)rxbuff[2];
 8000606:	4b77      	ldr	r3, [pc, #476]	@ (80007e4 <main+0x244>)
 8000608:	789b      	ldrb	r3, [r3, #2]
 800060a:	b25b      	sxtb	r3, r3
 800060c:	2b00      	cmp	r3, #0
 800060e:	da04      	bge.n	800061a <main+0x7a>
 8000610:	4b74      	ldr	r3, [pc, #464]	@ (80007e4 <main+0x244>)
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000618:	e001      	b.n	800061e <main+0x7e>
 800061a:	4b72      	ldr	r3, [pc, #456]	@ (80007e4 <main+0x244>)
 800061c:	789b      	ldrb	r3, [r3, #2]
 800061e:	4a74      	ldr	r2, [pc, #464]	@ (80007f0 <main+0x250>)
 8000620:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   rx = (rxbuff[3] & 0x80) ? (int32_t)rxbuff[3] - 256 : (int32_t)rxbuff[3];
 8000622:	4b70      	ldr	r3, [pc, #448]	@ (80007e4 <main+0x244>)
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	b25b      	sxtb	r3, r3
 8000628:	2b00      	cmp	r3, #0
 800062a:	da04      	bge.n	8000636 <main+0x96>
 800062c:	4b6d      	ldr	r3, [pc, #436]	@ (80007e4 <main+0x244>)
 800062e:	78db      	ldrb	r3, [r3, #3]
 8000630:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000634:	e001      	b.n	800063a <main+0x9a>
 8000636:	4b6b      	ldr	r3, [pc, #428]	@ (80007e4 <main+0x244>)
 8000638:	78db      	ldrb	r3, [r3, #3]
 800063a:	4a6e      	ldr	r2, [pc, #440]	@ (80007f4 <main+0x254>)
 800063c:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   ry = (rxbuff[4] & 0x80) ? (int32_t)rxbuff[4] - 256 : (int32_t)rxbuff[4];
 800063e:	4b69      	ldr	r3, [pc, #420]	@ (80007e4 <main+0x244>)
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	b25b      	sxtb	r3, r3
 8000644:	2b00      	cmp	r3, #0
 8000646:	da04      	bge.n	8000652 <main+0xb2>
 8000648:	4b66      	ldr	r3, [pc, #408]	@ (80007e4 <main+0x244>)
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000650:	e001      	b.n	8000656 <main+0xb6>
 8000652:	4b64      	ldr	r3, [pc, #400]	@ (80007e4 <main+0x244>)
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	4a68      	ldr	r2, [pc, #416]	@ (80007f8 <main+0x258>)
 8000658:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   cro= (rxbuff[5] & 0x80) ? (int32_t)rxbuff[5] - 256 : (int32_t)rxbuff[5];
 800065a:	4b62      	ldr	r3, [pc, #392]	@ (80007e4 <main+0x244>)
 800065c:	795b      	ldrb	r3, [r3, #5]
 800065e:	b25b      	sxtb	r3, r3
 8000660:	2b00      	cmp	r3, #0
 8000662:	da04      	bge.n	800066e <main+0xce>
 8000664:	4b5f      	ldr	r3, [pc, #380]	@ (80007e4 <main+0x244>)
 8000666:	795b      	ldrb	r3, [r3, #5]
 8000668:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800066c:	e001      	b.n	8000672 <main+0xd2>
 800066e:	4b5d      	ldr	r3, [pc, #372]	@ (80007e4 <main+0x244>)
 8000670:	795b      	ldrb	r3, [r3, #5]
 8000672:	4a62      	ldr	r2, [pc, #392]	@ (80007fc <main+0x25c>)
 8000674:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   squ= (rxbuff[6] & 0x80) ? (int32_t)rxbuff[6] - 256 : (int32_t)rxbuff[6];
 8000676:	4b5b      	ldr	r3, [pc, #364]	@ (80007e4 <main+0x244>)
 8000678:	799b      	ldrb	r3, [r3, #6]
 800067a:	b25b      	sxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	da04      	bge.n	800068a <main+0xea>
 8000680:	4b58      	ldr	r3, [pc, #352]	@ (80007e4 <main+0x244>)
 8000682:	799b      	ldrb	r3, [r3, #6]
 8000684:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000688:	e001      	b.n	800068e <main+0xee>
 800068a:	4b56      	ldr	r3, [pc, #344]	@ (80007e4 <main+0x244>)
 800068c:	799b      	ldrb	r3, [r3, #6]
 800068e:	4a5c      	ldr	r2, [pc, #368]	@ (8000800 <main+0x260>)
 8000690:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   tri= (rxbuff[7] & 0x80) ? (int32_t)rxbuff[7] - 256 : (int32_t)rxbuff[7];
 8000692:	4b54      	ldr	r3, [pc, #336]	@ (80007e4 <main+0x244>)
 8000694:	79db      	ldrb	r3, [r3, #7]
 8000696:	b25b      	sxtb	r3, r3
 8000698:	2b00      	cmp	r3, #0
 800069a:	da04      	bge.n	80006a6 <main+0x106>
 800069c:	4b51      	ldr	r3, [pc, #324]	@ (80007e4 <main+0x244>)
 800069e:	79db      	ldrb	r3, [r3, #7]
 80006a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006a4:	e001      	b.n	80006aa <main+0x10a>
 80006a6:	4b4f      	ldr	r3, [pc, #316]	@ (80007e4 <main+0x244>)
 80006a8:	79db      	ldrb	r3, [r3, #7]
 80006aa:	4a56      	ldr	r2, [pc, #344]	@ (8000804 <main+0x264>)
 80006ac:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   cir= (rxbuff[8] & 0x80) ? (int32_t)rxbuff[8] - 256 : (int32_t)rxbuff[8];
 80006ae:	4b4d      	ldr	r3, [pc, #308]	@ (80007e4 <main+0x244>)
 80006b0:	7a1b      	ldrb	r3, [r3, #8]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	da04      	bge.n	80006c2 <main+0x122>
 80006b8:	4b4a      	ldr	r3, [pc, #296]	@ (80007e4 <main+0x244>)
 80006ba:	7a1b      	ldrb	r3, [r3, #8]
 80006bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006c0:	e001      	b.n	80006c6 <main+0x126>
 80006c2:	4b48      	ldr	r3, [pc, #288]	@ (80007e4 <main+0x244>)
 80006c4:	7a1b      	ldrb	r3, [r3, #8]
 80006c6:	4a50      	ldr	r2, [pc, #320]	@ (8000808 <main+0x268>)
 80006c8:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   up= (rxbuff[9] & 0x80) ? (int32_t)rxbuff[9] - 256 : (int32_t)rxbuff[9];
 80006ca:	4b46      	ldr	r3, [pc, #280]	@ (80007e4 <main+0x244>)
 80006cc:	7a5b      	ldrb	r3, [r3, #9]
 80006ce:	b25b      	sxtb	r3, r3
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	da04      	bge.n	80006de <main+0x13e>
 80006d4:	4b43      	ldr	r3, [pc, #268]	@ (80007e4 <main+0x244>)
 80006d6:	7a5b      	ldrb	r3, [r3, #9]
 80006d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006dc:	e001      	b.n	80006e2 <main+0x142>
 80006de:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <main+0x244>)
 80006e0:	7a5b      	ldrb	r3, [r3, #9]
 80006e2:	4a4a      	ldr	r2, [pc, #296]	@ (800080c <main+0x26c>)
 80006e4:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   down= (rxbuff[10] & 0x80) ? (int32_t)rxbuff[10] - 256 : (int32_t)rxbuff[10];
 80006e6:	4b3f      	ldr	r3, [pc, #252]	@ (80007e4 <main+0x244>)
 80006e8:	7a9b      	ldrb	r3, [r3, #10]
 80006ea:	b25b      	sxtb	r3, r3
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	da04      	bge.n	80006fa <main+0x15a>
 80006f0:	4b3c      	ldr	r3, [pc, #240]	@ (80007e4 <main+0x244>)
 80006f2:	7a9b      	ldrb	r3, [r3, #10]
 80006f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80006f8:	e001      	b.n	80006fe <main+0x15e>
 80006fa:	4b3a      	ldr	r3, [pc, #232]	@ (80007e4 <main+0x244>)
 80006fc:	7a9b      	ldrb	r3, [r3, #10]
 80006fe:	4a44      	ldr	r2, [pc, #272]	@ (8000810 <main+0x270>)
 8000700:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   left= (rxbuff[11] & 0x80) ? (int32_t)rxbuff[11] - 256 : (int32_t)rxbuff[11];
 8000702:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <main+0x244>)
 8000704:	7adb      	ldrb	r3, [r3, #11]
 8000706:	b25b      	sxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	da04      	bge.n	8000716 <main+0x176>
 800070c:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <main+0x244>)
 800070e:	7adb      	ldrb	r3, [r3, #11]
 8000710:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000714:	e001      	b.n	800071a <main+0x17a>
 8000716:	4b33      	ldr	r3, [pc, #204]	@ (80007e4 <main+0x244>)
 8000718:	7adb      	ldrb	r3, [r3, #11]
 800071a:	4a3e      	ldr	r2, [pc, #248]	@ (8000814 <main+0x274>)
 800071c:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   right=(rxbuff[12] & 0x80) ? (int32_t)rxbuff[12] - 256 : (int32_t)rxbuff[12];
 800071e:	4b31      	ldr	r3, [pc, #196]	@ (80007e4 <main+0x244>)
 8000720:	7b1b      	ldrb	r3, [r3, #12]
 8000722:	b25b      	sxtb	r3, r3
 8000724:	2b00      	cmp	r3, #0
 8000726:	da04      	bge.n	8000732 <main+0x192>
 8000728:	4b2e      	ldr	r3, [pc, #184]	@ (80007e4 <main+0x244>)
 800072a:	7b1b      	ldrb	r3, [r3, #12]
 800072c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000730:	e001      	b.n	8000736 <main+0x196>
 8000732:	4b2c      	ldr	r3, [pc, #176]	@ (80007e4 <main+0x244>)
 8000734:	7b1b      	ldrb	r3, [r3, #12]
 8000736:	4a38      	ldr	r2, [pc, #224]	@ (8000818 <main+0x278>)
 8000738:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   ll1= (rxbuff[13] & 0x80) ? (int32_t)rxbuff[13] - 256 : (int32_t)rxbuff[13];
 800073a:	4b2a      	ldr	r3, [pc, #168]	@ (80007e4 <main+0x244>)
 800073c:	7b5b      	ldrb	r3, [r3, #13]
 800073e:	b25b      	sxtb	r3, r3
 8000740:	2b00      	cmp	r3, #0
 8000742:	da04      	bge.n	800074e <main+0x1ae>
 8000744:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <main+0x244>)
 8000746:	7b5b      	ldrb	r3, [r3, #13]
 8000748:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800074c:	e001      	b.n	8000752 <main+0x1b2>
 800074e:	4b25      	ldr	r3, [pc, #148]	@ (80007e4 <main+0x244>)
 8000750:	7b5b      	ldrb	r3, [r3, #13]
 8000752:	4a32      	ldr	r2, [pc, #200]	@ (800081c <main+0x27c>)
 8000754:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   ll2= (rxbuff[14] & 0x80) ? (int32_t)rxbuff[14] - 256 : (int32_t)rxbuff[14];
 8000756:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <main+0x244>)
 8000758:	7b9b      	ldrb	r3, [r3, #14]
 800075a:	b25b      	sxtb	r3, r3
 800075c:	2b00      	cmp	r3, #0
 800075e:	da04      	bge.n	800076a <main+0x1ca>
 8000760:	4b20      	ldr	r3, [pc, #128]	@ (80007e4 <main+0x244>)
 8000762:	7b9b      	ldrb	r3, [r3, #14]
 8000764:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000768:	e001      	b.n	800076e <main+0x1ce>
 800076a:	4b1e      	ldr	r3, [pc, #120]	@ (80007e4 <main+0x244>)
 800076c:	7b9b      	ldrb	r3, [r3, #14]
 800076e:	4a2c      	ldr	r2, [pc, #176]	@ (8000820 <main+0x280>)
 8000770:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   rr1= (rxbuff[15] & 0x80) ? (int32_t)rxbuff[15] - 256 : (int32_t)rxbuff[15];
 8000772:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <main+0x244>)
 8000774:	7bdb      	ldrb	r3, [r3, #15]
 8000776:	b25b      	sxtb	r3, r3
 8000778:	2b00      	cmp	r3, #0
 800077a:	da04      	bge.n	8000786 <main+0x1e6>
 800077c:	4b19      	ldr	r3, [pc, #100]	@ (80007e4 <main+0x244>)
 800077e:	7bdb      	ldrb	r3, [r3, #15]
 8000780:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000784:	e001      	b.n	800078a <main+0x1ea>
 8000786:	4b17      	ldr	r3, [pc, #92]	@ (80007e4 <main+0x244>)
 8000788:	7bdb      	ldrb	r3, [r3, #15]
 800078a:	4a26      	ldr	r2, [pc, #152]	@ (8000824 <main+0x284>)
 800078c:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   rr2= (rxbuff[16] & 0x80) ? (int32_t)rxbuff[16] - 256 : (int32_t)rxbuff[16];
 800078e:	4b15      	ldr	r3, [pc, #84]	@ (80007e4 <main+0x244>)
 8000790:	7c1b      	ldrb	r3, [r3, #16]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	2b00      	cmp	r3, #0
 8000796:	da04      	bge.n	80007a2 <main+0x202>
 8000798:	4b12      	ldr	r3, [pc, #72]	@ (80007e4 <main+0x244>)
 800079a:	7c1b      	ldrb	r3, [r3, #16]
 800079c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80007a0:	e001      	b.n	80007a6 <main+0x206>
 80007a2:	4b10      	ldr	r3, [pc, #64]	@ (80007e4 <main+0x244>)
 80007a4:	7c1b      	ldrb	r3, [r3, #16]
 80007a6:	4a20      	ldr	r2, [pc, #128]	@ (8000828 <main+0x288>)
 80007a8:	6013      	str	r3, [r2, #0]
  	  	  	 	 	   // Print the received values
  	  	  	 	 	printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly, rx, ry, cro, squ, tri, cir);
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <main+0x24c>)
 80007ac:	681d      	ldr	r5, [r3, #0]
 80007ae:	4b10      	ldr	r3, [pc, #64]	@ (80007f0 <main+0x250>)
 80007b0:	681e      	ldr	r6, [r3, #0]
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <main+0x254>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <main+0x258>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a0f      	ldr	r2, [pc, #60]	@ (80007fc <main+0x25c>)
 80007be:	6812      	ldr	r2, [r2, #0]
 80007c0:	490f      	ldr	r1, [pc, #60]	@ (8000800 <main+0x260>)
 80007c2:	6809      	ldr	r1, [r1, #0]
 80007c4:	480f      	ldr	r0, [pc, #60]	@ (8000804 <main+0x264>)
 80007c6:	6800      	ldr	r0, [r0, #0]
 80007c8:	4c0f      	ldr	r4, [pc, #60]	@ (8000808 <main+0x268>)
 80007ca:	6824      	ldr	r4, [r4, #0]
 80007cc:	9404      	str	r4, [sp, #16]
 80007ce:	9003      	str	r0, [sp, #12]
 80007d0:	9102      	str	r1, [sp, #8]
 80007d2:	9201      	str	r2, [sp, #4]
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	4632      	mov	r2, r6
 80007da:	4629      	mov	r1, r5
 80007dc:	4813      	ldr	r0, [pc, #76]	@ (800082c <main+0x28c>)
 80007de:	f002 fc65 	bl	80030ac <iprintf>
 80007e2:	e6f5      	b.n	80005d0 <main+0x30>
 80007e4:	20000084 	.word	0x20000084
 80007e8:	200001ac 	.word	0x200001ac
 80007ec:	20000094 	.word	0x20000094
 80007f0:	20000098 	.word	0x20000098
 80007f4:	2000009c 	.word	0x2000009c
 80007f8:	200000a0 	.word	0x200000a0
 80007fc:	200000a4 	.word	0x200000a4
 8000800:	200000a8 	.word	0x200000a8
 8000804:	200000ac 	.word	0x200000ac
 8000808:	200000b0 	.word	0x200000b0
 800080c:	200000b4 	.word	0x200000b4
 8000810:	200000b8 	.word	0x200000b8
 8000814:	200000bc 	.word	0x200000bc
 8000818:	200000c0 	.word	0x200000c0
 800081c:	200000c4 	.word	0x200000c4
 8000820:	200000cc 	.word	0x200000cc
 8000824:	200000c8 	.word	0x200000c8
 8000828:	200000d0 	.word	0x200000d0
 800082c:	08003da0 	.word	0x08003da0
  	  }
  	  else
  	  {
  		  ry = 0;
 8000830:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <main+0x2f4>)
 8000832:	2200      	movs	r2, #0
 8000834:	601a      	str	r2, [r3, #0]
  	  	  rx = 0;
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <main+0x2f8>)
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
  	  	  lx = 0;
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <main+0x2fc>)
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
  	  	  ly = 0;
 8000842:	4b17      	ldr	r3, [pc, #92]	@ (80008a0 <main+0x300>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
  	  	  cro = 0;
 8000848:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <main+0x304>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
  	  	  squ = 0;
 800084e:	4b16      	ldr	r3, [pc, #88]	@ (80008a8 <main+0x308>)
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
  	  	  tri = 0;
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <main+0x30c>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
  	  	  cir = 0;
 800085a:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <main+0x310>)
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
  	  	  up = 0;
 8000860:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <main+0x314>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
  	  	  down = 0;
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <main+0x318>)
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
  	  	  left = 0;
 800086c:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <main+0x31c>)
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
  	  	  right = 0;
 8000872:	4b13      	ldr	r3, [pc, #76]	@ (80008c0 <main+0x320>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
  	  	  ll1=0;
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <main+0x324>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
  	  	  ll2=0;
 800087e:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <main+0x328>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
  	  	  rr1=0;
 8000884:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <main+0x32c>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
  	  	  rr2=0;
 800088a:	4b11      	ldr	r3, [pc, #68]	@ (80008d0 <main+0x330>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
    {
 8000890:	e69e      	b.n	80005d0 <main+0x30>
 8000892:	bf00      	nop
 8000894:	200000a0 	.word	0x200000a0
 8000898:	2000009c 	.word	0x2000009c
 800089c:	20000094 	.word	0x20000094
 80008a0:	20000098 	.word	0x20000098
 80008a4:	200000a4 	.word	0x200000a4
 80008a8:	200000a8 	.word	0x200000a8
 80008ac:	200000ac 	.word	0x200000ac
 80008b0:	200000b0 	.word	0x200000b0
 80008b4:	200000b4 	.word	0x200000b4
 80008b8:	200000b8 	.word	0x200000b8
 80008bc:	200000bc 	.word	0x200000bc
 80008c0:	200000c0 	.word	0x200000c0
 80008c4:	200000c4 	.word	0x200000c4
 80008c8:	200000cc 	.word	0x200000cc
 80008cc:	200000c8 	.word	0x200000c8
 80008d0:	200000d0 	.word	0x200000d0

080008d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b094      	sub	sp, #80	@ 0x50
 80008d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	2234      	movs	r2, #52	@ 0x34
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 fc37 	bl	8003156 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	4b2a      	ldr	r3, [pc, #168]	@ (80009a8 <SystemClock_Config+0xd4>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000900:	4a29      	ldr	r2, [pc, #164]	@ (80009a8 <SystemClock_Config+0xd4>)
 8000902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000906:	6413      	str	r3, [r2, #64]	@ 0x40
 8000908:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <SystemClock_Config+0xd4>)
 800090a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000914:	2300      	movs	r3, #0
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	4b24      	ldr	r3, [pc, #144]	@ (80009ac <SystemClock_Config+0xd8>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000920:	4a22      	ldr	r2, [pc, #136]	@ (80009ac <SystemClock_Config+0xd8>)
 8000922:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000926:	6013      	str	r3, [r2, #0]
 8000928:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <SystemClock_Config+0xd8>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000930:	603b      	str	r3, [r7, #0]
 8000932:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000940:	2302      	movs	r3, #2
 8000942:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000944:	2300      	movs	r3, #0
 8000946:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000948:	2310      	movs	r3, #16
 800094a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800094c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000950:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000952:	2304      	movs	r3, #4
 8000954:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fa5c 	bl	8001e20 <HAL_RCC_OscConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800096e:	f000 f9b3 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000972:	230f      	movs	r3, #15
 8000974:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000976:	2302      	movs	r3, #2
 8000978:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800097e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000982:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000984:	2300      	movs	r3, #0
 8000986:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	2102      	movs	r1, #2
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fefc 	bl	800178c <HAL_RCC_ClockConfig>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800099a:	f000 f99d 	bl	8000cd8 <Error_Handler>
  }
}
 800099e:	bf00      	nop
 80009a0:	3750      	adds	r7, #80	@ 0x50
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40007000 	.word	0x40007000

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08c      	sub	sp, #48	@ 0x30
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2224      	movs	r2, #36	@ 0x24
 80009bc:	2100      	movs	r1, #0
 80009be:	4618      	mov	r0, r3
 80009c0:	f002 fbc9 	bl	8003156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009cc:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <MX_TIM2_Init+0xa4>)
 80009ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <MX_TIM2_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009da:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <MX_TIM2_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <MX_TIM2_Init+0xa4>)
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <MX_TIM2_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <MX_TIM2_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009fc:	2301      	movs	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000a04:	2305      	movs	r3, #5
 8000a06:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a10:	2300      	movs	r3, #0
 8000a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000a14:	2305      	movs	r3, #5
 8000a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480d      	ldr	r0, [pc, #52]	@ (8000a54 <MX_TIM2_Init+0xa4>)
 8000a20:	f001 fc9c 	bl	800235c <HAL_TIM_Encoder_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000a2a:	f000 f955 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <MX_TIM2_Init+0xa4>)
 8000a3c:	f001 fde0 	bl	8002600 <HAL_TIMEx_MasterConfigSynchronization>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a46:	f000 f947 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	3730      	adds	r7, #48	@ 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000d4 	.word	0x200000d4

08000a58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08c      	sub	sp, #48	@ 0x30
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2224      	movs	r2, #36	@ 0x24
 8000a64:	2100      	movs	r1, #0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 fb75 	bl	8003156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a74:	4b20      	ldr	r3, [pc, #128]	@ (8000af8 <MX_TIM3_Init+0xa0>)
 8000a76:	4a21      	ldr	r2, [pc, #132]	@ (8000afc <MX_TIM3_Init+0xa4>)
 8000a78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_TIM3_Init+0xa0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_TIM3_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_TIM3_Init+0xa0>)
 8000a88:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a8c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_TIM3_Init+0xa0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_TIM3_Init+0xa0>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000aaa:	2305      	movs	r3, #5
 8000aac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000aba:	2305      	movs	r3, #5
 8000abc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480c      	ldr	r0, [pc, #48]	@ (8000af8 <MX_TIM3_Init+0xa0>)
 8000ac6:	f001 fc49 	bl	800235c <HAL_TIM_Encoder_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000ad0:	f000 f902 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000adc:	1d3b      	adds	r3, r7, #4
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_TIM3_Init+0xa0>)
 8000ae2:	f001 fd8d 	bl	8002600 <HAL_TIMEx_MasterConfigSynchronization>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000aec:	f000 f8f4 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3730      	adds	r7, #48	@ 0x30
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000011c 	.word	0x2000011c
 8000afc:	40000400 	.word	0x40000400

08000b00 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	@ 0x30
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2224      	movs	r2, #36	@ 0x24
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f002 fb21 	bl	8003156 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <MX_TIM4_Init+0xa0>)
 8000b1e:	4a21      	ldr	r2, [pc, #132]	@ (8000ba4 <MX_TIM4_Init+0xa4>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_TIM4_Init+0xa0>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <MX_TIM4_Init+0xa0>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_TIM4_Init+0xa0>)
 8000b30:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b34:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba0 <MX_TIM4_Init+0xa0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ba0 <MX_TIM4_Init+0xa0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000b42:	2303      	movs	r3, #3
 8000b44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b46:	2300      	movs	r3, #0
 8000b48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8000b52:	2305      	movs	r3, #5
 8000b54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8000b62:	2305      	movs	r3, #5
 8000b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <MX_TIM4_Init+0xa0>)
 8000b6e:	f001 fbf5 	bl	800235c <HAL_TIM_Encoder_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 f8ae 	bl	8000cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	@ (8000ba0 <MX_TIM4_Init+0xa0>)
 8000b8a:	f001 fd39 	bl	8002600 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000b94:	f000 f8a0 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3730      	adds	r7, #48	@ 0x30
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000164 	.word	0x20000164
 8000ba4:	40000800 	.word	0x40000800

08000ba8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000bac:	4b11      	ldr	r3, [pc, #68]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <MX_UART4_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_UART4_Init+0x4c>)
 8000be0:	f001 fd8a 	bl	80026f8 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f875 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200001ac 	.word	0x200001ac
 8000bf8:	40004c00 	.word	0x40004c00

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	@ 0x28
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b2d      	ldr	r3, [pc, #180]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c22:	4b2a      	ldr	r3, [pc, #168]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a25      	ldr	r2, [pc, #148]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c52:	4a1e      	ldr	r2, [pc, #120]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_GPIO_Init+0xd0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2120      	movs	r1, #32
 8000c86:	4812      	ldr	r0, [pc, #72]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c88:	f000 fd66 	bl	8001758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <MX_GPIO_Init+0xd8>)
 8000ca4:	f000 fbc4 	bl	8001430 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca8:	2320      	movs	r3, #32
 8000caa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_GPIO_Init+0xd4>)
 8000cc0:	f000 fbb6 	bl	8001430 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	@ 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020800 	.word	0x40020800

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a08      	ldr	r2, [pc, #32]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d22:	2007      	movs	r0, #7
 8000d24:	f000 fb50 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08e      	sub	sp, #56	@ 0x38
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d54:	d14c      	bne.n	8000df0 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]
 8000d5a:	4b59      	ldr	r3, [pc, #356]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	4a58      	ldr	r2, [pc, #352]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d66:	4b56      	ldr	r3, [pc, #344]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	623b      	str	r3, [r7, #32]
 8000d70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	4b52      	ldr	r3, [pc, #328]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a51      	ldr	r2, [pc, #324]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b4f      	ldr	r3, [pc, #316]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	61fb      	str	r3, [r7, #28]
 8000d8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	4b4b      	ldr	r3, [pc, #300]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a4a      	ldr	r2, [pc, #296]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b48      	ldr	r3, [pc, #288]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000daa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	483f      	ldr	r0, [pc, #252]	@ (8000ec4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000dc8:	f000 fb32 	bl	8001430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dcc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000dde:	2301      	movs	r3, #1
 8000de0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	4837      	ldr	r0, [pc, #220]	@ (8000ec8 <HAL_TIM_Encoder_MspInit+0x194>)
 8000dea:	f000 fb21 	bl	8001430 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000dee:	e062      	b.n	8000eb6 <HAL_TIM_Encoder_MspInit+0x182>
  else if(htim_encoder->Instance==TIM3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a35      	ldr	r2, [pc, #212]	@ (8000ecc <HAL_TIM_Encoder_MspInit+0x198>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12c      	bne.n	8000e54 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b30      	ldr	r3, [pc, #192]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	4a2f      	ldr	r2, [pc, #188]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b29      	ldr	r3, [pc, #164]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b26      	ldr	r3, [pc, #152]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e32:	23c0      	movs	r3, #192	@ 0xc0
 8000e34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e42:	2302      	movs	r3, #2
 8000e44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	481d      	ldr	r0, [pc, #116]	@ (8000ec4 <HAL_TIM_Encoder_MspInit+0x190>)
 8000e4e:	f000 faef 	bl	8001430 <HAL_GPIO_Init>
}
 8000e52:	e030      	b.n	8000eb6 <HAL_TIM_Encoder_MspInit+0x182>
  else if(htim_encoder->Instance==TIM4)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d12b      	bne.n	8000eb6 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	4a16      	ldr	r2, [pc, #88]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e82:	4a0f      	ldr	r2, [pc, #60]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	60bb      	str	r3, [r7, #8]
 8000e94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e96:	23c0      	movs	r3, #192	@ 0xc0
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	@ (8000ec8 <HAL_TIM_Encoder_MspInit+0x194>)
 8000eb2:	f000 fabd 	bl	8001430 <HAL_GPIO_Init>
}
 8000eb6:	bf00      	nop
 8000eb8:	3738      	adds	r7, #56	@ 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40000400 	.word	0x40000400
 8000ed0:	40000800 	.word	0x40000800

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08a      	sub	sp, #40	@ 0x28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a19      	ldr	r2, [pc, #100]	@ (8000f58 <HAL_UART_MspInit+0x84>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d12b      	bne.n	8000f4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <HAL_UART_MspInit+0x88>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a17      	ldr	r2, [pc, #92]	@ (8000f5c <HAL_UART_MspInit+0x88>)
 8000f00:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <HAL_UART_MspInit+0x88>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <HAL_UART_MspInit+0x88>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a10      	ldr	r2, [pc, #64]	@ (8000f5c <HAL_UART_MspInit+0x88>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_UART_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3a:	2303      	movs	r3, #3
 8000f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4805      	ldr	r0, [pc, #20]	@ (8000f60 <HAL_UART_MspInit+0x8c>)
 8000f4a:	f000 fa71 	bl	8001430 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	@ 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40004c00 	.word	0x40004c00
 8000f5c:	40023800 	.word	0x40023800
 8000f60:	40020000 	.word	0x40020000

08000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <NMI_Handler+0x4>

08000f6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <HardFault_Handler+0x4>

08000f74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <MemManage_Handler+0x4>

08000f7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <BusFault_Handler+0x4>

08000f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f88:	bf00      	nop
 8000f8a:	e7fd      	b.n	8000f88 <UsageFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fba:	f000 f933 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	60f8      	str	r0, [r7, #12]
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	617b      	str	r3, [r7, #20]
 8000fd2:	e00a      	b.n	8000fea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fd4:	f3af 8000 	nop.w
 8000fd8:	4601      	mov	r1, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	60ba      	str	r2, [r7, #8]
 8000fe0:	b2ca      	uxtb	r2, r1
 8000fe2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	dbf0      	blt.n	8000fd4 <_read+0x12>
  }

  return len;
 8000ff2:	687b      	ldr	r3, [r7, #4]
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	3718      	adds	r7, #24
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	e009      	b.n	8001022 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1c5a      	adds	r2, r3, #1
 8001012:	60ba      	str	r2, [r7, #8]
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	3301      	adds	r3, #1
 8001020:	617b      	str	r3, [r7, #20]
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	429a      	cmp	r2, r3
 8001028:	dbf1      	blt.n	800100e <_write+0x12>
  }
  return len;
 800102a:	687b      	ldr	r3, [r7, #4]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <_close>:

int _close(int file)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800103c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800105c:	605a      	str	r2, [r3, #4]
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_isatty>:

int _isatty(int file)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001074:	2301      	movs	r3, #1
}
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001082:	b480      	push	{r7}
 8001084:	b085      	sub	sp, #20
 8001086:	af00      	add	r7, sp, #0
 8001088:	60f8      	str	r0, [r7, #12]
 800108a:	60b9      	str	r1, [r7, #8]
 800108c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010a4:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <_sbrk+0x5c>)
 80010a6:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <_sbrk+0x60>)
 80010a8:	1ad3      	subs	r3, r2, r3
 80010aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b0:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <_sbrk+0x64>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b8:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <_sbrk+0x64>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	@ (8001104 <_sbrk+0x68>)
 80010bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010be:	4b10      	ldr	r3, [pc, #64]	@ (8001100 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d207      	bcs.n	80010dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010cc:	f002 f892 	bl	80031f4 <__errno>
 80010d0:	4603      	mov	r3, r0
 80010d2:	220c      	movs	r2, #12
 80010d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	e009      	b.n	80010f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010dc:	4b08      	ldr	r3, [pc, #32]	@ (8001100 <_sbrk+0x64>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010e2:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	4a05      	ldr	r2, [pc, #20]	@ (8001100 <_sbrk+0x64>)
 80010ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ee:	68fb      	ldr	r3, [r7, #12]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20020000 	.word	0x20020000
 80010fc:	00000400 	.word	0x00000400
 8001100:	200001f4 	.word	0x200001f4
 8001104:	20000348 	.word	0x20000348

08001108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800110c:	4b06      	ldr	r3, [pc, #24]	@ (8001128 <SystemInit+0x20>)
 800110e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001112:	4a05      	ldr	r2, [pc, #20]	@ (8001128 <SystemInit+0x20>)
 8001114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800111c:	bf00      	nop
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001164 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001130:	f7ff ffea 	bl	8001108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	@ (800116c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	@ (8001174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	@ (8001178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800115a:	f002 f851 	bl	8003200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115e:	f7ff fa1f 	bl	80005a0 <main>
  bx  lr    
 8001162:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001170:	08003e34 	.word	0x08003e34
  ldr r2, =_sbss
 8001174:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001178:	20000348 	.word	0x20000348

0800117c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800117c:	e7fe      	b.n	800117c <ADC_IRQHandler>
	...

08001180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001184:	4b0e      	ldr	r3, [pc, #56]	@ (80011c0 <HAL_Init+0x40>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0d      	ldr	r2, [pc, #52]	@ (80011c0 <HAL_Init+0x40>)
 800118a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800118e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <HAL_Init+0x40>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <HAL_Init+0x40>)
 8001196:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800119a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_Init+0x40>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <HAL_Init+0x40>)
 80011a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a8:	2003      	movs	r0, #3
 80011aa:	f000 f90d 	bl	80013c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ae:	2000      	movs	r0, #0
 80011b0:	f000 f808 	bl	80011c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011b4:	f7ff fd96 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023c00 	.word	0x40023c00

080011c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011cc:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <HAL_InitTick+0x54>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_InitTick+0x58>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f917 	bl	8001416 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f000 f8ed 	bl	80013de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <HAL_InitTick+0x5c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000000 	.word	0x20000000
 800121c:	20000008 	.word	0x20000008
 8001220:	20000004 	.word	0x20000004

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	20000008 	.word	0x20000008
 8001248:	200001f8 	.word	0x200001f8

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	200001f8 	.word	0x200001f8

08001264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001280:	4013      	ands	r3, r2
 8001282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800128c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001296:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	60d3      	str	r3, [r2, #12]
}
 800129c:	bf00      	nop
 800129e:	3714      	adds	r7, #20
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000ed00 	.word	0xe000ed00

080012ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b0:	4b04      	ldr	r3, [pc, #16]	@ (80012c4 <__NVIC_GetPriorityGrouping+0x18>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	0a1b      	lsrs	r3, r3, #8
 80012b6:	f003 0307 	and.w	r3, r3, #7
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	6039      	str	r1, [r7, #0]
 80012d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	db0a      	blt.n	80012f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	490c      	ldr	r1, [pc, #48]	@ (8001314 <__NVIC_SetPriority+0x4c>)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	0112      	lsls	r2, r2, #4
 80012e8:	b2d2      	uxtb	r2, r2
 80012ea:	440b      	add	r3, r1
 80012ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f0:	e00a      	b.n	8001308 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	b2da      	uxtb	r2, r3
 80012f6:	4908      	ldr	r1, [pc, #32]	@ (8001318 <__NVIC_SetPriority+0x50>)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	f003 030f 	and.w	r3, r3, #15
 80012fe:	3b04      	subs	r3, #4
 8001300:	0112      	lsls	r2, r2, #4
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	440b      	add	r3, r1
 8001306:	761a      	strb	r2, [r3, #24]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001330:	69fb      	ldr	r3, [r7, #28]
 8001332:	f1c3 0307 	rsb	r3, r3, #7
 8001336:	2b04      	cmp	r3, #4
 8001338:	bf28      	it	cs
 800133a:	2304      	movcs	r3, #4
 800133c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3304      	adds	r3, #4
 8001342:	2b06      	cmp	r3, #6
 8001344:	d902      	bls.n	800134c <NVIC_EncodePriority+0x30>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3b03      	subs	r3, #3
 800134a:	e000      	b.n	800134e <NVIC_EncodePriority+0x32>
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001350:	f04f 32ff 	mov.w	r2, #4294967295
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43da      	mvns	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	401a      	ands	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001364:	f04f 31ff 	mov.w	r1, #4294967295
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	fa01 f303 	lsl.w	r3, r1, r3
 800136e:	43d9      	mvns	r1, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001374:	4313      	orrs	r3, r2
         );
}
 8001376:	4618      	mov	r0, r3
 8001378:	3724      	adds	r7, #36	@ 0x24
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b01      	subs	r3, #1
 8001390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001394:	d301      	bcc.n	800139a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001396:	2301      	movs	r3, #1
 8001398:	e00f      	b.n	80013ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <SysTick_Config+0x40>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3b01      	subs	r3, #1
 80013a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a2:	210f      	movs	r1, #15
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	f7ff ff8e 	bl	80012c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013ac:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <SysTick_Config+0x40>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013b2:	4b04      	ldr	r3, [pc, #16]	@ (80013c4 <SysTick_Config+0x40>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b8:	2300      	movs	r3, #0
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	e000e010 	.word	0xe000e010

080013c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ff47 	bl	8001264 <__NVIC_SetPriorityGrouping>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
 80013ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f0:	f7ff ff5c 	bl	80012ac <__NVIC_GetPriorityGrouping>
 80013f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	68b9      	ldr	r1, [r7, #8]
 80013fa:	6978      	ldr	r0, [r7, #20]
 80013fc:	f7ff ff8e 	bl	800131c <NVIC_EncodePriority>
 8001400:	4602      	mov	r2, r0
 8001402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001406:	4611      	mov	r1, r2
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff5d 	bl	80012c8 <__NVIC_SetPriority>
}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b082      	sub	sp, #8
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ffb0 	bl	8001384 <SysTick_Config>
 8001424:	4603      	mov	r3, r0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001430:	b480      	push	{r7}
 8001432:	b089      	sub	sp, #36	@ 0x24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001442:	2300      	movs	r3, #0
 8001444:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
 800144a:	e165      	b.n	8001718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800144c:	2201      	movs	r2, #1
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	429a      	cmp	r2, r3
 8001466:	f040 8154 	bne.w	8001712 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	2b01      	cmp	r3, #1
 8001474:	d005      	beq.n	8001482 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800147e:	2b02      	cmp	r3, #2
 8001480:	d130      	bne.n	80014e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	2203      	movs	r2, #3
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	091b      	lsrs	r3, r3, #4
 80014ce:	f003 0201 	and.w	r2, r3, #1
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0303 	and.w	r3, r3, #3
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d017      	beq.n	8001520 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	2203      	movs	r2, #3
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	fa02 f303 	lsl.w	r3, r2, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f003 0303 	and.w	r3, r3, #3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d123      	bne.n	8001574 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	08da      	lsrs	r2, r3, #3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3208      	adds	r2, #8
 8001534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	220f      	movs	r2, #15
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	4013      	ands	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4313      	orrs	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	08da      	lsrs	r2, r3, #3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3208      	adds	r2, #8
 800156e:	69b9      	ldr	r1, [r7, #24]
 8001570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	2203      	movs	r2, #3
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0203 	and.w	r2, r3, #3
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80ae 	beq.w	8001712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001730 <HAL_GPIO_Init+0x300>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015be:	4a5c      	ldr	r2, [pc, #368]	@ (8001730 <HAL_GPIO_Init+0x300>)
 80015c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001730 <HAL_GPIO_Init+0x300>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015d2:	4a58      	ldr	r2, [pc, #352]	@ (8001734 <HAL_GPIO_Init+0x304>)
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a4f      	ldr	r2, [pc, #316]	@ (8001738 <HAL_GPIO_Init+0x308>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d025      	beq.n	800164a <HAL_GPIO_Init+0x21a>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4e      	ldr	r2, [pc, #312]	@ (800173c <HAL_GPIO_Init+0x30c>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x216>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4d      	ldr	r2, [pc, #308]	@ (8001740 <HAL_GPIO_Init+0x310>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x212>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4c      	ldr	r2, [pc, #304]	@ (8001744 <HAL_GPIO_Init+0x314>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x20e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4b      	ldr	r2, [pc, #300]	@ (8001748 <HAL_GPIO_Init+0x318>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x20a>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4a      	ldr	r2, [pc, #296]	@ (800174c <HAL_GPIO_Init+0x31c>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x206>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a49      	ldr	r2, [pc, #292]	@ (8001750 <HAL_GPIO_Init+0x320>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x202>
 800162e:	2306      	movs	r3, #6
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001632:	2307      	movs	r3, #7
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x21c>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x21c>
 800164a:	2300      	movs	r3, #0
 800164c:	69fa      	ldr	r2, [r7, #28]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	69ba      	ldr	r2, [r7, #24]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800165c:	4935      	ldr	r1, [pc, #212]	@ (8001734 <HAL_GPIO_Init+0x304>)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166a:	4b3a      	ldr	r3, [pc, #232]	@ (8001754 <HAL_GPIO_Init+0x324>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800168e:	4a31      	ldr	r2, [pc, #196]	@ (8001754 <HAL_GPIO_Init+0x324>)
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001694:	4b2f      	ldr	r3, [pc, #188]	@ (8001754 <HAL_GPIO_Init+0x324>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	43db      	mvns	r3, r3
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4013      	ands	r3, r2
 80016a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80016b0:	69ba      	ldr	r2, [r7, #24]
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016b8:	4a26      	ldr	r2, [pc, #152]	@ (8001754 <HAL_GPIO_Init+0x324>)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016be:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <HAL_GPIO_Init+0x324>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	69ba      	ldr	r2, [r7, #24]
 80016ca:	4013      	ands	r3, r2
 80016cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001754 <HAL_GPIO_Init+0x324>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <HAL_GPIO_Init+0x324>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4013      	ands	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800170c:	4a11      	ldr	r2, [pc, #68]	@ (8001754 <HAL_GPIO_Init+0x324>)
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3301      	adds	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	2b0f      	cmp	r3, #15
 800171c:	f67f ae96 	bls.w	800144c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3724      	adds	r7, #36	@ 0x24
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	40013800 	.word	0x40013800
 8001738:	40020000 	.word	0x40020000
 800173c:	40020400 	.word	0x40020400
 8001740:	40020800 	.word	0x40020800
 8001744:	40020c00 	.word	0x40020c00
 8001748:	40021000 	.word	0x40021000
 800174c:	40021400 	.word	0x40021400
 8001750:	40021800 	.word	0x40021800
 8001754:	40013c00 	.word	0x40013c00

08001758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
 8001764:	4613      	mov	r3, r2
 8001766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001768:	787b      	ldrb	r3, [r7, #1]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800176e:	887a      	ldrh	r2, [r7, #2]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001774:	e003      	b.n	800177e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	041a      	lsls	r2, r3, #16
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	619a      	str	r2, [r3, #24]
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d101      	bne.n	80017a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e0cc      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017a0:	4b68      	ldr	r3, [pc, #416]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 030f 	and.w	r3, r3, #15
 80017a8:	683a      	ldr	r2, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d90c      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ae:	4b65      	ldr	r3, [pc, #404]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	b2d2      	uxtb	r2, r2
 80017b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 030f 	and.w	r3, r3, #15
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	4a52      	ldr	r2, [pc, #328]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001802:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001812:	4313      	orrs	r3, r2
 8001814:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d044      	beq.n	80018ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d119      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d003      	beq.n	800184a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001846:	2b03      	cmp	r3, #3
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800184a:	4b3f      	ldr	r3, [pc, #252]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d109      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e06f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800185a:	4b3b      	ldr	r3, [pc, #236]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e067      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800186a:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 0203 	bic.w	r2, r3, #3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4934      	ldr	r1, [pc, #208]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800187c:	f7ff fce6 	bl	800124c <HAL_GetTick>
 8001880:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001882:	e00a      	b.n	800189a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001884:	f7ff fce2 	bl	800124c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e04f      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	4b2b      	ldr	r3, [pc, #172]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 020c 	and.w	r2, r3, #12
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d1eb      	bne.n	8001884 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018ac:	4b25      	ldr	r3, [pc, #148]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d20c      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ba:	4b22      	ldr	r3, [pc, #136]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	b2d2      	uxtb	r2, r2
 80018c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_RCC_ClockConfig+0x1b8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018fe:	4b12      	ldr	r3, [pc, #72]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f855 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	@ (8001948 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	@ (800194c <HAL_RCC_ClockConfig+0x1c0>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	@ (8001950 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_RCC_ClockConfig+0x1c8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fc46 	bl	80011c4 <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00
 8001948:	40023800 	.word	0x40023800
 800194c:	08003dd8 	.word	0x08003dd8
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800195c:	4b03      	ldr	r3, [pc, #12]	@ (800196c <HAL_RCC_GetHCLKFreq+0x14>)
 800195e:	681b      	ldr	r3, [r3, #0]
}
 8001960:	4618      	mov	r0, r3
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	20000000 	.word	0x20000000

08001970 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001974:	f7ff fff0 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 8001978:	4602      	mov	r2, r0
 800197a:	4b05      	ldr	r3, [pc, #20]	@ (8001990 <HAL_RCC_GetPCLK1Freq+0x20>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	0a9b      	lsrs	r3, r3, #10
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	4903      	ldr	r1, [pc, #12]	@ (8001994 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001986:	5ccb      	ldrb	r3, [r1, r3]
 8001988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800198c:	4618      	mov	r0, r3
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	08003de8 	.word	0x08003de8

08001998 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800199c:	f7ff ffdc 	bl	8001958 <HAL_RCC_GetHCLKFreq>
 80019a0:	4602      	mov	r2, r0
 80019a2:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	0b5b      	lsrs	r3, r3, #13
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	4903      	ldr	r1, [pc, #12]	@ (80019bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80019ae:	5ccb      	ldrb	r3, [r1, r3]
 80019b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40023800 	.word	0x40023800
 80019bc:	08003de8 	.word	0x08003de8

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b0ae      	sub	sp, #184	@ 0xb8
 80019c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019e6:	4bcb      	ldr	r3, [pc, #812]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
 80019ee:	2b0c      	cmp	r3, #12
 80019f0:	f200 8206 	bhi.w	8001e00 <HAL_RCC_GetSysClockFreq+0x440>
 80019f4:	a201      	add	r2, pc, #4	@ (adr r2, 80019fc <HAL_RCC_GetSysClockFreq+0x3c>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a31 	.word	0x08001a31
 8001a00:	08001e01 	.word	0x08001e01
 8001a04:	08001e01 	.word	0x08001e01
 8001a08:	08001e01 	.word	0x08001e01
 8001a0c:	08001a39 	.word	0x08001a39
 8001a10:	08001e01 	.word	0x08001e01
 8001a14:	08001e01 	.word	0x08001e01
 8001a18:	08001e01 	.word	0x08001e01
 8001a1c:	08001a41 	.word	0x08001a41
 8001a20:	08001e01 	.word	0x08001e01
 8001a24:	08001e01 	.word	0x08001e01
 8001a28:	08001e01 	.word	0x08001e01
 8001a2c:	08001c31 	.word	0x08001c31
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a30:	4bb9      	ldr	r3, [pc, #740]	@ (8001d18 <HAL_RCC_GetSysClockFreq+0x358>)
 8001a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a36:	e1e7      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a38:	4bb8      	ldr	r3, [pc, #736]	@ (8001d1c <HAL_RCC_GetSysClockFreq+0x35c>)
 8001a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a3e:	e1e3      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a40:	4bb4      	ldr	r3, [pc, #720]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a4c:	4bb1      	ldr	r3, [pc, #708]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d071      	beq.n	8001b3c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a58:	4bae      	ldr	r3, [pc, #696]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	099b      	lsrs	r3, r3, #6
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a64:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001a7e:	4622      	mov	r2, r4
 8001a80:	462b      	mov	r3, r5
 8001a82:	f04f 0000 	mov.w	r0, #0
 8001a86:	f04f 0100 	mov.w	r1, #0
 8001a8a:	0159      	lsls	r1, r3, #5
 8001a8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a90:	0150      	lsls	r0, r2, #5
 8001a92:	4602      	mov	r2, r0
 8001a94:	460b      	mov	r3, r1
 8001a96:	4621      	mov	r1, r4
 8001a98:	1a51      	subs	r1, r2, r1
 8001a9a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001a9c:	4629      	mov	r1, r5
 8001a9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001ab0:	4649      	mov	r1, r9
 8001ab2:	018b      	lsls	r3, r1, #6
 8001ab4:	4641      	mov	r1, r8
 8001ab6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001aba:	4641      	mov	r1, r8
 8001abc:	018a      	lsls	r2, r1, #6
 8001abe:	4641      	mov	r1, r8
 8001ac0:	1a51      	subs	r1, r2, r1
 8001ac2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001acc:	f04f 0200 	mov.w	r2, #0
 8001ad0:	f04f 0300 	mov.w	r3, #0
 8001ad4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001ad8:	4649      	mov	r1, r9
 8001ada:	00cb      	lsls	r3, r1, #3
 8001adc:	4641      	mov	r1, r8
 8001ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ae2:	4641      	mov	r1, r8
 8001ae4:	00ca      	lsls	r2, r1, #3
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	4622      	mov	r2, r4
 8001aee:	189b      	adds	r3, r3, r2
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001af2:	462b      	mov	r3, r5
 8001af4:	460a      	mov	r2, r1
 8001af6:	eb42 0303 	adc.w	r3, r2, r3
 8001afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b08:	4629      	mov	r1, r5
 8001b0a:	024b      	lsls	r3, r1, #9
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b12:	4621      	mov	r1, r4
 8001b14:	024a      	lsls	r2, r1, #9
 8001b16:	4610      	mov	r0, r2
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001b24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001b28:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001b2c:	f7fe fbc0 	bl	80002b0 <__aeabi_uldivmod>
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	4613      	mov	r3, r2
 8001b36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001b3a:	e067      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3c:	4b75      	ldr	r3, [pc, #468]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	2200      	movs	r2, #0
 8001b44:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b48:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001b4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b56:	2300      	movs	r3, #0
 8001b58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b5a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001b5e:	4622      	mov	r2, r4
 8001b60:	462b      	mov	r3, r5
 8001b62:	f04f 0000 	mov.w	r0, #0
 8001b66:	f04f 0100 	mov.w	r1, #0
 8001b6a:	0159      	lsls	r1, r3, #5
 8001b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b70:	0150      	lsls	r0, r2, #5
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4621      	mov	r1, r4
 8001b78:	1a51      	subs	r1, r2, r1
 8001b7a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001b90:	4649      	mov	r1, r9
 8001b92:	018b      	lsls	r3, r1, #6
 8001b94:	4641      	mov	r1, r8
 8001b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9a:	4641      	mov	r1, r8
 8001b9c:	018a      	lsls	r2, r1, #6
 8001b9e:	4641      	mov	r1, r8
 8001ba0:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ba4:	4649      	mov	r1, r9
 8001ba6:	eb63 0b01 	sbc.w	fp, r3, r1
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001bb6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001bba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001bbe:	4692      	mov	sl, r2
 8001bc0:	469b      	mov	fp, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	eb1a 0303 	adds.w	r3, sl, r3
 8001bc8:	623b      	str	r3, [r7, #32]
 8001bca:	462b      	mov	r3, r5
 8001bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8001bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bd2:	f04f 0200 	mov.w	r2, #0
 8001bd6:	f04f 0300 	mov.w	r3, #0
 8001bda:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001bde:	4629      	mov	r1, r5
 8001be0:	028b      	lsls	r3, r1, #10
 8001be2:	4621      	mov	r1, r4
 8001be4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001be8:	4621      	mov	r1, r4
 8001bea:	028a      	lsls	r2, r1, #10
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001bf8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bfa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bfe:	f7fe fb57 	bl	80002b0 <__aeabi_uldivmod>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4613      	mov	r3, r2
 8001c08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c0c:	4b41      	ldr	r3, [pc, #260]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	0c1b      	lsrs	r3, r3, #16
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	3301      	adds	r3, #1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001c22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001c2e:	e0eb      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c30:	4b38      	ldr	r3, [pc, #224]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c38:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c3c:	4b35      	ldr	r3, [pc, #212]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d06b      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c48:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	2200      	movs	r2, #0
 8001c50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c52:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c5a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c60:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c64:	4622      	mov	r2, r4
 8001c66:	462b      	mov	r3, r5
 8001c68:	f04f 0000 	mov.w	r0, #0
 8001c6c:	f04f 0100 	mov.w	r1, #0
 8001c70:	0159      	lsls	r1, r3, #5
 8001c72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c76:	0150      	lsls	r0, r2, #5
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	4621      	mov	r1, r4
 8001c7e:	1a51      	subs	r1, r2, r1
 8001c80:	61b9      	str	r1, [r7, #24]
 8001c82:	4629      	mov	r1, r5
 8001c84:	eb63 0301 	sbc.w	r3, r3, r1
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c96:	4659      	mov	r1, fp
 8001c98:	018b      	lsls	r3, r1, #6
 8001c9a:	4651      	mov	r1, sl
 8001c9c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	018a      	lsls	r2, r1, #6
 8001ca4:	4651      	mov	r1, sl
 8001ca6:	ebb2 0801 	subs.w	r8, r2, r1
 8001caa:	4659      	mov	r1, fp
 8001cac:	eb63 0901 	sbc.w	r9, r3, r1
 8001cb0:	f04f 0200 	mov.w	r2, #0
 8001cb4:	f04f 0300 	mov.w	r3, #0
 8001cb8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cbc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cc0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cc4:	4690      	mov	r8, r2
 8001cc6:	4699      	mov	r9, r3
 8001cc8:	4623      	mov	r3, r4
 8001cca:	eb18 0303 	adds.w	r3, r8, r3
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	462b      	mov	r3, r5
 8001cd2:	eb49 0303 	adc.w	r3, r9, r3
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	f04f 0200 	mov.w	r2, #0
 8001cdc:	f04f 0300 	mov.w	r3, #0
 8001ce0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ce4:	4629      	mov	r1, r5
 8001ce6:	024b      	lsls	r3, r1, #9
 8001ce8:	4621      	mov	r1, r4
 8001cea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cee:	4621      	mov	r1, r4
 8001cf0:	024a      	lsls	r2, r1, #9
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001cfe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001d00:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d04:	f7fe fad4 	bl	80002b0 <__aeabi_uldivmod>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001d12:	e065      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0x420>
 8001d14:	40023800 	.word	0x40023800
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d20:	4b3d      	ldr	r3, [pc, #244]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	099b      	lsrs	r3, r3, #6
 8001d26:	2200      	movs	r2, #0
 8001d28:	4618      	mov	r0, r3
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d30:	653b      	str	r3, [r7, #80]	@ 0x50
 8001d32:	2300      	movs	r3, #0
 8001d34:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d36:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001d3a:	4642      	mov	r2, r8
 8001d3c:	464b      	mov	r3, r9
 8001d3e:	f04f 0000 	mov.w	r0, #0
 8001d42:	f04f 0100 	mov.w	r1, #0
 8001d46:	0159      	lsls	r1, r3, #5
 8001d48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d4c:	0150      	lsls	r0, r2, #5
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4641      	mov	r1, r8
 8001d54:	1a51      	subs	r1, r2, r1
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	4649      	mov	r1, r9
 8001d5a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	018b      	lsls	r3, r1, #6
 8001d70:	4651      	mov	r1, sl
 8001d72:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d76:	4651      	mov	r1, sl
 8001d78:	018a      	lsls	r2, r1, #6
 8001d7a:	4651      	mov	r1, sl
 8001d7c:	1a54      	subs	r4, r2, r1
 8001d7e:	4659      	mov	r1, fp
 8001d80:	eb63 0501 	sbc.w	r5, r3, r1
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	00eb      	lsls	r3, r5, #3
 8001d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d92:	00e2      	lsls	r2, r4, #3
 8001d94:	4614      	mov	r4, r2
 8001d96:	461d      	mov	r5, r3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	18e3      	adds	r3, r4, r3
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	464b      	mov	r3, r9
 8001da0:	eb45 0303 	adc.w	r3, r5, r3
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db2:	4629      	mov	r1, r5
 8001db4:	028b      	lsls	r3, r1, #10
 8001db6:	4621      	mov	r1, r4
 8001db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	028a      	lsls	r2, r1, #10
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001dc8:	2200      	movs	r2, #0
 8001dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dcc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001dce:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001dd2:	f7fe fa6d 	bl	80002b0 <__aeabi_uldivmod>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4613      	mov	r3, r2
 8001ddc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001de0:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x458>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	0f1b      	lsrs	r3, r3, #28
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001dee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dfe:	e003      	b.n	8001e08 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e00:	4b06      	ldr	r3, [pc, #24]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001e06:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	37b8      	adds	r7, #184	@ 0xb8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e16:	bf00      	nop
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	00f42400 	.word	0x00f42400

08001e20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e28d      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8083 	beq.w	8001f46 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001e40:	4b94      	ldr	r3, [pc, #592]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	d019      	beq.n	8001e80 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e4c:	4b91      	ldr	r3, [pc, #580]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d106      	bne.n	8001e66 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e58:	4b8e      	ldr	r3, [pc, #568]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e64:	d00c      	beq.n	8001e80 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e66:	4b8b      	ldr	r3, [pc, #556]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d112      	bne.n	8001e98 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e72:	4b88      	ldr	r3, [pc, #544]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e7e:	d10b      	bne.n	8001e98 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	4b84      	ldr	r3, [pc, #528]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d05b      	beq.n	8001f44 <HAL_RCC_OscConfig+0x124>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d157      	bne.n	8001f44 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e25a      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea0:	d106      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x90>
 8001ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a7b      	ldr	r2, [pc, #492]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	e01d      	b.n	8001eec <HAL_RCC_OscConfig+0xcc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0xb4>
 8001eba:	4b76      	ldr	r3, [pc, #472]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a75      	ldr	r2, [pc, #468]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b73      	ldr	r3, [pc, #460]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a72      	ldr	r2, [pc, #456]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e00b      	b.n	8001eec <HAL_RCC_OscConfig+0xcc>
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6e      	ldr	r2, [pc, #440]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ede:	6013      	str	r3, [r2, #0]
 8001ee0:	4b6c      	ldr	r3, [pc, #432]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a6b      	ldr	r2, [pc, #428]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d013      	beq.n	8001f1c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef4:	f7ff f9aa 	bl	800124c <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001efc:	f7ff f9a6 	bl	800124c <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b64      	cmp	r3, #100	@ 0x64
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e21f      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0e:	4b61      	ldr	r3, [pc, #388]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0xdc>
 8001f1a:	e014      	b.n	8001f46 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1c:	f7ff f996 	bl	800124c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff f992 	bl	800124c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e20b      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f36:	4b57      	ldr	r3, [pc, #348]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x104>
 8001f42:	e000      	b.n	8001f46 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d06f      	beq.n	8002032 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f52:	4b50      	ldr	r3, [pc, #320]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d017      	beq.n	8001f8e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f5e:	4b4d      	ldr	r3, [pc, #308]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f66:	2b08      	cmp	r3, #8
 8001f68:	d105      	bne.n	8001f76 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f6a:	4b4a      	ldr	r3, [pc, #296]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00b      	beq.n	8001f8e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f76:	4b47      	ldr	r3, [pc, #284]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f7e:	2b0c      	cmp	r3, #12
 8001f80:	d11c      	bne.n	8001fbc <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b44      	ldr	r3, [pc, #272]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d116      	bne.n	8001fbc <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8e:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x186>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d001      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e1d3      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa6:	4b3b      	ldr	r3, [pc, #236]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4937      	ldr	r1, [pc, #220]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	e03a      	b.n	8002032 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc4:	4b34      	ldr	r3, [pc, #208]	@ (8002098 <HAL_RCC_OscConfig+0x278>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff f93f 	bl	800124c <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff f93b 	bl	800124c <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1b4      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe4:	4b2b      	ldr	r3, [pc, #172]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0f0      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4925      	ldr	r1, [pc, #148]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8002000:	4313      	orrs	r3, r2
 8002002:	600b      	str	r3, [r1, #0]
 8002004:	e015      	b.n	8002032 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	4b24      	ldr	r3, [pc, #144]	@ (8002098 <HAL_RCC_OscConfig+0x278>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800200c:	f7ff f91e 	bl	800124c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002014:	f7ff f91a 	bl	800124c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e193      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002026:	4b1b      	ldr	r3, [pc, #108]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d1f0      	bne.n	8002014 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d036      	beq.n	80020ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204c:	f7ff f8fe 	bl	800124c <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff f8fa 	bl	800124c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e173      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002066:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_OscConfig+0x274>)
 8002068:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x234>
 8002072:	e01b      	b.n	80020ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002074:	4b09      	ldr	r3, [pc, #36]	@ (800209c <HAL_RCC_OscConfig+0x27c>)
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207a:	f7ff f8e7 	bl	800124c <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002080:	e00e      	b.n	80020a0 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002082:	f7ff f8e3 	bl	800124c <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d907      	bls.n	80020a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e15c      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
 8002094:	40023800 	.word	0x40023800
 8002098:	42470000 	.word	0x42470000
 800209c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a0:	4b8a      	ldr	r3, [pc, #552]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ea      	bne.n	8002082 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 8097 	beq.w	80021e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020be:	4b83      	ldr	r3, [pc, #524]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10f      	bne.n	80020ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	4b7f      	ldr	r3, [pc, #508]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	4a7e      	ldr	r2, [pc, #504]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020da:	4b7c      	ldr	r3, [pc, #496]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e2:	60bb      	str	r3, [r7, #8]
 80020e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020e6:	2301      	movs	r3, #1
 80020e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ea:	4b79      	ldr	r3, [pc, #484]	@ (80022d0 <HAL_RCC_OscConfig+0x4b0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d118      	bne.n	8002128 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020f6:	4b76      	ldr	r3, [pc, #472]	@ (80022d0 <HAL_RCC_OscConfig+0x4b0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a75      	ldr	r2, [pc, #468]	@ (80022d0 <HAL_RCC_OscConfig+0x4b0>)
 80020fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002100:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002102:	f7ff f8a3 	bl	800124c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7ff f89f 	bl	800124c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e118      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	4b6c      	ldr	r3, [pc, #432]	@ (80022d0 <HAL_RCC_OscConfig+0x4b0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d106      	bne.n	800213e <HAL_RCC_OscConfig+0x31e>
 8002130:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002134:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	6713      	str	r3, [r2, #112]	@ 0x70
 800213c:	e01c      	b.n	8002178 <HAL_RCC_OscConfig+0x358>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b05      	cmp	r3, #5
 8002144:	d10c      	bne.n	8002160 <HAL_RCC_OscConfig+0x340>
 8002146:	4b61      	ldr	r3, [pc, #388]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800214a:	4a60      	ldr	r2, [pc, #384]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 800214c:	f043 0304 	orr.w	r3, r3, #4
 8002150:	6713      	str	r3, [r2, #112]	@ 0x70
 8002152:	4b5e      	ldr	r3, [pc, #376]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	4a5d      	ldr	r2, [pc, #372]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	@ 0x70
 800215e:	e00b      	b.n	8002178 <HAL_RCC_OscConfig+0x358>
 8002160:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002164:	4a59      	ldr	r2, [pc, #356]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002166:	f023 0301 	bic.w	r3, r3, #1
 800216a:	6713      	str	r3, [r2, #112]	@ 0x70
 800216c:	4b57      	ldr	r3, [pc, #348]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002170:	4a56      	ldr	r2, [pc, #344]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7ff f864 	bl	800124c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002186:	e00a      	b.n	800219e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002188:	f7ff f860 	bl	800124c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e0d7      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800219e:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0ee      	beq.n	8002188 <HAL_RCC_OscConfig+0x368>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f84e 	bl	800124c <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b4:	f7ff f84a 	bl	800124c <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e0c1      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ca:	4b40      	ldr	r3, [pc, #256]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1ee      	bne.n	80021b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021d6:	7dfb      	ldrb	r3, [r7, #23]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d105      	bne.n	80021e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021dc:	4b3b      	ldr	r3, [pc, #236]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	4a3a      	ldr	r2, [pc, #232]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 80ad 	beq.w	800234c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021f2:	4b36      	ldr	r3, [pc, #216]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b08      	cmp	r3, #8
 80021fc:	d060      	beq.n	80022c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d145      	bne.n	8002292 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002206:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_RCC_OscConfig+0x4b4>)
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7ff f81e 	bl	800124c <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002214:	f7ff f81a 	bl	800124c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e093      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002226:	4b29      	ldr	r3, [pc, #164]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1f0      	bne.n	8002214 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002240:	019b      	lsls	r3, r3, #6
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225c:	071b      	lsls	r3, r3, #28
 800225e:	491b      	ldr	r1, [pc, #108]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002260:	4313      	orrs	r3, r2
 8002262:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_RCC_OscConfig+0x4b4>)
 8002266:	2201      	movs	r2, #1
 8002268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7fe ffef 	bl	800124c <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe ffeb 	bl	800124c <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e064      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002284:	4b11      	ldr	r3, [pc, #68]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d0f0      	beq.n	8002272 <HAL_RCC_OscConfig+0x452>
 8002290:	e05c      	b.n	800234c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <HAL_RCC_OscConfig+0x4b4>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7fe ffd8 	bl	800124c <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a0:	f7fe ffd4 	bl	800124c <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e04d      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b2:	4b06      	ldr	r3, [pc, #24]	@ (80022cc <HAL_RCC_OscConfig+0x4ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x480>
 80022be:	e045      	b.n	800234c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d107      	bne.n	80022d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e040      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40007000 	.word	0x40007000
 80022d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HAL_RCC_OscConfig+0x538>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d030      	beq.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d129      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d122      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002302:	68fa      	ldr	r2, [r7, #12]
 8002304:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002308:	4013      	ands	r3, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800230e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002310:	4293      	cmp	r3, r2
 8002312:	d119      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231e:	085b      	lsrs	r3, r3, #1
 8002320:	3b01      	subs	r3, #1
 8002322:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002324:	429a      	cmp	r2, r3
 8002326:	d10f      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002332:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002334:	429a      	cmp	r2, r3
 8002336:	d107      	bne.n	8002348 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800234c:	2300      	movs	r3, #0
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40023800 	.word	0x40023800

0800235c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e097      	b.n	80024a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f7fe fcd5 	bl	8000d34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2202      	movs	r2, #2
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80023a0:	f023 0307 	bic.w	r3, r3, #7
 80023a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f000 f879 	bl	80024a8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023de:	f023 0303 	bic.w	r3, r3, #3
 80023e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689a      	ldr	r2, [r3, #8]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	021b      	lsls	r3, r3, #8
 80023ee:	4313      	orrs	r3, r2
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80023fc:	f023 030c 	bic.w	r3, r3, #12
 8002400:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002408:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800240c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	4313      	orrs	r3, r2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	011a      	lsls	r2, r3, #4
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	031b      	lsls	r3, r3, #12
 800242c:	4313      	orrs	r3, r2
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800243a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002442:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	695b      	ldr	r3, [r3, #20]
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	4313      	orrs	r3, r2
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2201      	movs	r2, #1
 8002492:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4a46      	ldr	r2, [pc, #280]	@ (80025d4 <TIM_Base_SetConfig+0x12c>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d013      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024c6:	d00f      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a43      	ldr	r2, [pc, #268]	@ (80025d8 <TIM_Base_SetConfig+0x130>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d00b      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a42      	ldr	r2, [pc, #264]	@ (80025dc <TIM_Base_SetConfig+0x134>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d007      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a41      	ldr	r2, [pc, #260]	@ (80025e0 <TIM_Base_SetConfig+0x138>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d003      	beq.n	80024e8 <TIM_Base_SetConfig+0x40>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a40      	ldr	r2, [pc, #256]	@ (80025e4 <TIM_Base_SetConfig+0x13c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d108      	bne.n	80024fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a35      	ldr	r2, [pc, #212]	@ (80025d4 <TIM_Base_SetConfig+0x12c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02b      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002508:	d027      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a32      	ldr	r2, [pc, #200]	@ (80025d8 <TIM_Base_SetConfig+0x130>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d023      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a31      	ldr	r2, [pc, #196]	@ (80025dc <TIM_Base_SetConfig+0x134>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d01f      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a30      	ldr	r2, [pc, #192]	@ (80025e0 <TIM_Base_SetConfig+0x138>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01b      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a2f      	ldr	r2, [pc, #188]	@ (80025e4 <TIM_Base_SetConfig+0x13c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d017      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a2e      	ldr	r2, [pc, #184]	@ (80025e8 <TIM_Base_SetConfig+0x140>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d013      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a2d      	ldr	r2, [pc, #180]	@ (80025ec <TIM_Base_SetConfig+0x144>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d00f      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a2c      	ldr	r2, [pc, #176]	@ (80025f0 <TIM_Base_SetConfig+0x148>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00b      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a2b      	ldr	r2, [pc, #172]	@ (80025f4 <TIM_Base_SetConfig+0x14c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d007      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a2a      	ldr	r2, [pc, #168]	@ (80025f8 <TIM_Base_SetConfig+0x150>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_Base_SetConfig+0xb2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a29      	ldr	r2, [pc, #164]	@ (80025fc <TIM_Base_SetConfig+0x154>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d108      	bne.n	800256c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a10      	ldr	r2, [pc, #64]	@ (80025d4 <TIM_Base_SetConfig+0x12c>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d003      	beq.n	80025a0 <TIM_Base_SetConfig+0xf8>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a12      	ldr	r2, [pc, #72]	@ (80025e4 <TIM_Base_SetConfig+0x13c>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d103      	bne.n	80025a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f023 0201 	bic.w	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	611a      	str	r2, [r3, #16]
  }
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40000800 	.word	0x40000800
 80025e0:	40000c00 	.word	0x40000c00
 80025e4:	40010400 	.word	0x40010400
 80025e8:	40014000 	.word	0x40014000
 80025ec:	40014400 	.word	0x40014400
 80025f0:	40014800 	.word	0x40014800
 80025f4:	40001800 	.word	0x40001800
 80025f8:	40001c00 	.word	0x40001c00
 80025fc:	40002000 	.word	0x40002000

08002600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d101      	bne.n	8002618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002614:	2302      	movs	r3, #2
 8002616:	e05a      	b.n	80026ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2202      	movs	r2, #2
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800263e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68fa      	ldr	r2, [r7, #12]
 8002646:	4313      	orrs	r3, r2
 8002648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d022      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002664:	d01d      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d018      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a1b      	ldr	r2, [pc, #108]	@ (80026e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a1a      	ldr	r2, [pc, #104]	@ (80026e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d00e      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a17      	ldr	r2, [pc, #92]	@ (80026f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a15      	ldr	r2, [pc, #84]	@ (80026f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d10c      	bne.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40000400 	.word	0x40000400
 80026e4:	40000800 	.word	0x40000800
 80026e8:	40000c00 	.word	0x40000c00
 80026ec:	40010400 	.word	0x40010400
 80026f0:	40014000 	.word	0x40014000
 80026f4:	40001800 	.word	0x40001800

080026f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e042      	b.n	8002790 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fbd8 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	@ 0x24
 8002728:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800273a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f97f 	bl	8002a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691a      	ldr	r2, [r3, #16]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2220      	movs	r2, #32
 8002784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08a      	sub	sp, #40	@ 0x28
 800279c:	af02      	add	r7, sp, #8
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027a8:	2300      	movs	r3, #0
 80027aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	2b20      	cmp	r3, #32
 80027b6:	f040 8081 	bne.w	80028bc <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d002      	beq.n	80027c6 <HAL_UART_Receive+0x2e>
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e079      	b.n	80028be <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2222      	movs	r2, #34	@ 0x22
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2200      	movs	r2, #0
 80027dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027de:	f7fe fd35 	bl	800124c <HAL_GetTick>
 80027e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	88fa      	ldrh	r2, [r7, #6]
 80027e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	88fa      	ldrh	r2, [r7, #6]
 80027ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f8:	d108      	bne.n	800280c <HAL_UART_Receive+0x74>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d104      	bne.n	800280c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	61bb      	str	r3, [r7, #24]
 800280a:	e003      	b.n	8002814 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002810:	2300      	movs	r3, #0
 8002812:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002814:	e047      	b.n	80028a6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2200      	movs	r2, #0
 800281e:	2120      	movs	r1, #32
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 f850 	bl	80028c6 <UART_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2220      	movs	r2, #32
 8002830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e042      	b.n	80028be <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10c      	bne.n	8002858 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	b29b      	uxth	r3, r3
 8002846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800284a:	b29a      	uxth	r2, r3
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	3302      	adds	r3, #2
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	e01f      	b.n	8002898 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002860:	d007      	beq.n	8002872 <HAL_UART_Receive+0xda>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <HAL_UART_Receive+0xe8>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	701a      	strb	r2, [r3, #0]
 800287e:	e008      	b.n	8002892 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	b2db      	uxtb	r3, r3
 8002888:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800288c:	b2da      	uxtb	r2, r3
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3301      	adds	r3, #1
 8002896:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1b2      	bne.n	8002816 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e000      	b.n	80028be <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b086      	sub	sp, #24
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	60b9      	str	r1, [r7, #8]
 80028d0:	603b      	str	r3, [r7, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d6:	e03b      	b.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d037      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e0:	f7fe fcb4 	bl	800124c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	6a3a      	ldr	r2, [r7, #32]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d302      	bcc.n	80028f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e03a      	b.n	8002970 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	2b80      	cmp	r3, #128	@ 0x80
 800290c:	d020      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8a>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2b40      	cmp	r3, #64	@ 0x40
 8002912:	d01d      	beq.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0308 	and.w	r3, r3, #8
 800291e:	2b08      	cmp	r3, #8
 8002920:	d116      	bne.n	8002950 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002922:	2300      	movs	r3, #0
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f000 f81d 	bl	8002978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2208      	movs	r2, #8
 8002942:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e00f      	b.n	8002970 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	429a      	cmp	r2, r3
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	461a      	mov	r2, r3
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	429a      	cmp	r2, r3
 800296c:	d0b4      	beq.n	80028d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002978:	b480      	push	{r7}
 800297a:	b095      	sub	sp, #84	@ 0x54
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	330c      	adds	r3, #12
 8002986:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800298a:	e853 3f00 	ldrex	r3, [r3]
 800298e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002992:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002996:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	330c      	adds	r3, #12
 800299e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80029a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80029a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80029a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029a8:	e841 2300 	strex	r3, r2, [r1]
 80029ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80029ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1e5      	bne.n	8002980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	3314      	adds	r3, #20
 80029ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	e853 3f00 	ldrex	r3, [r3]
 80029c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3314      	adds	r3, #20
 80029d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80029d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029dc:	e841 2300 	strex	r3, r2, [r1]
 80029e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1e5      	bne.n	80029b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d119      	bne.n	8002a24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	330c      	adds	r3, #12
 80029f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	e853 3f00 	ldrex	r3, [r3]
 80029fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	f023 0310 	bic.w	r3, r3, #16
 8002a06:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	330c      	adds	r3, #12
 8002a0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a10:	61ba      	str	r2, [r7, #24]
 8002a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a14:	6979      	ldr	r1, [r7, #20]
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1e5      	bne.n	80029f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002a32:	bf00      	nop
 8002a34:	3754      	adds	r7, #84	@ 0x54
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a44:	b0c0      	sub	sp, #256	@ 0x100
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a5c:	68d9      	ldr	r1, [r3, #12]
 8002a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	ea40 0301 	orr.w	r3, r0, r1
 8002a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002a98:	f021 010c 	bic.w	r1, r1, #12
 8002a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aba:	6999      	ldr	r1, [r3, #24]
 8002abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	ea40 0301 	orr.w	r3, r0, r1
 8002ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4b8f      	ldr	r3, [pc, #572]	@ (8002d0c <UART_SetConfig+0x2cc>)
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d005      	beq.n	8002ae0 <UART_SetConfig+0xa0>
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b8d      	ldr	r3, [pc, #564]	@ (8002d10 <UART_SetConfig+0x2d0>)
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d104      	bne.n	8002aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ae0:	f7fe ff5a 	bl	8001998 <HAL_RCC_GetPCLK2Freq>
 8002ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002ae8:	e003      	b.n	8002af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002aea:	f7fe ff41 	bl	8001970 <HAL_RCC_GetPCLK1Freq>
 8002aee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002afc:	f040 810c 	bne.w	8002d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b04:	2200      	movs	r2, #0
 8002b06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	1891      	adds	r1, r2, r2
 8002b18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002b1a:	415b      	adcs	r3, r3
 8002b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002b22:	4621      	mov	r1, r4
 8002b24:	eb12 0801 	adds.w	r8, r2, r1
 8002b28:	4629      	mov	r1, r5
 8002b2a:	eb43 0901 	adc.w	r9, r3, r1
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 0300 	mov.w	r3, #0
 8002b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b42:	4690      	mov	r8, r2
 8002b44:	4699      	mov	r9, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	eb18 0303 	adds.w	r3, r8, r3
 8002b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b50:	462b      	mov	r3, r5
 8002b52:	eb49 0303 	adc.w	r3, r9, r3
 8002b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b6e:	460b      	mov	r3, r1
 8002b70:	18db      	adds	r3, r3, r3
 8002b72:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b74:	4613      	mov	r3, r2
 8002b76:	eb42 0303 	adc.w	r3, r2, r3
 8002b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002b84:	f7fd fb94 	bl	80002b0 <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4b61      	ldr	r3, [pc, #388]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	011c      	lsls	r4, r3, #4
 8002b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ba8:	4642      	mov	r2, r8
 8002baa:	464b      	mov	r3, r9
 8002bac:	1891      	adds	r1, r2, r2
 8002bae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002bb0:	415b      	adcs	r3, r3
 8002bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002bb8:	4641      	mov	r1, r8
 8002bba:	eb12 0a01 	adds.w	sl, r2, r1
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bd8:	4692      	mov	sl, r2
 8002bda:	469b      	mov	fp, r3
 8002bdc:	4643      	mov	r3, r8
 8002bde:	eb1a 0303 	adds.w	r3, sl, r3
 8002be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002be6:	464b      	mov	r3, r9
 8002be8:	eb4b 0303 	adc.w	r3, fp, r3
 8002bec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002c04:	460b      	mov	r3, r1
 8002c06:	18db      	adds	r3, r3, r3
 8002c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	eb42 0303 	adc.w	r3, r2, r3
 8002c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8002c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002c1a:	f7fd fb49 	bl	80002b0 <__aeabi_uldivmod>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002c26:	fba3 2301 	umull	r2, r3, r3, r1
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	2264      	movs	r2, #100	@ 0x64
 8002c2e:	fb02 f303 	mul.w	r3, r2, r3
 8002c32:	1acb      	subs	r3, r1, r3
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002c3a:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c40:	095b      	lsrs	r3, r3, #5
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002c48:	441c      	add	r4, r3
 8002c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002c64:	415b      	adcs	r3, r3
 8002c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	1851      	adds	r1, r2, r1
 8002c70:	6339      	str	r1, [r7, #48]	@ 0x30
 8002c72:	4649      	mov	r1, r9
 8002c74:	414b      	adcs	r3, r1
 8002c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002c84:	4659      	mov	r1, fp
 8002c86:	00cb      	lsls	r3, r1, #3
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8e:	4651      	mov	r1, sl
 8002c90:	00ca      	lsls	r2, r1, #3
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ca0:	464b      	mov	r3, r9
 8002ca2:	460a      	mov	r2, r1
 8002ca4:	eb42 0303 	adc.w	r3, r2, r3
 8002ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	18db      	adds	r3, r3, r3
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	eb42 0303 	adc.w	r3, r2, r3
 8002ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002cd6:	f7fd faeb 	bl	80002b0 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4b0d      	ldr	r3, [pc, #52]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce4:	095b      	lsrs	r3, r3, #5
 8002ce6:	2164      	movs	r1, #100	@ 0x64
 8002ce8:	fb01 f303 	mul.w	r3, r1, r3
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	3332      	adds	r3, #50	@ 0x32
 8002cf2:	4a08      	ldr	r2, [pc, #32]	@ (8002d14 <UART_SetConfig+0x2d4>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	095b      	lsrs	r3, r3, #5
 8002cfa:	f003 0207 	and.w	r2, r3, #7
 8002cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4422      	add	r2, r4
 8002d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002d08:	e106      	b.n	8002f18 <UART_SetConfig+0x4d8>
 8002d0a:	bf00      	nop
 8002d0c:	40011000 	.word	0x40011000
 8002d10:	40011400 	.word	0x40011400
 8002d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002d2a:	4642      	mov	r2, r8
 8002d2c:	464b      	mov	r3, r9
 8002d2e:	1891      	adds	r1, r2, r2
 8002d30:	6239      	str	r1, [r7, #32]
 8002d32:	415b      	adcs	r3, r3
 8002d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002d3a:	4641      	mov	r1, r8
 8002d3c:	1854      	adds	r4, r2, r1
 8002d3e:	4649      	mov	r1, r9
 8002d40:	eb43 0501 	adc.w	r5, r3, r1
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	00eb      	lsls	r3, r5, #3
 8002d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d52:	00e2      	lsls	r2, r4, #3
 8002d54:	4614      	mov	r4, r2
 8002d56:	461d      	mov	r5, r3
 8002d58:	4643      	mov	r3, r8
 8002d5a:	18e3      	adds	r3, r4, r3
 8002d5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d60:	464b      	mov	r3, r9
 8002d62:	eb45 0303 	adc.w	r3, r5, r3
 8002d66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d86:	4629      	mov	r1, r5
 8002d88:	008b      	lsls	r3, r1, #2
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d90:	4621      	mov	r1, r4
 8002d92:	008a      	lsls	r2, r1, #2
 8002d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002d98:	f7fd fa8a 	bl	80002b0 <__aeabi_uldivmod>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4b60      	ldr	r3, [pc, #384]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002da2:	fba3 2302 	umull	r2, r3, r3, r2
 8002da6:	095b      	lsrs	r3, r3, #5
 8002da8:	011c      	lsls	r4, r3, #4
 8002daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002db4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002dbc:	4642      	mov	r2, r8
 8002dbe:	464b      	mov	r3, r9
 8002dc0:	1891      	adds	r1, r2, r2
 8002dc2:	61b9      	str	r1, [r7, #24]
 8002dc4:	415b      	adcs	r3, r3
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dcc:	4641      	mov	r1, r8
 8002dce:	1851      	adds	r1, r2, r1
 8002dd0:	6139      	str	r1, [r7, #16]
 8002dd2:	4649      	mov	r1, r9
 8002dd4:	414b      	adcs	r3, r1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de4:	4659      	mov	r1, fp
 8002de6:	00cb      	lsls	r3, r1, #3
 8002de8:	4651      	mov	r1, sl
 8002dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dee:	4651      	mov	r1, sl
 8002df0:	00ca      	lsls	r2, r1, #3
 8002df2:	4610      	mov	r0, r2
 8002df4:	4619      	mov	r1, r3
 8002df6:	4603      	mov	r3, r0
 8002df8:	4642      	mov	r2, r8
 8002dfa:	189b      	adds	r3, r3, r2
 8002dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e00:	464b      	mov	r3, r9
 8002e02:	460a      	mov	r2, r1
 8002e04:	eb42 0303 	adc.w	r3, r2, r3
 8002e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002e24:	4649      	mov	r1, r9
 8002e26:	008b      	lsls	r3, r1, #2
 8002e28:	4641      	mov	r1, r8
 8002e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002e2e:	4641      	mov	r1, r8
 8002e30:	008a      	lsls	r2, r1, #2
 8002e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002e36:	f7fd fa3b 	bl	80002b0 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4b38      	ldr	r3, [pc, #224]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002e42:	fba3 2301 	umull	r2, r3, r3, r1
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2264      	movs	r2, #100	@ 0x64
 8002e4a:	fb02 f303 	mul.w	r3, r2, r3
 8002e4e:	1acb      	subs	r3, r1, r3
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	3332      	adds	r3, #50	@ 0x32
 8002e54:	4a33      	ldr	r2, [pc, #204]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	095b      	lsrs	r3, r3, #5
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e60:	441c      	add	r4, r3
 8002e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e66:	2200      	movs	r2, #0
 8002e68:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8002e6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002e70:	4642      	mov	r2, r8
 8002e72:	464b      	mov	r3, r9
 8002e74:	1891      	adds	r1, r2, r2
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	415b      	adcs	r3, r3
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e80:	4641      	mov	r1, r8
 8002e82:	1851      	adds	r1, r2, r1
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	4649      	mov	r1, r9
 8002e88:	414b      	adcs	r3, r1
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002e98:	4659      	mov	r1, fp
 8002e9a:	00cb      	lsls	r3, r1, #3
 8002e9c:	4651      	mov	r1, sl
 8002e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ea2:	4651      	mov	r1, sl
 8002ea4:	00ca      	lsls	r2, r1, #3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4603      	mov	r3, r0
 8002eac:	4642      	mov	r2, r8
 8002eae:	189b      	adds	r3, r3, r2
 8002eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eb2:	464b      	mov	r3, r9
 8002eb4:	460a      	mov	r2, r1
 8002eb6:	eb42 0303 	adc.w	r3, r2, r3
 8002eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8002ec6:	667a      	str	r2, [r7, #100]	@ 0x64
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	008b      	lsls	r3, r1, #2
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ede:	4641      	mov	r1, r8
 8002ee0:	008a      	lsls	r2, r1, #2
 8002ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002ee6:	f7fd f9e3 	bl	80002b0 <__aeabi_uldivmod>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4b0d      	ldr	r3, [pc, #52]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef4:	095b      	lsrs	r3, r3, #5
 8002ef6:	2164      	movs	r1, #100	@ 0x64
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	3332      	adds	r3, #50	@ 0x32
 8002f02:	4a08      	ldr	r2, [pc, #32]	@ (8002f24 <UART_SetConfig+0x4e4>)
 8002f04:	fba2 2303 	umull	r2, r3, r2, r3
 8002f08:	095b      	lsrs	r3, r3, #5
 8002f0a:	f003 020f 	and.w	r2, r3, #15
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4422      	add	r2, r4
 8002f16:	609a      	str	r2, [r3, #8]
}
 8002f18:	bf00      	nop
 8002f1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f24:	51eb851f 	.word	0x51eb851f

08002f28 <std>:
 8002f28:	2300      	movs	r3, #0
 8002f2a:	b510      	push	{r4, lr}
 8002f2c:	4604      	mov	r4, r0
 8002f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8002f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002f36:	6083      	str	r3, [r0, #8]
 8002f38:	8181      	strh	r1, [r0, #12]
 8002f3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002f3c:	81c2      	strh	r2, [r0, #14]
 8002f3e:	6183      	str	r3, [r0, #24]
 8002f40:	4619      	mov	r1, r3
 8002f42:	2208      	movs	r2, #8
 8002f44:	305c      	adds	r0, #92	@ 0x5c
 8002f46:	f000 f906 	bl	8003156 <memset>
 8002f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f80 <std+0x58>)
 8002f4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002f84 <std+0x5c>)
 8002f50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <std+0x60>)
 8002f54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002f56:	4b0d      	ldr	r3, [pc, #52]	@ (8002f8c <std+0x64>)
 8002f58:	6323      	str	r3, [r4, #48]	@ 0x30
 8002f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002f90 <std+0x68>)
 8002f5c:	6224      	str	r4, [r4, #32]
 8002f5e:	429c      	cmp	r4, r3
 8002f60:	d006      	beq.n	8002f70 <std+0x48>
 8002f62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002f66:	4294      	cmp	r4, r2
 8002f68:	d002      	beq.n	8002f70 <std+0x48>
 8002f6a:	33d0      	adds	r3, #208	@ 0xd0
 8002f6c:	429c      	cmp	r4, r3
 8002f6e:	d105      	bne.n	8002f7c <std+0x54>
 8002f70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f78:	f000 b966 	b.w	8003248 <__retarget_lock_init_recursive>
 8002f7c:	bd10      	pop	{r4, pc}
 8002f7e:	bf00      	nop
 8002f80:	080030d1 	.word	0x080030d1
 8002f84:	080030f3 	.word	0x080030f3
 8002f88:	0800312b 	.word	0x0800312b
 8002f8c:	0800314f 	.word	0x0800314f
 8002f90:	200001fc 	.word	0x200001fc

08002f94 <stdio_exit_handler>:
 8002f94:	4a02      	ldr	r2, [pc, #8]	@ (8002fa0 <stdio_exit_handler+0xc>)
 8002f96:	4903      	ldr	r1, [pc, #12]	@ (8002fa4 <stdio_exit_handler+0x10>)
 8002f98:	4803      	ldr	r0, [pc, #12]	@ (8002fa8 <stdio_exit_handler+0x14>)
 8002f9a:	f000 b869 	b.w	8003070 <_fwalk_sglue>
 8002f9e:	bf00      	nop
 8002fa0:	2000000c 	.word	0x2000000c
 8002fa4:	08003ae9 	.word	0x08003ae9
 8002fa8:	2000001c 	.word	0x2000001c

08002fac <cleanup_stdio>:
 8002fac:	6841      	ldr	r1, [r0, #4]
 8002fae:	4b0c      	ldr	r3, [pc, #48]	@ (8002fe0 <cleanup_stdio+0x34>)
 8002fb0:	4299      	cmp	r1, r3
 8002fb2:	b510      	push	{r4, lr}
 8002fb4:	4604      	mov	r4, r0
 8002fb6:	d001      	beq.n	8002fbc <cleanup_stdio+0x10>
 8002fb8:	f000 fd96 	bl	8003ae8 <_fflush_r>
 8002fbc:	68a1      	ldr	r1, [r4, #8]
 8002fbe:	4b09      	ldr	r3, [pc, #36]	@ (8002fe4 <cleanup_stdio+0x38>)
 8002fc0:	4299      	cmp	r1, r3
 8002fc2:	d002      	beq.n	8002fca <cleanup_stdio+0x1e>
 8002fc4:	4620      	mov	r0, r4
 8002fc6:	f000 fd8f 	bl	8003ae8 <_fflush_r>
 8002fca:	68e1      	ldr	r1, [r4, #12]
 8002fcc:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <cleanup_stdio+0x3c>)
 8002fce:	4299      	cmp	r1, r3
 8002fd0:	d004      	beq.n	8002fdc <cleanup_stdio+0x30>
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fd8:	f000 bd86 	b.w	8003ae8 <_fflush_r>
 8002fdc:	bd10      	pop	{r4, pc}
 8002fde:	bf00      	nop
 8002fe0:	200001fc 	.word	0x200001fc
 8002fe4:	20000264 	.word	0x20000264
 8002fe8:	200002cc 	.word	0x200002cc

08002fec <global_stdio_init.part.0>:
 8002fec:	b510      	push	{r4, lr}
 8002fee:	4b0b      	ldr	r3, [pc, #44]	@ (800301c <global_stdio_init.part.0+0x30>)
 8002ff0:	4c0b      	ldr	r4, [pc, #44]	@ (8003020 <global_stdio_init.part.0+0x34>)
 8002ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8003024 <global_stdio_init.part.0+0x38>)
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	4620      	mov	r0, r4
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2104      	movs	r1, #4
 8002ffc:	f7ff ff94 	bl	8002f28 <std>
 8003000:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003004:	2201      	movs	r2, #1
 8003006:	2109      	movs	r1, #9
 8003008:	f7ff ff8e 	bl	8002f28 <std>
 800300c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003010:	2202      	movs	r2, #2
 8003012:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003016:	2112      	movs	r1, #18
 8003018:	f7ff bf86 	b.w	8002f28 <std>
 800301c:	20000334 	.word	0x20000334
 8003020:	200001fc 	.word	0x200001fc
 8003024:	08002f95 	.word	0x08002f95

08003028 <__sfp_lock_acquire>:
 8003028:	4801      	ldr	r0, [pc, #4]	@ (8003030 <__sfp_lock_acquire+0x8>)
 800302a:	f000 b90e 	b.w	800324a <__retarget_lock_acquire_recursive>
 800302e:	bf00      	nop
 8003030:	2000033d 	.word	0x2000033d

08003034 <__sfp_lock_release>:
 8003034:	4801      	ldr	r0, [pc, #4]	@ (800303c <__sfp_lock_release+0x8>)
 8003036:	f000 b909 	b.w	800324c <__retarget_lock_release_recursive>
 800303a:	bf00      	nop
 800303c:	2000033d 	.word	0x2000033d

08003040 <__sinit>:
 8003040:	b510      	push	{r4, lr}
 8003042:	4604      	mov	r4, r0
 8003044:	f7ff fff0 	bl	8003028 <__sfp_lock_acquire>
 8003048:	6a23      	ldr	r3, [r4, #32]
 800304a:	b11b      	cbz	r3, 8003054 <__sinit+0x14>
 800304c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003050:	f7ff bff0 	b.w	8003034 <__sfp_lock_release>
 8003054:	4b04      	ldr	r3, [pc, #16]	@ (8003068 <__sinit+0x28>)
 8003056:	6223      	str	r3, [r4, #32]
 8003058:	4b04      	ldr	r3, [pc, #16]	@ (800306c <__sinit+0x2c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1f5      	bne.n	800304c <__sinit+0xc>
 8003060:	f7ff ffc4 	bl	8002fec <global_stdio_init.part.0>
 8003064:	e7f2      	b.n	800304c <__sinit+0xc>
 8003066:	bf00      	nop
 8003068:	08002fad 	.word	0x08002fad
 800306c:	20000334 	.word	0x20000334

08003070 <_fwalk_sglue>:
 8003070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003074:	4607      	mov	r7, r0
 8003076:	4688      	mov	r8, r1
 8003078:	4614      	mov	r4, r2
 800307a:	2600      	movs	r6, #0
 800307c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003080:	f1b9 0901 	subs.w	r9, r9, #1
 8003084:	d505      	bpl.n	8003092 <_fwalk_sglue+0x22>
 8003086:	6824      	ldr	r4, [r4, #0]
 8003088:	2c00      	cmp	r4, #0
 800308a:	d1f7      	bne.n	800307c <_fwalk_sglue+0xc>
 800308c:	4630      	mov	r0, r6
 800308e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003092:	89ab      	ldrh	r3, [r5, #12]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d907      	bls.n	80030a8 <_fwalk_sglue+0x38>
 8003098:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800309c:	3301      	adds	r3, #1
 800309e:	d003      	beq.n	80030a8 <_fwalk_sglue+0x38>
 80030a0:	4629      	mov	r1, r5
 80030a2:	4638      	mov	r0, r7
 80030a4:	47c0      	blx	r8
 80030a6:	4306      	orrs	r6, r0
 80030a8:	3568      	adds	r5, #104	@ 0x68
 80030aa:	e7e9      	b.n	8003080 <_fwalk_sglue+0x10>

080030ac <iprintf>:
 80030ac:	b40f      	push	{r0, r1, r2, r3}
 80030ae:	b507      	push	{r0, r1, r2, lr}
 80030b0:	4906      	ldr	r1, [pc, #24]	@ (80030cc <iprintf+0x20>)
 80030b2:	ab04      	add	r3, sp, #16
 80030b4:	6808      	ldr	r0, [r1, #0]
 80030b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80030ba:	6881      	ldr	r1, [r0, #8]
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	f000 f9e9 	bl	8003494 <_vfiprintf_r>
 80030c2:	b003      	add	sp, #12
 80030c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80030c8:	b004      	add	sp, #16
 80030ca:	4770      	bx	lr
 80030cc:	20000018 	.word	0x20000018

080030d0 <__sread>:
 80030d0:	b510      	push	{r4, lr}
 80030d2:	460c      	mov	r4, r1
 80030d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80030d8:	f000 f868 	bl	80031ac <_read_r>
 80030dc:	2800      	cmp	r0, #0
 80030de:	bfab      	itete	ge
 80030e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80030e2:	89a3      	ldrhlt	r3, [r4, #12]
 80030e4:	181b      	addge	r3, r3, r0
 80030e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80030ea:	bfac      	ite	ge
 80030ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80030ee:	81a3      	strhlt	r3, [r4, #12]
 80030f0:	bd10      	pop	{r4, pc}

080030f2 <__swrite>:
 80030f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f6:	461f      	mov	r7, r3
 80030f8:	898b      	ldrh	r3, [r1, #12]
 80030fa:	05db      	lsls	r3, r3, #23
 80030fc:	4605      	mov	r5, r0
 80030fe:	460c      	mov	r4, r1
 8003100:	4616      	mov	r6, r2
 8003102:	d505      	bpl.n	8003110 <__swrite+0x1e>
 8003104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003108:	2302      	movs	r3, #2
 800310a:	2200      	movs	r2, #0
 800310c:	f000 f83c 	bl	8003188 <_lseek_r>
 8003110:	89a3      	ldrh	r3, [r4, #12]
 8003112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003116:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800311a:	81a3      	strh	r3, [r4, #12]
 800311c:	4632      	mov	r2, r6
 800311e:	463b      	mov	r3, r7
 8003120:	4628      	mov	r0, r5
 8003122:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003126:	f000 b853 	b.w	80031d0 <_write_r>

0800312a <__sseek>:
 800312a:	b510      	push	{r4, lr}
 800312c:	460c      	mov	r4, r1
 800312e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003132:	f000 f829 	bl	8003188 <_lseek_r>
 8003136:	1c43      	adds	r3, r0, #1
 8003138:	89a3      	ldrh	r3, [r4, #12]
 800313a:	bf15      	itete	ne
 800313c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800313e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003142:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003146:	81a3      	strheq	r3, [r4, #12]
 8003148:	bf18      	it	ne
 800314a:	81a3      	strhne	r3, [r4, #12]
 800314c:	bd10      	pop	{r4, pc}

0800314e <__sclose>:
 800314e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003152:	f000 b809 	b.w	8003168 <_close_r>

08003156 <memset>:
 8003156:	4402      	add	r2, r0
 8003158:	4603      	mov	r3, r0
 800315a:	4293      	cmp	r3, r2
 800315c:	d100      	bne.n	8003160 <memset+0xa>
 800315e:	4770      	bx	lr
 8003160:	f803 1b01 	strb.w	r1, [r3], #1
 8003164:	e7f9      	b.n	800315a <memset+0x4>
	...

08003168 <_close_r>:
 8003168:	b538      	push	{r3, r4, r5, lr}
 800316a:	4d06      	ldr	r5, [pc, #24]	@ (8003184 <_close_r+0x1c>)
 800316c:	2300      	movs	r3, #0
 800316e:	4604      	mov	r4, r0
 8003170:	4608      	mov	r0, r1
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	f7fd ff5e 	bl	8001034 <_close>
 8003178:	1c43      	adds	r3, r0, #1
 800317a:	d102      	bne.n	8003182 <_close_r+0x1a>
 800317c:	682b      	ldr	r3, [r5, #0]
 800317e:	b103      	cbz	r3, 8003182 <_close_r+0x1a>
 8003180:	6023      	str	r3, [r4, #0]
 8003182:	bd38      	pop	{r3, r4, r5, pc}
 8003184:	20000338 	.word	0x20000338

08003188 <_lseek_r>:
 8003188:	b538      	push	{r3, r4, r5, lr}
 800318a:	4d07      	ldr	r5, [pc, #28]	@ (80031a8 <_lseek_r+0x20>)
 800318c:	4604      	mov	r4, r0
 800318e:	4608      	mov	r0, r1
 8003190:	4611      	mov	r1, r2
 8003192:	2200      	movs	r2, #0
 8003194:	602a      	str	r2, [r5, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	f7fd ff73 	bl	8001082 <_lseek>
 800319c:	1c43      	adds	r3, r0, #1
 800319e:	d102      	bne.n	80031a6 <_lseek_r+0x1e>
 80031a0:	682b      	ldr	r3, [r5, #0]
 80031a2:	b103      	cbz	r3, 80031a6 <_lseek_r+0x1e>
 80031a4:	6023      	str	r3, [r4, #0]
 80031a6:	bd38      	pop	{r3, r4, r5, pc}
 80031a8:	20000338 	.word	0x20000338

080031ac <_read_r>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	4d07      	ldr	r5, [pc, #28]	@ (80031cc <_read_r+0x20>)
 80031b0:	4604      	mov	r4, r0
 80031b2:	4608      	mov	r0, r1
 80031b4:	4611      	mov	r1, r2
 80031b6:	2200      	movs	r2, #0
 80031b8:	602a      	str	r2, [r5, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	f7fd ff01 	bl	8000fc2 <_read>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_read_r+0x1e>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_read_r+0x1e>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	20000338 	.word	0x20000338

080031d0 <_write_r>:
 80031d0:	b538      	push	{r3, r4, r5, lr}
 80031d2:	4d07      	ldr	r5, [pc, #28]	@ (80031f0 <_write_r+0x20>)
 80031d4:	4604      	mov	r4, r0
 80031d6:	4608      	mov	r0, r1
 80031d8:	4611      	mov	r1, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	602a      	str	r2, [r5, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	f7fd ff0c 	bl	8000ffc <_write>
 80031e4:	1c43      	adds	r3, r0, #1
 80031e6:	d102      	bne.n	80031ee <_write_r+0x1e>
 80031e8:	682b      	ldr	r3, [r5, #0]
 80031ea:	b103      	cbz	r3, 80031ee <_write_r+0x1e>
 80031ec:	6023      	str	r3, [r4, #0]
 80031ee:	bd38      	pop	{r3, r4, r5, pc}
 80031f0:	20000338 	.word	0x20000338

080031f4 <__errno>:
 80031f4:	4b01      	ldr	r3, [pc, #4]	@ (80031fc <__errno+0x8>)
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000018 	.word	0x20000018

08003200 <__libc_init_array>:
 8003200:	b570      	push	{r4, r5, r6, lr}
 8003202:	4d0d      	ldr	r5, [pc, #52]	@ (8003238 <__libc_init_array+0x38>)
 8003204:	4c0d      	ldr	r4, [pc, #52]	@ (800323c <__libc_init_array+0x3c>)
 8003206:	1b64      	subs	r4, r4, r5
 8003208:	10a4      	asrs	r4, r4, #2
 800320a:	2600      	movs	r6, #0
 800320c:	42a6      	cmp	r6, r4
 800320e:	d109      	bne.n	8003224 <__libc_init_array+0x24>
 8003210:	4d0b      	ldr	r5, [pc, #44]	@ (8003240 <__libc_init_array+0x40>)
 8003212:	4c0c      	ldr	r4, [pc, #48]	@ (8003244 <__libc_init_array+0x44>)
 8003214:	f000 fdb8 	bl	8003d88 <_init>
 8003218:	1b64      	subs	r4, r4, r5
 800321a:	10a4      	asrs	r4, r4, #2
 800321c:	2600      	movs	r6, #0
 800321e:	42a6      	cmp	r6, r4
 8003220:	d105      	bne.n	800322e <__libc_init_array+0x2e>
 8003222:	bd70      	pop	{r4, r5, r6, pc}
 8003224:	f855 3b04 	ldr.w	r3, [r5], #4
 8003228:	4798      	blx	r3
 800322a:	3601      	adds	r6, #1
 800322c:	e7ee      	b.n	800320c <__libc_init_array+0xc>
 800322e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003232:	4798      	blx	r3
 8003234:	3601      	adds	r6, #1
 8003236:	e7f2      	b.n	800321e <__libc_init_array+0x1e>
 8003238:	08003e2c 	.word	0x08003e2c
 800323c:	08003e2c 	.word	0x08003e2c
 8003240:	08003e2c 	.word	0x08003e2c
 8003244:	08003e30 	.word	0x08003e30

08003248 <__retarget_lock_init_recursive>:
 8003248:	4770      	bx	lr

0800324a <__retarget_lock_acquire_recursive>:
 800324a:	4770      	bx	lr

0800324c <__retarget_lock_release_recursive>:
 800324c:	4770      	bx	lr
	...

08003250 <_free_r>:
 8003250:	b538      	push	{r3, r4, r5, lr}
 8003252:	4605      	mov	r5, r0
 8003254:	2900      	cmp	r1, #0
 8003256:	d041      	beq.n	80032dc <_free_r+0x8c>
 8003258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800325c:	1f0c      	subs	r4, r1, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	bfb8      	it	lt
 8003262:	18e4      	addlt	r4, r4, r3
 8003264:	f000 f8e0 	bl	8003428 <__malloc_lock>
 8003268:	4a1d      	ldr	r2, [pc, #116]	@ (80032e0 <_free_r+0x90>)
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	b933      	cbnz	r3, 800327c <_free_r+0x2c>
 800326e:	6063      	str	r3, [r4, #4]
 8003270:	6014      	str	r4, [r2, #0]
 8003272:	4628      	mov	r0, r5
 8003274:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003278:	f000 b8dc 	b.w	8003434 <__malloc_unlock>
 800327c:	42a3      	cmp	r3, r4
 800327e:	d908      	bls.n	8003292 <_free_r+0x42>
 8003280:	6820      	ldr	r0, [r4, #0]
 8003282:	1821      	adds	r1, r4, r0
 8003284:	428b      	cmp	r3, r1
 8003286:	bf01      	itttt	eq
 8003288:	6819      	ldreq	r1, [r3, #0]
 800328a:	685b      	ldreq	r3, [r3, #4]
 800328c:	1809      	addeq	r1, r1, r0
 800328e:	6021      	streq	r1, [r4, #0]
 8003290:	e7ed      	b.n	800326e <_free_r+0x1e>
 8003292:	461a      	mov	r2, r3
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	b10b      	cbz	r3, 800329c <_free_r+0x4c>
 8003298:	42a3      	cmp	r3, r4
 800329a:	d9fa      	bls.n	8003292 <_free_r+0x42>
 800329c:	6811      	ldr	r1, [r2, #0]
 800329e:	1850      	adds	r0, r2, r1
 80032a0:	42a0      	cmp	r0, r4
 80032a2:	d10b      	bne.n	80032bc <_free_r+0x6c>
 80032a4:	6820      	ldr	r0, [r4, #0]
 80032a6:	4401      	add	r1, r0
 80032a8:	1850      	adds	r0, r2, r1
 80032aa:	4283      	cmp	r3, r0
 80032ac:	6011      	str	r1, [r2, #0]
 80032ae:	d1e0      	bne.n	8003272 <_free_r+0x22>
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	6053      	str	r3, [r2, #4]
 80032b6:	4408      	add	r0, r1
 80032b8:	6010      	str	r0, [r2, #0]
 80032ba:	e7da      	b.n	8003272 <_free_r+0x22>
 80032bc:	d902      	bls.n	80032c4 <_free_r+0x74>
 80032be:	230c      	movs	r3, #12
 80032c0:	602b      	str	r3, [r5, #0]
 80032c2:	e7d6      	b.n	8003272 <_free_r+0x22>
 80032c4:	6820      	ldr	r0, [r4, #0]
 80032c6:	1821      	adds	r1, r4, r0
 80032c8:	428b      	cmp	r3, r1
 80032ca:	bf04      	itt	eq
 80032cc:	6819      	ldreq	r1, [r3, #0]
 80032ce:	685b      	ldreq	r3, [r3, #4]
 80032d0:	6063      	str	r3, [r4, #4]
 80032d2:	bf04      	itt	eq
 80032d4:	1809      	addeq	r1, r1, r0
 80032d6:	6021      	streq	r1, [r4, #0]
 80032d8:	6054      	str	r4, [r2, #4]
 80032da:	e7ca      	b.n	8003272 <_free_r+0x22>
 80032dc:	bd38      	pop	{r3, r4, r5, pc}
 80032de:	bf00      	nop
 80032e0:	20000344 	.word	0x20000344

080032e4 <sbrk_aligned>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003324 <sbrk_aligned+0x40>)
 80032e8:	460c      	mov	r4, r1
 80032ea:	6831      	ldr	r1, [r6, #0]
 80032ec:	4605      	mov	r5, r0
 80032ee:	b911      	cbnz	r1, 80032f6 <sbrk_aligned+0x12>
 80032f0:	f000 fcb6 	bl	8003c60 <_sbrk_r>
 80032f4:	6030      	str	r0, [r6, #0]
 80032f6:	4621      	mov	r1, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	f000 fcb1 	bl	8003c60 <_sbrk_r>
 80032fe:	1c43      	adds	r3, r0, #1
 8003300:	d103      	bne.n	800330a <sbrk_aligned+0x26>
 8003302:	f04f 34ff 	mov.w	r4, #4294967295
 8003306:	4620      	mov	r0, r4
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	1cc4      	adds	r4, r0, #3
 800330c:	f024 0403 	bic.w	r4, r4, #3
 8003310:	42a0      	cmp	r0, r4
 8003312:	d0f8      	beq.n	8003306 <sbrk_aligned+0x22>
 8003314:	1a21      	subs	r1, r4, r0
 8003316:	4628      	mov	r0, r5
 8003318:	f000 fca2 	bl	8003c60 <_sbrk_r>
 800331c:	3001      	adds	r0, #1
 800331e:	d1f2      	bne.n	8003306 <sbrk_aligned+0x22>
 8003320:	e7ef      	b.n	8003302 <sbrk_aligned+0x1e>
 8003322:	bf00      	nop
 8003324:	20000340 	.word	0x20000340

08003328 <_malloc_r>:
 8003328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800332c:	1ccd      	adds	r5, r1, #3
 800332e:	f025 0503 	bic.w	r5, r5, #3
 8003332:	3508      	adds	r5, #8
 8003334:	2d0c      	cmp	r5, #12
 8003336:	bf38      	it	cc
 8003338:	250c      	movcc	r5, #12
 800333a:	2d00      	cmp	r5, #0
 800333c:	4606      	mov	r6, r0
 800333e:	db01      	blt.n	8003344 <_malloc_r+0x1c>
 8003340:	42a9      	cmp	r1, r5
 8003342:	d904      	bls.n	800334e <_malloc_r+0x26>
 8003344:	230c      	movs	r3, #12
 8003346:	6033      	str	r3, [r6, #0]
 8003348:	2000      	movs	r0, #0
 800334a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800334e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003424 <_malloc_r+0xfc>
 8003352:	f000 f869 	bl	8003428 <__malloc_lock>
 8003356:	f8d8 3000 	ldr.w	r3, [r8]
 800335a:	461c      	mov	r4, r3
 800335c:	bb44      	cbnz	r4, 80033b0 <_malloc_r+0x88>
 800335e:	4629      	mov	r1, r5
 8003360:	4630      	mov	r0, r6
 8003362:	f7ff ffbf 	bl	80032e4 <sbrk_aligned>
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	4604      	mov	r4, r0
 800336a:	d158      	bne.n	800341e <_malloc_r+0xf6>
 800336c:	f8d8 4000 	ldr.w	r4, [r8]
 8003370:	4627      	mov	r7, r4
 8003372:	2f00      	cmp	r7, #0
 8003374:	d143      	bne.n	80033fe <_malloc_r+0xd6>
 8003376:	2c00      	cmp	r4, #0
 8003378:	d04b      	beq.n	8003412 <_malloc_r+0xea>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	4639      	mov	r1, r7
 800337e:	4630      	mov	r0, r6
 8003380:	eb04 0903 	add.w	r9, r4, r3
 8003384:	f000 fc6c 	bl	8003c60 <_sbrk_r>
 8003388:	4581      	cmp	r9, r0
 800338a:	d142      	bne.n	8003412 <_malloc_r+0xea>
 800338c:	6821      	ldr	r1, [r4, #0]
 800338e:	1a6d      	subs	r5, r5, r1
 8003390:	4629      	mov	r1, r5
 8003392:	4630      	mov	r0, r6
 8003394:	f7ff ffa6 	bl	80032e4 <sbrk_aligned>
 8003398:	3001      	adds	r0, #1
 800339a:	d03a      	beq.n	8003412 <_malloc_r+0xea>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	442b      	add	r3, r5
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	f8d8 3000 	ldr.w	r3, [r8]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	bb62      	cbnz	r2, 8003404 <_malloc_r+0xdc>
 80033aa:	f8c8 7000 	str.w	r7, [r8]
 80033ae:	e00f      	b.n	80033d0 <_malloc_r+0xa8>
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	1b52      	subs	r2, r2, r5
 80033b4:	d420      	bmi.n	80033f8 <_malloc_r+0xd0>
 80033b6:	2a0b      	cmp	r2, #11
 80033b8:	d917      	bls.n	80033ea <_malloc_r+0xc2>
 80033ba:	1961      	adds	r1, r4, r5
 80033bc:	42a3      	cmp	r3, r4
 80033be:	6025      	str	r5, [r4, #0]
 80033c0:	bf18      	it	ne
 80033c2:	6059      	strne	r1, [r3, #4]
 80033c4:	6863      	ldr	r3, [r4, #4]
 80033c6:	bf08      	it	eq
 80033c8:	f8c8 1000 	streq.w	r1, [r8]
 80033cc:	5162      	str	r2, [r4, r5]
 80033ce:	604b      	str	r3, [r1, #4]
 80033d0:	4630      	mov	r0, r6
 80033d2:	f000 f82f 	bl	8003434 <__malloc_unlock>
 80033d6:	f104 000b 	add.w	r0, r4, #11
 80033da:	1d23      	adds	r3, r4, #4
 80033dc:	f020 0007 	bic.w	r0, r0, #7
 80033e0:	1ac2      	subs	r2, r0, r3
 80033e2:	bf1c      	itt	ne
 80033e4:	1a1b      	subne	r3, r3, r0
 80033e6:	50a3      	strne	r3, [r4, r2]
 80033e8:	e7af      	b.n	800334a <_malloc_r+0x22>
 80033ea:	6862      	ldr	r2, [r4, #4]
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	bf0c      	ite	eq
 80033f0:	f8c8 2000 	streq.w	r2, [r8]
 80033f4:	605a      	strne	r2, [r3, #4]
 80033f6:	e7eb      	b.n	80033d0 <_malloc_r+0xa8>
 80033f8:	4623      	mov	r3, r4
 80033fa:	6864      	ldr	r4, [r4, #4]
 80033fc:	e7ae      	b.n	800335c <_malloc_r+0x34>
 80033fe:	463c      	mov	r4, r7
 8003400:	687f      	ldr	r7, [r7, #4]
 8003402:	e7b6      	b.n	8003372 <_malloc_r+0x4a>
 8003404:	461a      	mov	r2, r3
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	42a3      	cmp	r3, r4
 800340a:	d1fb      	bne.n	8003404 <_malloc_r+0xdc>
 800340c:	2300      	movs	r3, #0
 800340e:	6053      	str	r3, [r2, #4]
 8003410:	e7de      	b.n	80033d0 <_malloc_r+0xa8>
 8003412:	230c      	movs	r3, #12
 8003414:	6033      	str	r3, [r6, #0]
 8003416:	4630      	mov	r0, r6
 8003418:	f000 f80c 	bl	8003434 <__malloc_unlock>
 800341c:	e794      	b.n	8003348 <_malloc_r+0x20>
 800341e:	6005      	str	r5, [r0, #0]
 8003420:	e7d6      	b.n	80033d0 <_malloc_r+0xa8>
 8003422:	bf00      	nop
 8003424:	20000344 	.word	0x20000344

08003428 <__malloc_lock>:
 8003428:	4801      	ldr	r0, [pc, #4]	@ (8003430 <__malloc_lock+0x8>)
 800342a:	f7ff bf0e 	b.w	800324a <__retarget_lock_acquire_recursive>
 800342e:	bf00      	nop
 8003430:	2000033c 	.word	0x2000033c

08003434 <__malloc_unlock>:
 8003434:	4801      	ldr	r0, [pc, #4]	@ (800343c <__malloc_unlock+0x8>)
 8003436:	f7ff bf09 	b.w	800324c <__retarget_lock_release_recursive>
 800343a:	bf00      	nop
 800343c:	2000033c 	.word	0x2000033c

08003440 <__sfputc_r>:
 8003440:	6893      	ldr	r3, [r2, #8]
 8003442:	3b01      	subs	r3, #1
 8003444:	2b00      	cmp	r3, #0
 8003446:	b410      	push	{r4}
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	da08      	bge.n	800345e <__sfputc_r+0x1e>
 800344c:	6994      	ldr	r4, [r2, #24]
 800344e:	42a3      	cmp	r3, r4
 8003450:	db01      	blt.n	8003456 <__sfputc_r+0x16>
 8003452:	290a      	cmp	r1, #10
 8003454:	d103      	bne.n	800345e <__sfputc_r+0x1e>
 8003456:	f85d 4b04 	ldr.w	r4, [sp], #4
 800345a:	f000 bb6d 	b.w	8003b38 <__swbuf_r>
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	1c58      	adds	r0, r3, #1
 8003462:	6010      	str	r0, [r2, #0]
 8003464:	7019      	strb	r1, [r3, #0]
 8003466:	4608      	mov	r0, r1
 8003468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800346c:	4770      	bx	lr

0800346e <__sfputs_r>:
 800346e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003470:	4606      	mov	r6, r0
 8003472:	460f      	mov	r7, r1
 8003474:	4614      	mov	r4, r2
 8003476:	18d5      	adds	r5, r2, r3
 8003478:	42ac      	cmp	r4, r5
 800347a:	d101      	bne.n	8003480 <__sfputs_r+0x12>
 800347c:	2000      	movs	r0, #0
 800347e:	e007      	b.n	8003490 <__sfputs_r+0x22>
 8003480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003484:	463a      	mov	r2, r7
 8003486:	4630      	mov	r0, r6
 8003488:	f7ff ffda 	bl	8003440 <__sfputc_r>
 800348c:	1c43      	adds	r3, r0, #1
 800348e:	d1f3      	bne.n	8003478 <__sfputs_r+0xa>
 8003490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003494 <_vfiprintf_r>:
 8003494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003498:	460d      	mov	r5, r1
 800349a:	b09d      	sub	sp, #116	@ 0x74
 800349c:	4614      	mov	r4, r2
 800349e:	4698      	mov	r8, r3
 80034a0:	4606      	mov	r6, r0
 80034a2:	b118      	cbz	r0, 80034ac <_vfiprintf_r+0x18>
 80034a4:	6a03      	ldr	r3, [r0, #32]
 80034a6:	b90b      	cbnz	r3, 80034ac <_vfiprintf_r+0x18>
 80034a8:	f7ff fdca 	bl	8003040 <__sinit>
 80034ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034ae:	07d9      	lsls	r1, r3, #31
 80034b0:	d405      	bmi.n	80034be <_vfiprintf_r+0x2a>
 80034b2:	89ab      	ldrh	r3, [r5, #12]
 80034b4:	059a      	lsls	r2, r3, #22
 80034b6:	d402      	bmi.n	80034be <_vfiprintf_r+0x2a>
 80034b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034ba:	f7ff fec6 	bl	800324a <__retarget_lock_acquire_recursive>
 80034be:	89ab      	ldrh	r3, [r5, #12]
 80034c0:	071b      	lsls	r3, r3, #28
 80034c2:	d501      	bpl.n	80034c8 <_vfiprintf_r+0x34>
 80034c4:	692b      	ldr	r3, [r5, #16]
 80034c6:	b99b      	cbnz	r3, 80034f0 <_vfiprintf_r+0x5c>
 80034c8:	4629      	mov	r1, r5
 80034ca:	4630      	mov	r0, r6
 80034cc:	f000 fb72 	bl	8003bb4 <__swsetup_r>
 80034d0:	b170      	cbz	r0, 80034f0 <_vfiprintf_r+0x5c>
 80034d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80034d4:	07dc      	lsls	r4, r3, #31
 80034d6:	d504      	bpl.n	80034e2 <_vfiprintf_r+0x4e>
 80034d8:	f04f 30ff 	mov.w	r0, #4294967295
 80034dc:	b01d      	add	sp, #116	@ 0x74
 80034de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e2:	89ab      	ldrh	r3, [r5, #12]
 80034e4:	0598      	lsls	r0, r3, #22
 80034e6:	d4f7      	bmi.n	80034d8 <_vfiprintf_r+0x44>
 80034e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034ea:	f7ff feaf 	bl	800324c <__retarget_lock_release_recursive>
 80034ee:	e7f3      	b.n	80034d8 <_vfiprintf_r+0x44>
 80034f0:	2300      	movs	r3, #0
 80034f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80034f4:	2320      	movs	r3, #32
 80034f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80034fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80034fe:	2330      	movs	r3, #48	@ 0x30
 8003500:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80036b0 <_vfiprintf_r+0x21c>
 8003504:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003508:	f04f 0901 	mov.w	r9, #1
 800350c:	4623      	mov	r3, r4
 800350e:	469a      	mov	sl, r3
 8003510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003514:	b10a      	cbz	r2, 800351a <_vfiprintf_r+0x86>
 8003516:	2a25      	cmp	r2, #37	@ 0x25
 8003518:	d1f9      	bne.n	800350e <_vfiprintf_r+0x7a>
 800351a:	ebba 0b04 	subs.w	fp, sl, r4
 800351e:	d00b      	beq.n	8003538 <_vfiprintf_r+0xa4>
 8003520:	465b      	mov	r3, fp
 8003522:	4622      	mov	r2, r4
 8003524:	4629      	mov	r1, r5
 8003526:	4630      	mov	r0, r6
 8003528:	f7ff ffa1 	bl	800346e <__sfputs_r>
 800352c:	3001      	adds	r0, #1
 800352e:	f000 80a7 	beq.w	8003680 <_vfiprintf_r+0x1ec>
 8003532:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003534:	445a      	add	r2, fp
 8003536:	9209      	str	r2, [sp, #36]	@ 0x24
 8003538:	f89a 3000 	ldrb.w	r3, [sl]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 809f 	beq.w	8003680 <_vfiprintf_r+0x1ec>
 8003542:	2300      	movs	r3, #0
 8003544:	f04f 32ff 	mov.w	r2, #4294967295
 8003548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800354c:	f10a 0a01 	add.w	sl, sl, #1
 8003550:	9304      	str	r3, [sp, #16]
 8003552:	9307      	str	r3, [sp, #28]
 8003554:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003558:	931a      	str	r3, [sp, #104]	@ 0x68
 800355a:	4654      	mov	r4, sl
 800355c:	2205      	movs	r2, #5
 800355e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003562:	4853      	ldr	r0, [pc, #332]	@ (80036b0 <_vfiprintf_r+0x21c>)
 8003564:	f7fc fe54 	bl	8000210 <memchr>
 8003568:	9a04      	ldr	r2, [sp, #16]
 800356a:	b9d8      	cbnz	r0, 80035a4 <_vfiprintf_r+0x110>
 800356c:	06d1      	lsls	r1, r2, #27
 800356e:	bf44      	itt	mi
 8003570:	2320      	movmi	r3, #32
 8003572:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003576:	0713      	lsls	r3, r2, #28
 8003578:	bf44      	itt	mi
 800357a:	232b      	movmi	r3, #43	@ 0x2b
 800357c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003580:	f89a 3000 	ldrb.w	r3, [sl]
 8003584:	2b2a      	cmp	r3, #42	@ 0x2a
 8003586:	d015      	beq.n	80035b4 <_vfiprintf_r+0x120>
 8003588:	9a07      	ldr	r2, [sp, #28]
 800358a:	4654      	mov	r4, sl
 800358c:	2000      	movs	r0, #0
 800358e:	f04f 0c0a 	mov.w	ip, #10
 8003592:	4621      	mov	r1, r4
 8003594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003598:	3b30      	subs	r3, #48	@ 0x30
 800359a:	2b09      	cmp	r3, #9
 800359c:	d94b      	bls.n	8003636 <_vfiprintf_r+0x1a2>
 800359e:	b1b0      	cbz	r0, 80035ce <_vfiprintf_r+0x13a>
 80035a0:	9207      	str	r2, [sp, #28]
 80035a2:	e014      	b.n	80035ce <_vfiprintf_r+0x13a>
 80035a4:	eba0 0308 	sub.w	r3, r0, r8
 80035a8:	fa09 f303 	lsl.w	r3, r9, r3
 80035ac:	4313      	orrs	r3, r2
 80035ae:	9304      	str	r3, [sp, #16]
 80035b0:	46a2      	mov	sl, r4
 80035b2:	e7d2      	b.n	800355a <_vfiprintf_r+0xc6>
 80035b4:	9b03      	ldr	r3, [sp, #12]
 80035b6:	1d19      	adds	r1, r3, #4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	9103      	str	r1, [sp, #12]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	bfbb      	ittet	lt
 80035c0:	425b      	neglt	r3, r3
 80035c2:	f042 0202 	orrlt.w	r2, r2, #2
 80035c6:	9307      	strge	r3, [sp, #28]
 80035c8:	9307      	strlt	r3, [sp, #28]
 80035ca:	bfb8      	it	lt
 80035cc:	9204      	strlt	r2, [sp, #16]
 80035ce:	7823      	ldrb	r3, [r4, #0]
 80035d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80035d2:	d10a      	bne.n	80035ea <_vfiprintf_r+0x156>
 80035d4:	7863      	ldrb	r3, [r4, #1]
 80035d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80035d8:	d132      	bne.n	8003640 <_vfiprintf_r+0x1ac>
 80035da:	9b03      	ldr	r3, [sp, #12]
 80035dc:	1d1a      	adds	r2, r3, #4
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	9203      	str	r2, [sp, #12]
 80035e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80035e6:	3402      	adds	r4, #2
 80035e8:	9305      	str	r3, [sp, #20]
 80035ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80036c0 <_vfiprintf_r+0x22c>
 80035ee:	7821      	ldrb	r1, [r4, #0]
 80035f0:	2203      	movs	r2, #3
 80035f2:	4650      	mov	r0, sl
 80035f4:	f7fc fe0c 	bl	8000210 <memchr>
 80035f8:	b138      	cbz	r0, 800360a <_vfiprintf_r+0x176>
 80035fa:	9b04      	ldr	r3, [sp, #16]
 80035fc:	eba0 000a 	sub.w	r0, r0, sl
 8003600:	2240      	movs	r2, #64	@ 0x40
 8003602:	4082      	lsls	r2, r0
 8003604:	4313      	orrs	r3, r2
 8003606:	3401      	adds	r4, #1
 8003608:	9304      	str	r3, [sp, #16]
 800360a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800360e:	4829      	ldr	r0, [pc, #164]	@ (80036b4 <_vfiprintf_r+0x220>)
 8003610:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003614:	2206      	movs	r2, #6
 8003616:	f7fc fdfb 	bl	8000210 <memchr>
 800361a:	2800      	cmp	r0, #0
 800361c:	d03f      	beq.n	800369e <_vfiprintf_r+0x20a>
 800361e:	4b26      	ldr	r3, [pc, #152]	@ (80036b8 <_vfiprintf_r+0x224>)
 8003620:	bb1b      	cbnz	r3, 800366a <_vfiprintf_r+0x1d6>
 8003622:	9b03      	ldr	r3, [sp, #12]
 8003624:	3307      	adds	r3, #7
 8003626:	f023 0307 	bic.w	r3, r3, #7
 800362a:	3308      	adds	r3, #8
 800362c:	9303      	str	r3, [sp, #12]
 800362e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003630:	443b      	add	r3, r7
 8003632:	9309      	str	r3, [sp, #36]	@ 0x24
 8003634:	e76a      	b.n	800350c <_vfiprintf_r+0x78>
 8003636:	fb0c 3202 	mla	r2, ip, r2, r3
 800363a:	460c      	mov	r4, r1
 800363c:	2001      	movs	r0, #1
 800363e:	e7a8      	b.n	8003592 <_vfiprintf_r+0xfe>
 8003640:	2300      	movs	r3, #0
 8003642:	3401      	adds	r4, #1
 8003644:	9305      	str	r3, [sp, #20]
 8003646:	4619      	mov	r1, r3
 8003648:	f04f 0c0a 	mov.w	ip, #10
 800364c:	4620      	mov	r0, r4
 800364e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003652:	3a30      	subs	r2, #48	@ 0x30
 8003654:	2a09      	cmp	r2, #9
 8003656:	d903      	bls.n	8003660 <_vfiprintf_r+0x1cc>
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0c6      	beq.n	80035ea <_vfiprintf_r+0x156>
 800365c:	9105      	str	r1, [sp, #20]
 800365e:	e7c4      	b.n	80035ea <_vfiprintf_r+0x156>
 8003660:	fb0c 2101 	mla	r1, ip, r1, r2
 8003664:	4604      	mov	r4, r0
 8003666:	2301      	movs	r3, #1
 8003668:	e7f0      	b.n	800364c <_vfiprintf_r+0x1b8>
 800366a:	ab03      	add	r3, sp, #12
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	462a      	mov	r2, r5
 8003670:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <_vfiprintf_r+0x228>)
 8003672:	a904      	add	r1, sp, #16
 8003674:	4630      	mov	r0, r6
 8003676:	f3af 8000 	nop.w
 800367a:	4607      	mov	r7, r0
 800367c:	1c78      	adds	r0, r7, #1
 800367e:	d1d6      	bne.n	800362e <_vfiprintf_r+0x19a>
 8003680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003682:	07d9      	lsls	r1, r3, #31
 8003684:	d405      	bmi.n	8003692 <_vfiprintf_r+0x1fe>
 8003686:	89ab      	ldrh	r3, [r5, #12]
 8003688:	059a      	lsls	r2, r3, #22
 800368a:	d402      	bmi.n	8003692 <_vfiprintf_r+0x1fe>
 800368c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800368e:	f7ff fddd 	bl	800324c <__retarget_lock_release_recursive>
 8003692:	89ab      	ldrh	r3, [r5, #12]
 8003694:	065b      	lsls	r3, r3, #25
 8003696:	f53f af1f 	bmi.w	80034d8 <_vfiprintf_r+0x44>
 800369a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800369c:	e71e      	b.n	80034dc <_vfiprintf_r+0x48>
 800369e:	ab03      	add	r3, sp, #12
 80036a0:	9300      	str	r3, [sp, #0]
 80036a2:	462a      	mov	r2, r5
 80036a4:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <_vfiprintf_r+0x228>)
 80036a6:	a904      	add	r1, sp, #16
 80036a8:	4630      	mov	r0, r6
 80036aa:	f000 f879 	bl	80037a0 <_printf_i>
 80036ae:	e7e4      	b.n	800367a <_vfiprintf_r+0x1e6>
 80036b0:	08003df0 	.word	0x08003df0
 80036b4:	08003dfa 	.word	0x08003dfa
 80036b8:	00000000 	.word	0x00000000
 80036bc:	0800346f 	.word	0x0800346f
 80036c0:	08003df6 	.word	0x08003df6

080036c4 <_printf_common>:
 80036c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036c8:	4616      	mov	r6, r2
 80036ca:	4698      	mov	r8, r3
 80036cc:	688a      	ldr	r2, [r1, #8]
 80036ce:	690b      	ldr	r3, [r1, #16]
 80036d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80036d4:	4293      	cmp	r3, r2
 80036d6:	bfb8      	it	lt
 80036d8:	4613      	movlt	r3, r2
 80036da:	6033      	str	r3, [r6, #0]
 80036dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80036e0:	4607      	mov	r7, r0
 80036e2:	460c      	mov	r4, r1
 80036e4:	b10a      	cbz	r2, 80036ea <_printf_common+0x26>
 80036e6:	3301      	adds	r3, #1
 80036e8:	6033      	str	r3, [r6, #0]
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	0699      	lsls	r1, r3, #26
 80036ee:	bf42      	ittt	mi
 80036f0:	6833      	ldrmi	r3, [r6, #0]
 80036f2:	3302      	addmi	r3, #2
 80036f4:	6033      	strmi	r3, [r6, #0]
 80036f6:	6825      	ldr	r5, [r4, #0]
 80036f8:	f015 0506 	ands.w	r5, r5, #6
 80036fc:	d106      	bne.n	800370c <_printf_common+0x48>
 80036fe:	f104 0a19 	add.w	sl, r4, #25
 8003702:	68e3      	ldr	r3, [r4, #12]
 8003704:	6832      	ldr	r2, [r6, #0]
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	42ab      	cmp	r3, r5
 800370a:	dc26      	bgt.n	800375a <_printf_common+0x96>
 800370c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003710:	6822      	ldr	r2, [r4, #0]
 8003712:	3b00      	subs	r3, #0
 8003714:	bf18      	it	ne
 8003716:	2301      	movne	r3, #1
 8003718:	0692      	lsls	r2, r2, #26
 800371a:	d42b      	bmi.n	8003774 <_printf_common+0xb0>
 800371c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003720:	4641      	mov	r1, r8
 8003722:	4638      	mov	r0, r7
 8003724:	47c8      	blx	r9
 8003726:	3001      	adds	r0, #1
 8003728:	d01e      	beq.n	8003768 <_printf_common+0xa4>
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	6922      	ldr	r2, [r4, #16]
 800372e:	f003 0306 	and.w	r3, r3, #6
 8003732:	2b04      	cmp	r3, #4
 8003734:	bf02      	ittt	eq
 8003736:	68e5      	ldreq	r5, [r4, #12]
 8003738:	6833      	ldreq	r3, [r6, #0]
 800373a:	1aed      	subeq	r5, r5, r3
 800373c:	68a3      	ldr	r3, [r4, #8]
 800373e:	bf0c      	ite	eq
 8003740:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003744:	2500      	movne	r5, #0
 8003746:	4293      	cmp	r3, r2
 8003748:	bfc4      	itt	gt
 800374a:	1a9b      	subgt	r3, r3, r2
 800374c:	18ed      	addgt	r5, r5, r3
 800374e:	2600      	movs	r6, #0
 8003750:	341a      	adds	r4, #26
 8003752:	42b5      	cmp	r5, r6
 8003754:	d11a      	bne.n	800378c <_printf_common+0xc8>
 8003756:	2000      	movs	r0, #0
 8003758:	e008      	b.n	800376c <_printf_common+0xa8>
 800375a:	2301      	movs	r3, #1
 800375c:	4652      	mov	r2, sl
 800375e:	4641      	mov	r1, r8
 8003760:	4638      	mov	r0, r7
 8003762:	47c8      	blx	r9
 8003764:	3001      	adds	r0, #1
 8003766:	d103      	bne.n	8003770 <_printf_common+0xac>
 8003768:	f04f 30ff 	mov.w	r0, #4294967295
 800376c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003770:	3501      	adds	r5, #1
 8003772:	e7c6      	b.n	8003702 <_printf_common+0x3e>
 8003774:	18e1      	adds	r1, r4, r3
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	2030      	movs	r0, #48	@ 0x30
 800377a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800377e:	4422      	add	r2, r4
 8003780:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003784:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003788:	3302      	adds	r3, #2
 800378a:	e7c7      	b.n	800371c <_printf_common+0x58>
 800378c:	2301      	movs	r3, #1
 800378e:	4622      	mov	r2, r4
 8003790:	4641      	mov	r1, r8
 8003792:	4638      	mov	r0, r7
 8003794:	47c8      	blx	r9
 8003796:	3001      	adds	r0, #1
 8003798:	d0e6      	beq.n	8003768 <_printf_common+0xa4>
 800379a:	3601      	adds	r6, #1
 800379c:	e7d9      	b.n	8003752 <_printf_common+0x8e>
	...

080037a0 <_printf_i>:
 80037a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037a4:	7e0f      	ldrb	r7, [r1, #24]
 80037a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037a8:	2f78      	cmp	r7, #120	@ 0x78
 80037aa:	4691      	mov	r9, r2
 80037ac:	4680      	mov	r8, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	469a      	mov	sl, r3
 80037b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037b6:	d807      	bhi.n	80037c8 <_printf_i+0x28>
 80037b8:	2f62      	cmp	r7, #98	@ 0x62
 80037ba:	d80a      	bhi.n	80037d2 <_printf_i+0x32>
 80037bc:	2f00      	cmp	r7, #0
 80037be:	f000 80d2 	beq.w	8003966 <_printf_i+0x1c6>
 80037c2:	2f58      	cmp	r7, #88	@ 0x58
 80037c4:	f000 80b9 	beq.w	800393a <_printf_i+0x19a>
 80037c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80037cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80037d0:	e03a      	b.n	8003848 <_printf_i+0xa8>
 80037d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80037d6:	2b15      	cmp	r3, #21
 80037d8:	d8f6      	bhi.n	80037c8 <_printf_i+0x28>
 80037da:	a101      	add	r1, pc, #4	@ (adr r1, 80037e0 <_printf_i+0x40>)
 80037dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037e0:	08003839 	.word	0x08003839
 80037e4:	0800384d 	.word	0x0800384d
 80037e8:	080037c9 	.word	0x080037c9
 80037ec:	080037c9 	.word	0x080037c9
 80037f0:	080037c9 	.word	0x080037c9
 80037f4:	080037c9 	.word	0x080037c9
 80037f8:	0800384d 	.word	0x0800384d
 80037fc:	080037c9 	.word	0x080037c9
 8003800:	080037c9 	.word	0x080037c9
 8003804:	080037c9 	.word	0x080037c9
 8003808:	080037c9 	.word	0x080037c9
 800380c:	0800394d 	.word	0x0800394d
 8003810:	08003877 	.word	0x08003877
 8003814:	08003907 	.word	0x08003907
 8003818:	080037c9 	.word	0x080037c9
 800381c:	080037c9 	.word	0x080037c9
 8003820:	0800396f 	.word	0x0800396f
 8003824:	080037c9 	.word	0x080037c9
 8003828:	08003877 	.word	0x08003877
 800382c:	080037c9 	.word	0x080037c9
 8003830:	080037c9 	.word	0x080037c9
 8003834:	0800390f 	.word	0x0800390f
 8003838:	6833      	ldr	r3, [r6, #0]
 800383a:	1d1a      	adds	r2, r3, #4
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6032      	str	r2, [r6, #0]
 8003840:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003844:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003848:	2301      	movs	r3, #1
 800384a:	e09d      	b.n	8003988 <_printf_i+0x1e8>
 800384c:	6833      	ldr	r3, [r6, #0]
 800384e:	6820      	ldr	r0, [r4, #0]
 8003850:	1d19      	adds	r1, r3, #4
 8003852:	6031      	str	r1, [r6, #0]
 8003854:	0606      	lsls	r6, r0, #24
 8003856:	d501      	bpl.n	800385c <_printf_i+0xbc>
 8003858:	681d      	ldr	r5, [r3, #0]
 800385a:	e003      	b.n	8003864 <_printf_i+0xc4>
 800385c:	0645      	lsls	r5, r0, #25
 800385e:	d5fb      	bpl.n	8003858 <_printf_i+0xb8>
 8003860:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003864:	2d00      	cmp	r5, #0
 8003866:	da03      	bge.n	8003870 <_printf_i+0xd0>
 8003868:	232d      	movs	r3, #45	@ 0x2d
 800386a:	426d      	negs	r5, r5
 800386c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003870:	4859      	ldr	r0, [pc, #356]	@ (80039d8 <_printf_i+0x238>)
 8003872:	230a      	movs	r3, #10
 8003874:	e011      	b.n	800389a <_printf_i+0xfa>
 8003876:	6821      	ldr	r1, [r4, #0]
 8003878:	6833      	ldr	r3, [r6, #0]
 800387a:	0608      	lsls	r0, r1, #24
 800387c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003880:	d402      	bmi.n	8003888 <_printf_i+0xe8>
 8003882:	0649      	lsls	r1, r1, #25
 8003884:	bf48      	it	mi
 8003886:	b2ad      	uxthmi	r5, r5
 8003888:	2f6f      	cmp	r7, #111	@ 0x6f
 800388a:	4853      	ldr	r0, [pc, #332]	@ (80039d8 <_printf_i+0x238>)
 800388c:	6033      	str	r3, [r6, #0]
 800388e:	bf14      	ite	ne
 8003890:	230a      	movne	r3, #10
 8003892:	2308      	moveq	r3, #8
 8003894:	2100      	movs	r1, #0
 8003896:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800389a:	6866      	ldr	r6, [r4, #4]
 800389c:	60a6      	str	r6, [r4, #8]
 800389e:	2e00      	cmp	r6, #0
 80038a0:	bfa2      	ittt	ge
 80038a2:	6821      	ldrge	r1, [r4, #0]
 80038a4:	f021 0104 	bicge.w	r1, r1, #4
 80038a8:	6021      	strge	r1, [r4, #0]
 80038aa:	b90d      	cbnz	r5, 80038b0 <_printf_i+0x110>
 80038ac:	2e00      	cmp	r6, #0
 80038ae:	d04b      	beq.n	8003948 <_printf_i+0x1a8>
 80038b0:	4616      	mov	r6, r2
 80038b2:	fbb5 f1f3 	udiv	r1, r5, r3
 80038b6:	fb03 5711 	mls	r7, r3, r1, r5
 80038ba:	5dc7      	ldrb	r7, [r0, r7]
 80038bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038c0:	462f      	mov	r7, r5
 80038c2:	42bb      	cmp	r3, r7
 80038c4:	460d      	mov	r5, r1
 80038c6:	d9f4      	bls.n	80038b2 <_printf_i+0x112>
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d10b      	bne.n	80038e4 <_printf_i+0x144>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	07df      	lsls	r7, r3, #31
 80038d0:	d508      	bpl.n	80038e4 <_printf_i+0x144>
 80038d2:	6923      	ldr	r3, [r4, #16]
 80038d4:	6861      	ldr	r1, [r4, #4]
 80038d6:	4299      	cmp	r1, r3
 80038d8:	bfde      	ittt	le
 80038da:	2330      	movle	r3, #48	@ 0x30
 80038dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80038e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80038e4:	1b92      	subs	r2, r2, r6
 80038e6:	6122      	str	r2, [r4, #16]
 80038e8:	f8cd a000 	str.w	sl, [sp]
 80038ec:	464b      	mov	r3, r9
 80038ee:	aa03      	add	r2, sp, #12
 80038f0:	4621      	mov	r1, r4
 80038f2:	4640      	mov	r0, r8
 80038f4:	f7ff fee6 	bl	80036c4 <_printf_common>
 80038f8:	3001      	adds	r0, #1
 80038fa:	d14a      	bne.n	8003992 <_printf_i+0x1f2>
 80038fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003900:	b004      	add	sp, #16
 8003902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003906:	6823      	ldr	r3, [r4, #0]
 8003908:	f043 0320 	orr.w	r3, r3, #32
 800390c:	6023      	str	r3, [r4, #0]
 800390e:	4833      	ldr	r0, [pc, #204]	@ (80039dc <_printf_i+0x23c>)
 8003910:	2778      	movs	r7, #120	@ 0x78
 8003912:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	6831      	ldr	r1, [r6, #0]
 800391a:	061f      	lsls	r7, r3, #24
 800391c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003920:	d402      	bmi.n	8003928 <_printf_i+0x188>
 8003922:	065f      	lsls	r7, r3, #25
 8003924:	bf48      	it	mi
 8003926:	b2ad      	uxthmi	r5, r5
 8003928:	6031      	str	r1, [r6, #0]
 800392a:	07d9      	lsls	r1, r3, #31
 800392c:	bf44      	itt	mi
 800392e:	f043 0320 	orrmi.w	r3, r3, #32
 8003932:	6023      	strmi	r3, [r4, #0]
 8003934:	b11d      	cbz	r5, 800393e <_printf_i+0x19e>
 8003936:	2310      	movs	r3, #16
 8003938:	e7ac      	b.n	8003894 <_printf_i+0xf4>
 800393a:	4827      	ldr	r0, [pc, #156]	@ (80039d8 <_printf_i+0x238>)
 800393c:	e7e9      	b.n	8003912 <_printf_i+0x172>
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	f023 0320 	bic.w	r3, r3, #32
 8003944:	6023      	str	r3, [r4, #0]
 8003946:	e7f6      	b.n	8003936 <_printf_i+0x196>
 8003948:	4616      	mov	r6, r2
 800394a:	e7bd      	b.n	80038c8 <_printf_i+0x128>
 800394c:	6833      	ldr	r3, [r6, #0]
 800394e:	6825      	ldr	r5, [r4, #0]
 8003950:	6961      	ldr	r1, [r4, #20]
 8003952:	1d18      	adds	r0, r3, #4
 8003954:	6030      	str	r0, [r6, #0]
 8003956:	062e      	lsls	r6, r5, #24
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	d501      	bpl.n	8003960 <_printf_i+0x1c0>
 800395c:	6019      	str	r1, [r3, #0]
 800395e:	e002      	b.n	8003966 <_printf_i+0x1c6>
 8003960:	0668      	lsls	r0, r5, #25
 8003962:	d5fb      	bpl.n	800395c <_printf_i+0x1bc>
 8003964:	8019      	strh	r1, [r3, #0]
 8003966:	2300      	movs	r3, #0
 8003968:	6123      	str	r3, [r4, #16]
 800396a:	4616      	mov	r6, r2
 800396c:	e7bc      	b.n	80038e8 <_printf_i+0x148>
 800396e:	6833      	ldr	r3, [r6, #0]
 8003970:	1d1a      	adds	r2, r3, #4
 8003972:	6032      	str	r2, [r6, #0]
 8003974:	681e      	ldr	r6, [r3, #0]
 8003976:	6862      	ldr	r2, [r4, #4]
 8003978:	2100      	movs	r1, #0
 800397a:	4630      	mov	r0, r6
 800397c:	f7fc fc48 	bl	8000210 <memchr>
 8003980:	b108      	cbz	r0, 8003986 <_printf_i+0x1e6>
 8003982:	1b80      	subs	r0, r0, r6
 8003984:	6060      	str	r0, [r4, #4]
 8003986:	6863      	ldr	r3, [r4, #4]
 8003988:	6123      	str	r3, [r4, #16]
 800398a:	2300      	movs	r3, #0
 800398c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003990:	e7aa      	b.n	80038e8 <_printf_i+0x148>
 8003992:	6923      	ldr	r3, [r4, #16]
 8003994:	4632      	mov	r2, r6
 8003996:	4649      	mov	r1, r9
 8003998:	4640      	mov	r0, r8
 800399a:	47d0      	blx	sl
 800399c:	3001      	adds	r0, #1
 800399e:	d0ad      	beq.n	80038fc <_printf_i+0x15c>
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	079b      	lsls	r3, r3, #30
 80039a4:	d413      	bmi.n	80039ce <_printf_i+0x22e>
 80039a6:	68e0      	ldr	r0, [r4, #12]
 80039a8:	9b03      	ldr	r3, [sp, #12]
 80039aa:	4298      	cmp	r0, r3
 80039ac:	bfb8      	it	lt
 80039ae:	4618      	movlt	r0, r3
 80039b0:	e7a6      	b.n	8003900 <_printf_i+0x160>
 80039b2:	2301      	movs	r3, #1
 80039b4:	4632      	mov	r2, r6
 80039b6:	4649      	mov	r1, r9
 80039b8:	4640      	mov	r0, r8
 80039ba:	47d0      	blx	sl
 80039bc:	3001      	adds	r0, #1
 80039be:	d09d      	beq.n	80038fc <_printf_i+0x15c>
 80039c0:	3501      	adds	r5, #1
 80039c2:	68e3      	ldr	r3, [r4, #12]
 80039c4:	9903      	ldr	r1, [sp, #12]
 80039c6:	1a5b      	subs	r3, r3, r1
 80039c8:	42ab      	cmp	r3, r5
 80039ca:	dcf2      	bgt.n	80039b2 <_printf_i+0x212>
 80039cc:	e7eb      	b.n	80039a6 <_printf_i+0x206>
 80039ce:	2500      	movs	r5, #0
 80039d0:	f104 0619 	add.w	r6, r4, #25
 80039d4:	e7f5      	b.n	80039c2 <_printf_i+0x222>
 80039d6:	bf00      	nop
 80039d8:	08003e01 	.word	0x08003e01
 80039dc:	08003e12 	.word	0x08003e12

080039e0 <__sflush_r>:
 80039e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039e8:	0716      	lsls	r6, r2, #28
 80039ea:	4605      	mov	r5, r0
 80039ec:	460c      	mov	r4, r1
 80039ee:	d454      	bmi.n	8003a9a <__sflush_r+0xba>
 80039f0:	684b      	ldr	r3, [r1, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	dc02      	bgt.n	80039fc <__sflush_r+0x1c>
 80039f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	dd48      	ble.n	8003a8e <__sflush_r+0xae>
 80039fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80039fe:	2e00      	cmp	r6, #0
 8003a00:	d045      	beq.n	8003a8e <__sflush_r+0xae>
 8003a02:	2300      	movs	r3, #0
 8003a04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003a08:	682f      	ldr	r7, [r5, #0]
 8003a0a:	6a21      	ldr	r1, [r4, #32]
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	d030      	beq.n	8003a72 <__sflush_r+0x92>
 8003a10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003a12:	89a3      	ldrh	r3, [r4, #12]
 8003a14:	0759      	lsls	r1, r3, #29
 8003a16:	d505      	bpl.n	8003a24 <__sflush_r+0x44>
 8003a18:	6863      	ldr	r3, [r4, #4]
 8003a1a:	1ad2      	subs	r2, r2, r3
 8003a1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003a1e:	b10b      	cbz	r3, 8003a24 <__sflush_r+0x44>
 8003a20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003a22:	1ad2      	subs	r2, r2, r3
 8003a24:	2300      	movs	r3, #0
 8003a26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003a28:	6a21      	ldr	r1, [r4, #32]
 8003a2a:	4628      	mov	r0, r5
 8003a2c:	47b0      	blx	r6
 8003a2e:	1c43      	adds	r3, r0, #1
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	d106      	bne.n	8003a42 <__sflush_r+0x62>
 8003a34:	6829      	ldr	r1, [r5, #0]
 8003a36:	291d      	cmp	r1, #29
 8003a38:	d82b      	bhi.n	8003a92 <__sflush_r+0xb2>
 8003a3a:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae4 <__sflush_r+0x104>)
 8003a3c:	410a      	asrs	r2, r1
 8003a3e:	07d6      	lsls	r6, r2, #31
 8003a40:	d427      	bmi.n	8003a92 <__sflush_r+0xb2>
 8003a42:	2200      	movs	r2, #0
 8003a44:	6062      	str	r2, [r4, #4]
 8003a46:	04d9      	lsls	r1, r3, #19
 8003a48:	6922      	ldr	r2, [r4, #16]
 8003a4a:	6022      	str	r2, [r4, #0]
 8003a4c:	d504      	bpl.n	8003a58 <__sflush_r+0x78>
 8003a4e:	1c42      	adds	r2, r0, #1
 8003a50:	d101      	bne.n	8003a56 <__sflush_r+0x76>
 8003a52:	682b      	ldr	r3, [r5, #0]
 8003a54:	b903      	cbnz	r3, 8003a58 <__sflush_r+0x78>
 8003a56:	6560      	str	r0, [r4, #84]	@ 0x54
 8003a58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a5a:	602f      	str	r7, [r5, #0]
 8003a5c:	b1b9      	cbz	r1, 8003a8e <__sflush_r+0xae>
 8003a5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a62:	4299      	cmp	r1, r3
 8003a64:	d002      	beq.n	8003a6c <__sflush_r+0x8c>
 8003a66:	4628      	mov	r0, r5
 8003a68:	f7ff fbf2 	bl	8003250 <_free_r>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a70:	e00d      	b.n	8003a8e <__sflush_r+0xae>
 8003a72:	2301      	movs	r3, #1
 8003a74:	4628      	mov	r0, r5
 8003a76:	47b0      	blx	r6
 8003a78:	4602      	mov	r2, r0
 8003a7a:	1c50      	adds	r0, r2, #1
 8003a7c:	d1c9      	bne.n	8003a12 <__sflush_r+0x32>
 8003a7e:	682b      	ldr	r3, [r5, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0c6      	beq.n	8003a12 <__sflush_r+0x32>
 8003a84:	2b1d      	cmp	r3, #29
 8003a86:	d001      	beq.n	8003a8c <__sflush_r+0xac>
 8003a88:	2b16      	cmp	r3, #22
 8003a8a:	d11e      	bne.n	8003aca <__sflush_r+0xea>
 8003a8c:	602f      	str	r7, [r5, #0]
 8003a8e:	2000      	movs	r0, #0
 8003a90:	e022      	b.n	8003ad8 <__sflush_r+0xf8>
 8003a92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	e01b      	b.n	8003ad2 <__sflush_r+0xf2>
 8003a9a:	690f      	ldr	r7, [r1, #16]
 8003a9c:	2f00      	cmp	r7, #0
 8003a9e:	d0f6      	beq.n	8003a8e <__sflush_r+0xae>
 8003aa0:	0793      	lsls	r3, r2, #30
 8003aa2:	680e      	ldr	r6, [r1, #0]
 8003aa4:	bf08      	it	eq
 8003aa6:	694b      	ldreq	r3, [r1, #20]
 8003aa8:	600f      	str	r7, [r1, #0]
 8003aaa:	bf18      	it	ne
 8003aac:	2300      	movne	r3, #0
 8003aae:	eba6 0807 	sub.w	r8, r6, r7
 8003ab2:	608b      	str	r3, [r1, #8]
 8003ab4:	f1b8 0f00 	cmp.w	r8, #0
 8003ab8:	dde9      	ble.n	8003a8e <__sflush_r+0xae>
 8003aba:	6a21      	ldr	r1, [r4, #32]
 8003abc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003abe:	4643      	mov	r3, r8
 8003ac0:	463a      	mov	r2, r7
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	47b0      	blx	r6
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	dc08      	bgt.n	8003adc <__sflush_r+0xfc>
 8003aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ace:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ad2:	81a3      	strh	r3, [r4, #12]
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003adc:	4407      	add	r7, r0
 8003ade:	eba8 0800 	sub.w	r8, r8, r0
 8003ae2:	e7e7      	b.n	8003ab4 <__sflush_r+0xd4>
 8003ae4:	dfbffffe 	.word	0xdfbffffe

08003ae8 <_fflush_r>:
 8003ae8:	b538      	push	{r3, r4, r5, lr}
 8003aea:	690b      	ldr	r3, [r1, #16]
 8003aec:	4605      	mov	r5, r0
 8003aee:	460c      	mov	r4, r1
 8003af0:	b913      	cbnz	r3, 8003af8 <_fflush_r+0x10>
 8003af2:	2500      	movs	r5, #0
 8003af4:	4628      	mov	r0, r5
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	b118      	cbz	r0, 8003b02 <_fflush_r+0x1a>
 8003afa:	6a03      	ldr	r3, [r0, #32]
 8003afc:	b90b      	cbnz	r3, 8003b02 <_fflush_r+0x1a>
 8003afe:	f7ff fa9f 	bl	8003040 <__sinit>
 8003b02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f3      	beq.n	8003af2 <_fflush_r+0xa>
 8003b0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003b0c:	07d0      	lsls	r0, r2, #31
 8003b0e:	d404      	bmi.n	8003b1a <_fflush_r+0x32>
 8003b10:	0599      	lsls	r1, r3, #22
 8003b12:	d402      	bmi.n	8003b1a <_fflush_r+0x32>
 8003b14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b16:	f7ff fb98 	bl	800324a <__retarget_lock_acquire_recursive>
 8003b1a:	4628      	mov	r0, r5
 8003b1c:	4621      	mov	r1, r4
 8003b1e:	f7ff ff5f 	bl	80039e0 <__sflush_r>
 8003b22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b24:	07da      	lsls	r2, r3, #31
 8003b26:	4605      	mov	r5, r0
 8003b28:	d4e4      	bmi.n	8003af4 <_fflush_r+0xc>
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	059b      	lsls	r3, r3, #22
 8003b2e:	d4e1      	bmi.n	8003af4 <_fflush_r+0xc>
 8003b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b32:	f7ff fb8b 	bl	800324c <__retarget_lock_release_recursive>
 8003b36:	e7dd      	b.n	8003af4 <_fflush_r+0xc>

08003b38 <__swbuf_r>:
 8003b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3a:	460e      	mov	r6, r1
 8003b3c:	4614      	mov	r4, r2
 8003b3e:	4605      	mov	r5, r0
 8003b40:	b118      	cbz	r0, 8003b4a <__swbuf_r+0x12>
 8003b42:	6a03      	ldr	r3, [r0, #32]
 8003b44:	b90b      	cbnz	r3, 8003b4a <__swbuf_r+0x12>
 8003b46:	f7ff fa7b 	bl	8003040 <__sinit>
 8003b4a:	69a3      	ldr	r3, [r4, #24]
 8003b4c:	60a3      	str	r3, [r4, #8]
 8003b4e:	89a3      	ldrh	r3, [r4, #12]
 8003b50:	071a      	lsls	r2, r3, #28
 8003b52:	d501      	bpl.n	8003b58 <__swbuf_r+0x20>
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	b943      	cbnz	r3, 8003b6a <__swbuf_r+0x32>
 8003b58:	4621      	mov	r1, r4
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	f000 f82a 	bl	8003bb4 <__swsetup_r>
 8003b60:	b118      	cbz	r0, 8003b6a <__swbuf_r+0x32>
 8003b62:	f04f 37ff 	mov.w	r7, #4294967295
 8003b66:	4638      	mov	r0, r7
 8003b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	6922      	ldr	r2, [r4, #16]
 8003b6e:	1a98      	subs	r0, r3, r2
 8003b70:	6963      	ldr	r3, [r4, #20]
 8003b72:	b2f6      	uxtb	r6, r6
 8003b74:	4283      	cmp	r3, r0
 8003b76:	4637      	mov	r7, r6
 8003b78:	dc05      	bgt.n	8003b86 <__swbuf_r+0x4e>
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	f7ff ffb3 	bl	8003ae8 <_fflush_r>
 8003b82:	2800      	cmp	r0, #0
 8003b84:	d1ed      	bne.n	8003b62 <__swbuf_r+0x2a>
 8003b86:	68a3      	ldr	r3, [r4, #8]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	60a3      	str	r3, [r4, #8]
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	1c5a      	adds	r2, r3, #1
 8003b90:	6022      	str	r2, [r4, #0]
 8003b92:	701e      	strb	r6, [r3, #0]
 8003b94:	6962      	ldr	r2, [r4, #20]
 8003b96:	1c43      	adds	r3, r0, #1
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d004      	beq.n	8003ba6 <__swbuf_r+0x6e>
 8003b9c:	89a3      	ldrh	r3, [r4, #12]
 8003b9e:	07db      	lsls	r3, r3, #31
 8003ba0:	d5e1      	bpl.n	8003b66 <__swbuf_r+0x2e>
 8003ba2:	2e0a      	cmp	r6, #10
 8003ba4:	d1df      	bne.n	8003b66 <__swbuf_r+0x2e>
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f7ff ff9d 	bl	8003ae8 <_fflush_r>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d0d9      	beq.n	8003b66 <__swbuf_r+0x2e>
 8003bb2:	e7d6      	b.n	8003b62 <__swbuf_r+0x2a>

08003bb4 <__swsetup_r>:
 8003bb4:	b538      	push	{r3, r4, r5, lr}
 8003bb6:	4b29      	ldr	r3, [pc, #164]	@ (8003c5c <__swsetup_r+0xa8>)
 8003bb8:	4605      	mov	r5, r0
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	460c      	mov	r4, r1
 8003bbe:	b118      	cbz	r0, 8003bc8 <__swsetup_r+0x14>
 8003bc0:	6a03      	ldr	r3, [r0, #32]
 8003bc2:	b90b      	cbnz	r3, 8003bc8 <__swsetup_r+0x14>
 8003bc4:	f7ff fa3c 	bl	8003040 <__sinit>
 8003bc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bcc:	0719      	lsls	r1, r3, #28
 8003bce:	d422      	bmi.n	8003c16 <__swsetup_r+0x62>
 8003bd0:	06da      	lsls	r2, r3, #27
 8003bd2:	d407      	bmi.n	8003be4 <__swsetup_r+0x30>
 8003bd4:	2209      	movs	r2, #9
 8003bd6:	602a      	str	r2, [r5, #0]
 8003bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bdc:	81a3      	strh	r3, [r4, #12]
 8003bde:	f04f 30ff 	mov.w	r0, #4294967295
 8003be2:	e033      	b.n	8003c4c <__swsetup_r+0x98>
 8003be4:	0758      	lsls	r0, r3, #29
 8003be6:	d512      	bpl.n	8003c0e <__swsetup_r+0x5a>
 8003be8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bea:	b141      	cbz	r1, 8003bfe <__swsetup_r+0x4a>
 8003bec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003bf0:	4299      	cmp	r1, r3
 8003bf2:	d002      	beq.n	8003bfa <__swsetup_r+0x46>
 8003bf4:	4628      	mov	r0, r5
 8003bf6:	f7ff fb2b 	bl	8003250 <_free_r>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8003bfe:	89a3      	ldrh	r3, [r4, #12]
 8003c00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003c04:	81a3      	strh	r3, [r4, #12]
 8003c06:	2300      	movs	r3, #0
 8003c08:	6063      	str	r3, [r4, #4]
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	6023      	str	r3, [r4, #0]
 8003c0e:	89a3      	ldrh	r3, [r4, #12]
 8003c10:	f043 0308 	orr.w	r3, r3, #8
 8003c14:	81a3      	strh	r3, [r4, #12]
 8003c16:	6923      	ldr	r3, [r4, #16]
 8003c18:	b94b      	cbnz	r3, 8003c2e <__swsetup_r+0x7a>
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c24:	d003      	beq.n	8003c2e <__swsetup_r+0x7a>
 8003c26:	4621      	mov	r1, r4
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f000 f84f 	bl	8003ccc <__smakebuf_r>
 8003c2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c32:	f013 0201 	ands.w	r2, r3, #1
 8003c36:	d00a      	beq.n	8003c4e <__swsetup_r+0x9a>
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60a2      	str	r2, [r4, #8]
 8003c3c:	6962      	ldr	r2, [r4, #20]
 8003c3e:	4252      	negs	r2, r2
 8003c40:	61a2      	str	r2, [r4, #24]
 8003c42:	6922      	ldr	r2, [r4, #16]
 8003c44:	b942      	cbnz	r2, 8003c58 <__swsetup_r+0xa4>
 8003c46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003c4a:	d1c5      	bne.n	8003bd8 <__swsetup_r+0x24>
 8003c4c:	bd38      	pop	{r3, r4, r5, pc}
 8003c4e:	0799      	lsls	r1, r3, #30
 8003c50:	bf58      	it	pl
 8003c52:	6962      	ldrpl	r2, [r4, #20]
 8003c54:	60a2      	str	r2, [r4, #8]
 8003c56:	e7f4      	b.n	8003c42 <__swsetup_r+0x8e>
 8003c58:	2000      	movs	r0, #0
 8003c5a:	e7f7      	b.n	8003c4c <__swsetup_r+0x98>
 8003c5c:	20000018 	.word	0x20000018

08003c60 <_sbrk_r>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4d06      	ldr	r5, [pc, #24]	@ (8003c7c <_sbrk_r+0x1c>)
 8003c64:	2300      	movs	r3, #0
 8003c66:	4604      	mov	r4, r0
 8003c68:	4608      	mov	r0, r1
 8003c6a:	602b      	str	r3, [r5, #0]
 8003c6c:	f7fd fa16 	bl	800109c <_sbrk>
 8003c70:	1c43      	adds	r3, r0, #1
 8003c72:	d102      	bne.n	8003c7a <_sbrk_r+0x1a>
 8003c74:	682b      	ldr	r3, [r5, #0]
 8003c76:	b103      	cbz	r3, 8003c7a <_sbrk_r+0x1a>
 8003c78:	6023      	str	r3, [r4, #0]
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	20000338 	.word	0x20000338

08003c80 <__swhatbuf_r>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	460c      	mov	r4, r1
 8003c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c88:	2900      	cmp	r1, #0
 8003c8a:	b096      	sub	sp, #88	@ 0x58
 8003c8c:	4615      	mov	r5, r2
 8003c8e:	461e      	mov	r6, r3
 8003c90:	da0d      	bge.n	8003cae <__swhatbuf_r+0x2e>
 8003c92:	89a3      	ldrh	r3, [r4, #12]
 8003c94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	bf14      	ite	ne
 8003c9e:	2340      	movne	r3, #64	@ 0x40
 8003ca0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003ca4:	2000      	movs	r0, #0
 8003ca6:	6031      	str	r1, [r6, #0]
 8003ca8:	602b      	str	r3, [r5, #0]
 8003caa:	b016      	add	sp, #88	@ 0x58
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
 8003cae:	466a      	mov	r2, sp
 8003cb0:	f000 f848 	bl	8003d44 <_fstat_r>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	dbec      	blt.n	8003c92 <__swhatbuf_r+0x12>
 8003cb8:	9901      	ldr	r1, [sp, #4]
 8003cba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003cbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003cc2:	4259      	negs	r1, r3
 8003cc4:	4159      	adcs	r1, r3
 8003cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cca:	e7eb      	b.n	8003ca4 <__swhatbuf_r+0x24>

08003ccc <__smakebuf_r>:
 8003ccc:	898b      	ldrh	r3, [r1, #12]
 8003cce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cd0:	079d      	lsls	r5, r3, #30
 8003cd2:	4606      	mov	r6, r0
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	d507      	bpl.n	8003ce8 <__smakebuf_r+0x1c>
 8003cd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003cdc:	6023      	str	r3, [r4, #0]
 8003cde:	6123      	str	r3, [r4, #16]
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	6163      	str	r3, [r4, #20]
 8003ce4:	b003      	add	sp, #12
 8003ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce8:	ab01      	add	r3, sp, #4
 8003cea:	466a      	mov	r2, sp
 8003cec:	f7ff ffc8 	bl	8003c80 <__swhatbuf_r>
 8003cf0:	9f00      	ldr	r7, [sp, #0]
 8003cf2:	4605      	mov	r5, r0
 8003cf4:	4639      	mov	r1, r7
 8003cf6:	4630      	mov	r0, r6
 8003cf8:	f7ff fb16 	bl	8003328 <_malloc_r>
 8003cfc:	b948      	cbnz	r0, 8003d12 <__smakebuf_r+0x46>
 8003cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d02:	059a      	lsls	r2, r3, #22
 8003d04:	d4ee      	bmi.n	8003ce4 <__smakebuf_r+0x18>
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	f043 0302 	orr.w	r3, r3, #2
 8003d0e:	81a3      	strh	r3, [r4, #12]
 8003d10:	e7e2      	b.n	8003cd8 <__smakebuf_r+0xc>
 8003d12:	89a3      	ldrh	r3, [r4, #12]
 8003d14:	6020      	str	r0, [r4, #0]
 8003d16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d1a:	81a3      	strh	r3, [r4, #12]
 8003d1c:	9b01      	ldr	r3, [sp, #4]
 8003d1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003d22:	b15b      	cbz	r3, 8003d3c <__smakebuf_r+0x70>
 8003d24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d28:	4630      	mov	r0, r6
 8003d2a:	f000 f81d 	bl	8003d68 <_isatty_r>
 8003d2e:	b128      	cbz	r0, 8003d3c <__smakebuf_r+0x70>
 8003d30:	89a3      	ldrh	r3, [r4, #12]
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	81a3      	strh	r3, [r4, #12]
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	431d      	orrs	r5, r3
 8003d40:	81a5      	strh	r5, [r4, #12]
 8003d42:	e7cf      	b.n	8003ce4 <__smakebuf_r+0x18>

08003d44 <_fstat_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	4d07      	ldr	r5, [pc, #28]	@ (8003d64 <_fstat_r+0x20>)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	4604      	mov	r4, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	4611      	mov	r1, r2
 8003d50:	602b      	str	r3, [r5, #0]
 8003d52:	f7fd f97b 	bl	800104c <_fstat>
 8003d56:	1c43      	adds	r3, r0, #1
 8003d58:	d102      	bne.n	8003d60 <_fstat_r+0x1c>
 8003d5a:	682b      	ldr	r3, [r5, #0]
 8003d5c:	b103      	cbz	r3, 8003d60 <_fstat_r+0x1c>
 8003d5e:	6023      	str	r3, [r4, #0]
 8003d60:	bd38      	pop	{r3, r4, r5, pc}
 8003d62:	bf00      	nop
 8003d64:	20000338 	.word	0x20000338

08003d68 <_isatty_r>:
 8003d68:	b538      	push	{r3, r4, r5, lr}
 8003d6a:	4d06      	ldr	r5, [pc, #24]	@ (8003d84 <_isatty_r+0x1c>)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	4604      	mov	r4, r0
 8003d70:	4608      	mov	r0, r1
 8003d72:	602b      	str	r3, [r5, #0]
 8003d74:	f7fd f97a 	bl	800106c <_isatty>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d102      	bne.n	8003d82 <_isatty_r+0x1a>
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	b103      	cbz	r3, 8003d82 <_isatty_r+0x1a>
 8003d80:	6023      	str	r3, [r4, #0]
 8003d82:	bd38      	pop	{r3, r4, r5, pc}
 8003d84:	20000338 	.word	0x20000338

08003d88 <_init>:
 8003d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d8a:	bf00      	nop
 8003d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8e:	bc08      	pop	{r3}
 8003d90:	469e      	mov	lr, r3
 8003d92:	4770      	bx	lr

08003d94 <_fini>:
 8003d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d96:	bf00      	nop
 8003d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d9a:	bc08      	pop	{r3}
 8003d9c:	469e      	mov	lr, r3
 8003d9e:	4770      	bx	lr
