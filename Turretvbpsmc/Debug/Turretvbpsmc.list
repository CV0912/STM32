
Turretvbpsmc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800a998  0800a998  0000b998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae28  0800ae28  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae28  0800ae28  0000be28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae30  0800ae30  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae30  0800ae30  0000be30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae34  0800ae34  0000be34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ae38  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  200001d4  0800b00c  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  0800b00c  0000c528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb79  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002189  00000000  00000000  0001ad7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  0001cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab8  00000000  00000000  0001dcc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023233  00000000  00000000  0001e778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010619  00000000  00000000  000419ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4691  00000000  00000000  00051fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126655  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe8  00000000  00000000  00126698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0012b680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a980 	.word	0x0800a980

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800a980 	.word	0x0800a980

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rxbuff[16];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 800102c:	2210      	movs	r2, #16
 800102e:	4904      	ldr	r1, [pc, #16]	@ (8001040 <HAL_UART_RxCpltCallback+0x1c>)
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <HAL_UART_RxCpltCallback+0x20>)
 8001032:	f003 ff9c 	bl	8004f6e <HAL_UART_Receive_DMA>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200003c4 	.word	0x200003c4
 8001044:	200002d4 	.word	0x200002d4

08001048 <compute_motor_position>:
int compute_motor_position(float target_angle, int16_t current_position) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001052:	4603      	mov	r3, r0
 8001054:	807b      	strh	r3, [r7, #2]
    // 1. Convert current encoder position to angle
    float current_angle = (current_position / ENCODER_RESOLUTION) * DEGREES_PER_REVOLUTION;
 8001056:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800105a:	ee07 3a90 	vmov	s15, r3
 800105e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001062:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8001270 <compute_motor_position+0x228>
 8001066:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800106a:	ed9f 7a82 	vldr	s14, [pc, #520]	@ 8001274 <compute_motor_position+0x22c>
 800106e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001072:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // 2. Calculate proxy target (u* from paper)
    float u_star = (target_angle - current_angle +
 8001076:	ed97 7a01 	vldr	s14, [r7, #4]
 800107a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800107e:	ee37 7a67 	vsub.f32	s14, s14, s15
                    TIME_CONSTANT * (0 - proxy.proxy_vel)) /
 8001082:	4b7d      	ldr	r3, [pc, #500]	@ (8001278 <compute_motor_position+0x230>)
 8001084:	edd3 7a01 	vldr	s15, [r3, #4]
 8001088:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 800127c <compute_motor_position+0x234>
 800108c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001090:	eddf 6a7b 	vldr	s13, [pc, #492]	@ 8001280 <compute_motor_position+0x238>
 8001094:	ee67 7aa6 	vmul.f32	s15, s15, s13
    float u_star = (target_angle - current_angle +
 8001098:	ee37 7a27 	vadd.f32	s14, s14, s15
 800109c:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8001284 <compute_motor_position+0x23c>
 80010a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010a4:	edc7 7a08 	vstr	s15, [r7, #32]
                   (TIME_CONSTANT + CONTROL_INTERVAL);

    // 3. Apply velocity limit (V)
    float u = (fabs(u_star) > VELOCITY_LIMIT) ?
 80010a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80010ac:	eef0 7ae7 	vabs.f32	s15, s15
              (VELOCITY_LIMIT * (u_star > 0 ? 1 : -1)) : u_star;
 80010b0:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001288 <compute_motor_position+0x240>
 80010b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	dd10      	ble.n	80010e0 <compute_motor_position+0x98>
 80010be:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	dd02      	ble.n	80010d2 <compute_motor_position+0x8a>
 80010cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80010d0:	e001      	b.n	80010d6 <compute_motor_position+0x8e>
 80010d2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80010d6:	ed9f 7a6c 	vldr	s14, [pc, #432]	@ 8001288 <compute_motor_position+0x240>
 80010da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010de:	e001      	b.n	80010e4 <compute_motor_position+0x9c>
 80010e0:	edd7 7a08 	vldr	s15, [r7, #32]
    float u = (fabs(u_star) > VELOCITY_LIMIT) ?
 80010e4:	edc7 7a07 	vstr	s15, [r7, #28]

    // 4. Compute force (f_star) with proxy dynamics
    float term1 = INTEGRAL_GAIN * proxy.a_prev +
 80010e8:	4b63      	ldr	r3, [pc, #396]	@ (8001278 <compute_motor_position+0x230>)
 80010ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80010ee:	ed9f 7a67 	vldr	s14, [pc, #412]	@ 800128c <compute_motor_position+0x244>
 80010f2:	ee27 7a87 	vmul.f32	s14, s15, s14
                  (INTEGRAL_GAIN * CONTROL_INTERVAL + PROPORTIONAL_GAIN) *
                  (proxy.a_prev - proxy.a_prev_prev) / CONTROL_INTERVAL;
 80010f6:	4b60      	ldr	r3, [pc, #384]	@ (8001278 <compute_motor_position+0x230>)
 80010f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80010fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001278 <compute_motor_position+0x230>)
 80010fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001102:	ee76 7ae7 	vsub.f32	s15, s13, s15
                  (INTEGRAL_GAIN * CONTROL_INTERVAL + PROPORTIONAL_GAIN) *
 8001106:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001290 <compute_motor_position+0x248>
 800110a:	ee67 6aa6 	vmul.f32	s13, s15, s13
                  (proxy.a_prev - proxy.a_prev_prev) / CONTROL_INTERVAL;
 800110e:	ed9f 6a61 	vldr	s12, [pc, #388]	@ 8001294 <compute_motor_position+0x24c>
 8001112:	eec6 7a86 	vdiv.f32	s15, s13, s12
    float term1 = INTEGRAL_GAIN * proxy.a_prev +
 8001116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111a:	edc7 7a06 	vstr	s15, [r7, #24]

    float term2 = (INTEGRAL_GAIN * CONTROL_INTERVAL * CONTROL_INTERVAL +
                   PROPORTIONAL_GAIN * CONTROL_INTERVAL + DERIVATIVE_GAIN) *
                  (u - proxy.proxy_vel);
 800111e:	4b56      	ldr	r3, [pc, #344]	@ (8001278 <compute_motor_position+0x230>)
 8001120:	edd3 7a01 	vldr	s15, [r3, #4]
 8001124:	ed97 7a07 	vldr	s14, [r7, #28]
 8001128:	ee77 7a67 	vsub.f32	s15, s14, s15
    float term2 = (INTEGRAL_GAIN * CONTROL_INTERVAL * CONTROL_INTERVAL +
 800112c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8001298 <compute_motor_position+0x250>
 8001130:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001134:	edc7 7a05 	vstr	s15, [r7, #20]

    float f_star = term1 + term2;
 8001138:	ed97 7a06 	vldr	s14, [r7, #24]
 800113c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001144:	edc7 7a04 	vstr	s15, [r7, #16]

    // 5. Apply force limit (F)
    float f = (fabs(f_star) > FORCE_LIMIT) ?
 8001148:	edd7 7a04 	vldr	s15, [r7, #16]
 800114c:	eef0 7ae7 	vabs.f32	s15, s15
              (FORCE_LIMIT * (f_star > 0 ? 1 : -1)) : f_star;
 8001150:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 800129c <compute_motor_position+0x254>
 8001154:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	dd10      	ble.n	8001180 <compute_motor_position+0x138>
 800115e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001162:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	dd02      	ble.n	8001172 <compute_motor_position+0x12a>
 800116c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001170:	e001      	b.n	8001176 <compute_motor_position+0x12e>
 8001172:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8001176:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800129c <compute_motor_position+0x254>
 800117a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800117e:	e001      	b.n	8001184 <compute_motor_position+0x13c>
 8001180:	edd7 7a04 	vldr	s15, [r7, #16]
    float f = (fabs(f_star) > FORCE_LIMIT) ?
 8001184:	edc7 7a03 	vstr	s15, [r7, #12]

    // 6. Update proxy state
    float a = ((PROPORTIONAL_GAIN * CONTROL_INTERVAL + DERIVATIVE_GAIN) * proxy.a_prev +
 8001188:	4b3b      	ldr	r3, [pc, #236]	@ (8001278 <compute_motor_position+0x230>)
 800118a:	edd3 7a02 	vldr	s15, [r3, #8]
 800118e:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80012a0 <compute_motor_position+0x258>
 8001192:	ee27 7a87 	vmul.f32	s14, s15, s14
               DERIVATIVE_GAIN * (proxy.a_prev - proxy.a_prev_prev) +
 8001196:	4b38      	ldr	r3, [pc, #224]	@ (8001278 <compute_motor_position+0x230>)
 8001198:	edd3 6a02 	vldr	s13, [r3, #8]
 800119c:	4b36      	ldr	r3, [pc, #216]	@ (8001278 <compute_motor_position+0x230>)
 800119e:	edd3 7a03 	vldr	s15, [r3, #12]
 80011a2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80011a6:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 80012a4 <compute_motor_position+0x25c>
 80011aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
    float a = ((PROPORTIONAL_GAIN * CONTROL_INTERVAL + DERIVATIVE_GAIN) * proxy.a_prev +
 80011ae:	ee37 7a27 	vadd.f32	s14, s14, s15
               CONTROL_INTERVAL * CONTROL_INTERVAL * f) /
 80011b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011b6:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80012a8 <compute_motor_position+0x260>
 80011ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
               DERIVATIVE_GAIN * (proxy.a_prev - proxy.a_prev_prev) +
 80011be:	ee37 7a27 	vadd.f32	s14, s14, s15
    float a = ((PROPORTIONAL_GAIN * CONTROL_INTERVAL + DERIVATIVE_GAIN) * proxy.a_prev +
 80011c2:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8001298 <compute_motor_position+0x250>
 80011c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011ca:	edc7 7a02 	vstr	s15, [r7, #8]
              (INTEGRAL_GAIN * CONTROL_INTERVAL * CONTROL_INTERVAL +
               PROPORTIONAL_GAIN * CONTROL_INTERVAL + DERIVATIVE_GAIN);

    // 7. Update proxy velocity and position
    proxy.proxy_vel = (a - proxy.a_prev) / CONTROL_INTERVAL;
 80011ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <compute_motor_position+0x230>)
 80011d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80011d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80011d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011dc:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8001294 <compute_motor_position+0x24c>
 80011e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011e4:	4b24      	ldr	r3, [pc, #144]	@ (8001278 <compute_motor_position+0x230>)
 80011e6:	edc3 7a01 	vstr	s15, [r3, #4]
    proxy.proxy_pos += proxy.proxy_vel * CONTROL_INTERVAL;
 80011ea:	4b23      	ldr	r3, [pc, #140]	@ (8001278 <compute_motor_position+0x230>)
 80011ec:	ed93 7a00 	vldr	s14, [r3]
 80011f0:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <compute_motor_position+0x230>)
 80011f2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011f6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001294 <compute_motor_position+0x24c>
 80011fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80011fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001202:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <compute_motor_position+0x230>)
 8001204:	edc3 7a00 	vstr	s15, [r3]

    // 8. Prepare for next iteration
    proxy.a_prev_prev = proxy.a_prev;
 8001208:	4b1b      	ldr	r3, [pc, #108]	@ (8001278 <compute_motor_position+0x230>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	4a1a      	ldr	r2, [pc, #104]	@ (8001278 <compute_motor_position+0x230>)
 800120e:	60d3      	str	r3, [r2, #12]
    proxy.a_prev = a;
 8001210:	4a19      	ldr	r2, [pc, #100]	@ (8001278 <compute_motor_position+0x230>)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	6093      	str	r3, [r2, #8]

    // 9. Output motor command (clamped)
    return (int)fmin(fmax(f, -900), 900);
 8001216:	68f8      	ldr	r0, [r7, #12]
 8001218:	f7ff f9b6 	bl	8000588 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	ed9f 1b0f 	vldr	d1, [pc, #60]	@ 8001260 <compute_motor_position+0x218>
 8001224:	ec43 2b10 	vmov	d0, r2, r3
 8001228:	f009 fb2c 	bl	800a884 <fmax>
 800122c:	eeb0 7a40 	vmov.f32	s14, s0
 8001230:	eef0 7a60 	vmov.f32	s15, s1
 8001234:	ed9f 1b0c 	vldr	d1, [pc, #48]	@ 8001268 <compute_motor_position+0x220>
 8001238:	eeb0 0a47 	vmov.f32	s0, s14
 800123c:	eef0 0a67 	vmov.f32	s1, s15
 8001240:	f009 fb4a 	bl	800a8d8 <fmin>
 8001244:	ec53 2b10 	vmov	r2, r3, d0
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f7ff fca4 	bl	8000b98 <__aeabi_d2iz>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3728      	adds	r7, #40	@ 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	f3af 8000 	nop.w
 8001260:	00000000 	.word	0x00000000
 8001264:	c08c2000 	.word	0xc08c2000
 8001268:	00000000 	.word	0x00000000
 800126c:	408c2000 	.word	0x408c2000
 8001270:	44160000 	.word	0x44160000
 8001274:	43b40000 	.word	0x43b40000
 8001278:	20000234 	.word	0x20000234
 800127c:	00000000 	.word	0x00000000
 8001280:	3e4ccccd 	.word	0x3e4ccccd
 8001284:	3e581062 	.word	0x3e581062
 8001288:	42c80000 	.word	0x42c80000
 800128c:	461c4000 	.word	0x461c4000
 8001290:	45fd7000 	.word	0x45fd7000
 8001294:	3c343958 	.word	0x3c343958
 8001298:	431535c2 	.word	0x431535c2
 800129c:	44480000 	.word	0x44480000
 80012a0:	43140000 	.word	0x43140000
 80012a4:	42700000 	.word	0x42700000
 80012a8:	38fdc161 	.word	0x38fdc161

080012ac <control_turret>:
void control_turret() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
    uint16_t raw_counter = __HAL_TIM_GET_COUNTER(&htim2);
 80012b2:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <control_turret+0xcc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b8:	817b      	strh	r3, [r7, #10]
    int16_t signed_counter = (raw_counter < 32768) ?
 80012ba:	897b      	ldrh	r3, [r7, #10]
 80012bc:	813b      	strh	r3, [r7, #8]
                              (int16_t)raw_counter :
                              (int16_t)(raw_counter - 65536);

    float target_angle = 0;  // Dynamic setpoint
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

    // Dynamic target selection example
    if (cro == 1) target_angle = 400;
 80012c4:	4b2d      	ldr	r3, [pc, #180]	@ (800137c <control_turret+0xd0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <control_turret+0x24>
 80012cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001380 <control_turret+0xd4>)
 80012ce:	60fb      	str	r3, [r7, #12]
    if (squ == 1) target_angle = 0;
 80012d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001384 <control_turret+0xd8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d102      	bne.n	80012de <control_turret+0x32>
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
    if (tri == 1) target_angle = -900;
 80012de:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <control_turret+0xdc>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d101      	bne.n	80012ea <control_turret+0x3e>
 80012e6:	4b29      	ldr	r3, [pc, #164]	@ (800138c <control_turret+0xe0>)
 80012e8:	60fb      	str	r3, [r7, #12]
    if (cir == 1) target_angle = 700;
 80012ea:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <control_turret+0xe4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <control_turret+0x4a>
 80012f2:	4b28      	ldr	r3, [pc, #160]	@ (8001394 <control_turret+0xe8>)
 80012f4:	60fb      	str	r3, [r7, #12]

    // Only control if significant error exists
    if (fabs(signed_counter - target_angle) > 3) {
 80012f6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80012fa:	ee07 3a90 	vmov	s15, r3
 80012fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001302:	edd7 7a03 	vldr	s15, [r7, #12]
 8001306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800130a:	eef0 7ae7 	vabs.f32	s15, s15
 800130e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800131a:	dc00      	bgt.n	800131e <control_turret+0x72>

        // Apply PWM
        TIM1->CCR1 = abs(output);
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
    }
}
 800131c:	e028      	b.n	8001370 <control_turret+0xc4>
        int output = compute_motor_position(target_angle, signed_counter);
 800131e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001322:	4618      	mov	r0, r3
 8001324:	ed97 0a03 	vldr	s0, [r7, #12]
 8001328:	f7ff fe8e 	bl	8001048 <compute_motor_position>
 800132c:	6078      	str	r0, [r7, #4]
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9,
 800132e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001332:	ee07 3a90 	vmov	s15, r3
 8001336:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800133a:	ed97 7a03 	vldr	s14, [r7, #12]
 800133e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001346:	bfcc      	ite	gt
 8001348:	2301      	movgt	r3, #1
 800134a:	2300      	movle	r3, #0
 800134c:	b2db      	uxtb	r3, r3
 800134e:	461a      	mov	r2, r3
 8001350:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001354:	4810      	ldr	r0, [pc, #64]	@ (8001398 <control_turret+0xec>)
 8001356:	f001 fddf 	bl	8002f18 <HAL_GPIO_WritePin>
        TIM1->CCR1 = abs(output);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001360:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001364:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <control_turret+0xf0>)
 8001366:	635a      	str	r2, [r3, #52]	@ 0x34
        HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001368:	2100      	movs	r1, #0
 800136a:	480d      	ldr	r0, [pc, #52]	@ (80013a0 <control_turret+0xf4>)
 800136c:	f002 fc7e 	bl	8003c6c <HAL_TIM_PWM_Start>
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000028c 	.word	0x2000028c
 800137c:	20000204 	.word	0x20000204
 8001380:	43c80000 	.word	0x43c80000
 8001384:	20000208 	.word	0x20000208
 8001388:	2000020c 	.word	0x2000020c
 800138c:	c4610000 	.word	0xc4610000
 8001390:	20000210 	.word	0x20000210
 8001394:	442f0000 	.word	0x442f0000
 8001398:	40020800 	.word	0x40020800
 800139c:	40010000 	.word	0x40010000
 80013a0:	20000244 	.word	0x20000244

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a6:	b08d      	sub	sp, #52	@ 0x34
 80013a8:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013aa:	f000 fe9b 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ae:	f000 f963 	bl	8001678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b2:	f000 fb37 	bl	8001a24 <MX_GPIO_Init>
  MX_DMA_Init();
 80013b6:	f000 fb15 	bl	80019e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80013ba:	f000 fae9 	bl	8001990 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80013be:	f000 f9c9 	bl	8001754 <MX_TIM1_Init>
  MX_TIM2_Init();
 80013c2:	f000 fa67 	bl	8001894 <MX_TIM2_Init>
  MX_UART4_Init();
 80013c6:	f000 fab9 	bl	800193c <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80013ca:	2210      	movs	r2, #16
 80013cc:	4971      	ldr	r1, [pc, #452]	@ (8001594 <main+0x1f0>)
 80013ce:	4872      	ldr	r0, [pc, #456]	@ (8001598 <main+0x1f4>)
 80013d0:	f003 fdcd 	bl	8004f6e <HAL_UART_Receive_DMA>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80013d4:	213c      	movs	r1, #60	@ 0x3c
 80013d6:	4871      	ldr	r0, [pc, #452]	@ (800159c <main+0x1f8>)
 80013d8:	f002 fdb6 	bl	8003f48 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* ps5 controller */
	  		lx = (rxbuff[0] & 0x80) ?
 80013dc:	4b6d      	ldr	r3, [pc, #436]	@ (8001594 <main+0x1f0>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da04      	bge.n	80013f0 <main+0x4c>
 80013e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001594 <main+0x1f0>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013ee:	e001      	b.n	80013f4 <main+0x50>
 80013f0:	4b68      	ldr	r3, [pc, #416]	@ (8001594 <main+0x1f0>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
	  		lx = (rxbuff[0] & 0x80) ?
 80013f4:	4a6a      	ldr	r2, [pc, #424]	@ (80015a0 <main+0x1fc>)
 80013f6:	6013      	str	r3, [r2, #0]
	  		ly = (rxbuff[1] & 0x80) ?
 80013f8:	4b66      	ldr	r3, [pc, #408]	@ (8001594 <main+0x1f0>)
 80013fa:	785b      	ldrb	r3, [r3, #1]
 80013fc:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 80013fe:	2b00      	cmp	r3, #0
 8001400:	da04      	bge.n	800140c <main+0x68>
 8001402:	4b64      	ldr	r3, [pc, #400]	@ (8001594 <main+0x1f0>)
 8001404:	785b      	ldrb	r3, [r3, #1]
 8001406:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800140a:	e001      	b.n	8001410 <main+0x6c>
 800140c:	4b61      	ldr	r3, [pc, #388]	@ (8001594 <main+0x1f0>)
 800140e:	785b      	ldrb	r3, [r3, #1]
	  		ly = (rxbuff[1] & 0x80) ?
 8001410:	4a64      	ldr	r2, [pc, #400]	@ (80015a4 <main+0x200>)
 8001412:	6013      	str	r3, [r2, #0]
	  		rx = (rxbuff[2] & 0x80) ?
 8001414:	4b5f      	ldr	r3, [pc, #380]	@ (8001594 <main+0x1f0>)
 8001416:	789b      	ldrb	r3, [r3, #2]
 8001418:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 800141a:	2b00      	cmp	r3, #0
 800141c:	da04      	bge.n	8001428 <main+0x84>
 800141e:	4b5d      	ldr	r3, [pc, #372]	@ (8001594 <main+0x1f0>)
 8001420:	789b      	ldrb	r3, [r3, #2]
 8001422:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001426:	e001      	b.n	800142c <main+0x88>
 8001428:	4b5a      	ldr	r3, [pc, #360]	@ (8001594 <main+0x1f0>)
 800142a:	789b      	ldrb	r3, [r3, #2]
	  		rx = (rxbuff[2] & 0x80) ?
 800142c:	4a5e      	ldr	r2, [pc, #376]	@ (80015a8 <main+0x204>)
 800142e:	6013      	str	r3, [r2, #0]
	  		ry = (rxbuff[3] & 0x80) ?
 8001430:	4b58      	ldr	r3, [pc, #352]	@ (8001594 <main+0x1f0>)
 8001432:	78db      	ldrb	r3, [r3, #3]
 8001434:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 8001436:	2b00      	cmp	r3, #0
 8001438:	da04      	bge.n	8001444 <main+0xa0>
 800143a:	4b56      	ldr	r3, [pc, #344]	@ (8001594 <main+0x1f0>)
 800143c:	78db      	ldrb	r3, [r3, #3]
 800143e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001442:	e001      	b.n	8001448 <main+0xa4>
 8001444:	4b53      	ldr	r3, [pc, #332]	@ (8001594 <main+0x1f0>)
 8001446:	78db      	ldrb	r3, [r3, #3]
	  		ry = (rxbuff[3] & 0x80) ?
 8001448:	4a58      	ldr	r2, [pc, #352]	@ (80015ac <main+0x208>)
 800144a:	6013      	str	r3, [r2, #0]
	  		cro = (rxbuff[4] & 0x80) ?
 800144c:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <main+0x1f0>)
 800144e:	791b      	ldrb	r3, [r3, #4]
 8001450:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 8001452:	2b00      	cmp	r3, #0
 8001454:	da04      	bge.n	8001460 <main+0xbc>
 8001456:	4b4f      	ldr	r3, [pc, #316]	@ (8001594 <main+0x1f0>)
 8001458:	791b      	ldrb	r3, [r3, #4]
 800145a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800145e:	e001      	b.n	8001464 <main+0xc0>
 8001460:	4b4c      	ldr	r3, [pc, #304]	@ (8001594 <main+0x1f0>)
 8001462:	791b      	ldrb	r3, [r3, #4]
	  		cro = (rxbuff[4] & 0x80) ?
 8001464:	4a52      	ldr	r2, [pc, #328]	@ (80015b0 <main+0x20c>)
 8001466:	6013      	str	r3, [r2, #0]
	  		squ = (rxbuff[5] & 0x80) ?
 8001468:	4b4a      	ldr	r3, [pc, #296]	@ (8001594 <main+0x1f0>)
 800146a:	795b      	ldrb	r3, [r3, #5]
 800146c:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 800146e:	2b00      	cmp	r3, #0
 8001470:	da04      	bge.n	800147c <main+0xd8>
 8001472:	4b48      	ldr	r3, [pc, #288]	@ (8001594 <main+0x1f0>)
 8001474:	795b      	ldrb	r3, [r3, #5]
 8001476:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800147a:	e001      	b.n	8001480 <main+0xdc>
 800147c:	4b45      	ldr	r3, [pc, #276]	@ (8001594 <main+0x1f0>)
 800147e:	795b      	ldrb	r3, [r3, #5]
	  		squ = (rxbuff[5] & 0x80) ?
 8001480:	4a4c      	ldr	r2, [pc, #304]	@ (80015b4 <main+0x210>)
 8001482:	6013      	str	r3, [r2, #0]
	  		tri = (rxbuff[6] & 0x80) ?
 8001484:	4b43      	ldr	r3, [pc, #268]	@ (8001594 <main+0x1f0>)
 8001486:	799b      	ldrb	r3, [r3, #6]
 8001488:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 800148a:	2b00      	cmp	r3, #0
 800148c:	da04      	bge.n	8001498 <main+0xf4>
 800148e:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <main+0x1f0>)
 8001490:	799b      	ldrb	r3, [r3, #6]
 8001492:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001496:	e001      	b.n	800149c <main+0xf8>
 8001498:	4b3e      	ldr	r3, [pc, #248]	@ (8001594 <main+0x1f0>)
 800149a:	799b      	ldrb	r3, [r3, #6]
	  		tri = (rxbuff[6] & 0x80) ?
 800149c:	4a46      	ldr	r2, [pc, #280]	@ (80015b8 <main+0x214>)
 800149e:	6013      	str	r3, [r2, #0]
	  		cir = (rxbuff[7] & 0x80) ?
 80014a0:	4b3c      	ldr	r3, [pc, #240]	@ (8001594 <main+0x1f0>)
 80014a2:	79db      	ldrb	r3, [r3, #7]
 80014a4:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da04      	bge.n	80014b4 <main+0x110>
 80014aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001594 <main+0x1f0>)
 80014ac:	79db      	ldrb	r3, [r3, #7]
 80014ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014b2:	e001      	b.n	80014b8 <main+0x114>
 80014b4:	4b37      	ldr	r3, [pc, #220]	@ (8001594 <main+0x1f0>)
 80014b6:	79db      	ldrb	r3, [r3, #7]
	  		cir = (rxbuff[7] & 0x80) ?
 80014b8:	4a40      	ldr	r2, [pc, #256]	@ (80015bc <main+0x218>)
 80014ba:	6013      	str	r3, [r2, #0]
	  		up = (rxbuff[8] & 0x80) ?
 80014bc:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <main+0x1f0>)
 80014be:	7a1b      	ldrb	r3, [r3, #8]
 80014c0:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	da04      	bge.n	80014d0 <main+0x12c>
 80014c6:	4b33      	ldr	r3, [pc, #204]	@ (8001594 <main+0x1f0>)
 80014c8:	7a1b      	ldrb	r3, [r3, #8]
 80014ca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014ce:	e001      	b.n	80014d4 <main+0x130>
 80014d0:	4b30      	ldr	r3, [pc, #192]	@ (8001594 <main+0x1f0>)
 80014d2:	7a1b      	ldrb	r3, [r3, #8]
	  		up = (rxbuff[8] & 0x80) ?
 80014d4:	4a3a      	ldr	r2, [pc, #232]	@ (80015c0 <main+0x21c>)
 80014d6:	6013      	str	r3, [r2, #0]
	  		down = (rxbuff[9] & 0x80) ?
 80014d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <main+0x1f0>)
 80014da:	7a5b      	ldrb	r3, [r3, #9]
 80014dc:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80014de:	2b00      	cmp	r3, #0
 80014e0:	da04      	bge.n	80014ec <main+0x148>
 80014e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001594 <main+0x1f0>)
 80014e4:	7a5b      	ldrb	r3, [r3, #9]
 80014e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80014ea:	e001      	b.n	80014f0 <main+0x14c>
 80014ec:	4b29      	ldr	r3, [pc, #164]	@ (8001594 <main+0x1f0>)
 80014ee:	7a5b      	ldrb	r3, [r3, #9]
	  		down = (rxbuff[9] & 0x80) ?
 80014f0:	4a34      	ldr	r2, [pc, #208]	@ (80015c4 <main+0x220>)
 80014f2:	6013      	str	r3, [r2, #0]
	  		left = (rxbuff[10] & 0x80) ?
 80014f4:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <main+0x1f0>)
 80014f6:	7a9b      	ldrb	r3, [r3, #10]
 80014f8:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	da04      	bge.n	8001508 <main+0x164>
 80014fe:	4b25      	ldr	r3, [pc, #148]	@ (8001594 <main+0x1f0>)
 8001500:	7a9b      	ldrb	r3, [r3, #10]
 8001502:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001506:	e001      	b.n	800150c <main+0x168>
 8001508:	4b22      	ldr	r3, [pc, #136]	@ (8001594 <main+0x1f0>)
 800150a:	7a9b      	ldrb	r3, [r3, #10]
	  		left = (rxbuff[10] & 0x80) ?
 800150c:	4a2e      	ldr	r2, [pc, #184]	@ (80015c8 <main+0x224>)
 800150e:	6013      	str	r3, [r2, #0]
	  		right = (rxbuff[11] & 0x80) ?
 8001510:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <main+0x1f0>)
 8001512:	7adb      	ldrb	r3, [r3, #11]
 8001514:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 8001516:	2b00      	cmp	r3, #0
 8001518:	da04      	bge.n	8001524 <main+0x180>
 800151a:	4b1e      	ldr	r3, [pc, #120]	@ (8001594 <main+0x1f0>)
 800151c:	7adb      	ldrb	r3, [r3, #11]
 800151e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001522:	e001      	b.n	8001528 <main+0x184>
 8001524:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <main+0x1f0>)
 8001526:	7adb      	ldrb	r3, [r3, #11]
	  		right = (rxbuff[11] & 0x80) ?
 8001528:	4a28      	ldr	r2, [pc, #160]	@ (80015cc <main+0x228>)
 800152a:	6013      	str	r3, [r2, #0]
	  		ll1 = (rxbuff[12] & 0x80) ?
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <main+0x1f0>)
 800152e:	7b1b      	ldrb	r3, [r3, #12]
 8001530:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 8001532:	2b00      	cmp	r3, #0
 8001534:	da04      	bge.n	8001540 <main+0x19c>
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <main+0x1f0>)
 8001538:	7b1b      	ldrb	r3, [r3, #12]
 800153a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800153e:	e001      	b.n	8001544 <main+0x1a0>
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <main+0x1f0>)
 8001542:	7b1b      	ldrb	r3, [r3, #12]
	  		ll1 = (rxbuff[12] & 0x80) ?
 8001544:	4a22      	ldr	r2, [pc, #136]	@ (80015d0 <main+0x22c>)
 8001546:	6013      	str	r3, [r2, #0]
	  		ll2 = (rxbuff[13] & 0x80) ?
 8001548:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <main+0x1f0>)
 800154a:	7b5b      	ldrb	r3, [r3, #13]
 800154c:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 800154e:	2b00      	cmp	r3, #0
 8001550:	da04      	bge.n	800155c <main+0x1b8>
 8001552:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <main+0x1f0>)
 8001554:	7b5b      	ldrb	r3, [r3, #13]
 8001556:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800155a:	e001      	b.n	8001560 <main+0x1bc>
 800155c:	4b0d      	ldr	r3, [pc, #52]	@ (8001594 <main+0x1f0>)
 800155e:	7b5b      	ldrb	r3, [r3, #13]
	  		ll2 = (rxbuff[13] & 0x80) ?
 8001560:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <main+0x230>)
 8001562:	6013      	str	r3, [r2, #0]
	  		rr1 = (rxbuff[14] & 0x80) ?
 8001564:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <main+0x1f0>)
 8001566:	7b9b      	ldrb	r3, [r3, #14]
 8001568:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 800156a:	2b00      	cmp	r3, #0
 800156c:	da04      	bge.n	8001578 <main+0x1d4>
 800156e:	4b09      	ldr	r3, [pc, #36]	@ (8001594 <main+0x1f0>)
 8001570:	7b9b      	ldrb	r3, [r3, #14]
 8001572:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001576:	e001      	b.n	800157c <main+0x1d8>
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <main+0x1f0>)
 800157a:	7b9b      	ldrb	r3, [r3, #14]
	  		rr1 = (rxbuff[14] & 0x80) ?
 800157c:	4a16      	ldr	r2, [pc, #88]	@ (80015d8 <main+0x234>)
 800157e:	6013      	str	r3, [r2, #0]
	  		rr2 = (rxbuff[15] & 0x80) ?
 8001580:	4b04      	ldr	r3, [pc, #16]	@ (8001594 <main+0x1f0>)
 8001582:	7bdb      	ldrb	r3, [r3, #15]
 8001584:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 8001586:	2b00      	cmp	r3, #0
 8001588:	da28      	bge.n	80015dc <main+0x238>
 800158a:	4b02      	ldr	r3, [pc, #8]	@ (8001594 <main+0x1f0>)
 800158c:	7bdb      	ldrb	r3, [r3, #15]
 800158e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001592:	e025      	b.n	80015e0 <main+0x23c>
 8001594:	200003c4 	.word	0x200003c4
 8001598:	200002d4 	.word	0x200002d4
 800159c:	2000028c 	.word	0x2000028c
 80015a0:	200001f4 	.word	0x200001f4
 80015a4:	200001f8 	.word	0x200001f8
 80015a8:	200001fc 	.word	0x200001fc
 80015ac:	20000200 	.word	0x20000200
 80015b0:	20000204 	.word	0x20000204
 80015b4:	20000208 	.word	0x20000208
 80015b8:	2000020c 	.word	0x2000020c
 80015bc:	20000210 	.word	0x20000210
 80015c0:	20000214 	.word	0x20000214
 80015c4:	20000218 	.word	0x20000218
 80015c8:	2000021c 	.word	0x2000021c
 80015cc:	20000220 	.word	0x20000220
 80015d0:	20000224 	.word	0x20000224
 80015d4:	2000022c 	.word	0x2000022c
 80015d8:	20000228 	.word	0x20000228
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <main+0x29c>)
 80015de:	7bdb      	ldrb	r3, [r3, #15]
	  		rr2 = (rxbuff[15] & 0x80) ?
 80015e0:	4a18      	ldr	r2, [pc, #96]	@ (8001644 <main+0x2a0>)
 80015e2:	6013      	str	r3, [r2, #0]

	  				printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\r\n",
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <main+0x2a4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b18      	ldr	r3, [pc, #96]	@ (800164c <main+0x2a8>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	60ba      	str	r2, [r7, #8]
 80015f0:	4b17      	ldr	r3, [pc, #92]	@ (8001650 <main+0x2ac>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	4b17      	ldr	r3, [pc, #92]	@ (8001654 <main+0x2b0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a17      	ldr	r2, [pc, #92]	@ (8001658 <main+0x2b4>)
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	4917      	ldr	r1, [pc, #92]	@ (800165c <main+0x2b8>)
 8001600:	6809      	ldr	r1, [r1, #0]
 8001602:	4817      	ldr	r0, [pc, #92]	@ (8001660 <main+0x2bc>)
 8001604:	6800      	ldr	r0, [r0, #0]
 8001606:	4c17      	ldr	r4, [pc, #92]	@ (8001664 <main+0x2c0>)
 8001608:	6824      	ldr	r4, [r4, #0]
 800160a:	603c      	str	r4, [r7, #0]
 800160c:	4d16      	ldr	r5, [pc, #88]	@ (8001668 <main+0x2c4>)
 800160e:	682d      	ldr	r5, [r5, #0]
 8001610:	4e16      	ldr	r6, [pc, #88]	@ (800166c <main+0x2c8>)
 8001612:	6836      	ldr	r6, [r6, #0]
 8001614:	4c16      	ldr	r4, [pc, #88]	@ (8001670 <main+0x2cc>)
 8001616:	f9b4 c000 	ldrsh.w	ip, [r4]
 800161a:	4664      	mov	r4, ip
 800161c:	9407      	str	r4, [sp, #28]
 800161e:	9606      	str	r6, [sp, #24]
 8001620:	9505      	str	r5, [sp, #20]
 8001622:	683c      	ldr	r4, [r7, #0]
 8001624:	9404      	str	r4, [sp, #16]
 8001626:	9003      	str	r0, [sp, #12]
 8001628:	9102      	str	r1, [sp, #8]
 800162a:	9201      	str	r2, [sp, #4]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68ba      	ldr	r2, [r7, #8]
 8001632:	68f9      	ldr	r1, [r7, #12]
 8001634:	480f      	ldr	r0, [pc, #60]	@ (8001674 <main+0x2d0>)
 8001636:	f005 fcd5 	bl	8006fe4 <iprintf>
	  						lx, ly, rx, ry, cro, squ, tri, cir, ll1, rr1,signed_counter);
//	  		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly,
//	  				rx, ry, cro, squ, tri, cir);
	  control_turret();
 800163a:	f7ff fe37 	bl	80012ac <control_turret>
	  		lx = (rxbuff[0] & 0x80) ?
 800163e:	e6cd      	b.n	80013dc <main+0x38>
 8001640:	200003c4 	.word	0x200003c4
 8001644:	20000230 	.word	0x20000230
 8001648:	200001f4 	.word	0x200001f4
 800164c:	200001f8 	.word	0x200001f8
 8001650:	200001fc 	.word	0x200001fc
 8001654:	20000200 	.word	0x20000200
 8001658:	20000204 	.word	0x20000204
 800165c:	20000208 	.word	0x20000208
 8001660:	2000020c 	.word	0x2000020c
 8001664:	20000210 	.word	0x20000210
 8001668:	20000224 	.word	0x20000224
 800166c:	20000228 	.word	0x20000228
 8001670:	200001f0 	.word	0x200001f0
 8001674:	0800a998 	.word	0x0800a998

08001678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b094      	sub	sp, #80	@ 0x50
 800167c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800167e:	f107 031c 	add.w	r3, r7, #28
 8001682:	2234      	movs	r2, #52	@ 0x34
 8001684:	2100      	movs	r1, #0
 8001686:	4618      	mov	r0, r3
 8001688:	f005 fd21 	bl	80070ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800168c:	f107 0308 	add.w	r3, r7, #8
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <SystemClock_Config+0xd4>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a4:	4a29      	ldr	r2, [pc, #164]	@ (800174c <SystemClock_Config+0xd4>)
 80016a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ac:	4b27      	ldr	r3, [pc, #156]	@ (800174c <SystemClock_Config+0xd4>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <SystemClock_Config+0xd8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016c4:	4a22      	ldr	r2, [pc, #136]	@ (8001750 <SystemClock_Config+0xd8>)
 80016c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <SystemClock_Config+0xd8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016dc:	2301      	movs	r3, #1
 80016de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e0:	2310      	movs	r3, #16
 80016e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e4:	2302      	movs	r3, #2
 80016e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016e8:	2300      	movs	r3, #0
 80016ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80016ec:	2310      	movs	r3, #16
 80016ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80016f0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80016f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016f6:	2304      	movs	r3, #4
 80016f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016fa:	2302      	movs	r3, #2
 80016fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016fe:	2302      	movs	r3, #2
 8001700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4618      	mov	r0, r3
 8001708:	f001 ff6a 	bl	80035e0 <HAL_RCC_OscConfig>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001712:	f000 fa21 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001716:	230f      	movs	r3, #15
 8001718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800171a:	2302      	movs	r3, #2
 800171c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800172c:	f107 0308 	add.w	r3, r7, #8
 8001730:	2102      	movs	r1, #2
 8001732:	4618      	mov	r0, r3
 8001734:	f001 fc0a 	bl	8002f4c <HAL_RCC_ClockConfig>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800173e:	f000 fa0b 	bl	8001b58 <Error_Handler>
  }
}
 8001742:	bf00      	nop
 8001744:	3750      	adds	r7, #80	@ 0x50
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000

08001754 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b096      	sub	sp, #88	@ 0x58
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	615a      	str	r2, [r3, #20]
 8001784:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2220      	movs	r2, #32
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f005 fc9e 	bl	80070ce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001792:	4b3e      	ldr	r3, [pc, #248]	@ (800188c <MX_TIM1_Init+0x138>)
 8001794:	4a3e      	ldr	r2, [pc, #248]	@ (8001890 <MX_TIM1_Init+0x13c>)
 8001796:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 8001798:	4b3c      	ldr	r3, [pc, #240]	@ (800188c <MX_TIM1_Init+0x138>)
 800179a:	22b3      	movs	r2, #179	@ 0xb3
 800179c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <MX_TIM1_Init+0x138>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80017a4:	4b39      	ldr	r3, [pc, #228]	@ (800188c <MX_TIM1_Init+0x138>)
 80017a6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017aa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b37      	ldr	r3, [pc, #220]	@ (800188c <MX_TIM1_Init+0x138>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017b2:	4b36      	ldr	r3, [pc, #216]	@ (800188c <MX_TIM1_Init+0x138>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b34      	ldr	r3, [pc, #208]	@ (800188c <MX_TIM1_Init+0x138>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017be:	4833      	ldr	r0, [pc, #204]	@ (800188c <MX_TIM1_Init+0x138>)
 80017c0:	f002 f9ac 	bl	8003b1c <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80017ca:	f000 f9c5 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017d4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017d8:	4619      	mov	r1, r3
 80017da:	482c      	ldr	r0, [pc, #176]	@ (800188c <MX_TIM1_Init+0x138>)
 80017dc:	f002 fdf4 	bl	80043c8 <HAL_TIM_ConfigClockSource>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017e6:	f000 f9b7 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ea:	4828      	ldr	r0, [pc, #160]	@ (800188c <MX_TIM1_Init+0x138>)
 80017ec:	f002 f9e5 	bl	8003bba <HAL_TIM_PWM_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017f6:	f000 f9af 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001802:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001806:	4619      	mov	r1, r3
 8001808:	4820      	ldr	r0, [pc, #128]	@ (800188c <MX_TIM1_Init+0x138>)
 800180a:	f003 f9f3 	bl	8004bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001814:	f000 f9a0 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001818:	2360      	movs	r3, #96	@ 0x60
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800181c:	2300      	movs	r3, #0
 800181e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001820:	2300      	movs	r3, #0
 8001822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001824:	2300      	movs	r3, #0
 8001826:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800182c:	2300      	movs	r3, #0
 800182e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001838:	2200      	movs	r2, #0
 800183a:	4619      	mov	r1, r3
 800183c:	4813      	ldr	r0, [pc, #76]	@ (800188c <MX_TIM1_Init+0x138>)
 800183e:	f002 fd01 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001848:	f000 f986 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001864:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	@ (800188c <MX_TIM1_Init+0x138>)
 8001870:	f003 fa3c 	bl	8004cec <HAL_TIMEx_ConfigBreakDeadTime>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800187a:	f000 f96d 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800187e:	4803      	ldr	r0, [pc, #12]	@ (800188c <MX_TIM1_Init+0x138>)
 8001880:	f000 fa08 	bl	8001c94 <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3758      	adds	r7, #88	@ 0x58
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000244 	.word	0x20000244
 8001890:	40010000 	.word	0x40010000

08001894 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	@ 0x30
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2224      	movs	r2, #36	@ 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f005 fc13 	bl	80070ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	1d3b      	adds	r3, r7, #4
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]
 80018ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018b0:	4b21      	ldr	r3, [pc, #132]	@ (8001938 <MX_TIM2_Init+0xa4>)
 80018b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80018b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001938 <MX_TIM2_Init+0xa4>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018be:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_TIM2_Init+0xa4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001938 <MX_TIM2_Init+0xa4>)
 80018c6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001938 <MX_TIM2_Init+0xa4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d2:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <MX_TIM2_Init+0xa4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018d8:	2303      	movs	r3, #3
 80018da:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80018dc:	2300      	movs	r3, #0
 80018de:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018e0:	2301      	movs	r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018e4:	2300      	movs	r3, #0
 80018e6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80018e8:	2305      	movs	r3, #5
 80018ea:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f0:	2301      	movs	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80018f8:	2305      	movs	r3, #5
 80018fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	4619      	mov	r1, r3
 8001902:	480d      	ldr	r0, [pc, #52]	@ (8001938 <MX_TIM2_Init+0xa4>)
 8001904:	f002 fa7a 	bl	8003dfc <HAL_TIM_Encoder_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800190e:	f000 f923 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	4806      	ldr	r0, [pc, #24]	@ (8001938 <MX_TIM2_Init+0xa4>)
 8001920:	f003 f968 	bl	8004bf4 <HAL_TIMEx_MasterConfigSynchronization>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800192a:	f000 f915 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	3730      	adds	r7, #48	@ 0x30
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	2000028c 	.word	0x2000028c

0800193c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001940:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_UART4_Init+0x4c>)
 8001942:	4a12      	ldr	r2, [pc, #72]	@ (800198c <MX_UART4_Init+0x50>)
 8001944:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001946:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <MX_UART4_Init+0x4c>)
 8001948:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800194c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_UART4_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001954:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_UART4_Init+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <MX_UART4_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001960:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_UART4_Init+0x4c>)
 8001962:	220c      	movs	r2, #12
 8001964:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <MX_UART4_Init+0x4c>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800196c:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_UART4_Init+0x4c>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001972:	4805      	ldr	r0, [pc, #20]	@ (8001988 <MX_UART4_Init+0x4c>)
 8001974:	f003 fa20 	bl	8004db8 <HAL_UART_Init>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800197e:	f000 f8eb 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200002d4 	.word	0x200002d4
 800198c:	40004c00 	.word	0x40004c00

08001990 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 8001996:	4a12      	ldr	r2, [pc, #72]	@ (80019e0 <MX_USART2_UART_Init+0x50>)
 8001998:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800199a:	4b10      	ldr	r3, [pc, #64]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 800199c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019a2:	4b0e      	ldr	r3, [pc, #56]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ae:	4b0b      	ldr	r3, [pc, #44]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 80019b6:	220c      	movs	r2, #12
 80019b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ba:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c0:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019c6:	4805      	ldr	r0, [pc, #20]	@ (80019dc <MX_USART2_UART_Init+0x4c>)
 80019c8:	f003 f9f6 	bl	8004db8 <HAL_UART_Init>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019d2:	f000 f8c1 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	2000031c 	.word	0x2000031c
 80019e0:	40004400 	.word	0x40004400

080019e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001a20 <MX_DMA_Init+0x3c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a20 <MX_DMA_Init+0x3c>)
 80019f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <MX_DMA_Init+0x3c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	200d      	movs	r0, #13
 8001a0c:	f000 fcb7 	bl	800237e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001a10:	200d      	movs	r0, #13
 8001a12:	f000 fcd0 	bl	80023b6 <HAL_NVIC_EnableIRQ>

}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b38      	ldr	r3, [pc, #224]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a37      	ldr	r2, [pc, #220]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b35      	ldr	r3, [pc, #212]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a30      	ldr	r2, [pc, #192]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b2e      	ldr	r3, [pc, #184]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b2a      	ldr	r3, [pc, #168]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a29      	ldr	r2, [pc, #164]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b27      	ldr	r3, [pc, #156]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b23      	ldr	r3, [pc, #140]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a22      	ldr	r2, [pc, #136]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <MX_GPIO_Init+0xfc>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2120      	movs	r1, #32
 8001aae:	481d      	ldr	r0, [pc, #116]	@ (8001b24 <MX_GPIO_Init+0x100>)
 8001ab0:	f001 fa32 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(turret_GPIO_Port, turret_Pin, GPIO_PIN_RESET);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001aba:	481b      	ldr	r0, [pc, #108]	@ (8001b28 <MX_GPIO_Init+0x104>)
 8001abc:	f001 fa2c 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001ac0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4814      	ldr	r0, [pc, #80]	@ (8001b28 <MX_GPIO_Init+0x104>)
 8001ad8:	f001 f88a 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001adc:	2320      	movs	r3, #32
 8001ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	480c      	ldr	r0, [pc, #48]	@ (8001b24 <MX_GPIO_Init+0x100>)
 8001af4:	f001 f87c 	bl	8002bf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : turret_Pin */
  GPIO_InitStruct.Pin = turret_Pin;
 8001af8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001afc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(turret_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_GPIO_Init+0x104>)
 8001b12:	f001 f86d 	bl	8002bf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b16:	bf00      	nop
 8001b18:	3728      	adds	r7, #40	@ 0x28
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020800 	.word	0x40020800

08001b2c <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	4804      	ldr	r0, [pc, #16]	@ (8001b54 <_write+0x28>)
 8001b44:	f003 f988 	bl	8004e58 <HAL_UART_Transmit>
	return len;
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000031c 	.word	0x2000031c

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ba2:	2007      	movs	r0, #7
 8001ba4:	f000 fbe0 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf0 <HAL_TIM_Base_MspInit+0x3c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d10d      	bne.n	8001be2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a09      	ldr	r2, [pc, #36]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_TIM_Base_MspInit+0x40>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	40023800 	.word	0x40023800

08001bf8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	@ 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c18:	d133      	bne.n	8001c82 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x94>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	4a1a      	ldr	r2, [pc, #104]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x94>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c2a:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x94>)
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	613b      	str	r3, [r7, #16]
 8001c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b14      	ldr	r3, [pc, #80]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x94>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	4a13      	ldr	r2, [pc, #76]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x94>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c46:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <HAL_TIM_Encoder_MspInit+0x94>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c52:	2303      	movs	r3, #3
 8001c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c62:	2301      	movs	r3, #1
 8001c64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4808      	ldr	r0, [pc, #32]	@ (8001c90 <HAL_TIM_Encoder_MspInit+0x98>)
 8001c6e:	f000 ffbf 	bl	8002bf0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	2100      	movs	r1, #0
 8001c76:	201c      	movs	r0, #28
 8001c78:	f000 fb81 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c7c:	201c      	movs	r0, #28
 8001c7e:	f000 fb9a 	bl	80023b6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001c82:	bf00      	nop
 8001c84:	3728      	adds	r7, #40	@ 0x28
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	40020000 	.word	0x40020000

08001c94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b088      	sub	sp, #32
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	60da      	str	r2, [r3, #12]
 8001caa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a12      	ldr	r2, [pc, #72]	@ (8001cfc <HAL_TIM_MspPostInit+0x68>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d11e      	bne.n	8001cf4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <HAL_TIM_MspPostInit+0x6c>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbe:	4a10      	ldr	r2, [pc, #64]	@ (8001d00 <HAL_TIM_MspPostInit+0x6c>)
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <HAL_TIM_MspPostInit+0x6c>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cca:	f003 0301 	and.w	r3, r3, #1
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cd2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4619      	mov	r1, r3
 8001cee:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <HAL_TIM_MspPostInit+0x70>)
 8001cf0:	f000 ff7e 	bl	8002bf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001cf4:	bf00      	nop
 8001cf6:	3720      	adds	r7, #32
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020000 	.word	0x40020000

08001d08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08c      	sub	sp, #48	@ 0x30
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a4e      	ldr	r2, [pc, #312]	@ (8001e60 <HAL_UART_MspInit+0x158>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d164      	bne.n	8001df4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	4a4c      	ldr	r2, [pc, #304]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001d34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d42:	61bb      	str	r3, [r7, #24]
 8001d44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
 8001d4a:	4b46      	ldr	r3, [pc, #280]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4e:	4a45      	ldr	r2, [pc, #276]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001d50:	f043 0304 	orr.w	r3, r3, #4
 8001d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d56:	4b43      	ldr	r3, [pc, #268]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	f003 0304 	and.w	r3, r3, #4
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d62:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d74:	2308      	movs	r3, #8
 8001d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	483a      	ldr	r0, [pc, #232]	@ (8001e68 <HAL_UART_MspInit+0x160>)
 8001d80:	f000 ff36 	bl	8002bf0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001d84:	4b39      	ldr	r3, [pc, #228]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001d86:	4a3a      	ldr	r2, [pc, #232]	@ (8001e70 <HAL_UART_MspInit+0x168>)
 8001d88:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001d8a:	4b38      	ldr	r3, [pc, #224]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001d8c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d90:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d92:	4b36      	ldr	r3, [pc, #216]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d98:	4b34      	ldr	r3, [pc, #208]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d9e:	4b33      	ldr	r3, [pc, #204]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001da0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001da4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001da6:	4b31      	ldr	r3, [pc, #196]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dac:	4b2f      	ldr	r3, [pc, #188]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001db2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001db4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001db8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dba:	4b2c      	ldr	r3, [pc, #176]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001dc6:	4829      	ldr	r0, [pc, #164]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001dc8:	f000 fb10 	bl	80023ec <HAL_DMA_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001dd2:	f7ff fec1 	bl	8001b58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a24      	ldr	r2, [pc, #144]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001dda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ddc:	4a23      	ldr	r2, [pc, #140]	@ (8001e6c <HAL_UART_MspInit+0x164>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	2034      	movs	r0, #52	@ 0x34
 8001de8:	f000 fac9 	bl	800237e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001dec:	2034      	movs	r0, #52	@ 0x34
 8001dee:	f000 fae2 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001df2:	e030      	b.n	8001e56 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <HAL_UART_MspInit+0x16c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d12b      	bne.n	8001e56 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	613b      	str	r3, [r7, #16]
 8001e02:	4b18      	ldr	r3, [pc, #96]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	4a17      	ldr	r2, [pc, #92]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e16:	613b      	str	r3, [r7, #16]
 8001e18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a10      	ldr	r2, [pc, #64]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <HAL_UART_MspInit+0x15c>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e36:	230c      	movs	r3, #12
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e46:	2307      	movs	r3, #7
 8001e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4a:	f107 031c 	add.w	r3, r7, #28
 8001e4e:	4619      	mov	r1, r3
 8001e50:	4809      	ldr	r0, [pc, #36]	@ (8001e78 <HAL_UART_MspInit+0x170>)
 8001e52:	f000 fecd 	bl	8002bf0 <HAL_GPIO_Init>
}
 8001e56:	bf00      	nop
 8001e58:	3730      	adds	r7, #48	@ 0x30
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40004c00 	.word	0x40004c00
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40020800 	.word	0x40020800
 8001e6c:	20000364 	.word	0x20000364
 8001e70:	40026040 	.word	0x40026040
 8001e74:	40004400 	.word	0x40004400
 8001e78:	40020000 	.word	0x40020000

08001e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e80:	bf00      	nop
 8001e82:	e7fd      	b.n	8001e80 <NMI_Handler+0x4>

08001e84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e88:	bf00      	nop
 8001e8a:	e7fd      	b.n	8001e88 <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	bf00      	nop
 8001e92:	e7fd      	b.n	8001e90 <MemManage_Handler+0x4>

08001e94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e98:	bf00      	nop
 8001e9a:	e7fd      	b.n	8001e98 <BusFault_Handler+0x4>

08001e9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <UsageFault_Handler+0x4>

08001ea4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ed2:	f000 f959 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001ee0:	4802      	ldr	r0, [pc, #8]	@ (8001eec <DMA1_Stream2_IRQHandler+0x10>)
 8001ee2:	f000 fc1b 	bl	800271c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000364 	.word	0x20000364

08001ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ef4:	4802      	ldr	r0, [pc, #8]	@ (8001f00 <TIM2_IRQHandler+0x10>)
 8001ef6:	f002 f8b5 	bl	8004064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	2000028c 	.word	0x2000028c

08001f04 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001f08:	4802      	ldr	r0, [pc, #8]	@ (8001f14 <UART4_IRQHandler+0x10>)
 8001f0a:	f003 f855 	bl	8004fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	200002d4 	.word	0x200002d4

08001f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return 1;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <_kill>:

int _kill(int pid, int sig)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f32:	f005 f91f 	bl	8007174 <__errno>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2216      	movs	r2, #22
 8001f3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3708      	adds	r7, #8
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_exit>:

void _exit (int status)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff ffe7 	bl	8001f28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f5a:	bf00      	nop
 8001f5c:	e7fd      	b.n	8001f5a <_exit+0x12>

08001f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e00a      	b.n	8001f86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f70:	f3af 8000 	nop.w
 8001f74:	4601      	mov	r1, r0
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	1c5a      	adds	r2, r3, #1
 8001f7a:	60ba      	str	r2, [r7, #8]
 8001f7c:	b2ca      	uxtb	r2, r1
 8001f7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	3301      	adds	r3, #1
 8001f84:	617b      	str	r3, [r7, #20]
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	dbf0      	blt.n	8001f70 <_read+0x12>
  }

  return len;
 8001f8e:	687b      	ldr	r3, [r7, #4]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr

08001fb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001fc0:	605a      	str	r2, [r3, #4]
  return 0;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <_isatty>:

int _isatty(int file)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fd8:	2301      	movs	r3, #1
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b085      	sub	sp, #20
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	60f8      	str	r0, [r7, #12]
 8001fee:	60b9      	str	r1, [r7, #8]
 8001ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	@ (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	@ (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	@ (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002030:	f005 f8a0 	bl	8007174 <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002040:	4b08      	ldr	r3, [pc, #32]	@ (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002046:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20020000 	.word	0x20020000
 8002060:	00000400 	.word	0x00000400
 8002064:	200003d4 	.word	0x200003d4
 8002068:	20000528 	.word	0x20000528

0800206c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	@ (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020c8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002094:	f7ff ffea 	bl	800206c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002098:	480c      	ldr	r0, [pc, #48]	@ (80020cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800209a:	490d      	ldr	r1, [pc, #52]	@ (80020d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020b0:	4c0a      	ldr	r4, [pc, #40]	@ (80020dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020be:	f005 f85f 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c2:	f7ff f96f 	bl	80013a4 <main>
  bx  lr    
 80020c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020d4:	0800ae38 	.word	0x0800ae38
  ldr r2, =_sbss
 80020d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020dc:	20000528 	.word	0x20000528

080020e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <HAL_Init+0x40>)
 80020ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <HAL_Init+0x40>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_Init+0x40>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f000 f92b 	bl	8002368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	2000      	movs	r0, #0
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff fd24 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f943 	bl	80023d2 <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f000 f90b 	bl	800237e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	@ (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000000 	.word	0x20000000
 8002180:	20000008 	.word	0x20000008
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008
 80021ac:	200003d8 	.word	0x200003d8

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	200003d8 	.word	0x200003d8

080021c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021e4:	4013      	ands	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fa:	4a04      	ldr	r2, [pc, #16]	@ (800220c <__NVIC_SetPriorityGrouping+0x44>)
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	60d3      	str	r3, [r2, #12]
}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002214:	4b04      	ldr	r3, [pc, #16]	@ (8002228 <__NVIC_GetPriorityGrouping+0x18>)
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	f003 0307 	and.w	r3, r3, #7
}
 800221e:	4618      	mov	r0, r3
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	e000ed00 	.word	0xe000ed00

0800222c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	2b00      	cmp	r3, #0
 800223c:	db0b      	blt.n	8002256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	f003 021f 	and.w	r2, r3, #31
 8002244:	4907      	ldr	r1, [pc, #28]	@ (8002264 <__NVIC_EnableIRQ+0x38>)
 8002246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224a:	095b      	lsrs	r3, r3, #5
 800224c:	2001      	movs	r0, #1
 800224e:	fa00 f202 	lsl.w	r2, r0, r2
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100

08002268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	4603      	mov	r3, r0
 8002270:	6039      	str	r1, [r7, #0]
 8002272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	db0a      	blt.n	8002292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b2da      	uxtb	r2, r3
 8002280:	490c      	ldr	r1, [pc, #48]	@ (80022b4 <__NVIC_SetPriority+0x4c>)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	0112      	lsls	r2, r2, #4
 8002288:	b2d2      	uxtb	r2, r2
 800228a:	440b      	add	r3, r1
 800228c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002290:	e00a      	b.n	80022a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	4908      	ldr	r1, [pc, #32]	@ (80022b8 <__NVIC_SetPriority+0x50>)
 8002298:	79fb      	ldrb	r3, [r7, #7]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3b04      	subs	r3, #4
 80022a0:	0112      	lsls	r2, r2, #4
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	440b      	add	r3, r1
 80022a6:	761a      	strb	r2, [r3, #24]
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000e100 	.word	0xe000e100
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022bc:	b480      	push	{r7}
 80022be:	b089      	sub	sp, #36	@ 0x24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f1c3 0307 	rsb	r3, r3, #7
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	bf28      	it	cs
 80022da:	2304      	movcs	r3, #4
 80022dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3304      	adds	r3, #4
 80022e2:	2b06      	cmp	r3, #6
 80022e4:	d902      	bls.n	80022ec <NVIC_EncodePriority+0x30>
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	3b03      	subs	r3, #3
 80022ea:	e000      	b.n	80022ee <NVIC_EncodePriority+0x32>
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f0:	f04f 32ff 	mov.w	r2, #4294967295
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43da      	mvns	r2, r3
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	401a      	ands	r2, r3
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002304:	f04f 31ff 	mov.w	r1, #4294967295
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa01 f303 	lsl.w	r3, r1, r3
 800230e:	43d9      	mvns	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	4313      	orrs	r3, r2
         );
}
 8002316:	4618      	mov	r0, r3
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002334:	d301      	bcc.n	800233a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002336:	2301      	movs	r3, #1
 8002338:	e00f      	b.n	800235a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233a:	4a0a      	ldr	r2, [pc, #40]	@ (8002364 <SysTick_Config+0x40>)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	3b01      	subs	r3, #1
 8002340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002342:	210f      	movs	r1, #15
 8002344:	f04f 30ff 	mov.w	r0, #4294967295
 8002348:	f7ff ff8e 	bl	8002268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800234c:	4b05      	ldr	r3, [pc, #20]	@ (8002364 <SysTick_Config+0x40>)
 800234e:	2200      	movs	r2, #0
 8002350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <SysTick_Config+0x40>)
 8002354:	2207      	movs	r2, #7
 8002356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f7ff ff29 	bl	80021c8 <__NVIC_SetPriorityGrouping>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800237e:	b580      	push	{r7, lr}
 8002380:	b086      	sub	sp, #24
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff3e 	bl	8002210 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff8e 	bl	80022bc <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5d 	bl	8002268 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff31 	bl	800222c <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ffa2 	bl	8002324 <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
	...

080023ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023f8:	f7ff feda 	bl	80021b0 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e099      	b.n	800253c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0201 	bic.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002428:	e00f      	b.n	800244a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800242a:	f7ff fec1 	bl	80021b0 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b05      	cmp	r3, #5
 8002436:	d908      	bls.n	800244a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2220      	movs	r2, #32
 800243c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2203      	movs	r2, #3
 8002442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e078      	b.n	800253c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	d1e8      	bne.n	800242a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	4b38      	ldr	r3, [pc, #224]	@ (8002544 <HAL_DMA_Init+0x158>)
 8002464:	4013      	ands	r3, r2
 8002466:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002476:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002482:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800248e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d107      	bne.n	80024b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	4313      	orrs	r3, r2
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f023 0307 	bic.w	r3, r3, #7
 80024ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d117      	bne.n	800250e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00e      	beq.n	800250e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fb01 	bl	8002af8 <DMA_CheckFifoParam>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d008      	beq.n	800250e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2240      	movs	r2, #64	@ 0x40
 8002500:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2201      	movs	r2, #1
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800250a:	2301      	movs	r3, #1
 800250c:	e016      	b.n	800253c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	697a      	ldr	r2, [r7, #20]
 8002514:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fab8 	bl	8002a8c <DMA_CalcBaseAndBitshift>
 800251c:	4603      	mov	r3, r0
 800251e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002524:	223f      	movs	r2, #63	@ 0x3f
 8002526:	409a      	lsls	r2, r3
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	f010803f 	.word	0xf010803f

08002548 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_DMA_Start_IT+0x26>
 800256a:	2302      	movs	r3, #2
 800256c:	e040      	b.n	80025f0 <HAL_DMA_Start_IT+0xa8>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b01      	cmp	r3, #1
 8002580:	d12f      	bne.n	80025e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2202      	movs	r2, #2
 8002586:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fa4a 	bl	8002a30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	223f      	movs	r2, #63	@ 0x3f
 80025a2:	409a      	lsls	r2, r3
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0216 	orr.w	r2, r2, #22
 80025b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f042 0208 	orr.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e005      	b.n	80025ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ea:	2302      	movs	r3, #2
 80025ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002606:	f7ff fdd3 	bl	80021b0 <HAL_GetTick>
 800260a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d008      	beq.n	800262a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2280      	movs	r2, #128	@ 0x80
 800261c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e052      	b.n	80026d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0216 	bic.w	r2, r2, #22
 8002638:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002648:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d103      	bne.n	800265a <HAL_DMA_Abort+0x62>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0208 	bic.w	r2, r2, #8
 8002668:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267a:	e013      	b.n	80026a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800267c:	f7ff fd98 	bl	80021b0 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b05      	cmp	r3, #5
 8002688:	d90c      	bls.n	80026a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2203      	movs	r2, #3
 8002694:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e015      	b.n	80026d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1e4      	bne.n	800267c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b6:	223f      	movs	r2, #63	@ 0x3f
 80026b8:	409a      	lsls	r2, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d004      	beq.n	80026f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2280      	movs	r2, #128	@ 0x80
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e00c      	b.n	8002710 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2205      	movs	r2, #5
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002728:	4b8e      	ldr	r3, [pc, #568]	@ (8002964 <HAL_DMA_IRQHandler+0x248>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a8e      	ldr	r2, [pc, #568]	@ (8002968 <HAL_DMA_IRQHandler+0x24c>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0a9b      	lsrs	r3, r3, #10
 8002734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002746:	2208      	movs	r2, #8
 8002748:	409a      	lsls	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4013      	ands	r3, r2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01a      	beq.n	8002788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d013      	beq.n	8002788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0204 	bic.w	r2, r2, #4
 800276e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002774:	2208      	movs	r2, #8
 8002776:	409a      	lsls	r2, r3
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002780:	f043 0201 	orr.w	r2, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278c:	2201      	movs	r2, #1
 800278e:	409a      	lsls	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4013      	ands	r3, r2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d012      	beq.n	80027be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027aa:	2201      	movs	r2, #1
 80027ac:	409a      	lsls	r2, r3
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027b6:	f043 0202 	orr.w	r2, r3, #2
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c2:	2204      	movs	r2, #4
 80027c4:	409a      	lsls	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d012      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027e0:	2204      	movs	r2, #4
 80027e2:	409a      	lsls	r2, r3
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f043 0204 	orr.w	r2, r3, #4
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f8:	2210      	movs	r2, #16
 80027fa:	409a      	lsls	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d043      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0308 	and.w	r3, r3, #8
 800280e:	2b00      	cmp	r3, #0
 8002810:	d03c      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002816:	2210      	movs	r2, #16
 8002818:	409a      	lsls	r2, r3
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d018      	beq.n	800285e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283e:	2b00      	cmp	r3, #0
 8002840:	d024      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	4798      	blx	r3
 800284a:	e01f      	b.n	800288c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002850:	2b00      	cmp	r3, #0
 8002852:	d01b      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	4798      	blx	r3
 800285c:	e016      	b.n	800288c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d107      	bne.n	800287c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0208 	bic.w	r2, r2, #8
 800287a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	2220      	movs	r2, #32
 8002892:	409a      	lsls	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4013      	ands	r3, r2
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 808f 	beq.w	80029bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0310 	and.w	r3, r3, #16
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 8087 	beq.w	80029bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	2220      	movs	r2, #32
 80028b4:	409a      	lsls	r2, r3
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b05      	cmp	r3, #5
 80028c4:	d136      	bne.n	8002934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0216 	bic.w	r2, r2, #22
 80028d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	695a      	ldr	r2, [r3, #20]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d103      	bne.n	80028f6 <HAL_DMA_IRQHandler+0x1da>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d007      	beq.n	8002906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 0208 	bic.w	r2, r2, #8
 8002904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	223f      	movs	r2, #63	@ 0x3f
 800290c:	409a      	lsls	r2, r3
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002926:	2b00      	cmp	r3, #0
 8002928:	d07e      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	4798      	blx	r3
        }
        return;
 8002932:	e079      	b.n	8002a28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01d      	beq.n	800297e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d10d      	bne.n	800296c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002954:	2b00      	cmp	r3, #0
 8002956:	d031      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	4798      	blx	r3
 8002960:	e02c      	b.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
 8002962:	bf00      	nop
 8002964:	20000000 	.word	0x20000000
 8002968:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
 800297c:	e01e      	b.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10f      	bne.n	80029ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0210 	bic.w	r2, r2, #16
 800299a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d032      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d022      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2205      	movs	r2, #5
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	3301      	adds	r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d307      	bcc.n	8002a04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f2      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x2cc>
 8002a02:	e000      	b.n	8002a06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	4798      	blx	r3
 8002a26:	e000      	b.n	8002a2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a28:	bf00      	nop
    }
  }
}
 8002a2a:	3718      	adds	r7, #24
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	2b40      	cmp	r3, #64	@ 0x40
 8002a5c:	d108      	bne.n	8002a70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a6e:	e007      	b.n	8002a80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	60da      	str	r2, [r3, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	3b10      	subs	r3, #16
 8002a9c:	4a14      	ldr	r2, [pc, #80]	@ (8002af0 <DMA_CalcBaseAndBitshift+0x64>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	091b      	lsrs	r3, r3, #4
 8002aa4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aa6:	4a13      	ldr	r2, [pc, #76]	@ (8002af4 <DMA_CalcBaseAndBitshift+0x68>)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4413      	add	r3, r2
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	461a      	mov	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d909      	bls.n	8002ace <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ac2:	f023 0303 	bic.w	r3, r3, #3
 8002ac6:	1d1a      	adds	r2, r3, #4
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	659a      	str	r2, [r3, #88]	@ 0x58
 8002acc:	e007      	b.n	8002ade <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002ad6:	f023 0303 	bic.w	r3, r3, #3
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3714      	adds	r7, #20
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	aaaaaaab 	.word	0xaaaaaaab
 8002af4:	0800a9f4 	.word	0x0800a9f4

08002af8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b00:	2300      	movs	r3, #0
 8002b02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11f      	bne.n	8002b52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d856      	bhi.n	8002bc6 <DMA_CheckFifoParam+0xce>
 8002b18:	a201      	add	r2, pc, #4	@ (adr r2, 8002b20 <DMA_CheckFifoParam+0x28>)
 8002b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1e:	bf00      	nop
 8002b20:	08002b31 	.word	0x08002b31
 8002b24:	08002b43 	.word	0x08002b43
 8002b28:	08002b31 	.word	0x08002b31
 8002b2c:	08002bc7 	.word	0x08002bc7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d046      	beq.n	8002bca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b40:	e043      	b.n	8002bca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b4a:	d140      	bne.n	8002bce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b50:	e03d      	b.n	8002bce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b5a:	d121      	bne.n	8002ba0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d837      	bhi.n	8002bd2 <DMA_CheckFifoParam+0xda>
 8002b62:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <DMA_CheckFifoParam+0x70>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002b79 	.word	0x08002b79
 8002b6c:	08002b7f 	.word	0x08002b7f
 8002b70:	08002b79 	.word	0x08002b79
 8002b74:	08002b91 	.word	0x08002b91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7c:	e030      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d025      	beq.n	8002bd6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8e:	e022      	b.n	8002bd6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002b98:	d11f      	bne.n	8002bda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b9e:	e01c      	b.n	8002bda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d903      	bls.n	8002bae <DMA_CheckFifoParam+0xb6>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d003      	beq.n	8002bb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bac:	e018      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb2:	e015      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc4:	e00b      	b.n	8002bde <DMA_CheckFifoParam+0xe6>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e00a      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e008      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e006      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e004      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e002      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bda:	bf00      	nop
 8002bdc:	e000      	b.n	8002be0 <DMA_CheckFifoParam+0xe8>
      break;
 8002bde:	bf00      	nop
    }
  } 
  
  return status; 
 8002be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	@ 0x24
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	e165      	b.n	8002ed8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	429a      	cmp	r2, r3
 8002c26:	f040 8154 	bne.w	8002ed2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d005      	beq.n	8002c42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d130      	bne.n	8002ca4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c52:	43db      	mvns	r3, r3
 8002c54:	69ba      	ldr	r2, [r7, #24]
 8002c56:	4013      	ands	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c78:	2201      	movs	r2, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	091b      	lsrs	r3, r3, #4
 8002c8e:	f003 0201 	and.w	r2, r3, #1
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0303 	and.w	r3, r3, #3
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d017      	beq.n	8002ce0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	2203      	movs	r2, #3
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d123      	bne.n	8002d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	08da      	lsrs	r2, r3, #3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3208      	adds	r2, #8
 8002cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	220f      	movs	r2, #15
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	08da      	lsrs	r2, r3, #3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3208      	adds	r2, #8
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	005b      	lsls	r3, r3, #1
 8002d3e:	2203      	movs	r2, #3
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	43db      	mvns	r3, r3
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 0203 	and.w	r2, r3, #3
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80ae 	beq.w	8002ed2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60fb      	str	r3, [r7, #12]
 8002d7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ef0 <HAL_GPIO_Init+0x300>)
 8002d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ef0 <HAL_GPIO_Init+0x300>)
 8002d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d86:	4b5a      	ldr	r3, [pc, #360]	@ (8002ef0 <HAL_GPIO_Init+0x300>)
 8002d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d92:	4a58      	ldr	r2, [pc, #352]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	089b      	lsrs	r3, r3, #2
 8002d98:	3302      	adds	r3, #2
 8002d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f003 0303 	and.w	r3, r3, #3
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	220f      	movs	r2, #15
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4f      	ldr	r2, [pc, #316]	@ (8002ef8 <HAL_GPIO_Init+0x308>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d025      	beq.n	8002e0a <HAL_GPIO_Init+0x21a>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4e      	ldr	r2, [pc, #312]	@ (8002efc <HAL_GPIO_Init+0x30c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01f      	beq.n	8002e06 <HAL_GPIO_Init+0x216>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8002f00 <HAL_GPIO_Init+0x310>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d019      	beq.n	8002e02 <HAL_GPIO_Init+0x212>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8002f04 <HAL_GPIO_Init+0x314>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d013      	beq.n	8002dfe <HAL_GPIO_Init+0x20e>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002f08 <HAL_GPIO_Init+0x318>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00d      	beq.n	8002dfa <HAL_GPIO_Init+0x20a>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4a      	ldr	r2, [pc, #296]	@ (8002f0c <HAL_GPIO_Init+0x31c>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d007      	beq.n	8002df6 <HAL_GPIO_Init+0x206>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a49      	ldr	r2, [pc, #292]	@ (8002f10 <HAL_GPIO_Init+0x320>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_GPIO_Init+0x202>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e00c      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002df2:	2307      	movs	r3, #7
 8002df4:	e00a      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002df6:	2305      	movs	r3, #5
 8002df8:	e008      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002dfa:	2304      	movs	r3, #4
 8002dfc:	e006      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e004      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e002      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <HAL_GPIO_Init+0x21c>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	69fa      	ldr	r2, [r7, #28]
 8002e0e:	f002 0203 	and.w	r2, r2, #3
 8002e12:	0092      	lsls	r2, r2, #2
 8002e14:	4093      	lsls	r3, r2
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e1c:	4935      	ldr	r1, [pc, #212]	@ (8002ef4 <HAL_GPIO_Init+0x304>)
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	3302      	adds	r3, #2
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d003      	beq.n	8002e4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4e:	4a31      	ldr	r2, [pc, #196]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e54:	4b2f      	ldr	r3, [pc, #188]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	4013      	ands	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e78:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e7e:	4b25      	ldr	r3, [pc, #148]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	43db      	mvns	r3, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ecc:	4a11      	ldr	r2, [pc, #68]	@ (8002f14 <HAL_GPIO_Init+0x324>)
 8002ece:	69bb      	ldr	r3, [r7, #24]
 8002ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	f67f ae96 	bls.w	8002c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	bf00      	nop
 8002ee4:	3724      	adds	r7, #36	@ 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40013800 	.word	0x40013800
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40020400 	.word	0x40020400
 8002f00:	40020800 	.word	0x40020800
 8002f04:	40020c00 	.word	0x40020c00
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40021400 	.word	0x40021400
 8002f10:	40021800 	.word	0x40021800
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0cc      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b68      	ldr	r3, [pc, #416]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 030f 	and.w	r3, r3, #15
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d90c      	bls.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b65      	ldr	r3, [pc, #404]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	b2d2      	uxtb	r2, r2
 8002f74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f76:	4b63      	ldr	r3, [pc, #396]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d001      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e0b8      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fa0:	4b59      	ldr	r3, [pc, #356]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	4a58      	ldr	r2, [pc, #352]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002faa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fb8:	4b53      	ldr	r3, [pc, #332]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	4a52      	ldr	r2, [pc, #328]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc4:	4b50      	ldr	r3, [pc, #320]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	494d      	ldr	r1, [pc, #308]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d044      	beq.n	800306c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b47      	ldr	r3, [pc, #284]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d119      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e07f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d003      	beq.n	800300a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003006:	2b03      	cmp	r3, #3
 8003008:	d107      	bne.n	800301a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300a:	4b3f      	ldr	r3, [pc, #252]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d109      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800301a:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e067      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800302a:	4b37      	ldr	r3, [pc, #220]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f023 0203 	bic.w	r2, r3, #3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4934      	ldr	r1, [pc, #208]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	4313      	orrs	r3, r2
 800303a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800303c:	f7ff f8b8 	bl	80021b0 <HAL_GetTick>
 8003040:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003042:	e00a      	b.n	800305a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003044:	f7ff f8b4 	bl	80021b0 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003052:	4293      	cmp	r3, r2
 8003054:	d901      	bls.n	800305a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e04f      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305a:	4b2b      	ldr	r3, [pc, #172]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f003 020c 	and.w	r2, r3, #12
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	429a      	cmp	r2, r3
 800306a:	d1eb      	bne.n	8003044 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d20c      	bcs.n	8003094 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800307a:	4b22      	ldr	r3, [pc, #136]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 800307c:	683a      	ldr	r2, [r7, #0]
 800307e:	b2d2      	uxtb	r2, r2
 8003080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003082:	4b20      	ldr	r3, [pc, #128]	@ (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d001      	beq.n	8003094 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e032      	b.n	80030fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0304 	and.w	r3, r3, #4
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a0:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	4916      	ldr	r1, [pc, #88]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0308 	and.w	r3, r3, #8
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d009      	beq.n	80030d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030be:	4b12      	ldr	r3, [pc, #72]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	490e      	ldr	r1, [pc, #56]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030d2:	f000 f855 	bl	8003180 <HAL_RCC_GetSysClockFreq>
 80030d6:	4602      	mov	r2, r0
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	091b      	lsrs	r3, r3, #4
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	490a      	ldr	r1, [pc, #40]	@ (800310c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	5ccb      	ldrb	r3, [r1, r3]
 80030e6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ea:	4a09      	ldr	r2, [pc, #36]	@ (8003110 <HAL_RCC_ClockConfig+0x1c4>)
 80030ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030ee:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_RCC_ClockConfig+0x1c8>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f818 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40023c00 	.word	0x40023c00
 8003108:	40023800 	.word	0x40023800
 800310c:	0800a9dc 	.word	0x0800a9dc
 8003110:	20000000 	.word	0x20000000
 8003114:	20000004 	.word	0x20000004

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800311c:	4b03      	ldr	r3, [pc, #12]	@ (800312c <HAL_RCC_GetHCLKFreq+0x14>)
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	20000000 	.word	0x20000000

08003130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003134:	f7ff fff0 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003138:	4602      	mov	r2, r0
 800313a:	4b05      	ldr	r3, [pc, #20]	@ (8003150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	0a9b      	lsrs	r3, r3, #10
 8003140:	f003 0307 	and.w	r3, r3, #7
 8003144:	4903      	ldr	r1, [pc, #12]	@ (8003154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003146:	5ccb      	ldrb	r3, [r1, r3]
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	0800a9ec 	.word	0x0800a9ec

08003158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800315c:	f7ff ffdc 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003160:	4602      	mov	r2, r0
 8003162:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	0b5b      	lsrs	r3, r3, #13
 8003168:	f003 0307 	and.w	r3, r3, #7
 800316c:	4903      	ldr	r1, [pc, #12]	@ (800317c <HAL_RCC_GetPCLK2Freq+0x24>)
 800316e:	5ccb      	ldrb	r3, [r1, r3]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	bd80      	pop	{r7, pc}
 8003178:	40023800 	.word	0x40023800
 800317c:	0800a9ec 	.word	0x0800a9ec

08003180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003184:	b0ae      	sub	sp, #184	@ 0xb8
 8003186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003194:	2300      	movs	r3, #0
 8003196:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a6:	4bcb      	ldr	r3, [pc, #812]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	f200 8206 	bhi.w	80035c0 <HAL_RCC_GetSysClockFreq+0x440>
 80031b4:	a201      	add	r2, pc, #4	@ (adr r2, 80031bc <HAL_RCC_GetSysClockFreq+0x3c>)
 80031b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031f1 	.word	0x080031f1
 80031c0:	080035c1 	.word	0x080035c1
 80031c4:	080035c1 	.word	0x080035c1
 80031c8:	080035c1 	.word	0x080035c1
 80031cc:	080031f9 	.word	0x080031f9
 80031d0:	080035c1 	.word	0x080035c1
 80031d4:	080035c1 	.word	0x080035c1
 80031d8:	080035c1 	.word	0x080035c1
 80031dc:	08003201 	.word	0x08003201
 80031e0:	080035c1 	.word	0x080035c1
 80031e4:	080035c1 	.word	0x080035c1
 80031e8:	080035c1 	.word	0x080035c1
 80031ec:	080033f1 	.word	0x080033f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031f0:	4bb9      	ldr	r3, [pc, #740]	@ (80034d8 <HAL_RCC_GetSysClockFreq+0x358>)
 80031f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031f6:	e1e7      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031f8:	4bb8      	ldr	r3, [pc, #736]	@ (80034dc <HAL_RCC_GetSysClockFreq+0x35c>)
 80031fa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80031fe:	e1e3      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003200:	4bb4      	ldr	r3, [pc, #720]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003208:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800320c:	4bb1      	ldr	r3, [pc, #708]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d071      	beq.n	80032fc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003218:	4bae      	ldr	r3, [pc, #696]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	099b      	lsrs	r3, r3, #6
 800321e:	2200      	movs	r2, #0
 8003220:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003224:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800322c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003230:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003234:	2300      	movs	r3, #0
 8003236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800323a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800323e:	4622      	mov	r2, r4
 8003240:	462b      	mov	r3, r5
 8003242:	f04f 0000 	mov.w	r0, #0
 8003246:	f04f 0100 	mov.w	r1, #0
 800324a:	0159      	lsls	r1, r3, #5
 800324c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003250:	0150      	lsls	r0, r2, #5
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4621      	mov	r1, r4
 8003258:	1a51      	subs	r1, r2, r1
 800325a:	6439      	str	r1, [r7, #64]	@ 0x40
 800325c:	4629      	mov	r1, r5
 800325e:	eb63 0301 	sbc.w	r3, r3, r1
 8003262:	647b      	str	r3, [r7, #68]	@ 0x44
 8003264:	f04f 0200 	mov.w	r2, #0
 8003268:	f04f 0300 	mov.w	r3, #0
 800326c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003270:	4649      	mov	r1, r9
 8003272:	018b      	lsls	r3, r1, #6
 8003274:	4641      	mov	r1, r8
 8003276:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800327a:	4641      	mov	r1, r8
 800327c:	018a      	lsls	r2, r1, #6
 800327e:	4641      	mov	r1, r8
 8003280:	1a51      	subs	r1, r2, r1
 8003282:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003284:	4649      	mov	r1, r9
 8003286:	eb63 0301 	sbc.w	r3, r3, r1
 800328a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800328c:	f04f 0200 	mov.w	r2, #0
 8003290:	f04f 0300 	mov.w	r3, #0
 8003294:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003298:	4649      	mov	r1, r9
 800329a:	00cb      	lsls	r3, r1, #3
 800329c:	4641      	mov	r1, r8
 800329e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032a2:	4641      	mov	r1, r8
 80032a4:	00ca      	lsls	r2, r1, #3
 80032a6:	4610      	mov	r0, r2
 80032a8:	4619      	mov	r1, r3
 80032aa:	4603      	mov	r3, r0
 80032ac:	4622      	mov	r2, r4
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80032b2:	462b      	mov	r3, r5
 80032b4:	460a      	mov	r2, r1
 80032b6:	eb42 0303 	adc.w	r3, r2, r3
 80032ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80032bc:	f04f 0200 	mov.w	r2, #0
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032c8:	4629      	mov	r1, r5
 80032ca:	024b      	lsls	r3, r1, #9
 80032cc:	4621      	mov	r1, r4
 80032ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032d2:	4621      	mov	r1, r4
 80032d4:	024a      	lsls	r2, r1, #9
 80032d6:	4610      	mov	r0, r2
 80032d8:	4619      	mov	r1, r3
 80032da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032de:	2200      	movs	r2, #0
 80032e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80032e8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80032ec:	f7fd fcec 	bl	8000cc8 <__aeabi_uldivmod>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4613      	mov	r3, r2
 80032f6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80032fa:	e067      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fc:	4b75      	ldr	r3, [pc, #468]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	2200      	movs	r2, #0
 8003304:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003308:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800330c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003314:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003316:	2300      	movs	r3, #0
 8003318:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800331a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800331e:	4622      	mov	r2, r4
 8003320:	462b      	mov	r3, r5
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f04f 0100 	mov.w	r1, #0
 800332a:	0159      	lsls	r1, r3, #5
 800332c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003330:	0150      	lsls	r0, r2, #5
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4621      	mov	r1, r4
 8003338:	1a51      	subs	r1, r2, r1
 800333a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800333c:	4629      	mov	r1, r5
 800333e:	eb63 0301 	sbc.w	r3, r3, r1
 8003342:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	f04f 0300 	mov.w	r3, #0
 800334c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003350:	4649      	mov	r1, r9
 8003352:	018b      	lsls	r3, r1, #6
 8003354:	4641      	mov	r1, r8
 8003356:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800335a:	4641      	mov	r1, r8
 800335c:	018a      	lsls	r2, r1, #6
 800335e:	4641      	mov	r1, r8
 8003360:	ebb2 0a01 	subs.w	sl, r2, r1
 8003364:	4649      	mov	r1, r9
 8003366:	eb63 0b01 	sbc.w	fp, r3, r1
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003376:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800337a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800337e:	4692      	mov	sl, r2
 8003380:	469b      	mov	fp, r3
 8003382:	4623      	mov	r3, r4
 8003384:	eb1a 0303 	adds.w	r3, sl, r3
 8003388:	623b      	str	r3, [r7, #32]
 800338a:	462b      	mov	r3, r5
 800338c:	eb4b 0303 	adc.w	r3, fp, r3
 8003390:	627b      	str	r3, [r7, #36]	@ 0x24
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800339e:	4629      	mov	r1, r5
 80033a0:	028b      	lsls	r3, r1, #10
 80033a2:	4621      	mov	r1, r4
 80033a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a8:	4621      	mov	r1, r4
 80033aa:	028a      	lsls	r2, r1, #10
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033b4:	2200      	movs	r2, #0
 80033b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80033b8:	677a      	str	r2, [r7, #116]	@ 0x74
 80033ba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80033be:	f7fd fc83 	bl	8000cc8 <__aeabi_uldivmod>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4613      	mov	r3, r2
 80033c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033cc:	4b41      	ldr	r3, [pc, #260]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	3301      	adds	r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80033de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80033e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80033ee:	e0eb      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f0:	4b38      	ldr	r3, [pc, #224]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033fc:	4b35      	ldr	r3, [pc, #212]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d06b      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003408:	4b32      	ldr	r3, [pc, #200]	@ (80034d4 <HAL_RCC_GetSysClockFreq+0x354>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	099b      	lsrs	r3, r3, #6
 800340e:	2200      	movs	r2, #0
 8003410:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003412:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003414:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341a:	663b      	str	r3, [r7, #96]	@ 0x60
 800341c:	2300      	movs	r3, #0
 800341e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003420:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003424:	4622      	mov	r2, r4
 8003426:	462b      	mov	r3, r5
 8003428:	f04f 0000 	mov.w	r0, #0
 800342c:	f04f 0100 	mov.w	r1, #0
 8003430:	0159      	lsls	r1, r3, #5
 8003432:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003436:	0150      	lsls	r0, r2, #5
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4621      	mov	r1, r4
 800343e:	1a51      	subs	r1, r2, r1
 8003440:	61b9      	str	r1, [r7, #24]
 8003442:	4629      	mov	r1, r5
 8003444:	eb63 0301 	sbc.w	r3, r3, r1
 8003448:	61fb      	str	r3, [r7, #28]
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	f04f 0300 	mov.w	r3, #0
 8003452:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003456:	4659      	mov	r1, fp
 8003458:	018b      	lsls	r3, r1, #6
 800345a:	4651      	mov	r1, sl
 800345c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003460:	4651      	mov	r1, sl
 8003462:	018a      	lsls	r2, r1, #6
 8003464:	4651      	mov	r1, sl
 8003466:	ebb2 0801 	subs.w	r8, r2, r1
 800346a:	4659      	mov	r1, fp
 800346c:	eb63 0901 	sbc.w	r9, r3, r1
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800347c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003480:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003484:	4690      	mov	r8, r2
 8003486:	4699      	mov	r9, r3
 8003488:	4623      	mov	r3, r4
 800348a:	eb18 0303 	adds.w	r3, r8, r3
 800348e:	613b      	str	r3, [r7, #16]
 8003490:	462b      	mov	r3, r5
 8003492:	eb49 0303 	adc.w	r3, r9, r3
 8003496:	617b      	str	r3, [r7, #20]
 8003498:	f04f 0200 	mov.w	r2, #0
 800349c:	f04f 0300 	mov.w	r3, #0
 80034a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034a4:	4629      	mov	r1, r5
 80034a6:	024b      	lsls	r3, r1, #9
 80034a8:	4621      	mov	r1, r4
 80034aa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034ae:	4621      	mov	r1, r4
 80034b0:	024a      	lsls	r2, r1, #9
 80034b2:	4610      	mov	r0, r2
 80034b4:	4619      	mov	r1, r3
 80034b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034ba:	2200      	movs	r2, #0
 80034bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80034be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80034c0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80034c4:	f7fd fc00 	bl	8000cc8 <__aeabi_uldivmod>
 80034c8:	4602      	mov	r2, r0
 80034ca:	460b      	mov	r3, r1
 80034cc:	4613      	mov	r3, r2
 80034ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d2:	e065      	b.n	80035a0 <HAL_RCC_GetSysClockFreq+0x420>
 80034d4:	40023800 	.word	0x40023800
 80034d8:	00f42400 	.word	0x00f42400
 80034dc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e0:	4b3d      	ldr	r3, [pc, #244]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	099b      	lsrs	r3, r3, #6
 80034e6:	2200      	movs	r2, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	4611      	mov	r1, r2
 80034ec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80034f2:	2300      	movs	r3, #0
 80034f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80034f6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80034fa:	4642      	mov	r2, r8
 80034fc:	464b      	mov	r3, r9
 80034fe:	f04f 0000 	mov.w	r0, #0
 8003502:	f04f 0100 	mov.w	r1, #0
 8003506:	0159      	lsls	r1, r3, #5
 8003508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800350c:	0150      	lsls	r0, r2, #5
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4641      	mov	r1, r8
 8003514:	1a51      	subs	r1, r2, r1
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	4649      	mov	r1, r9
 800351a:	eb63 0301 	sbc.w	r3, r3, r1
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	f04f 0200 	mov.w	r2, #0
 8003524:	f04f 0300 	mov.w	r3, #0
 8003528:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800352c:	4659      	mov	r1, fp
 800352e:	018b      	lsls	r3, r1, #6
 8003530:	4651      	mov	r1, sl
 8003532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003536:	4651      	mov	r1, sl
 8003538:	018a      	lsls	r2, r1, #6
 800353a:	4651      	mov	r1, sl
 800353c:	1a54      	subs	r4, r2, r1
 800353e:	4659      	mov	r1, fp
 8003540:	eb63 0501 	sbc.w	r5, r3, r1
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	00eb      	lsls	r3, r5, #3
 800354e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003552:	00e2      	lsls	r2, r4, #3
 8003554:	4614      	mov	r4, r2
 8003556:	461d      	mov	r5, r3
 8003558:	4643      	mov	r3, r8
 800355a:	18e3      	adds	r3, r4, r3
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	464b      	mov	r3, r9
 8003560:	eb45 0303 	adc.w	r3, r5, r3
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	f04f 0200 	mov.w	r2, #0
 800356a:	f04f 0300 	mov.w	r3, #0
 800356e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003572:	4629      	mov	r1, r5
 8003574:	028b      	lsls	r3, r1, #10
 8003576:	4621      	mov	r1, r4
 8003578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800357c:	4621      	mov	r1, r4
 800357e:	028a      	lsls	r2, r1, #10
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003588:	2200      	movs	r2, #0
 800358a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800358c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800358e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003592:	f7fd fb99 	bl	8000cc8 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4613      	mov	r3, r2
 800359c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035a0:	4b0d      	ldr	r3, [pc, #52]	@ (80035d8 <HAL_RCC_GetSysClockFreq+0x458>)
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	0f1b      	lsrs	r3, r3, #28
 80035a6:	f003 0307 	and.w	r3, r3, #7
 80035aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80035ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80035b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80035b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80035ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035be:	e003      	b.n	80035c8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <HAL_RCC_GetSysClockFreq+0x45c>)
 80035c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80035c6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	37b8      	adds	r7, #184	@ 0xb8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d6:	bf00      	nop
 80035d8:	40023800 	.word	0x40023800
 80035dc:	00f42400 	.word	0x00f42400

080035e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e28d      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8083 	beq.w	8003706 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003600:	4b94      	ldr	r3, [pc, #592]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b04      	cmp	r3, #4
 800360a:	d019      	beq.n	8003640 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800360c:	4b91      	ldr	r3, [pc, #580]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
        || \
 8003614:	2b08      	cmp	r3, #8
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003618:	4b8e      	ldr	r3, [pc, #568]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003620:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003624:	d00c      	beq.n	8003640 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003626:	4b8b      	ldr	r3, [pc, #556]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800362e:	2b0c      	cmp	r3, #12
 8003630:	d112      	bne.n	8003658 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003632:	4b88      	ldr	r3, [pc, #544]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800363a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800363e:	d10b      	bne.n	8003658 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	4b84      	ldr	r3, [pc, #528]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d05b      	beq.n	8003704 <HAL_RCC_OscConfig+0x124>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d157      	bne.n	8003704 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e25a      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003660:	d106      	bne.n	8003670 <HAL_RCC_OscConfig+0x90>
 8003662:	4b7c      	ldr	r3, [pc, #496]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a7b      	ldr	r2, [pc, #492]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e01d      	b.n	80036ac <HAL_RCC_OscConfig+0xcc>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0xb4>
 800367a:	4b76      	ldr	r3, [pc, #472]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a75      	ldr	r2, [pc, #468]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b73      	ldr	r3, [pc, #460]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a72      	ldr	r2, [pc, #456]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0xcc>
 8003694:	4b6f      	ldr	r3, [pc, #444]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a6e      	ldr	r2, [pc, #440]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 800369a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b6c      	ldr	r3, [pc, #432]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a6b      	ldr	r2, [pc, #428]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 80036a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80036aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d013      	beq.n	80036dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe fd7c 	bl	80021b0 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036bc:	f7fe fd78 	bl	80021b0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	@ 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e21f      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b61      	ldr	r3, [pc, #388]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0xdc>
 80036da:	e014      	b.n	8003706 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7fe fd68 	bl	80021b0 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7fe fd64 	bl	80021b0 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	@ 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e20b      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036f6:	4b57      	ldr	r3, [pc, #348]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0x104>
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d06f      	beq.n	80037f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003712:	4b50      	ldr	r3, [pc, #320]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b00      	cmp	r3, #0
 800371c:	d017      	beq.n	800374e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800371e:	4b4d      	ldr	r3, [pc, #308]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
        || \
 8003726:	2b08      	cmp	r3, #8
 8003728:	d105      	bne.n	8003736 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800372a:	4b4a      	ldr	r3, [pc, #296]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00b      	beq.n	800374e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003736:	4b47      	ldr	r3, [pc, #284]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d11c      	bne.n	800377c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003742:	4b44      	ldr	r3, [pc, #272]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d116      	bne.n	800377c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374e:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d005      	beq.n	8003766 <HAL_RCC_OscConfig+0x186>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d001      	beq.n	8003766 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e1d3      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003766:	4b3b      	ldr	r3, [pc, #236]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4937      	ldr	r1, [pc, #220]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003776:	4313      	orrs	r3, r2
 8003778:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800377a:	e03a      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d020      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003784:	4b34      	ldr	r3, [pc, #208]	@ (8003858 <HAL_RCC_OscConfig+0x278>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378a:	f7fe fd11 	bl	80021b0 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003792:	f7fe fd0d 	bl	80021b0 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e1b4      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b0:	4b28      	ldr	r3, [pc, #160]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	4925      	ldr	r1, [pc, #148]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]
 80037c4:	e015      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c6:	4b24      	ldr	r3, [pc, #144]	@ (8003858 <HAL_RCC_OscConfig+0x278>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fcf0 	bl	80021b0 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037d4:	f7fe fcec 	bl	80021b0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e193      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0308 	and.w	r3, r3, #8
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d036      	beq.n	800386c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d016      	beq.n	8003834 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003806:	4b15      	ldr	r3, [pc, #84]	@ (800385c <HAL_RCC_OscConfig+0x27c>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe fcd0 	bl	80021b0 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003814:	f7fe fccc 	bl	80021b0 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e173      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_RCC_OscConfig+0x274>)
 8003828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x234>
 8003832:	e01b      	b.n	800386c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003834:	4b09      	ldr	r3, [pc, #36]	@ (800385c <HAL_RCC_OscConfig+0x27c>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800383a:	f7fe fcb9 	bl	80021b0 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003840:	e00e      	b.n	8003860 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003842:	f7fe fcb5 	bl	80021b0 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d907      	bls.n	8003860 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e15c      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
 8003854:	40023800 	.word	0x40023800
 8003858:	42470000 	.word	0x42470000
 800385c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003860:	4b8a      	ldr	r3, [pc, #552]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d1ea      	bne.n	8003842 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 8097 	beq.w	80039a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800387a:	2300      	movs	r3, #0
 800387c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800387e:	4b83      	ldr	r3, [pc, #524]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10f      	bne.n	80038aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	4b7f      	ldr	r3, [pc, #508]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003892:	4a7e      	ldr	r2, [pc, #504]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003898:	6413      	str	r3, [r2, #64]	@ 0x40
 800389a:	4b7c      	ldr	r3, [pc, #496]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038a2:	60bb      	str	r3, [r7, #8]
 80038a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038aa:	4b79      	ldr	r3, [pc, #484]	@ (8003a90 <HAL_RCC_OscConfig+0x4b0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d118      	bne.n	80038e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038b6:	4b76      	ldr	r3, [pc, #472]	@ (8003a90 <HAL_RCC_OscConfig+0x4b0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a75      	ldr	r2, [pc, #468]	@ (8003a90 <HAL_RCC_OscConfig+0x4b0>)
 80038bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038c2:	f7fe fc75 	bl	80021b0 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038c8:	e008      	b.n	80038dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038ca:	f7fe fc71 	bl	80021b0 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d901      	bls.n	80038dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e118      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003a90 <HAL_RCC_OscConfig+0x4b0>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0f0      	beq.n	80038ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d106      	bne.n	80038fe <HAL_RCC_OscConfig+0x31e>
 80038f0:	4b66      	ldr	r3, [pc, #408]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 80038f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f4:	4a65      	ldr	r2, [pc, #404]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 80038f6:	f043 0301 	orr.w	r3, r3, #1
 80038fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80038fc:	e01c      	b.n	8003938 <HAL_RCC_OscConfig+0x358>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b05      	cmp	r3, #5
 8003904:	d10c      	bne.n	8003920 <HAL_RCC_OscConfig+0x340>
 8003906:	4b61      	ldr	r3, [pc, #388]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	4a60      	ldr	r2, [pc, #384]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 800390c:	f043 0304 	orr.w	r3, r3, #4
 8003910:	6713      	str	r3, [r2, #112]	@ 0x70
 8003912:	4b5e      	ldr	r3, [pc, #376]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003916:	4a5d      	ldr	r2, [pc, #372]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	6713      	str	r3, [r2, #112]	@ 0x70
 800391e:	e00b      	b.n	8003938 <HAL_RCC_OscConfig+0x358>
 8003920:	4b5a      	ldr	r3, [pc, #360]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a59      	ldr	r2, [pc, #356]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003926:	f023 0301 	bic.w	r3, r3, #1
 800392a:	6713      	str	r3, [r2, #112]	@ 0x70
 800392c:	4b57      	ldr	r3, [pc, #348]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 800392e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003930:	4a56      	ldr	r2, [pc, #344]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003932:	f023 0304 	bic.w	r3, r3, #4
 8003936:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d015      	beq.n	800396c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fe fc36 	bl	80021b0 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7fe fc32 	bl	80021b0 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e0d7      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800395e:	4b4b      	ldr	r3, [pc, #300]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0ee      	beq.n	8003948 <HAL_RCC_OscConfig+0x368>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800396c:	f7fe fc20 	bl	80021b0 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003972:	e00a      	b.n	800398a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fe fc1c 	bl	80021b0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e0c1      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800398a:	4b40      	ldr	r3, [pc, #256]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1ee      	bne.n	8003974 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003996:	7dfb      	ldrb	r3, [r7, #23]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d105      	bne.n	80039a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800399c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 800399e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a0:	4a3a      	ldr	r2, [pc, #232]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80ad 	beq.w	8003b0c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039b2:	4b36      	ldr	r3, [pc, #216]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	d060      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d145      	bne.n	8003a52 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c6:	4b33      	ldr	r3, [pc, #204]	@ (8003a94 <HAL_RCC_OscConfig+0x4b4>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fe fbf0 	bl	80021b0 <HAL_GetTick>
 80039d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fe fbec 	bl	80021b0 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e093      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e6:	4b29      	ldr	r3, [pc, #164]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69da      	ldr	r2, [r3, #28]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a08:	085b      	lsrs	r3, r3, #1
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	041b      	lsls	r3, r3, #16
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	061b      	lsls	r3, r3, #24
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1c:	071b      	lsls	r3, r3, #28
 8003a1e:	491b      	ldr	r1, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a24:	4b1b      	ldr	r3, [pc, #108]	@ (8003a94 <HAL_RCC_OscConfig+0x4b4>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fbc1 	bl	80021b0 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe fbbd 	bl	80021b0 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e064      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a44:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d0f0      	beq.n	8003a32 <HAL_RCC_OscConfig+0x452>
 8003a50:	e05c      	b.n	8003b0c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <HAL_RCC_OscConfig+0x4b4>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7fe fbaa 	bl	80021b0 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a60:	f7fe fba6 	bl	80021b0 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e04d      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_RCC_OscConfig+0x4ac>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0x480>
 8003a7e:	e045      	b.n	8003b0c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e040      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
 8003a8c:	40023800 	.word	0x40023800
 8003a90:	40007000 	.word	0x40007000
 8003a94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a98:	4b1f      	ldr	r3, [pc, #124]	@ (8003b18 <HAL_RCC_OscConfig+0x538>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d030      	beq.n	8003b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d129      	bne.n	8003b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d122      	bne.n	8003b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ac8:	4013      	ands	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ace:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d119      	bne.n	8003b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d10f      	bne.n	8003b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d107      	bne.n	8003b08 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800

08003b1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e041      	b.n	8003bb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d106      	bne.n	8003b48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fe f836 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2202      	movs	r2, #2
 8003b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	4619      	mov	r1, r3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	f000 fd2e 	bl	80045bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3708      	adds	r7, #8
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b082      	sub	sp, #8
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e041      	b.n	8003c50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d106      	bne.n	8003be6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f839 	bl	8003c58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	f000 fcdf 	bl	80045bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2201      	movs	r2, #1
 8003c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2201      	movs	r2, #1
 8003c2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3708      	adds	r7, #8
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b083      	sub	sp, #12
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <HAL_TIM_PWM_Start+0x24>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	bf14      	ite	ne
 8003c88:	2301      	movne	r3, #1
 8003c8a:	2300      	moveq	r3, #0
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	e022      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d109      	bne.n	8003caa <HAL_TIM_PWM_Start+0x3e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	bf14      	ite	ne
 8003ca2:	2301      	movne	r3, #1
 8003ca4:	2300      	moveq	r3, #0
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	e015      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d109      	bne.n	8003cc4 <HAL_TIM_PWM_Start+0x58>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	bf14      	ite	ne
 8003cbc:	2301      	movne	r3, #1
 8003cbe:	2300      	moveq	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	e008      	b.n	8003cd6 <HAL_TIM_PWM_Start+0x6a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e07c      	b.n	8003dd8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d104      	bne.n	8003cee <HAL_TIM_PWM_Start+0x82>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cec:	e013      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b04      	cmp	r3, #4
 8003cf2:	d104      	bne.n	8003cfe <HAL_TIM_PWM_Start+0x92>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cfc:	e00b      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0xa2>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d0c:	e003      	b.n	8003d16 <HAL_TIM_PWM_Start+0xaa>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2202      	movs	r2, #2
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	6839      	ldr	r1, [r7, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 ff42 	bl	8004ba8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a2d      	ldr	r2, [pc, #180]	@ (8003de0 <HAL_TIM_PWM_Start+0x174>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d004      	beq.n	8003d38 <HAL_TIM_PWM_Start+0xcc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a2c      	ldr	r2, [pc, #176]	@ (8003de4 <HAL_TIM_PWM_Start+0x178>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d101      	bne.n	8003d3c <HAL_TIM_PWM_Start+0xd0>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_TIM_PWM_Start+0xd2>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d007      	beq.n	8003d52 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a22      	ldr	r2, [pc, #136]	@ (8003de0 <HAL_TIM_PWM_Start+0x174>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d022      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d64:	d01d      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003de8 <HAL_TIM_PWM_Start+0x17c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d018      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1d      	ldr	r2, [pc, #116]	@ (8003dec <HAL_TIM_PWM_Start+0x180>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d013      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003df0 <HAL_TIM_PWM_Start+0x184>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d00e      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a16      	ldr	r2, [pc, #88]	@ (8003de4 <HAL_TIM_PWM_Start+0x178>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d009      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a18      	ldr	r2, [pc, #96]	@ (8003df4 <HAL_TIM_PWM_Start+0x188>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d004      	beq.n	8003da2 <HAL_TIM_PWM_Start+0x136>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a16      	ldr	r2, [pc, #88]	@ (8003df8 <HAL_TIM_PWM_Start+0x18c>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d111      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f003 0307 	and.w	r3, r3, #7
 8003dac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b06      	cmp	r3, #6
 8003db2:	d010      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc4:	e007      	b.n	8003dd6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f042 0201 	orr.w	r2, r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40010000 	.word	0x40010000
 8003de4:	40010400 	.word	0x40010400
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40014000 	.word	0x40014000
 8003df8:	40001800 	.word	0x40001800

08003dfc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e097      	b.n	8003f40 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d106      	bne.n	8003e2a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f7fd fee7 	bl	8001bf8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e40:	f023 0307 	bic.w	r3, r3, #7
 8003e44:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f000 fbb3 	bl	80045bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e7e:	f023 0303 	bic.w	r3, r3, #3
 8003e82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	689a      	ldr	r2, [r3, #8]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003e9c:	f023 030c 	bic.w	r3, r3, #12
 8003ea0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ea8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	011a      	lsls	r2, r3, #4
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	031b      	lsls	r3, r3, #12
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	693a      	ldr	r2, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003eda:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f58:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f60:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f68:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003f70:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d110      	bne.n	8003f9a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d102      	bne.n	8003f84 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003f7e:	7b7b      	ldrb	r3, [r7, #13]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d001      	beq.n	8003f88 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e069      	b.n	800405c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f98:	e031      	b.n	8003ffe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b04      	cmp	r3, #4
 8003f9e:	d110      	bne.n	8003fc2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fa0:	7bbb      	ldrb	r3, [r7, #14]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d102      	bne.n	8003fac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fa6:	7b3b      	ldrb	r3, [r7, #12]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d001      	beq.n	8003fb0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e055      	b.n	800405c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fc0:	e01d      	b.n	8003ffe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d108      	bne.n	8003fda <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fc8:	7bbb      	ldrb	r3, [r7, #14]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d105      	bne.n	8003fda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fce:	7b7b      	ldrb	r3, [r7, #13]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d102      	bne.n	8003fda <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fd4:	7b3b      	ldrb	r3, [r7, #12]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d001      	beq.n	8003fde <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e03e      	b.n	800405c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2202      	movs	r2, #2
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_TIM_Encoder_Start+0xc4>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b04      	cmp	r3, #4
 8004008:	d008      	beq.n	800401c <HAL_TIM_Encoder_Start+0xd4>
 800400a:	e00f      	b.n	800402c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2201      	movs	r2, #1
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fdc7 	bl	8004ba8 <TIM_CCxChannelCmd>
      break;
 800401a:	e016      	b.n	800404a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2201      	movs	r2, #1
 8004022:	2104      	movs	r1, #4
 8004024:	4618      	mov	r0, r3
 8004026:	f000 fdbf 	bl	8004ba8 <TIM_CCxChannelCmd>
      break;
 800402a:	e00e      	b.n	800404a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2201      	movs	r2, #1
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f000 fdb7 	bl	8004ba8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2201      	movs	r2, #1
 8004040:	2104      	movs	r1, #4
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fdb0 	bl	8004ba8 <TIM_CCxChannelCmd>
      break;
 8004048:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f042 0201 	orr.w	r2, r2, #1
 8004058:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0202 	mvn.w	r2, #2
 8004098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fa65 	bl	800457e <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fa57 	bl	800456a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fa68 	bl	8004592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0204 	mvn.w	r2, #4
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 fa3f 	bl	800457e <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fa31 	bl	800456a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 fa42 	bl	8004592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d020      	beq.n	8004160 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0208 	mvn.w	r2, #8
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2204      	movs	r2, #4
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 fa19 	bl	800457e <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fa0b 	bl	800456a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 fa1c 	bl	8004592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d020      	beq.n	80041ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01b      	beq.n	80041ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2208      	movs	r2, #8
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f9f3 	bl	800457e <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f9e5 	bl	800456a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f9f6 	bl	8004592 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0201 	mvn.w	r2, #1
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f9c3 	bl	8004556 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fdd8 	bl	8004da4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f9c7 	bl	80045a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0220 	mvn.w	r2, #32
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fdaa 	bl	8004d90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800425e:	2302      	movs	r3, #2
 8004260:	e0ae      	b.n	80043c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b0c      	cmp	r3, #12
 800426e:	f200 809f 	bhi.w	80043b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004272:	a201      	add	r2, pc, #4	@ (adr r2, 8004278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080043b1 	.word	0x080043b1
 8004280:	080043b1 	.word	0x080043b1
 8004284:	080043b1 	.word	0x080043b1
 8004288:	080042ed 	.word	0x080042ed
 800428c:	080043b1 	.word	0x080043b1
 8004290:	080043b1 	.word	0x080043b1
 8004294:	080043b1 	.word	0x080043b1
 8004298:	0800432f 	.word	0x0800432f
 800429c:	080043b1 	.word	0x080043b1
 80042a0:	080043b1 	.word	0x080043b1
 80042a4:	080043b1 	.word	0x080043b1
 80042a8:	0800436f 	.word	0x0800436f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fa2e 	bl	8004714 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0208 	orr.w	r2, r2, #8
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f022 0204 	bic.w	r2, r2, #4
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691a      	ldr	r2, [r3, #16]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	619a      	str	r2, [r3, #24]
      break;
 80042ea:	e064      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fa7e 	bl	80047f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699a      	ldr	r2, [r3, #24]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6999      	ldr	r1, [r3, #24]
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	021a      	lsls	r2, r3, #8
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	619a      	str	r2, [r3, #24]
      break;
 800432c:	e043      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fad3 	bl	80048e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f042 0208 	orr.w	r2, r2, #8
 8004348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0204 	bic.w	r2, r2, #4
 8004358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	430a      	orrs	r2, r1
 800436a:	61da      	str	r2, [r3, #28]
      break;
 800436c:	e023      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68b9      	ldr	r1, [r7, #8]
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fb27 	bl	80049c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69d9      	ldr	r1, [r3, #28]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	021a      	lsls	r2, r3, #8
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	430a      	orrs	r2, r1
 80043ac:	61da      	str	r2, [r3, #28]
      break;
 80043ae:	e002      	b.n	80043b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	75fb      	strb	r3, [r7, #23]
      break;
 80043b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
 80043d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d101      	bne.n	80043e4 <HAL_TIM_ConfigClockSource+0x1c>
 80043e0:	2302      	movs	r3, #2
 80043e2:	e0b4      	b.n	800454e <HAL_TIM_ConfigClockSource+0x186>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800440a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800441c:	d03e      	beq.n	800449c <HAL_TIM_ConfigClockSource+0xd4>
 800441e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004422:	f200 8087 	bhi.w	8004534 <HAL_TIM_ConfigClockSource+0x16c>
 8004426:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800442a:	f000 8086 	beq.w	800453a <HAL_TIM_ConfigClockSource+0x172>
 800442e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004432:	d87f      	bhi.n	8004534 <HAL_TIM_ConfigClockSource+0x16c>
 8004434:	2b70      	cmp	r3, #112	@ 0x70
 8004436:	d01a      	beq.n	800446e <HAL_TIM_ConfigClockSource+0xa6>
 8004438:	2b70      	cmp	r3, #112	@ 0x70
 800443a:	d87b      	bhi.n	8004534 <HAL_TIM_ConfigClockSource+0x16c>
 800443c:	2b60      	cmp	r3, #96	@ 0x60
 800443e:	d050      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x11a>
 8004440:	2b60      	cmp	r3, #96	@ 0x60
 8004442:	d877      	bhi.n	8004534 <HAL_TIM_ConfigClockSource+0x16c>
 8004444:	2b50      	cmp	r3, #80	@ 0x50
 8004446:	d03c      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0xfa>
 8004448:	2b50      	cmp	r3, #80	@ 0x50
 800444a:	d873      	bhi.n	8004534 <HAL_TIM_ConfigClockSource+0x16c>
 800444c:	2b40      	cmp	r3, #64	@ 0x40
 800444e:	d058      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x13a>
 8004450:	2b40      	cmp	r3, #64	@ 0x40
 8004452:	d86f      	bhi.n	8004534 <HAL_TIM_ConfigClockSource+0x16c>
 8004454:	2b30      	cmp	r3, #48	@ 0x30
 8004456:	d064      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x15a>
 8004458:	2b30      	cmp	r3, #48	@ 0x30
 800445a:	d86b      	bhi.n	8004534 <HAL_TIM_ConfigClockSource+0x16c>
 800445c:	2b20      	cmp	r3, #32
 800445e:	d060      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x15a>
 8004460:	2b20      	cmp	r3, #32
 8004462:	d867      	bhi.n	8004534 <HAL_TIM_ConfigClockSource+0x16c>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d05c      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x15a>
 8004468:	2b10      	cmp	r3, #16
 800446a:	d05a      	beq.n	8004522 <HAL_TIM_ConfigClockSource+0x15a>
 800446c:	e062      	b.n	8004534 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800447e:	f000 fb73 	bl	8004b68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	609a      	str	r2, [r3, #8]
      break;
 800449a:	e04f      	b.n	800453c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044ac:	f000 fb5c 	bl	8004b68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689a      	ldr	r2, [r3, #8]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044be:	609a      	str	r2, [r3, #8]
      break;
 80044c0:	e03c      	b.n	800453c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 fad0 	bl	8004a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2150      	movs	r1, #80	@ 0x50
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fb29 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 80044e0:	e02c      	b.n	800453c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ee:	461a      	mov	r2, r3
 80044f0:	f000 faef 	bl	8004ad2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2160      	movs	r1, #96	@ 0x60
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fb19 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004500:	e01c      	b.n	800453c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800450e:	461a      	mov	r2, r3
 8004510:	f000 fab0 	bl	8004a74 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2140      	movs	r1, #64	@ 0x40
 800451a:	4618      	mov	r0, r3
 800451c:	f000 fb09 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004520:	e00c      	b.n	800453c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4619      	mov	r1, r3
 800452c:	4610      	mov	r0, r2
 800452e:	f000 fb00 	bl	8004b32 <TIM_ITRx_SetConfig>
      break;
 8004532:	e003      	b.n	800453c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	73fb      	strb	r3, [r7, #15]
      break;
 8004538:	e000      	b.n	800453c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800453a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800456a:	b480      	push	{r7}
 800456c:	b083      	sub	sp, #12
 800456e:	af00      	add	r7, sp, #0
 8004570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004572:	bf00      	nop
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457c:	4770      	bx	lr

0800457e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004586:	bf00      	nop
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
	...

080045bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a46      	ldr	r2, [pc, #280]	@ (80046e8 <TIM_Base_SetConfig+0x12c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d013      	beq.n	80045fc <TIM_Base_SetConfig+0x40>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045da:	d00f      	beq.n	80045fc <TIM_Base_SetConfig+0x40>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a43      	ldr	r2, [pc, #268]	@ (80046ec <TIM_Base_SetConfig+0x130>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00b      	beq.n	80045fc <TIM_Base_SetConfig+0x40>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	4a42      	ldr	r2, [pc, #264]	@ (80046f0 <TIM_Base_SetConfig+0x134>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d007      	beq.n	80045fc <TIM_Base_SetConfig+0x40>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a41      	ldr	r2, [pc, #260]	@ (80046f4 <TIM_Base_SetConfig+0x138>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d003      	beq.n	80045fc <TIM_Base_SetConfig+0x40>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a40      	ldr	r2, [pc, #256]	@ (80046f8 <TIM_Base_SetConfig+0x13c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d108      	bne.n	800460e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a35      	ldr	r2, [pc, #212]	@ (80046e8 <TIM_Base_SetConfig+0x12c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d02b      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800461c:	d027      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a32      	ldr	r2, [pc, #200]	@ (80046ec <TIM_Base_SetConfig+0x130>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d023      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a31      	ldr	r2, [pc, #196]	@ (80046f0 <TIM_Base_SetConfig+0x134>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d01f      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a30      	ldr	r2, [pc, #192]	@ (80046f4 <TIM_Base_SetConfig+0x138>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d01b      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a2f      	ldr	r2, [pc, #188]	@ (80046f8 <TIM_Base_SetConfig+0x13c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d017      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a2e      	ldr	r2, [pc, #184]	@ (80046fc <TIM_Base_SetConfig+0x140>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d013      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a2d      	ldr	r2, [pc, #180]	@ (8004700 <TIM_Base_SetConfig+0x144>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d00f      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a2c      	ldr	r2, [pc, #176]	@ (8004704 <TIM_Base_SetConfig+0x148>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d00b      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a2b      	ldr	r2, [pc, #172]	@ (8004708 <TIM_Base_SetConfig+0x14c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d007      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a2a      	ldr	r2, [pc, #168]	@ (800470c <TIM_Base_SetConfig+0x150>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d003      	beq.n	800466e <TIM_Base_SetConfig+0xb2>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a29      	ldr	r2, [pc, #164]	@ (8004710 <TIM_Base_SetConfig+0x154>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d108      	bne.n	8004680 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004674:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4313      	orrs	r3, r2
 800467e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	689a      	ldr	r2, [r3, #8]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a10      	ldr	r2, [pc, #64]	@ (80046e8 <TIM_Base_SetConfig+0x12c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d003      	beq.n	80046b4 <TIM_Base_SetConfig+0xf8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a12      	ldr	r2, [pc, #72]	@ (80046f8 <TIM_Base_SetConfig+0x13c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d103      	bne.n	80046bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	f023 0201 	bic.w	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	611a      	str	r2, [r3, #16]
  }
}
 80046da:	bf00      	nop
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000
 80046ec:	40000400 	.word	0x40000400
 80046f0:	40000800 	.word	0x40000800
 80046f4:	40000c00 	.word	0x40000c00
 80046f8:	40010400 	.word	0x40010400
 80046fc:	40014000 	.word	0x40014000
 8004700:	40014400 	.word	0x40014400
 8004704:	40014800 	.word	0x40014800
 8004708:	40001800 	.word	0x40001800
 800470c:	40001c00 	.word	0x40001c00
 8004710:	40002000 	.word	0x40002000

08004714 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004714:	b480      	push	{r7}
 8004716:	b087      	sub	sp, #28
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	f023 0201 	bic.w	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0303 	bic.w	r3, r3, #3
 800474a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0302 	bic.w	r3, r3, #2
 800475c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	697a      	ldr	r2, [r7, #20]
 8004764:	4313      	orrs	r3, r2
 8004766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a20      	ldr	r2, [pc, #128]	@ (80047ec <TIM_OC1_SetConfig+0xd8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_OC1_SetConfig+0x64>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a1f      	ldr	r2, [pc, #124]	@ (80047f0 <TIM_OC1_SetConfig+0xdc>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d10c      	bne.n	8004792 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	f023 0308 	bic.w	r3, r3, #8
 800477e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	4313      	orrs	r3, r2
 8004788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	f023 0304 	bic.w	r3, r3, #4
 8004790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a15      	ldr	r2, [pc, #84]	@ (80047ec <TIM_OC1_SetConfig+0xd8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_OC1_SetConfig+0x8e>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a14      	ldr	r2, [pc, #80]	@ (80047f0 <TIM_OC1_SetConfig+0xdc>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d111      	bne.n	80047c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	693a      	ldr	r2, [r7, #16]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	68fa      	ldr	r2, [r7, #12]
 80047d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	621a      	str	r2, [r3, #32]
}
 80047e0:	bf00      	nop
 80047e2:	371c      	adds	r7, #28
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	40010000 	.word	0x40010000
 80047f0:	40010400 	.word	0x40010400

080047f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b087      	sub	sp, #28
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f023 0210 	bic.w	r2, r3, #16
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800482a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	4313      	orrs	r3, r2
 8004836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	f023 0320 	bic.w	r3, r3, #32
 800483e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4313      	orrs	r3, r2
 800484a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a22      	ldr	r2, [pc, #136]	@ (80048d8 <TIM_OC2_SetConfig+0xe4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d003      	beq.n	800485c <TIM_OC2_SetConfig+0x68>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a21      	ldr	r2, [pc, #132]	@ (80048dc <TIM_OC2_SetConfig+0xe8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d10d      	bne.n	8004878 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004862:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	4313      	orrs	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004876:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a17      	ldr	r2, [pc, #92]	@ (80048d8 <TIM_OC2_SetConfig+0xe4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d003      	beq.n	8004888 <TIM_OC2_SetConfig+0x94>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a16      	ldr	r2, [pc, #88]	@ (80048dc <TIM_OC2_SetConfig+0xe8>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d113      	bne.n	80048b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800488e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	693a      	ldr	r2, [r7, #16]
 80048b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	621a      	str	r2, [r3, #32]
}
 80048ca:	bf00      	nop
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	40010000 	.word	0x40010000
 80048dc:	40010400 	.word	0x40010400

080048e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f023 0303 	bic.w	r3, r3, #3
 8004916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	021b      	lsls	r3, r3, #8
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a21      	ldr	r2, [pc, #132]	@ (80049c0 <TIM_OC3_SetConfig+0xe0>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d003      	beq.n	8004946 <TIM_OC3_SetConfig+0x66>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a20      	ldr	r2, [pc, #128]	@ (80049c4 <TIM_OC3_SetConfig+0xe4>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d10d      	bne.n	8004962 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800494c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a16      	ldr	r2, [pc, #88]	@ (80049c0 <TIM_OC3_SetConfig+0xe0>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_OC3_SetConfig+0x92>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a15      	ldr	r2, [pc, #84]	@ (80049c4 <TIM_OC3_SetConfig+0xe4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d113      	bne.n	800499a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	4313      	orrs	r3, r2
 800498c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	697a      	ldr	r2, [r7, #20]
 80049b2:	621a      	str	r2, [r3, #32]
}
 80049b4:	bf00      	nop
 80049b6:	371c      	adds	r7, #28
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr
 80049c0:	40010000 	.word	0x40010000
 80049c4:	40010400 	.word	0x40010400

080049c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b087      	sub	sp, #28
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	021b      	lsls	r3, r3, #8
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	031b      	lsls	r3, r3, #12
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a12      	ldr	r2, [pc, #72]	@ (8004a6c <TIM_OC4_SetConfig+0xa4>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d003      	beq.n	8004a30 <TIM_OC4_SetConfig+0x68>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a11      	ldr	r2, [pc, #68]	@ (8004a70 <TIM_OC4_SetConfig+0xa8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d109      	bne.n	8004a44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	019b      	lsls	r3, r3, #6
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	621a      	str	r2, [r3, #32]
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40010400 	.word	0x40010400

08004a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	f023 0201 	bic.w	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f023 030a 	bic.w	r3, r3, #10
 8004ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ab2:	697a      	ldr	r2, [r7, #20]
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	621a      	str	r2, [r3, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	371c      	adds	r7, #28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr

08004ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ad2:	b480      	push	{r7}
 8004ad4:	b087      	sub	sp, #28
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	60f8      	str	r0, [r7, #12]
 8004ada:	60b9      	str	r1, [r7, #8]
 8004adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f023 0210 	bic.w	r2, r3, #16
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004afc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	031b      	lsls	r3, r3, #12
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	011b      	lsls	r3, r3, #4
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	621a      	str	r2, [r3, #32]
}
 8004b26:	bf00      	nop
 8004b28:	371c      	adds	r7, #28
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	f043 0307 	orr.w	r3, r3, #7
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	609a      	str	r2, [r3, #8]
}
 8004b5c:	bf00      	nop
 8004b5e:	3714      	adds	r7, #20
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b087      	sub	sp, #28
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	021a      	lsls	r2, r3, #8
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	697a      	ldr	r2, [r7, #20]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	697a      	ldr	r2, [r7, #20]
 8004b9a:	609a      	str	r2, [r3, #8]
}
 8004b9c:	bf00      	nop
 8004b9e:	371c      	adds	r7, #28
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	2201      	movs	r2, #1
 8004bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6a1a      	ldr	r2, [r3, #32]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	401a      	ands	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6a1a      	ldr	r2, [r3, #32]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 031f 	and.w	r3, r3, #31
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
	...

08004bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d101      	bne.n	8004c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	e05a      	b.n	8004cc2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2202      	movs	r2, #2
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a21      	ldr	r2, [pc, #132]	@ (8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d022      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c58:	d01d      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a1d      	ldr	r2, [pc, #116]	@ (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d018      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a1b      	ldr	r2, [pc, #108]	@ (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d013      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a1a      	ldr	r2, [pc, #104]	@ (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a18      	ldr	r2, [pc, #96]	@ (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d009      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a17      	ldr	r2, [pc, #92]	@ (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a15      	ldr	r2, [pc, #84]	@ (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d10c      	bne.n	8004cb0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3714      	adds	r7, #20
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	40010000 	.word	0x40010000
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40000800 	.word	0x40000800
 8004cdc:	40000c00 	.word	0x40000c00
 8004ce0:	40010400 	.word	0x40010400
 8004ce4:	40014000 	.word	0x40014000
 8004ce8:	40001800 	.word	0x40001800

08004cec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e03d      	b.n	8004d84 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	695b      	ldr	r3, [r3, #20]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68fa      	ldr	r2, [r7, #12]
 8004d78:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e042      	b.n	8004e50 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7fc ff92 	bl	8001d08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2224      	movs	r2, #36	@ 0x24
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	68da      	ldr	r2, [r3, #12]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004dfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 ff4f 	bl	8005ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	695a      	ldr	r2, [r3, #20]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2220      	movs	r2, #32
 8004e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	@ 0x28
 8004e5c:	af02      	add	r7, sp, #8
 8004e5e:	60f8      	str	r0, [r7, #12]
 8004e60:	60b9      	str	r1, [r7, #8]
 8004e62:	603b      	str	r3, [r7, #0]
 8004e64:	4613      	mov	r3, r2
 8004e66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	d175      	bne.n	8004f64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d002      	beq.n	8004e84 <HAL_UART_Transmit+0x2c>
 8004e7e:	88fb      	ldrh	r3, [r7, #6]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e06e      	b.n	8004f66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2221      	movs	r2, #33	@ 0x21
 8004e92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e96:	f7fd f98b 	bl	80021b0 <HAL_GetTick>
 8004e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	88fa      	ldrh	r2, [r7, #6]
 8004ea0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb0:	d108      	bne.n	8004ec4 <HAL_UART_Transmit+0x6c>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d104      	bne.n	8004ec4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	61bb      	str	r3, [r7, #24]
 8004ec2:	e003      	b.n	8004ecc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ecc:	e02e      	b.n	8004f2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	2180      	movs	r1, #128	@ 0x80
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f000 fc27 	bl	800572c <UART_WaitOnFlagUntilTimeout>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d005      	beq.n	8004ef0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004eec:	2303      	movs	r3, #3
 8004eee:	e03a      	b.n	8004f66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10b      	bne.n	8004f0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	3302      	adds	r3, #2
 8004f0a:	61bb      	str	r3, [r7, #24]
 8004f0c:	e007      	b.n	8004f1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	781a      	ldrb	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1cb      	bne.n	8004ece <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	9300      	str	r3, [sp, #0]
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	2140      	movs	r1, #64	@ 0x40
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fbf3 	bl	800572c <UART_WaitOnFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e006      	b.n	8004f66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e000      	b.n	8004f66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004f64:	2302      	movs	r3, #2
  }
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3720      	adds	r7, #32
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	d112      	bne.n	8004fae <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d002      	beq.n	8004f94 <HAL_UART_Receive_DMA+0x26>
 8004f8e:	88fb      	ldrh	r3, [r7, #6]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e00b      	b.n	8004fb0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004f9e:	88fb      	ldrh	r3, [r7, #6]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	68b9      	ldr	r1, [r7, #8]
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fc1b 	bl	80057e0 <UART_Start_Receive_DMA>
 8004faa:	4603      	mov	r3, r0
 8004fac:	e000      	b.n	8004fb0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
  }
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b0ba      	sub	sp, #232	@ 0xe8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fee:	f003 030f 	and.w	r3, r3, #15
 8004ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10f      	bne.n	800501e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005002:	f003 0320 	and.w	r3, r3, #32
 8005006:	2b00      	cmp	r3, #0
 8005008:	d009      	beq.n	800501e <HAL_UART_IRQHandler+0x66>
 800500a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800500e:	f003 0320 	and.w	r3, r3, #32
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 fd83 	bl	8005b22 <UART_Receive_IT>
      return;
 800501c:	e25b      	b.n	80054d6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800501e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005022:	2b00      	cmp	r3, #0
 8005024:	f000 80de 	beq.w	80051e4 <HAL_UART_IRQHandler+0x22c>
 8005028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800502c:	f003 0301 	and.w	r3, r3, #1
 8005030:	2b00      	cmp	r3, #0
 8005032:	d106      	bne.n	8005042 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005038:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800503c:	2b00      	cmp	r3, #0
 800503e:	f000 80d1 	beq.w	80051e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00b      	beq.n	8005066 <HAL_UART_IRQHandler+0xae>
 800504e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505e:	f043 0201 	orr.w	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800506a:	f003 0304 	and.w	r3, r3, #4
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00b      	beq.n	800508a <HAL_UART_IRQHandler+0xd2>
 8005072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d005      	beq.n	800508a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005082:	f043 0202 	orr.w	r2, r3, #2
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800508a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800508e:	f003 0302 	and.w	r3, r3, #2
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00b      	beq.n	80050ae <HAL_UART_IRQHandler+0xf6>
 8005096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d005      	beq.n	80050ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050a6:	f043 0204 	orr.w	r2, r3, #4
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b2:	f003 0308 	and.w	r3, r3, #8
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d011      	beq.n	80050de <HAL_UART_IRQHandler+0x126>
 80050ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d105      	bne.n	80050d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80050c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d6:	f043 0208 	orr.w	r2, r3, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f000 81f2 	beq.w	80054cc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050ec:	f003 0320 	and.w	r3, r3, #32
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_UART_IRQHandler+0x14e>
 80050f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f000 fd0e 	bl	8005b22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005110:	2b40      	cmp	r3, #64	@ 0x40
 8005112:	bf0c      	ite	eq
 8005114:	2301      	moveq	r3, #1
 8005116:	2300      	movne	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d103      	bne.n	8005132 <HAL_UART_IRQHandler+0x17a>
 800512a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d04f      	beq.n	80051d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fc16 	bl	8005964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005142:	2b40      	cmp	r3, #64	@ 0x40
 8005144:	d141      	bne.n	80051ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3314      	adds	r3, #20
 800514c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005154:	e853 3f00 	ldrex	r3, [r3]
 8005158:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800515c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005160:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	3314      	adds	r3, #20
 800516e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005172:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005176:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800517e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800518a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1d9      	bne.n	8005146 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005196:	2b00      	cmp	r3, #0
 8005198:	d013      	beq.n	80051c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800519e:	4a7e      	ldr	r2, [pc, #504]	@ (8005398 <HAL_UART_IRQHandler+0x3e0>)
 80051a0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd fa96 	bl	80026d8 <HAL_DMA_Abort_IT>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d016      	beq.n	80051e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80051bc:	4610      	mov	r0, r2
 80051be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c0:	e00e      	b.n	80051e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f99e 	bl	8005504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c8:	e00a      	b.n	80051e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f99a 	bl	8005504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	e006      	b.n	80051e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f996 	bl	8005504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80051de:	e175      	b.n	80054cc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e0:	bf00      	nop
    return;
 80051e2:	e173      	b.n	80054cc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	f040 814f 	bne.w	800548c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80051ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 8148 	beq.w	800548c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80051fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8141 	beq.w	800548c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800520a:	2300      	movs	r3, #0
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60bb      	str	r3, [r7, #8]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522a:	2b40      	cmp	r3, #64	@ 0x40
 800522c:	f040 80b6 	bne.w	800539c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800523c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8145 	beq.w	80054d0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800524a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800524e:	429a      	cmp	r2, r3
 8005250:	f080 813e 	bcs.w	80054d0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800525a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005266:	f000 8088 	beq.w	800537a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	330c      	adds	r3, #12
 8005270:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005278:	e853 3f00 	ldrex	r3, [r3]
 800527c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005280:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005288:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	330c      	adds	r3, #12
 8005292:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005296:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800529a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80052a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80052ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1d9      	bne.n	800526a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80052c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80052da:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80052de:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80052e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80052ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e1      	bne.n	80052b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80052fc:	e853 3f00 	ldrex	r3, [r3]
 8005300:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005304:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005308:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	3314      	adds	r3, #20
 8005312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005316:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005318:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800531c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800531e:	e841 2300 	strex	r3, r2, [r1]
 8005322:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1e3      	bne.n	80052f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2220      	movs	r2, #32
 800532e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	330c      	adds	r3, #12
 800533e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005342:	e853 3f00 	ldrex	r3, [r3]
 8005346:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005348:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800534a:	f023 0310 	bic.w	r3, r3, #16
 800534e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330c      	adds	r3, #12
 8005358:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800535c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800535e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005362:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800536a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e3      	bne.n	8005338 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005374:	4618      	mov	r0, r3
 8005376:	f7fd f93f 	bl	80025f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005388:	b29b      	uxth	r3, r3
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	b29b      	uxth	r3, r3
 800538e:	4619      	mov	r1, r3
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f8c1 	bl	8005518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005396:	e09b      	b.n	80054d0 <HAL_UART_IRQHandler+0x518>
 8005398:	08005a2b 	.word	0x08005a2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 808e 	beq.w	80054d4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80053b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8089 	beq.w	80054d4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053cc:	e853 3f00 	ldrex	r3, [r3]
 80053d0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80053d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053d8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	330c      	adds	r3, #12
 80053e2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80053e6:	647a      	str	r2, [r7, #68]	@ 0x44
 80053e8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80053ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80053f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e3      	bne.n	80053c2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	3314      	adds	r3, #20
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	e853 3f00 	ldrex	r3, [r3]
 8005408:	623b      	str	r3, [r7, #32]
   return(result);
 800540a:	6a3b      	ldr	r3, [r7, #32]
 800540c:	f023 0301 	bic.w	r3, r3, #1
 8005410:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	3314      	adds	r3, #20
 800541a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800541e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005420:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1e3      	bne.n	80053fa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	330c      	adds	r3, #12
 8005446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0310 	bic.w	r3, r3, #16
 8005456:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005464:	61fa      	str	r2, [r7, #28]
 8005466:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	69b9      	ldr	r1, [r7, #24]
 800546a:	69fa      	ldr	r2, [r7, #28]
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	617b      	str	r3, [r7, #20]
   return(result);
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e3      	bne.n	8005440 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800547e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005482:	4619      	mov	r1, r3
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 f847 	bl	8005518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800548a:	e023      	b.n	80054d4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800548c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005494:	2b00      	cmp	r3, #0
 8005496:	d009      	beq.n	80054ac <HAL_UART_IRQHandler+0x4f4>
 8005498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800549c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d003      	beq.n	80054ac <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fad4 	bl	8005a52 <UART_Transmit_IT>
    return;
 80054aa:	e014      	b.n	80054d6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00e      	beq.n	80054d6 <HAL_UART_IRQHandler+0x51e>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb14 	bl	8005af2 <UART_EndTransmit_IT>
    return;
 80054ca:	e004      	b.n	80054d6 <HAL_UART_IRQHandler+0x51e>
    return;
 80054cc:	bf00      	nop
 80054ce:	e002      	b.n	80054d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80054d0:	bf00      	nop
 80054d2:	e000      	b.n	80054d6 <HAL_UART_IRQHandler+0x51e>
      return;
 80054d4:	bf00      	nop
  }
}
 80054d6:	37e8      	adds	r7, #232	@ 0xe8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005524:	bf00      	nop
 8005526:	370c      	adds	r7, #12
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b09c      	sub	sp, #112	@ 0x70
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800553c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d172      	bne.n	8005632 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800554c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800554e:	2200      	movs	r2, #0
 8005550:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005552:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	330c      	adds	r3, #12
 8005558:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005562:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005564:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005568:	66bb      	str	r3, [r7, #104]	@ 0x68
 800556a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	330c      	adds	r3, #12
 8005570:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005572:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005574:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005578:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005580:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005586:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3314      	adds	r3, #20
 800558c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005590:	e853 3f00 	ldrex	r3, [r3]
 8005594:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005598:	f023 0301 	bic.w	r3, r3, #1
 800559c:	667b      	str	r3, [r7, #100]	@ 0x64
 800559e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	3314      	adds	r3, #20
 80055a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80055a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055ae:	e841 2300 	strex	r3, r2, [r1]
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1e5      	bne.n	8005586 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	623b      	str	r3, [r7, #32]
   return(result);
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3314      	adds	r3, #20
 80055d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80055da:	633a      	str	r2, [r7, #48]	@ 0x30
 80055dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e5      	bne.n	80055ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80055ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d119      	bne.n	8005632 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	330c      	adds	r3, #12
 8005604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	60fb      	str	r3, [r7, #12]
   return(result);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f023 0310 	bic.w	r3, r3, #16
 8005614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800561e:	61fa      	str	r2, [r7, #28]
 8005620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	69b9      	ldr	r1, [r7, #24]
 8005624:	69fa      	ldr	r2, [r7, #28]
 8005626:	e841 2300 	strex	r3, r2, [r1]
 800562a:	617b      	str	r3, [r7, #20]
   return(result);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d1e5      	bne.n	80055fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005634:	2200      	movs	r2, #0
 8005636:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005638:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	2b01      	cmp	r3, #1
 800563e:	d106      	bne.n	800564e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005642:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005644:	4619      	mov	r1, r3
 8005646:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005648:	f7ff ff66 	bl	8005518 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800564c:	e002      	b.n	8005654 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800564e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005650:	f7fb fce8 	bl	8001024 <HAL_UART_RxCpltCallback>
}
 8005654:	bf00      	nop
 8005656:	3770      	adds	r7, #112	@ 0x70
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005668:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005674:	2b01      	cmp	r3, #1
 8005676:	d108      	bne.n	800568a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800567c:	085b      	lsrs	r3, r3, #1
 800567e:	b29b      	uxth	r3, r3
 8005680:	4619      	mov	r1, r3
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f7ff ff48 	bl	8005518 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005688:	e002      	b.n	8005690 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f7ff ff30 	bl	80054f0 <HAL_UART_RxHalfCpltCallback>
}
 8005690:	bf00      	nop
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b4:	2b80      	cmp	r3, #128	@ 0x80
 80056b6:	bf0c      	ite	eq
 80056b8:	2301      	moveq	r3, #1
 80056ba:	2300      	movne	r3, #0
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b21      	cmp	r3, #33	@ 0x21
 80056ca:	d108      	bne.n	80056de <UART_DMAError+0x46>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d005      	beq.n	80056de <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80056d8:	68b8      	ldr	r0, [r7, #8]
 80056da:	f000 f91b 	bl	8005914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e8:	2b40      	cmp	r3, #64	@ 0x40
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b22      	cmp	r3, #34	@ 0x22
 80056fe:	d108      	bne.n	8005712 <UART_DMAError+0x7a>
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d005      	beq.n	8005712 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2200      	movs	r2, #0
 800570a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800570c:	68b8      	ldr	r0, [r7, #8]
 800570e:	f000 f929 	bl	8005964 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	f043 0210 	orr.w	r2, r3, #16
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800571e:	68b8      	ldr	r0, [r7, #8]
 8005720:	f7ff fef0 	bl	8005504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005724:	bf00      	nop
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b086      	sub	sp, #24
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	603b      	str	r3, [r7, #0]
 8005738:	4613      	mov	r3, r2
 800573a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573c:	e03b      	b.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005744:	d037      	beq.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005746:	f7fc fd33 	bl	80021b0 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	6a3a      	ldr	r2, [r7, #32]
 8005752:	429a      	cmp	r2, r3
 8005754:	d302      	bcc.n	800575c <UART_WaitOnFlagUntilTimeout+0x30>
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e03a      	b.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f003 0304 	and.w	r3, r3, #4
 800576a:	2b00      	cmp	r3, #0
 800576c:	d023      	beq.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b80      	cmp	r3, #128	@ 0x80
 8005772:	d020      	beq.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b40      	cmp	r3, #64	@ 0x40
 8005778:	d01d      	beq.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b08      	cmp	r3, #8
 8005786:	d116      	bne.n	80057b6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f8e0 	bl	8005964 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2208      	movs	r2, #8
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e00f      	b.n	80057d6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4013      	ands	r3, r2
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	461a      	mov	r2, r3
 80057ce:	79fb      	ldrb	r3, [r7, #7]
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d0b4      	beq.n	800573e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b098      	sub	sp, #96	@ 0x60
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	88fa      	ldrh	r2, [r7, #6]
 80057f8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2222      	movs	r2, #34	@ 0x22
 8005804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800580c:	4a3e      	ldr	r2, [pc, #248]	@ (8005908 <UART_Start_Receive_DMA+0x128>)
 800580e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005814:	4a3d      	ldr	r2, [pc, #244]	@ (800590c <UART_Start_Receive_DMA+0x12c>)
 8005816:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581c:	4a3c      	ldr	r2, [pc, #240]	@ (8005910 <UART_Start_Receive_DMA+0x130>)
 800581e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005824:	2200      	movs	r2, #0
 8005826:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3304      	adds	r3, #4
 8005838:	4619      	mov	r1, r3
 800583a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	88fb      	ldrh	r3, [r7, #6]
 8005840:	f7fc fe82 	bl	8002548 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	613b      	str	r3, [r7, #16]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	613b      	str	r3, [r7, #16]
 8005858:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d019      	beq.n	8005896 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	330c      	adds	r3, #12
 8005868:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800586c:	e853 3f00 	ldrex	r3, [r3]
 8005870:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005878:	65bb      	str	r3, [r7, #88]	@ 0x58
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005882:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005884:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005886:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005888:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800588a:	e841 2300 	strex	r3, r2, [r1]
 800588e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005892:	2b00      	cmp	r3, #0
 8005894:	d1e5      	bne.n	8005862 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3314      	adds	r3, #20
 800589c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a8:	f043 0301 	orr.w	r3, r3, #1
 80058ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3314      	adds	r3, #20
 80058b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80058b6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80058b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80058bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e5      	bne.n	8005896 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3314      	adds	r3, #20
 80058d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	617b      	str	r3, [r7, #20]
   return(result);
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3314      	adds	r3, #20
 80058e8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80058ea:	627a      	str	r2, [r7, #36]	@ 0x24
 80058ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6a39      	ldr	r1, [r7, #32]
 80058f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e5      	bne.n	80058ca <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3760      	adds	r7, #96	@ 0x60
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	08005531 	.word	0x08005531
 800590c:	0800565d 	.word	0x0800565d
 8005910:	08005699 	.word	0x08005699

08005914 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b089      	sub	sp, #36	@ 0x24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	60bb      	str	r3, [r7, #8]
   return(result);
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005932:	61fb      	str	r3, [r7, #28]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	61ba      	str	r2, [r7, #24]
 800593e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6979      	ldr	r1, [r7, #20]
 8005942:	69ba      	ldr	r2, [r7, #24]
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	613b      	str	r3, [r7, #16]
   return(result);
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005958:	bf00      	nop
 800595a:	3724      	adds	r7, #36	@ 0x24
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005964:	b480      	push	{r7}
 8005966:	b095      	sub	sp, #84	@ 0x54
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	330c      	adds	r3, #12
 8005972:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005976:	e853 3f00 	ldrex	r3, [r3]
 800597a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005982:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	330c      	adds	r3, #12
 800598a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800598c:	643a      	str	r2, [r7, #64]	@ 0x40
 800598e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005990:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005992:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005994:	e841 2300 	strex	r3, r2, [r1]
 8005998:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800599a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1e5      	bne.n	800596c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	3314      	adds	r3, #20
 80059a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	e853 3f00 	ldrex	r3, [r3]
 80059ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f023 0301 	bic.w	r3, r3, #1
 80059b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	3314      	adds	r3, #20
 80059be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c8:	e841 2300 	strex	r3, r2, [r1]
 80059cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e5      	bne.n	80059a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d119      	bne.n	8005a10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	330c      	adds	r3, #12
 80059e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f023 0310 	bic.w	r3, r3, #16
 80059f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	330c      	adds	r3, #12
 80059fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059fc:	61ba      	str	r2, [r7, #24]
 80059fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a00:	6979      	ldr	r1, [r7, #20]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	e841 2300 	strex	r3, r2, [r1]
 8005a08:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1e5      	bne.n	80059dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005a1e:	bf00      	nop
 8005a20:	3754      	adds	r7, #84	@ 0x54
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f7ff fd5d 	bl	8005504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a4a:	bf00      	nop
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b21      	cmp	r3, #33	@ 0x21
 8005a64:	d13e      	bne.n	8005ae4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a6e:	d114      	bne.n	8005a9a <UART_Transmit_IT+0x48>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d110      	bne.n	8005a9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	881b      	ldrh	r3, [r3, #0]
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	1c9a      	adds	r2, r3, #2
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	621a      	str	r2, [r3, #32]
 8005a98:	e008      	b.n	8005aac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	1c59      	adds	r1, r3, #1
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6211      	str	r1, [r2, #32]
 8005aa4:	781a      	ldrb	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10f      	bne.n	8005ae0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68da      	ldr	r2, [r3, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	e000      	b.n	8005ae6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ae4:	2302      	movs	r3, #2
  }
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr

08005af2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68da      	ldr	r2, [r3, #12]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7ff fce2 	bl	80054dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b08c      	sub	sp, #48	@ 0x30
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	2b22      	cmp	r3, #34	@ 0x22
 8005b34:	f040 80ae 	bne.w	8005c94 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b40:	d117      	bne.n	8005b72 <UART_Receive_IT+0x50>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d113      	bne.n	8005b72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b52:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b6a:	1c9a      	adds	r2, r3, #2
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b70:	e026      	b.n	8005bc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b84:	d007      	beq.n	8005b96 <UART_Receive_IT+0x74>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d10a      	bne.n	8005ba4 <UART_Receive_IT+0x82>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d106      	bne.n	8005ba4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e008      	b.n	8005bb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bb0:	b2da      	uxtb	r2, r3
 8005bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4619      	mov	r1, r3
 8005bce:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d15d      	bne.n	8005c90 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f022 0220 	bic.w	r2, r2, #32
 8005be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	695a      	ldr	r2, [r3, #20]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2220      	movs	r2, #32
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d135      	bne.n	8005c86 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	e853 3f00 	ldrex	r3, [r3]
 8005c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	f023 0310 	bic.w	r3, r3, #16
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	330c      	adds	r3, #12
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c40:	623a      	str	r2, [r7, #32]
 8005c42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c44:	69f9      	ldr	r1, [r7, #28]
 8005c46:	6a3a      	ldr	r2, [r7, #32]
 8005c48:	e841 2300 	strex	r3, r2, [r1]
 8005c4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1e5      	bne.n	8005c20 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0310 	and.w	r3, r3, #16
 8005c5e:	2b10      	cmp	r3, #16
 8005c60:	d10a      	bne.n	8005c78 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	60fb      	str	r3, [r7, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7ff fc4a 	bl	8005518 <HAL_UARTEx_RxEventCallback>
 8005c84:	e002      	b.n	8005c8c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7fb f9cc 	bl	8001024 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	e002      	b.n	8005c96 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c90:	2300      	movs	r3, #0
 8005c92:	e000      	b.n	8005c96 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c94:	2302      	movs	r3, #2
  }
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3730      	adds	r7, #48	@ 0x30
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ca4:	b0c0      	sub	sp, #256	@ 0x100
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	691b      	ldr	r3, [r3, #16]
 8005cb4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cbc:	68d9      	ldr	r1, [r3, #12]
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	ea40 0301 	orr.w	r3, r0, r1
 8005cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005cf8:	f021 010c 	bic.w	r1, r1, #12
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d06:	430b      	orrs	r3, r1
 8005d08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	695b      	ldr	r3, [r3, #20]
 8005d12:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1a:	6999      	ldr	r1, [r3, #24]
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	ea40 0301 	orr.w	r3, r0, r1
 8005d26:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	4b8f      	ldr	r3, [pc, #572]	@ (8005f6c <UART_SetConfig+0x2cc>)
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d005      	beq.n	8005d40 <UART_SetConfig+0xa0>
 8005d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005f70 <UART_SetConfig+0x2d0>)
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d104      	bne.n	8005d4a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d40:	f7fd fa0a 	bl	8003158 <HAL_RCC_GetPCLK2Freq>
 8005d44:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d48:	e003      	b.n	8005d52 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d4a:	f7fd f9f1 	bl	8003130 <HAL_RCC_GetPCLK1Freq>
 8005d4e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d56:	69db      	ldr	r3, [r3, #28]
 8005d58:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d5c:	f040 810c 	bne.w	8005f78 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d6a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d6e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d72:	4622      	mov	r2, r4
 8005d74:	462b      	mov	r3, r5
 8005d76:	1891      	adds	r1, r2, r2
 8005d78:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d7a:	415b      	adcs	r3, r3
 8005d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d7e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d82:	4621      	mov	r1, r4
 8005d84:	eb12 0801 	adds.w	r8, r2, r1
 8005d88:	4629      	mov	r1, r5
 8005d8a:	eb43 0901 	adc.w	r9, r3, r1
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f04f 0300 	mov.w	r3, #0
 8005d96:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d9a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d9e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005da2:	4690      	mov	r8, r2
 8005da4:	4699      	mov	r9, r3
 8005da6:	4623      	mov	r3, r4
 8005da8:	eb18 0303 	adds.w	r3, r8, r3
 8005dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005db0:	462b      	mov	r3, r5
 8005db2:	eb49 0303 	adc.w	r3, r9, r3
 8005db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005dc6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005dca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005dce:	460b      	mov	r3, r1
 8005dd0:	18db      	adds	r3, r3, r3
 8005dd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005dd4:	4613      	mov	r3, r2
 8005dd6:	eb42 0303 	adc.w	r3, r2, r3
 8005dda:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ddc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005de0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005de4:	f7fa ff70 	bl	8000cc8 <__aeabi_uldivmod>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4b61      	ldr	r3, [pc, #388]	@ (8005f74 <UART_SetConfig+0x2d4>)
 8005dee:	fba3 2302 	umull	r2, r3, r3, r2
 8005df2:	095b      	lsrs	r3, r3, #5
 8005df4:	011c      	lsls	r4, r3, #4
 8005df6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e04:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e08:	4642      	mov	r2, r8
 8005e0a:	464b      	mov	r3, r9
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e10:	415b      	adcs	r3, r3
 8005e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e14:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e18:	4641      	mov	r1, r8
 8005e1a:	eb12 0a01 	adds.w	sl, r2, r1
 8005e1e:	4649      	mov	r1, r9
 8005e20:	eb43 0b01 	adc.w	fp, r3, r1
 8005e24:	f04f 0200 	mov.w	r2, #0
 8005e28:	f04f 0300 	mov.w	r3, #0
 8005e2c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e30:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e38:	4692      	mov	sl, r2
 8005e3a:	469b      	mov	fp, r3
 8005e3c:	4643      	mov	r3, r8
 8005e3e:	eb1a 0303 	adds.w	r3, sl, r3
 8005e42:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e46:	464b      	mov	r3, r9
 8005e48:	eb4b 0303 	adc.w	r3, fp, r3
 8005e4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e64:	460b      	mov	r3, r1
 8005e66:	18db      	adds	r3, r3, r3
 8005e68:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	eb42 0303 	adc.w	r3, r2, r3
 8005e70:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e72:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e7a:	f7fa ff25 	bl	8000cc8 <__aeabi_uldivmod>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4611      	mov	r1, r2
 8005e84:	4b3b      	ldr	r3, [pc, #236]	@ (8005f74 <UART_SetConfig+0x2d4>)
 8005e86:	fba3 2301 	umull	r2, r3, r3, r1
 8005e8a:	095b      	lsrs	r3, r3, #5
 8005e8c:	2264      	movs	r2, #100	@ 0x64
 8005e8e:	fb02 f303 	mul.w	r3, r2, r3
 8005e92:	1acb      	subs	r3, r1, r3
 8005e94:	00db      	lsls	r3, r3, #3
 8005e96:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e9a:	4b36      	ldr	r3, [pc, #216]	@ (8005f74 <UART_SetConfig+0x2d4>)
 8005e9c:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea0:	095b      	lsrs	r3, r3, #5
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ea8:	441c      	add	r4, r3
 8005eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005eb4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005eb8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ebc:	4642      	mov	r2, r8
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	1891      	adds	r1, r2, r2
 8005ec2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ec4:	415b      	adcs	r3, r3
 8005ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ec8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ecc:	4641      	mov	r1, r8
 8005ece:	1851      	adds	r1, r2, r1
 8005ed0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	414b      	adcs	r3, r1
 8005ed6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	f04f 0300 	mov.w	r3, #0
 8005ee0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ee4:	4659      	mov	r1, fp
 8005ee6:	00cb      	lsls	r3, r1, #3
 8005ee8:	4651      	mov	r1, sl
 8005eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005eee:	4651      	mov	r1, sl
 8005ef0:	00ca      	lsls	r2, r1, #3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4642      	mov	r2, r8
 8005efa:	189b      	adds	r3, r3, r2
 8005efc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f00:	464b      	mov	r3, r9
 8005f02:	460a      	mov	r2, r1
 8005f04:	eb42 0303 	adc.w	r3, r2, r3
 8005f08:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f18:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f1c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f20:	460b      	mov	r3, r1
 8005f22:	18db      	adds	r3, r3, r3
 8005f24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f26:	4613      	mov	r3, r2
 8005f28:	eb42 0303 	adc.w	r3, r2, r3
 8005f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f2e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f32:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f36:	f7fa fec7 	bl	8000cc8 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <UART_SetConfig+0x2d4>)
 8005f40:	fba3 1302 	umull	r1, r3, r3, r2
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	2164      	movs	r1, #100	@ 0x64
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	3332      	adds	r3, #50	@ 0x32
 8005f52:	4a08      	ldr	r2, [pc, #32]	@ (8005f74 <UART_SetConfig+0x2d4>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f003 0207 	and.w	r2, r3, #7
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4422      	add	r2, r4
 8005f66:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f68:	e106      	b.n	8006178 <UART_SetConfig+0x4d8>
 8005f6a:	bf00      	nop
 8005f6c:	40011000 	.word	0x40011000
 8005f70:	40011400 	.word	0x40011400
 8005f74:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f82:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f86:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f8a:	4642      	mov	r2, r8
 8005f8c:	464b      	mov	r3, r9
 8005f8e:	1891      	adds	r1, r2, r2
 8005f90:	6239      	str	r1, [r7, #32]
 8005f92:	415b      	adcs	r3, r3
 8005f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f96:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	1854      	adds	r4, r2, r1
 8005f9e:	4649      	mov	r1, r9
 8005fa0:	eb43 0501 	adc.w	r5, r3, r1
 8005fa4:	f04f 0200 	mov.w	r2, #0
 8005fa8:	f04f 0300 	mov.w	r3, #0
 8005fac:	00eb      	lsls	r3, r5, #3
 8005fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fb2:	00e2      	lsls	r2, r4, #3
 8005fb4:	4614      	mov	r4, r2
 8005fb6:	461d      	mov	r5, r3
 8005fb8:	4643      	mov	r3, r8
 8005fba:	18e3      	adds	r3, r4, r3
 8005fbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fc0:	464b      	mov	r3, r9
 8005fc2:	eb45 0303 	adc.w	r3, r5, r3
 8005fc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005fd6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	008b      	lsls	r3, r1, #2
 8005fea:	4621      	mov	r1, r4
 8005fec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	008a      	lsls	r2, r1, #2
 8005ff4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ff8:	f7fa fe66 	bl	8000cc8 <__aeabi_uldivmod>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	460b      	mov	r3, r1
 8006000:	4b60      	ldr	r3, [pc, #384]	@ (8006184 <UART_SetConfig+0x4e4>)
 8006002:	fba3 2302 	umull	r2, r3, r3, r2
 8006006:	095b      	lsrs	r3, r3, #5
 8006008:	011c      	lsls	r4, r3, #4
 800600a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006014:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006018:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800601c:	4642      	mov	r2, r8
 800601e:	464b      	mov	r3, r9
 8006020:	1891      	adds	r1, r2, r2
 8006022:	61b9      	str	r1, [r7, #24]
 8006024:	415b      	adcs	r3, r3
 8006026:	61fb      	str	r3, [r7, #28]
 8006028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800602c:	4641      	mov	r1, r8
 800602e:	1851      	adds	r1, r2, r1
 8006030:	6139      	str	r1, [r7, #16]
 8006032:	4649      	mov	r1, r9
 8006034:	414b      	adcs	r3, r1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	f04f 0200 	mov.w	r2, #0
 800603c:	f04f 0300 	mov.w	r3, #0
 8006040:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006044:	4659      	mov	r1, fp
 8006046:	00cb      	lsls	r3, r1, #3
 8006048:	4651      	mov	r1, sl
 800604a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800604e:	4651      	mov	r1, sl
 8006050:	00ca      	lsls	r2, r1, #3
 8006052:	4610      	mov	r0, r2
 8006054:	4619      	mov	r1, r3
 8006056:	4603      	mov	r3, r0
 8006058:	4642      	mov	r2, r8
 800605a:	189b      	adds	r3, r3, r2
 800605c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006060:	464b      	mov	r3, r9
 8006062:	460a      	mov	r2, r1
 8006064:	eb42 0303 	adc.w	r3, r2, r3
 8006068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006076:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006084:	4649      	mov	r1, r9
 8006086:	008b      	lsls	r3, r1, #2
 8006088:	4641      	mov	r1, r8
 800608a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608e:	4641      	mov	r1, r8
 8006090:	008a      	lsls	r2, r1, #2
 8006092:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006096:	f7fa fe17 	bl	8000cc8 <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4611      	mov	r1, r2
 80060a0:	4b38      	ldr	r3, [pc, #224]	@ (8006184 <UART_SetConfig+0x4e4>)
 80060a2:	fba3 2301 	umull	r2, r3, r3, r1
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	2264      	movs	r2, #100	@ 0x64
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	1acb      	subs	r3, r1, r3
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	3332      	adds	r3, #50	@ 0x32
 80060b4:	4a33      	ldr	r2, [pc, #204]	@ (8006184 <UART_SetConfig+0x4e4>)
 80060b6:	fba2 2303 	umull	r2, r3, r2, r3
 80060ba:	095b      	lsrs	r3, r3, #5
 80060bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060c0:	441c      	add	r4, r3
 80060c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c6:	2200      	movs	r2, #0
 80060c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80060ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80060cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80060d0:	4642      	mov	r2, r8
 80060d2:	464b      	mov	r3, r9
 80060d4:	1891      	adds	r1, r2, r2
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	415b      	adcs	r3, r3
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060e0:	4641      	mov	r1, r8
 80060e2:	1851      	adds	r1, r2, r1
 80060e4:	6039      	str	r1, [r7, #0]
 80060e6:	4649      	mov	r1, r9
 80060e8:	414b      	adcs	r3, r1
 80060ea:	607b      	str	r3, [r7, #4]
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	f04f 0300 	mov.w	r3, #0
 80060f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060f8:	4659      	mov	r1, fp
 80060fa:	00cb      	lsls	r3, r1, #3
 80060fc:	4651      	mov	r1, sl
 80060fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006102:	4651      	mov	r1, sl
 8006104:	00ca      	lsls	r2, r1, #3
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	4603      	mov	r3, r0
 800610c:	4642      	mov	r2, r8
 800610e:	189b      	adds	r3, r3, r2
 8006110:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006112:	464b      	mov	r3, r9
 8006114:	460a      	mov	r2, r1
 8006116:	eb42 0303 	adc.w	r3, r2, r3
 800611a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	663b      	str	r3, [r7, #96]	@ 0x60
 8006126:	667a      	str	r2, [r7, #100]	@ 0x64
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006134:	4649      	mov	r1, r9
 8006136:	008b      	lsls	r3, r1, #2
 8006138:	4641      	mov	r1, r8
 800613a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800613e:	4641      	mov	r1, r8
 8006140:	008a      	lsls	r2, r1, #2
 8006142:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006146:	f7fa fdbf 	bl	8000cc8 <__aeabi_uldivmod>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4b0d      	ldr	r3, [pc, #52]	@ (8006184 <UART_SetConfig+0x4e4>)
 8006150:	fba3 1302 	umull	r1, r3, r3, r2
 8006154:	095b      	lsrs	r3, r3, #5
 8006156:	2164      	movs	r1, #100	@ 0x64
 8006158:	fb01 f303 	mul.w	r3, r1, r3
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	3332      	adds	r3, #50	@ 0x32
 8006162:	4a08      	ldr	r2, [pc, #32]	@ (8006184 <UART_SetConfig+0x4e4>)
 8006164:	fba2 2303 	umull	r2, r3, r2, r3
 8006168:	095b      	lsrs	r3, r3, #5
 800616a:	f003 020f 	and.w	r2, r3, #15
 800616e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4422      	add	r2, r4
 8006176:	609a      	str	r2, [r3, #8]
}
 8006178:	bf00      	nop
 800617a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800617e:	46bd      	mov	sp, r7
 8006180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006184:	51eb851f 	.word	0x51eb851f

08006188 <__cvt>:
 8006188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	ec57 6b10 	vmov	r6, r7, d0
 8006190:	2f00      	cmp	r7, #0
 8006192:	460c      	mov	r4, r1
 8006194:	4619      	mov	r1, r3
 8006196:	463b      	mov	r3, r7
 8006198:	bfbb      	ittet	lt
 800619a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800619e:	461f      	movlt	r7, r3
 80061a0:	2300      	movge	r3, #0
 80061a2:	232d      	movlt	r3, #45	@ 0x2d
 80061a4:	700b      	strb	r3, [r1, #0]
 80061a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061a8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061ac:	4691      	mov	r9, r2
 80061ae:	f023 0820 	bic.w	r8, r3, #32
 80061b2:	bfbc      	itt	lt
 80061b4:	4632      	movlt	r2, r6
 80061b6:	4616      	movlt	r6, r2
 80061b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061bc:	d005      	beq.n	80061ca <__cvt+0x42>
 80061be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061c2:	d100      	bne.n	80061c6 <__cvt+0x3e>
 80061c4:	3401      	adds	r4, #1
 80061c6:	2102      	movs	r1, #2
 80061c8:	e000      	b.n	80061cc <__cvt+0x44>
 80061ca:	2103      	movs	r1, #3
 80061cc:	ab03      	add	r3, sp, #12
 80061ce:	9301      	str	r3, [sp, #4]
 80061d0:	ab02      	add	r3, sp, #8
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	ec47 6b10 	vmov	d0, r6, r7
 80061d8:	4653      	mov	r3, sl
 80061da:	4622      	mov	r2, r4
 80061dc:	f001 f888 	bl	80072f0 <_dtoa_r>
 80061e0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80061e4:	4605      	mov	r5, r0
 80061e6:	d119      	bne.n	800621c <__cvt+0x94>
 80061e8:	f019 0f01 	tst.w	r9, #1
 80061ec:	d00e      	beq.n	800620c <__cvt+0x84>
 80061ee:	eb00 0904 	add.w	r9, r0, r4
 80061f2:	2200      	movs	r2, #0
 80061f4:	2300      	movs	r3, #0
 80061f6:	4630      	mov	r0, r6
 80061f8:	4639      	mov	r1, r7
 80061fa:	f7fa fc85 	bl	8000b08 <__aeabi_dcmpeq>
 80061fe:	b108      	cbz	r0, 8006204 <__cvt+0x7c>
 8006200:	f8cd 900c 	str.w	r9, [sp, #12]
 8006204:	2230      	movs	r2, #48	@ 0x30
 8006206:	9b03      	ldr	r3, [sp, #12]
 8006208:	454b      	cmp	r3, r9
 800620a:	d31e      	bcc.n	800624a <__cvt+0xc2>
 800620c:	9b03      	ldr	r3, [sp, #12]
 800620e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006210:	1b5b      	subs	r3, r3, r5
 8006212:	4628      	mov	r0, r5
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	b004      	add	sp, #16
 8006218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006220:	eb00 0904 	add.w	r9, r0, r4
 8006224:	d1e5      	bne.n	80061f2 <__cvt+0x6a>
 8006226:	7803      	ldrb	r3, [r0, #0]
 8006228:	2b30      	cmp	r3, #48	@ 0x30
 800622a:	d10a      	bne.n	8006242 <__cvt+0xba>
 800622c:	2200      	movs	r2, #0
 800622e:	2300      	movs	r3, #0
 8006230:	4630      	mov	r0, r6
 8006232:	4639      	mov	r1, r7
 8006234:	f7fa fc68 	bl	8000b08 <__aeabi_dcmpeq>
 8006238:	b918      	cbnz	r0, 8006242 <__cvt+0xba>
 800623a:	f1c4 0401 	rsb	r4, r4, #1
 800623e:	f8ca 4000 	str.w	r4, [sl]
 8006242:	f8da 3000 	ldr.w	r3, [sl]
 8006246:	4499      	add	r9, r3
 8006248:	e7d3      	b.n	80061f2 <__cvt+0x6a>
 800624a:	1c59      	adds	r1, r3, #1
 800624c:	9103      	str	r1, [sp, #12]
 800624e:	701a      	strb	r2, [r3, #0]
 8006250:	e7d9      	b.n	8006206 <__cvt+0x7e>

08006252 <__exponent>:
 8006252:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006254:	2900      	cmp	r1, #0
 8006256:	bfba      	itte	lt
 8006258:	4249      	neglt	r1, r1
 800625a:	232d      	movlt	r3, #45	@ 0x2d
 800625c:	232b      	movge	r3, #43	@ 0x2b
 800625e:	2909      	cmp	r1, #9
 8006260:	7002      	strb	r2, [r0, #0]
 8006262:	7043      	strb	r3, [r0, #1]
 8006264:	dd29      	ble.n	80062ba <__exponent+0x68>
 8006266:	f10d 0307 	add.w	r3, sp, #7
 800626a:	461d      	mov	r5, r3
 800626c:	270a      	movs	r7, #10
 800626e:	461a      	mov	r2, r3
 8006270:	fbb1 f6f7 	udiv	r6, r1, r7
 8006274:	fb07 1416 	mls	r4, r7, r6, r1
 8006278:	3430      	adds	r4, #48	@ 0x30
 800627a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800627e:	460c      	mov	r4, r1
 8006280:	2c63      	cmp	r4, #99	@ 0x63
 8006282:	f103 33ff 	add.w	r3, r3, #4294967295
 8006286:	4631      	mov	r1, r6
 8006288:	dcf1      	bgt.n	800626e <__exponent+0x1c>
 800628a:	3130      	adds	r1, #48	@ 0x30
 800628c:	1e94      	subs	r4, r2, #2
 800628e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006292:	1c41      	adds	r1, r0, #1
 8006294:	4623      	mov	r3, r4
 8006296:	42ab      	cmp	r3, r5
 8006298:	d30a      	bcc.n	80062b0 <__exponent+0x5e>
 800629a:	f10d 0309 	add.w	r3, sp, #9
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	42ac      	cmp	r4, r5
 80062a2:	bf88      	it	hi
 80062a4:	2300      	movhi	r3, #0
 80062a6:	3302      	adds	r3, #2
 80062a8:	4403      	add	r3, r0
 80062aa:	1a18      	subs	r0, r3, r0
 80062ac:	b003      	add	sp, #12
 80062ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062b4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062b8:	e7ed      	b.n	8006296 <__exponent+0x44>
 80062ba:	2330      	movs	r3, #48	@ 0x30
 80062bc:	3130      	adds	r1, #48	@ 0x30
 80062be:	7083      	strb	r3, [r0, #2]
 80062c0:	70c1      	strb	r1, [r0, #3]
 80062c2:	1d03      	adds	r3, r0, #4
 80062c4:	e7f1      	b.n	80062aa <__exponent+0x58>
	...

080062c8 <_printf_float>:
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	b08d      	sub	sp, #52	@ 0x34
 80062ce:	460c      	mov	r4, r1
 80062d0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80062d4:	4616      	mov	r6, r2
 80062d6:	461f      	mov	r7, r3
 80062d8:	4605      	mov	r5, r0
 80062da:	f000 ff01 	bl	80070e0 <_localeconv_r>
 80062de:	6803      	ldr	r3, [r0, #0]
 80062e0:	9304      	str	r3, [sp, #16]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7f9 ffe4 	bl	80002b0 <strlen>
 80062e8:	2300      	movs	r3, #0
 80062ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80062ec:	f8d8 3000 	ldr.w	r3, [r8]
 80062f0:	9005      	str	r0, [sp, #20]
 80062f2:	3307      	adds	r3, #7
 80062f4:	f023 0307 	bic.w	r3, r3, #7
 80062f8:	f103 0208 	add.w	r2, r3, #8
 80062fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006300:	f8d4 b000 	ldr.w	fp, [r4]
 8006304:	f8c8 2000 	str.w	r2, [r8]
 8006308:	e9d3 8900 	ldrd	r8, r9, [r3]
 800630c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006310:	9307      	str	r3, [sp, #28]
 8006312:	f8cd 8018 	str.w	r8, [sp, #24]
 8006316:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800631a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800631e:	4b9c      	ldr	r3, [pc, #624]	@ (8006590 <_printf_float+0x2c8>)
 8006320:	f04f 32ff 	mov.w	r2, #4294967295
 8006324:	f7fa fc22 	bl	8000b6c <__aeabi_dcmpun>
 8006328:	bb70      	cbnz	r0, 8006388 <_printf_float+0xc0>
 800632a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800632e:	4b98      	ldr	r3, [pc, #608]	@ (8006590 <_printf_float+0x2c8>)
 8006330:	f04f 32ff 	mov.w	r2, #4294967295
 8006334:	f7fa fbfc 	bl	8000b30 <__aeabi_dcmple>
 8006338:	bb30      	cbnz	r0, 8006388 <_printf_float+0xc0>
 800633a:	2200      	movs	r2, #0
 800633c:	2300      	movs	r3, #0
 800633e:	4640      	mov	r0, r8
 8006340:	4649      	mov	r1, r9
 8006342:	f7fa fbeb 	bl	8000b1c <__aeabi_dcmplt>
 8006346:	b110      	cbz	r0, 800634e <_printf_float+0x86>
 8006348:	232d      	movs	r3, #45	@ 0x2d
 800634a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800634e:	4a91      	ldr	r2, [pc, #580]	@ (8006594 <_printf_float+0x2cc>)
 8006350:	4b91      	ldr	r3, [pc, #580]	@ (8006598 <_printf_float+0x2d0>)
 8006352:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006356:	bf94      	ite	ls
 8006358:	4690      	movls	r8, r2
 800635a:	4698      	movhi	r8, r3
 800635c:	2303      	movs	r3, #3
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	f02b 0304 	bic.w	r3, fp, #4
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	f04f 0900 	mov.w	r9, #0
 800636a:	9700      	str	r7, [sp, #0]
 800636c:	4633      	mov	r3, r6
 800636e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006370:	4621      	mov	r1, r4
 8006372:	4628      	mov	r0, r5
 8006374:	f000 f9d2 	bl	800671c <_printf_common>
 8006378:	3001      	adds	r0, #1
 800637a:	f040 808d 	bne.w	8006498 <_printf_float+0x1d0>
 800637e:	f04f 30ff 	mov.w	r0, #4294967295
 8006382:	b00d      	add	sp, #52	@ 0x34
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006388:	4642      	mov	r2, r8
 800638a:	464b      	mov	r3, r9
 800638c:	4640      	mov	r0, r8
 800638e:	4649      	mov	r1, r9
 8006390:	f7fa fbec 	bl	8000b6c <__aeabi_dcmpun>
 8006394:	b140      	cbz	r0, 80063a8 <_printf_float+0xe0>
 8006396:	464b      	mov	r3, r9
 8006398:	2b00      	cmp	r3, #0
 800639a:	bfbc      	itt	lt
 800639c:	232d      	movlt	r3, #45	@ 0x2d
 800639e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063a2:	4a7e      	ldr	r2, [pc, #504]	@ (800659c <_printf_float+0x2d4>)
 80063a4:	4b7e      	ldr	r3, [pc, #504]	@ (80065a0 <_printf_float+0x2d8>)
 80063a6:	e7d4      	b.n	8006352 <_printf_float+0x8a>
 80063a8:	6863      	ldr	r3, [r4, #4]
 80063aa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063ae:	9206      	str	r2, [sp, #24]
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	d13b      	bne.n	800642c <_printf_float+0x164>
 80063b4:	2306      	movs	r3, #6
 80063b6:	6063      	str	r3, [r4, #4]
 80063b8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80063bc:	2300      	movs	r3, #0
 80063be:	6022      	str	r2, [r4, #0]
 80063c0:	9303      	str	r3, [sp, #12]
 80063c2:	ab0a      	add	r3, sp, #40	@ 0x28
 80063c4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80063c8:	ab09      	add	r3, sp, #36	@ 0x24
 80063ca:	9300      	str	r3, [sp, #0]
 80063cc:	6861      	ldr	r1, [r4, #4]
 80063ce:	ec49 8b10 	vmov	d0, r8, r9
 80063d2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80063d6:	4628      	mov	r0, r5
 80063d8:	f7ff fed6 	bl	8006188 <__cvt>
 80063dc:	9b06      	ldr	r3, [sp, #24]
 80063de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063e0:	2b47      	cmp	r3, #71	@ 0x47
 80063e2:	4680      	mov	r8, r0
 80063e4:	d129      	bne.n	800643a <_printf_float+0x172>
 80063e6:	1cc8      	adds	r0, r1, #3
 80063e8:	db02      	blt.n	80063f0 <_printf_float+0x128>
 80063ea:	6863      	ldr	r3, [r4, #4]
 80063ec:	4299      	cmp	r1, r3
 80063ee:	dd41      	ble.n	8006474 <_printf_float+0x1ac>
 80063f0:	f1aa 0a02 	sub.w	sl, sl, #2
 80063f4:	fa5f fa8a 	uxtb.w	sl, sl
 80063f8:	3901      	subs	r1, #1
 80063fa:	4652      	mov	r2, sl
 80063fc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006400:	9109      	str	r1, [sp, #36]	@ 0x24
 8006402:	f7ff ff26 	bl	8006252 <__exponent>
 8006406:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006408:	1813      	adds	r3, r2, r0
 800640a:	2a01      	cmp	r2, #1
 800640c:	4681      	mov	r9, r0
 800640e:	6123      	str	r3, [r4, #16]
 8006410:	dc02      	bgt.n	8006418 <_printf_float+0x150>
 8006412:	6822      	ldr	r2, [r4, #0]
 8006414:	07d2      	lsls	r2, r2, #31
 8006416:	d501      	bpl.n	800641c <_printf_float+0x154>
 8006418:	3301      	adds	r3, #1
 800641a:	6123      	str	r3, [r4, #16]
 800641c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0a2      	beq.n	800636a <_printf_float+0xa2>
 8006424:	232d      	movs	r3, #45	@ 0x2d
 8006426:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800642a:	e79e      	b.n	800636a <_printf_float+0xa2>
 800642c:	9a06      	ldr	r2, [sp, #24]
 800642e:	2a47      	cmp	r2, #71	@ 0x47
 8006430:	d1c2      	bne.n	80063b8 <_printf_float+0xf0>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1c0      	bne.n	80063b8 <_printf_float+0xf0>
 8006436:	2301      	movs	r3, #1
 8006438:	e7bd      	b.n	80063b6 <_printf_float+0xee>
 800643a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800643e:	d9db      	bls.n	80063f8 <_printf_float+0x130>
 8006440:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006444:	d118      	bne.n	8006478 <_printf_float+0x1b0>
 8006446:	2900      	cmp	r1, #0
 8006448:	6863      	ldr	r3, [r4, #4]
 800644a:	dd0b      	ble.n	8006464 <_printf_float+0x19c>
 800644c:	6121      	str	r1, [r4, #16]
 800644e:	b913      	cbnz	r3, 8006456 <_printf_float+0x18e>
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	07d0      	lsls	r0, r2, #31
 8006454:	d502      	bpl.n	800645c <_printf_float+0x194>
 8006456:	3301      	adds	r3, #1
 8006458:	440b      	add	r3, r1
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800645e:	f04f 0900 	mov.w	r9, #0
 8006462:	e7db      	b.n	800641c <_printf_float+0x154>
 8006464:	b913      	cbnz	r3, 800646c <_printf_float+0x1a4>
 8006466:	6822      	ldr	r2, [r4, #0]
 8006468:	07d2      	lsls	r2, r2, #31
 800646a:	d501      	bpl.n	8006470 <_printf_float+0x1a8>
 800646c:	3302      	adds	r3, #2
 800646e:	e7f4      	b.n	800645a <_printf_float+0x192>
 8006470:	2301      	movs	r3, #1
 8006472:	e7f2      	b.n	800645a <_printf_float+0x192>
 8006474:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006478:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800647a:	4299      	cmp	r1, r3
 800647c:	db05      	blt.n	800648a <_printf_float+0x1c2>
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	6121      	str	r1, [r4, #16]
 8006482:	07d8      	lsls	r0, r3, #31
 8006484:	d5ea      	bpl.n	800645c <_printf_float+0x194>
 8006486:	1c4b      	adds	r3, r1, #1
 8006488:	e7e7      	b.n	800645a <_printf_float+0x192>
 800648a:	2900      	cmp	r1, #0
 800648c:	bfd4      	ite	le
 800648e:	f1c1 0202 	rsble	r2, r1, #2
 8006492:	2201      	movgt	r2, #1
 8006494:	4413      	add	r3, r2
 8006496:	e7e0      	b.n	800645a <_printf_float+0x192>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	055a      	lsls	r2, r3, #21
 800649c:	d407      	bmi.n	80064ae <_printf_float+0x1e6>
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	4642      	mov	r2, r8
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	d12b      	bne.n	8006504 <_printf_float+0x23c>
 80064ac:	e767      	b.n	800637e <_printf_float+0xb6>
 80064ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064b2:	f240 80dd 	bls.w	8006670 <_printf_float+0x3a8>
 80064b6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064ba:	2200      	movs	r2, #0
 80064bc:	2300      	movs	r3, #0
 80064be:	f7fa fb23 	bl	8000b08 <__aeabi_dcmpeq>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	d033      	beq.n	800652e <_printf_float+0x266>
 80064c6:	4a37      	ldr	r2, [pc, #220]	@ (80065a4 <_printf_float+0x2dc>)
 80064c8:	2301      	movs	r3, #1
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	f43f af54 	beq.w	800637e <_printf_float+0xb6>
 80064d6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80064da:	4543      	cmp	r3, r8
 80064dc:	db02      	blt.n	80064e4 <_printf_float+0x21c>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	07d8      	lsls	r0, r3, #31
 80064e2:	d50f      	bpl.n	8006504 <_printf_float+0x23c>
 80064e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064e8:	4631      	mov	r1, r6
 80064ea:	4628      	mov	r0, r5
 80064ec:	47b8      	blx	r7
 80064ee:	3001      	adds	r0, #1
 80064f0:	f43f af45 	beq.w	800637e <_printf_float+0xb6>
 80064f4:	f04f 0900 	mov.w	r9, #0
 80064f8:	f108 38ff 	add.w	r8, r8, #4294967295
 80064fc:	f104 0a1a 	add.w	sl, r4, #26
 8006500:	45c8      	cmp	r8, r9
 8006502:	dc09      	bgt.n	8006518 <_printf_float+0x250>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	079b      	lsls	r3, r3, #30
 8006508:	f100 8103 	bmi.w	8006712 <_printf_float+0x44a>
 800650c:	68e0      	ldr	r0, [r4, #12]
 800650e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006510:	4298      	cmp	r0, r3
 8006512:	bfb8      	it	lt
 8006514:	4618      	movlt	r0, r3
 8006516:	e734      	b.n	8006382 <_printf_float+0xba>
 8006518:	2301      	movs	r3, #1
 800651a:	4652      	mov	r2, sl
 800651c:	4631      	mov	r1, r6
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	f43f af2b 	beq.w	800637e <_printf_float+0xb6>
 8006528:	f109 0901 	add.w	r9, r9, #1
 800652c:	e7e8      	b.n	8006500 <_printf_float+0x238>
 800652e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	dc39      	bgt.n	80065a8 <_printf_float+0x2e0>
 8006534:	4a1b      	ldr	r2, [pc, #108]	@ (80065a4 <_printf_float+0x2dc>)
 8006536:	2301      	movs	r3, #1
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	f43f af1d 	beq.w	800637e <_printf_float+0xb6>
 8006544:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006548:	ea59 0303 	orrs.w	r3, r9, r3
 800654c:	d102      	bne.n	8006554 <_printf_float+0x28c>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	07d9      	lsls	r1, r3, #31
 8006552:	d5d7      	bpl.n	8006504 <_printf_float+0x23c>
 8006554:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006558:	4631      	mov	r1, r6
 800655a:	4628      	mov	r0, r5
 800655c:	47b8      	blx	r7
 800655e:	3001      	adds	r0, #1
 8006560:	f43f af0d 	beq.w	800637e <_printf_float+0xb6>
 8006564:	f04f 0a00 	mov.w	sl, #0
 8006568:	f104 0b1a 	add.w	fp, r4, #26
 800656c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800656e:	425b      	negs	r3, r3
 8006570:	4553      	cmp	r3, sl
 8006572:	dc01      	bgt.n	8006578 <_printf_float+0x2b0>
 8006574:	464b      	mov	r3, r9
 8006576:	e793      	b.n	80064a0 <_printf_float+0x1d8>
 8006578:	2301      	movs	r3, #1
 800657a:	465a      	mov	r2, fp
 800657c:	4631      	mov	r1, r6
 800657e:	4628      	mov	r0, r5
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	f43f aefb 	beq.w	800637e <_printf_float+0xb6>
 8006588:	f10a 0a01 	add.w	sl, sl, #1
 800658c:	e7ee      	b.n	800656c <_printf_float+0x2a4>
 800658e:	bf00      	nop
 8006590:	7fefffff 	.word	0x7fefffff
 8006594:	0800a9fc 	.word	0x0800a9fc
 8006598:	0800aa00 	.word	0x0800aa00
 800659c:	0800aa04 	.word	0x0800aa04
 80065a0:	0800aa08 	.word	0x0800aa08
 80065a4:	0800aa0c 	.word	0x0800aa0c
 80065a8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065aa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065ae:	4553      	cmp	r3, sl
 80065b0:	bfa8      	it	ge
 80065b2:	4653      	movge	r3, sl
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	4699      	mov	r9, r3
 80065b8:	dc36      	bgt.n	8006628 <_printf_float+0x360>
 80065ba:	f04f 0b00 	mov.w	fp, #0
 80065be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065c2:	f104 021a 	add.w	r2, r4, #26
 80065c6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065c8:	9306      	str	r3, [sp, #24]
 80065ca:	eba3 0309 	sub.w	r3, r3, r9
 80065ce:	455b      	cmp	r3, fp
 80065d0:	dc31      	bgt.n	8006636 <_printf_float+0x36e>
 80065d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d4:	459a      	cmp	sl, r3
 80065d6:	dc3a      	bgt.n	800664e <_printf_float+0x386>
 80065d8:	6823      	ldr	r3, [r4, #0]
 80065da:	07da      	lsls	r2, r3, #31
 80065dc:	d437      	bmi.n	800664e <_printf_float+0x386>
 80065de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065e0:	ebaa 0903 	sub.w	r9, sl, r3
 80065e4:	9b06      	ldr	r3, [sp, #24]
 80065e6:	ebaa 0303 	sub.w	r3, sl, r3
 80065ea:	4599      	cmp	r9, r3
 80065ec:	bfa8      	it	ge
 80065ee:	4699      	movge	r9, r3
 80065f0:	f1b9 0f00 	cmp.w	r9, #0
 80065f4:	dc33      	bgt.n	800665e <_printf_float+0x396>
 80065f6:	f04f 0800 	mov.w	r8, #0
 80065fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065fe:	f104 0b1a 	add.w	fp, r4, #26
 8006602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006604:	ebaa 0303 	sub.w	r3, sl, r3
 8006608:	eba3 0309 	sub.w	r3, r3, r9
 800660c:	4543      	cmp	r3, r8
 800660e:	f77f af79 	ble.w	8006504 <_printf_float+0x23c>
 8006612:	2301      	movs	r3, #1
 8006614:	465a      	mov	r2, fp
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	47b8      	blx	r7
 800661c:	3001      	adds	r0, #1
 800661e:	f43f aeae 	beq.w	800637e <_printf_float+0xb6>
 8006622:	f108 0801 	add.w	r8, r8, #1
 8006626:	e7ec      	b.n	8006602 <_printf_float+0x33a>
 8006628:	4642      	mov	r2, r8
 800662a:	4631      	mov	r1, r6
 800662c:	4628      	mov	r0, r5
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	d1c2      	bne.n	80065ba <_printf_float+0x2f2>
 8006634:	e6a3      	b.n	800637e <_printf_float+0xb6>
 8006636:	2301      	movs	r3, #1
 8006638:	4631      	mov	r1, r6
 800663a:	4628      	mov	r0, r5
 800663c:	9206      	str	r2, [sp, #24]
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f ae9c 	beq.w	800637e <_printf_float+0xb6>
 8006646:	9a06      	ldr	r2, [sp, #24]
 8006648:	f10b 0b01 	add.w	fp, fp, #1
 800664c:	e7bb      	b.n	80065c6 <_printf_float+0x2fe>
 800664e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006652:	4631      	mov	r1, r6
 8006654:	4628      	mov	r0, r5
 8006656:	47b8      	blx	r7
 8006658:	3001      	adds	r0, #1
 800665a:	d1c0      	bne.n	80065de <_printf_float+0x316>
 800665c:	e68f      	b.n	800637e <_printf_float+0xb6>
 800665e:	9a06      	ldr	r2, [sp, #24]
 8006660:	464b      	mov	r3, r9
 8006662:	4442      	add	r2, r8
 8006664:	4631      	mov	r1, r6
 8006666:	4628      	mov	r0, r5
 8006668:	47b8      	blx	r7
 800666a:	3001      	adds	r0, #1
 800666c:	d1c3      	bne.n	80065f6 <_printf_float+0x32e>
 800666e:	e686      	b.n	800637e <_printf_float+0xb6>
 8006670:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006674:	f1ba 0f01 	cmp.w	sl, #1
 8006678:	dc01      	bgt.n	800667e <_printf_float+0x3b6>
 800667a:	07db      	lsls	r3, r3, #31
 800667c:	d536      	bpl.n	80066ec <_printf_float+0x424>
 800667e:	2301      	movs	r3, #1
 8006680:	4642      	mov	r2, r8
 8006682:	4631      	mov	r1, r6
 8006684:	4628      	mov	r0, r5
 8006686:	47b8      	blx	r7
 8006688:	3001      	adds	r0, #1
 800668a:	f43f ae78 	beq.w	800637e <_printf_float+0xb6>
 800668e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006692:	4631      	mov	r1, r6
 8006694:	4628      	mov	r0, r5
 8006696:	47b8      	blx	r7
 8006698:	3001      	adds	r0, #1
 800669a:	f43f ae70 	beq.w	800637e <_printf_float+0xb6>
 800669e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066a2:	2200      	movs	r2, #0
 80066a4:	2300      	movs	r3, #0
 80066a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066aa:	f7fa fa2d 	bl	8000b08 <__aeabi_dcmpeq>
 80066ae:	b9c0      	cbnz	r0, 80066e2 <_printf_float+0x41a>
 80066b0:	4653      	mov	r3, sl
 80066b2:	f108 0201 	add.w	r2, r8, #1
 80066b6:	4631      	mov	r1, r6
 80066b8:	4628      	mov	r0, r5
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	d10c      	bne.n	80066da <_printf_float+0x412>
 80066c0:	e65d      	b.n	800637e <_printf_float+0xb6>
 80066c2:	2301      	movs	r3, #1
 80066c4:	465a      	mov	r2, fp
 80066c6:	4631      	mov	r1, r6
 80066c8:	4628      	mov	r0, r5
 80066ca:	47b8      	blx	r7
 80066cc:	3001      	adds	r0, #1
 80066ce:	f43f ae56 	beq.w	800637e <_printf_float+0xb6>
 80066d2:	f108 0801 	add.w	r8, r8, #1
 80066d6:	45d0      	cmp	r8, sl
 80066d8:	dbf3      	blt.n	80066c2 <_printf_float+0x3fa>
 80066da:	464b      	mov	r3, r9
 80066dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066e0:	e6df      	b.n	80064a2 <_printf_float+0x1da>
 80066e2:	f04f 0800 	mov.w	r8, #0
 80066e6:	f104 0b1a 	add.w	fp, r4, #26
 80066ea:	e7f4      	b.n	80066d6 <_printf_float+0x40e>
 80066ec:	2301      	movs	r3, #1
 80066ee:	4642      	mov	r2, r8
 80066f0:	e7e1      	b.n	80066b6 <_printf_float+0x3ee>
 80066f2:	2301      	movs	r3, #1
 80066f4:	464a      	mov	r2, r9
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	47b8      	blx	r7
 80066fc:	3001      	adds	r0, #1
 80066fe:	f43f ae3e 	beq.w	800637e <_printf_float+0xb6>
 8006702:	f108 0801 	add.w	r8, r8, #1
 8006706:	68e3      	ldr	r3, [r4, #12]
 8006708:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800670a:	1a5b      	subs	r3, r3, r1
 800670c:	4543      	cmp	r3, r8
 800670e:	dcf0      	bgt.n	80066f2 <_printf_float+0x42a>
 8006710:	e6fc      	b.n	800650c <_printf_float+0x244>
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	f104 0919 	add.w	r9, r4, #25
 800671a:	e7f4      	b.n	8006706 <_printf_float+0x43e>

0800671c <_printf_common>:
 800671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006720:	4616      	mov	r6, r2
 8006722:	4698      	mov	r8, r3
 8006724:	688a      	ldr	r2, [r1, #8]
 8006726:	690b      	ldr	r3, [r1, #16]
 8006728:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800672c:	4293      	cmp	r3, r2
 800672e:	bfb8      	it	lt
 8006730:	4613      	movlt	r3, r2
 8006732:	6033      	str	r3, [r6, #0]
 8006734:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006738:	4607      	mov	r7, r0
 800673a:	460c      	mov	r4, r1
 800673c:	b10a      	cbz	r2, 8006742 <_printf_common+0x26>
 800673e:	3301      	adds	r3, #1
 8006740:	6033      	str	r3, [r6, #0]
 8006742:	6823      	ldr	r3, [r4, #0]
 8006744:	0699      	lsls	r1, r3, #26
 8006746:	bf42      	ittt	mi
 8006748:	6833      	ldrmi	r3, [r6, #0]
 800674a:	3302      	addmi	r3, #2
 800674c:	6033      	strmi	r3, [r6, #0]
 800674e:	6825      	ldr	r5, [r4, #0]
 8006750:	f015 0506 	ands.w	r5, r5, #6
 8006754:	d106      	bne.n	8006764 <_printf_common+0x48>
 8006756:	f104 0a19 	add.w	sl, r4, #25
 800675a:	68e3      	ldr	r3, [r4, #12]
 800675c:	6832      	ldr	r2, [r6, #0]
 800675e:	1a9b      	subs	r3, r3, r2
 8006760:	42ab      	cmp	r3, r5
 8006762:	dc26      	bgt.n	80067b2 <_printf_common+0x96>
 8006764:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006768:	6822      	ldr	r2, [r4, #0]
 800676a:	3b00      	subs	r3, #0
 800676c:	bf18      	it	ne
 800676e:	2301      	movne	r3, #1
 8006770:	0692      	lsls	r2, r2, #26
 8006772:	d42b      	bmi.n	80067cc <_printf_common+0xb0>
 8006774:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006778:	4641      	mov	r1, r8
 800677a:	4638      	mov	r0, r7
 800677c:	47c8      	blx	r9
 800677e:	3001      	adds	r0, #1
 8006780:	d01e      	beq.n	80067c0 <_printf_common+0xa4>
 8006782:	6823      	ldr	r3, [r4, #0]
 8006784:	6922      	ldr	r2, [r4, #16]
 8006786:	f003 0306 	and.w	r3, r3, #6
 800678a:	2b04      	cmp	r3, #4
 800678c:	bf02      	ittt	eq
 800678e:	68e5      	ldreq	r5, [r4, #12]
 8006790:	6833      	ldreq	r3, [r6, #0]
 8006792:	1aed      	subeq	r5, r5, r3
 8006794:	68a3      	ldr	r3, [r4, #8]
 8006796:	bf0c      	ite	eq
 8006798:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800679c:	2500      	movne	r5, #0
 800679e:	4293      	cmp	r3, r2
 80067a0:	bfc4      	itt	gt
 80067a2:	1a9b      	subgt	r3, r3, r2
 80067a4:	18ed      	addgt	r5, r5, r3
 80067a6:	2600      	movs	r6, #0
 80067a8:	341a      	adds	r4, #26
 80067aa:	42b5      	cmp	r5, r6
 80067ac:	d11a      	bne.n	80067e4 <_printf_common+0xc8>
 80067ae:	2000      	movs	r0, #0
 80067b0:	e008      	b.n	80067c4 <_printf_common+0xa8>
 80067b2:	2301      	movs	r3, #1
 80067b4:	4652      	mov	r2, sl
 80067b6:	4641      	mov	r1, r8
 80067b8:	4638      	mov	r0, r7
 80067ba:	47c8      	blx	r9
 80067bc:	3001      	adds	r0, #1
 80067be:	d103      	bne.n	80067c8 <_printf_common+0xac>
 80067c0:	f04f 30ff 	mov.w	r0, #4294967295
 80067c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c8:	3501      	adds	r5, #1
 80067ca:	e7c6      	b.n	800675a <_printf_common+0x3e>
 80067cc:	18e1      	adds	r1, r4, r3
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	2030      	movs	r0, #48	@ 0x30
 80067d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067d6:	4422      	add	r2, r4
 80067d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067e0:	3302      	adds	r3, #2
 80067e2:	e7c7      	b.n	8006774 <_printf_common+0x58>
 80067e4:	2301      	movs	r3, #1
 80067e6:	4622      	mov	r2, r4
 80067e8:	4641      	mov	r1, r8
 80067ea:	4638      	mov	r0, r7
 80067ec:	47c8      	blx	r9
 80067ee:	3001      	adds	r0, #1
 80067f0:	d0e6      	beq.n	80067c0 <_printf_common+0xa4>
 80067f2:	3601      	adds	r6, #1
 80067f4:	e7d9      	b.n	80067aa <_printf_common+0x8e>
	...

080067f8 <_printf_i>:
 80067f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	7e0f      	ldrb	r7, [r1, #24]
 80067fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006800:	2f78      	cmp	r7, #120	@ 0x78
 8006802:	4691      	mov	r9, r2
 8006804:	4680      	mov	r8, r0
 8006806:	460c      	mov	r4, r1
 8006808:	469a      	mov	sl, r3
 800680a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800680e:	d807      	bhi.n	8006820 <_printf_i+0x28>
 8006810:	2f62      	cmp	r7, #98	@ 0x62
 8006812:	d80a      	bhi.n	800682a <_printf_i+0x32>
 8006814:	2f00      	cmp	r7, #0
 8006816:	f000 80d2 	beq.w	80069be <_printf_i+0x1c6>
 800681a:	2f58      	cmp	r7, #88	@ 0x58
 800681c:	f000 80b9 	beq.w	8006992 <_printf_i+0x19a>
 8006820:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006824:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006828:	e03a      	b.n	80068a0 <_printf_i+0xa8>
 800682a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800682e:	2b15      	cmp	r3, #21
 8006830:	d8f6      	bhi.n	8006820 <_printf_i+0x28>
 8006832:	a101      	add	r1, pc, #4	@ (adr r1, 8006838 <_printf_i+0x40>)
 8006834:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006838:	08006891 	.word	0x08006891
 800683c:	080068a5 	.word	0x080068a5
 8006840:	08006821 	.word	0x08006821
 8006844:	08006821 	.word	0x08006821
 8006848:	08006821 	.word	0x08006821
 800684c:	08006821 	.word	0x08006821
 8006850:	080068a5 	.word	0x080068a5
 8006854:	08006821 	.word	0x08006821
 8006858:	08006821 	.word	0x08006821
 800685c:	08006821 	.word	0x08006821
 8006860:	08006821 	.word	0x08006821
 8006864:	080069a5 	.word	0x080069a5
 8006868:	080068cf 	.word	0x080068cf
 800686c:	0800695f 	.word	0x0800695f
 8006870:	08006821 	.word	0x08006821
 8006874:	08006821 	.word	0x08006821
 8006878:	080069c7 	.word	0x080069c7
 800687c:	08006821 	.word	0x08006821
 8006880:	080068cf 	.word	0x080068cf
 8006884:	08006821 	.word	0x08006821
 8006888:	08006821 	.word	0x08006821
 800688c:	08006967 	.word	0x08006967
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	1d1a      	adds	r2, r3, #4
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6032      	str	r2, [r6, #0]
 8006898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800689c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068a0:	2301      	movs	r3, #1
 80068a2:	e09d      	b.n	80069e0 <_printf_i+0x1e8>
 80068a4:	6833      	ldr	r3, [r6, #0]
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	1d19      	adds	r1, r3, #4
 80068aa:	6031      	str	r1, [r6, #0]
 80068ac:	0606      	lsls	r6, r0, #24
 80068ae:	d501      	bpl.n	80068b4 <_printf_i+0xbc>
 80068b0:	681d      	ldr	r5, [r3, #0]
 80068b2:	e003      	b.n	80068bc <_printf_i+0xc4>
 80068b4:	0645      	lsls	r5, r0, #25
 80068b6:	d5fb      	bpl.n	80068b0 <_printf_i+0xb8>
 80068b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068bc:	2d00      	cmp	r5, #0
 80068be:	da03      	bge.n	80068c8 <_printf_i+0xd0>
 80068c0:	232d      	movs	r3, #45	@ 0x2d
 80068c2:	426d      	negs	r5, r5
 80068c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068c8:	4859      	ldr	r0, [pc, #356]	@ (8006a30 <_printf_i+0x238>)
 80068ca:	230a      	movs	r3, #10
 80068cc:	e011      	b.n	80068f2 <_printf_i+0xfa>
 80068ce:	6821      	ldr	r1, [r4, #0]
 80068d0:	6833      	ldr	r3, [r6, #0]
 80068d2:	0608      	lsls	r0, r1, #24
 80068d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80068d8:	d402      	bmi.n	80068e0 <_printf_i+0xe8>
 80068da:	0649      	lsls	r1, r1, #25
 80068dc:	bf48      	it	mi
 80068de:	b2ad      	uxthmi	r5, r5
 80068e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80068e2:	4853      	ldr	r0, [pc, #332]	@ (8006a30 <_printf_i+0x238>)
 80068e4:	6033      	str	r3, [r6, #0]
 80068e6:	bf14      	ite	ne
 80068e8:	230a      	movne	r3, #10
 80068ea:	2308      	moveq	r3, #8
 80068ec:	2100      	movs	r1, #0
 80068ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068f2:	6866      	ldr	r6, [r4, #4]
 80068f4:	60a6      	str	r6, [r4, #8]
 80068f6:	2e00      	cmp	r6, #0
 80068f8:	bfa2      	ittt	ge
 80068fa:	6821      	ldrge	r1, [r4, #0]
 80068fc:	f021 0104 	bicge.w	r1, r1, #4
 8006900:	6021      	strge	r1, [r4, #0]
 8006902:	b90d      	cbnz	r5, 8006908 <_printf_i+0x110>
 8006904:	2e00      	cmp	r6, #0
 8006906:	d04b      	beq.n	80069a0 <_printf_i+0x1a8>
 8006908:	4616      	mov	r6, r2
 800690a:	fbb5 f1f3 	udiv	r1, r5, r3
 800690e:	fb03 5711 	mls	r7, r3, r1, r5
 8006912:	5dc7      	ldrb	r7, [r0, r7]
 8006914:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006918:	462f      	mov	r7, r5
 800691a:	42bb      	cmp	r3, r7
 800691c:	460d      	mov	r5, r1
 800691e:	d9f4      	bls.n	800690a <_printf_i+0x112>
 8006920:	2b08      	cmp	r3, #8
 8006922:	d10b      	bne.n	800693c <_printf_i+0x144>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	07df      	lsls	r7, r3, #31
 8006928:	d508      	bpl.n	800693c <_printf_i+0x144>
 800692a:	6923      	ldr	r3, [r4, #16]
 800692c:	6861      	ldr	r1, [r4, #4]
 800692e:	4299      	cmp	r1, r3
 8006930:	bfde      	ittt	le
 8006932:	2330      	movle	r3, #48	@ 0x30
 8006934:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006938:	f106 36ff 	addle.w	r6, r6, #4294967295
 800693c:	1b92      	subs	r2, r2, r6
 800693e:	6122      	str	r2, [r4, #16]
 8006940:	f8cd a000 	str.w	sl, [sp]
 8006944:	464b      	mov	r3, r9
 8006946:	aa03      	add	r2, sp, #12
 8006948:	4621      	mov	r1, r4
 800694a:	4640      	mov	r0, r8
 800694c:	f7ff fee6 	bl	800671c <_printf_common>
 8006950:	3001      	adds	r0, #1
 8006952:	d14a      	bne.n	80069ea <_printf_i+0x1f2>
 8006954:	f04f 30ff 	mov.w	r0, #4294967295
 8006958:	b004      	add	sp, #16
 800695a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	f043 0320 	orr.w	r3, r3, #32
 8006964:	6023      	str	r3, [r4, #0]
 8006966:	4833      	ldr	r0, [pc, #204]	@ (8006a34 <_printf_i+0x23c>)
 8006968:	2778      	movs	r7, #120	@ 0x78
 800696a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	6831      	ldr	r1, [r6, #0]
 8006972:	061f      	lsls	r7, r3, #24
 8006974:	f851 5b04 	ldr.w	r5, [r1], #4
 8006978:	d402      	bmi.n	8006980 <_printf_i+0x188>
 800697a:	065f      	lsls	r7, r3, #25
 800697c:	bf48      	it	mi
 800697e:	b2ad      	uxthmi	r5, r5
 8006980:	6031      	str	r1, [r6, #0]
 8006982:	07d9      	lsls	r1, r3, #31
 8006984:	bf44      	itt	mi
 8006986:	f043 0320 	orrmi.w	r3, r3, #32
 800698a:	6023      	strmi	r3, [r4, #0]
 800698c:	b11d      	cbz	r5, 8006996 <_printf_i+0x19e>
 800698e:	2310      	movs	r3, #16
 8006990:	e7ac      	b.n	80068ec <_printf_i+0xf4>
 8006992:	4827      	ldr	r0, [pc, #156]	@ (8006a30 <_printf_i+0x238>)
 8006994:	e7e9      	b.n	800696a <_printf_i+0x172>
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	f023 0320 	bic.w	r3, r3, #32
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	e7f6      	b.n	800698e <_printf_i+0x196>
 80069a0:	4616      	mov	r6, r2
 80069a2:	e7bd      	b.n	8006920 <_printf_i+0x128>
 80069a4:	6833      	ldr	r3, [r6, #0]
 80069a6:	6825      	ldr	r5, [r4, #0]
 80069a8:	6961      	ldr	r1, [r4, #20]
 80069aa:	1d18      	adds	r0, r3, #4
 80069ac:	6030      	str	r0, [r6, #0]
 80069ae:	062e      	lsls	r6, r5, #24
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	d501      	bpl.n	80069b8 <_printf_i+0x1c0>
 80069b4:	6019      	str	r1, [r3, #0]
 80069b6:	e002      	b.n	80069be <_printf_i+0x1c6>
 80069b8:	0668      	lsls	r0, r5, #25
 80069ba:	d5fb      	bpl.n	80069b4 <_printf_i+0x1bc>
 80069bc:	8019      	strh	r1, [r3, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	6123      	str	r3, [r4, #16]
 80069c2:	4616      	mov	r6, r2
 80069c4:	e7bc      	b.n	8006940 <_printf_i+0x148>
 80069c6:	6833      	ldr	r3, [r6, #0]
 80069c8:	1d1a      	adds	r2, r3, #4
 80069ca:	6032      	str	r2, [r6, #0]
 80069cc:	681e      	ldr	r6, [r3, #0]
 80069ce:	6862      	ldr	r2, [r4, #4]
 80069d0:	2100      	movs	r1, #0
 80069d2:	4630      	mov	r0, r6
 80069d4:	f7f9 fc1c 	bl	8000210 <memchr>
 80069d8:	b108      	cbz	r0, 80069de <_printf_i+0x1e6>
 80069da:	1b80      	subs	r0, r0, r6
 80069dc:	6060      	str	r0, [r4, #4]
 80069de:	6863      	ldr	r3, [r4, #4]
 80069e0:	6123      	str	r3, [r4, #16]
 80069e2:	2300      	movs	r3, #0
 80069e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069e8:	e7aa      	b.n	8006940 <_printf_i+0x148>
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	4632      	mov	r2, r6
 80069ee:	4649      	mov	r1, r9
 80069f0:	4640      	mov	r0, r8
 80069f2:	47d0      	blx	sl
 80069f4:	3001      	adds	r0, #1
 80069f6:	d0ad      	beq.n	8006954 <_printf_i+0x15c>
 80069f8:	6823      	ldr	r3, [r4, #0]
 80069fa:	079b      	lsls	r3, r3, #30
 80069fc:	d413      	bmi.n	8006a26 <_printf_i+0x22e>
 80069fe:	68e0      	ldr	r0, [r4, #12]
 8006a00:	9b03      	ldr	r3, [sp, #12]
 8006a02:	4298      	cmp	r0, r3
 8006a04:	bfb8      	it	lt
 8006a06:	4618      	movlt	r0, r3
 8006a08:	e7a6      	b.n	8006958 <_printf_i+0x160>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4632      	mov	r2, r6
 8006a0e:	4649      	mov	r1, r9
 8006a10:	4640      	mov	r0, r8
 8006a12:	47d0      	blx	sl
 8006a14:	3001      	adds	r0, #1
 8006a16:	d09d      	beq.n	8006954 <_printf_i+0x15c>
 8006a18:	3501      	adds	r5, #1
 8006a1a:	68e3      	ldr	r3, [r4, #12]
 8006a1c:	9903      	ldr	r1, [sp, #12]
 8006a1e:	1a5b      	subs	r3, r3, r1
 8006a20:	42ab      	cmp	r3, r5
 8006a22:	dcf2      	bgt.n	8006a0a <_printf_i+0x212>
 8006a24:	e7eb      	b.n	80069fe <_printf_i+0x206>
 8006a26:	2500      	movs	r5, #0
 8006a28:	f104 0619 	add.w	r6, r4, #25
 8006a2c:	e7f5      	b.n	8006a1a <_printf_i+0x222>
 8006a2e:	bf00      	nop
 8006a30:	0800aa0e 	.word	0x0800aa0e
 8006a34:	0800aa1f 	.word	0x0800aa1f

08006a38 <_scanf_float>:
 8006a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	4617      	mov	r7, r2
 8006a40:	9303      	str	r3, [sp, #12]
 8006a42:	688b      	ldr	r3, [r1, #8]
 8006a44:	1e5a      	subs	r2, r3, #1
 8006a46:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006a4a:	bf81      	itttt	hi
 8006a4c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006a50:	eb03 0b05 	addhi.w	fp, r3, r5
 8006a54:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006a58:	608b      	strhi	r3, [r1, #8]
 8006a5a:	680b      	ldr	r3, [r1, #0]
 8006a5c:	460a      	mov	r2, r1
 8006a5e:	f04f 0500 	mov.w	r5, #0
 8006a62:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006a66:	f842 3b1c 	str.w	r3, [r2], #28
 8006a6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a6e:	4680      	mov	r8, r0
 8006a70:	460c      	mov	r4, r1
 8006a72:	bf98      	it	ls
 8006a74:	f04f 0b00 	movls.w	fp, #0
 8006a78:	9201      	str	r2, [sp, #4]
 8006a7a:	4616      	mov	r6, r2
 8006a7c:	46aa      	mov	sl, r5
 8006a7e:	46a9      	mov	r9, r5
 8006a80:	9502      	str	r5, [sp, #8]
 8006a82:	68a2      	ldr	r2, [r4, #8]
 8006a84:	b152      	cbz	r2, 8006a9c <_scanf_float+0x64>
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b4e      	cmp	r3, #78	@ 0x4e
 8006a8c:	d864      	bhi.n	8006b58 <_scanf_float+0x120>
 8006a8e:	2b40      	cmp	r3, #64	@ 0x40
 8006a90:	d83c      	bhi.n	8006b0c <_scanf_float+0xd4>
 8006a92:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006a96:	b2c8      	uxtb	r0, r1
 8006a98:	280e      	cmp	r0, #14
 8006a9a:	d93a      	bls.n	8006b12 <_scanf_float+0xda>
 8006a9c:	f1b9 0f00 	cmp.w	r9, #0
 8006aa0:	d003      	beq.n	8006aaa <_scanf_float+0x72>
 8006aa2:	6823      	ldr	r3, [r4, #0]
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aae:	f1ba 0f01 	cmp.w	sl, #1
 8006ab2:	f200 8117 	bhi.w	8006ce4 <_scanf_float+0x2ac>
 8006ab6:	9b01      	ldr	r3, [sp, #4]
 8006ab8:	429e      	cmp	r6, r3
 8006aba:	f200 8108 	bhi.w	8006cce <_scanf_float+0x296>
 8006abe:	2001      	movs	r0, #1
 8006ac0:	b007      	add	sp, #28
 8006ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ac6:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006aca:	2a0d      	cmp	r2, #13
 8006acc:	d8e6      	bhi.n	8006a9c <_scanf_float+0x64>
 8006ace:	a101      	add	r1, pc, #4	@ (adr r1, 8006ad4 <_scanf_float+0x9c>)
 8006ad0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ad4:	08006c1b 	.word	0x08006c1b
 8006ad8:	08006a9d 	.word	0x08006a9d
 8006adc:	08006a9d 	.word	0x08006a9d
 8006ae0:	08006a9d 	.word	0x08006a9d
 8006ae4:	08006c7b 	.word	0x08006c7b
 8006ae8:	08006c53 	.word	0x08006c53
 8006aec:	08006a9d 	.word	0x08006a9d
 8006af0:	08006a9d 	.word	0x08006a9d
 8006af4:	08006c29 	.word	0x08006c29
 8006af8:	08006a9d 	.word	0x08006a9d
 8006afc:	08006a9d 	.word	0x08006a9d
 8006b00:	08006a9d 	.word	0x08006a9d
 8006b04:	08006a9d 	.word	0x08006a9d
 8006b08:	08006be1 	.word	0x08006be1
 8006b0c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006b10:	e7db      	b.n	8006aca <_scanf_float+0x92>
 8006b12:	290e      	cmp	r1, #14
 8006b14:	d8c2      	bhi.n	8006a9c <_scanf_float+0x64>
 8006b16:	a001      	add	r0, pc, #4	@ (adr r0, 8006b1c <_scanf_float+0xe4>)
 8006b18:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b1c:	08006bd1 	.word	0x08006bd1
 8006b20:	08006a9d 	.word	0x08006a9d
 8006b24:	08006bd1 	.word	0x08006bd1
 8006b28:	08006c67 	.word	0x08006c67
 8006b2c:	08006a9d 	.word	0x08006a9d
 8006b30:	08006b79 	.word	0x08006b79
 8006b34:	08006bb7 	.word	0x08006bb7
 8006b38:	08006bb7 	.word	0x08006bb7
 8006b3c:	08006bb7 	.word	0x08006bb7
 8006b40:	08006bb7 	.word	0x08006bb7
 8006b44:	08006bb7 	.word	0x08006bb7
 8006b48:	08006bb7 	.word	0x08006bb7
 8006b4c:	08006bb7 	.word	0x08006bb7
 8006b50:	08006bb7 	.word	0x08006bb7
 8006b54:	08006bb7 	.word	0x08006bb7
 8006b58:	2b6e      	cmp	r3, #110	@ 0x6e
 8006b5a:	d809      	bhi.n	8006b70 <_scanf_float+0x138>
 8006b5c:	2b60      	cmp	r3, #96	@ 0x60
 8006b5e:	d8b2      	bhi.n	8006ac6 <_scanf_float+0x8e>
 8006b60:	2b54      	cmp	r3, #84	@ 0x54
 8006b62:	d07b      	beq.n	8006c5c <_scanf_float+0x224>
 8006b64:	2b59      	cmp	r3, #89	@ 0x59
 8006b66:	d199      	bne.n	8006a9c <_scanf_float+0x64>
 8006b68:	2d07      	cmp	r5, #7
 8006b6a:	d197      	bne.n	8006a9c <_scanf_float+0x64>
 8006b6c:	2508      	movs	r5, #8
 8006b6e:	e02c      	b.n	8006bca <_scanf_float+0x192>
 8006b70:	2b74      	cmp	r3, #116	@ 0x74
 8006b72:	d073      	beq.n	8006c5c <_scanf_float+0x224>
 8006b74:	2b79      	cmp	r3, #121	@ 0x79
 8006b76:	e7f6      	b.n	8006b66 <_scanf_float+0x12e>
 8006b78:	6821      	ldr	r1, [r4, #0]
 8006b7a:	05c8      	lsls	r0, r1, #23
 8006b7c:	d51b      	bpl.n	8006bb6 <_scanf_float+0x17e>
 8006b7e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006b82:	6021      	str	r1, [r4, #0]
 8006b84:	f109 0901 	add.w	r9, r9, #1
 8006b88:	f1bb 0f00 	cmp.w	fp, #0
 8006b8c:	d003      	beq.n	8006b96 <_scanf_float+0x15e>
 8006b8e:	3201      	adds	r2, #1
 8006b90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b94:	60a2      	str	r2, [r4, #8]
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	60a3      	str	r3, [r4, #8]
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	6123      	str	r3, [r4, #16]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	607b      	str	r3, [r7, #4]
 8006baa:	f340 8087 	ble.w	8006cbc <_scanf_float+0x284>
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	e765      	b.n	8006a82 <_scanf_float+0x4a>
 8006bb6:	eb1a 0105 	adds.w	r1, sl, r5
 8006bba:	f47f af6f 	bne.w	8006a9c <_scanf_float+0x64>
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006bc4:	6022      	str	r2, [r4, #0]
 8006bc6:	460d      	mov	r5, r1
 8006bc8:	468a      	mov	sl, r1
 8006bca:	f806 3b01 	strb.w	r3, [r6], #1
 8006bce:	e7e2      	b.n	8006b96 <_scanf_float+0x15e>
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	0610      	lsls	r0, r2, #24
 8006bd4:	f57f af62 	bpl.w	8006a9c <_scanf_float+0x64>
 8006bd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006bdc:	6022      	str	r2, [r4, #0]
 8006bde:	e7f4      	b.n	8006bca <_scanf_float+0x192>
 8006be0:	f1ba 0f00 	cmp.w	sl, #0
 8006be4:	d10e      	bne.n	8006c04 <_scanf_float+0x1cc>
 8006be6:	f1b9 0f00 	cmp.w	r9, #0
 8006bea:	d10e      	bne.n	8006c0a <_scanf_float+0x1d2>
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006bf2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006bf6:	d108      	bne.n	8006c0a <_scanf_float+0x1d2>
 8006bf8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006bfc:	6022      	str	r2, [r4, #0]
 8006bfe:	f04f 0a01 	mov.w	sl, #1
 8006c02:	e7e2      	b.n	8006bca <_scanf_float+0x192>
 8006c04:	f1ba 0f02 	cmp.w	sl, #2
 8006c08:	d055      	beq.n	8006cb6 <_scanf_float+0x27e>
 8006c0a:	2d01      	cmp	r5, #1
 8006c0c:	d002      	beq.n	8006c14 <_scanf_float+0x1dc>
 8006c0e:	2d04      	cmp	r5, #4
 8006c10:	f47f af44 	bne.w	8006a9c <_scanf_float+0x64>
 8006c14:	3501      	adds	r5, #1
 8006c16:	b2ed      	uxtb	r5, r5
 8006c18:	e7d7      	b.n	8006bca <_scanf_float+0x192>
 8006c1a:	f1ba 0f01 	cmp.w	sl, #1
 8006c1e:	f47f af3d 	bne.w	8006a9c <_scanf_float+0x64>
 8006c22:	f04f 0a02 	mov.w	sl, #2
 8006c26:	e7d0      	b.n	8006bca <_scanf_float+0x192>
 8006c28:	b97d      	cbnz	r5, 8006c4a <_scanf_float+0x212>
 8006c2a:	f1b9 0f00 	cmp.w	r9, #0
 8006c2e:	f47f af38 	bne.w	8006aa2 <_scanf_float+0x6a>
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006c38:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006c3c:	f040 8108 	bne.w	8006e50 <_scanf_float+0x418>
 8006c40:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c44:	6022      	str	r2, [r4, #0]
 8006c46:	2501      	movs	r5, #1
 8006c48:	e7bf      	b.n	8006bca <_scanf_float+0x192>
 8006c4a:	2d03      	cmp	r5, #3
 8006c4c:	d0e2      	beq.n	8006c14 <_scanf_float+0x1dc>
 8006c4e:	2d05      	cmp	r5, #5
 8006c50:	e7de      	b.n	8006c10 <_scanf_float+0x1d8>
 8006c52:	2d02      	cmp	r5, #2
 8006c54:	f47f af22 	bne.w	8006a9c <_scanf_float+0x64>
 8006c58:	2503      	movs	r5, #3
 8006c5a:	e7b6      	b.n	8006bca <_scanf_float+0x192>
 8006c5c:	2d06      	cmp	r5, #6
 8006c5e:	f47f af1d 	bne.w	8006a9c <_scanf_float+0x64>
 8006c62:	2507      	movs	r5, #7
 8006c64:	e7b1      	b.n	8006bca <_scanf_float+0x192>
 8006c66:	6822      	ldr	r2, [r4, #0]
 8006c68:	0591      	lsls	r1, r2, #22
 8006c6a:	f57f af17 	bpl.w	8006a9c <_scanf_float+0x64>
 8006c6e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006c72:	6022      	str	r2, [r4, #0]
 8006c74:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c78:	e7a7      	b.n	8006bca <_scanf_float+0x192>
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006c80:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006c84:	d006      	beq.n	8006c94 <_scanf_float+0x25c>
 8006c86:	0550      	lsls	r0, r2, #21
 8006c88:	f57f af08 	bpl.w	8006a9c <_scanf_float+0x64>
 8006c8c:	f1b9 0f00 	cmp.w	r9, #0
 8006c90:	f000 80de 	beq.w	8006e50 <_scanf_float+0x418>
 8006c94:	0591      	lsls	r1, r2, #22
 8006c96:	bf58      	it	pl
 8006c98:	9902      	ldrpl	r1, [sp, #8]
 8006c9a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c9e:	bf58      	it	pl
 8006ca0:	eba9 0101 	subpl.w	r1, r9, r1
 8006ca4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ca8:	bf58      	it	pl
 8006caa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cae:	6022      	str	r2, [r4, #0]
 8006cb0:	f04f 0900 	mov.w	r9, #0
 8006cb4:	e789      	b.n	8006bca <_scanf_float+0x192>
 8006cb6:	f04f 0a03 	mov.w	sl, #3
 8006cba:	e786      	b.n	8006bca <_scanf_float+0x192>
 8006cbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006cc0:	4639      	mov	r1, r7
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	4798      	blx	r3
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	f43f aedb 	beq.w	8006a82 <_scanf_float+0x4a>
 8006ccc:	e6e6      	b.n	8006a9c <_scanf_float+0x64>
 8006cce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cd6:	463a      	mov	r2, r7
 8006cd8:	4640      	mov	r0, r8
 8006cda:	4798      	blx	r3
 8006cdc:	6923      	ldr	r3, [r4, #16]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	6123      	str	r3, [r4, #16]
 8006ce2:	e6e8      	b.n	8006ab6 <_scanf_float+0x7e>
 8006ce4:	1e6b      	subs	r3, r5, #1
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d824      	bhi.n	8006d34 <_scanf_float+0x2fc>
 8006cea:	2d02      	cmp	r5, #2
 8006cec:	d836      	bhi.n	8006d5c <_scanf_float+0x324>
 8006cee:	9b01      	ldr	r3, [sp, #4]
 8006cf0:	429e      	cmp	r6, r3
 8006cf2:	f67f aee4 	bls.w	8006abe <_scanf_float+0x86>
 8006cf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cfe:	463a      	mov	r2, r7
 8006d00:	4640      	mov	r0, r8
 8006d02:	4798      	blx	r3
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	3b01      	subs	r3, #1
 8006d08:	6123      	str	r3, [r4, #16]
 8006d0a:	e7f0      	b.n	8006cee <_scanf_float+0x2b6>
 8006d0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d10:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006d14:	463a      	mov	r2, r7
 8006d16:	4640      	mov	r0, r8
 8006d18:	4798      	blx	r3
 8006d1a:	6923      	ldr	r3, [r4, #16]
 8006d1c:	3b01      	subs	r3, #1
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d24:	fa5f fa8a 	uxtb.w	sl, sl
 8006d28:	f1ba 0f02 	cmp.w	sl, #2
 8006d2c:	d1ee      	bne.n	8006d0c <_scanf_float+0x2d4>
 8006d2e:	3d03      	subs	r5, #3
 8006d30:	b2ed      	uxtb	r5, r5
 8006d32:	1b76      	subs	r6, r6, r5
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	05da      	lsls	r2, r3, #23
 8006d38:	d530      	bpl.n	8006d9c <_scanf_float+0x364>
 8006d3a:	055b      	lsls	r3, r3, #21
 8006d3c:	d511      	bpl.n	8006d62 <_scanf_float+0x32a>
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	429e      	cmp	r6, r3
 8006d42:	f67f aebc 	bls.w	8006abe <_scanf_float+0x86>
 8006d46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d4e:	463a      	mov	r2, r7
 8006d50:	4640      	mov	r0, r8
 8006d52:	4798      	blx	r3
 8006d54:	6923      	ldr	r3, [r4, #16]
 8006d56:	3b01      	subs	r3, #1
 8006d58:	6123      	str	r3, [r4, #16]
 8006d5a:	e7f0      	b.n	8006d3e <_scanf_float+0x306>
 8006d5c:	46aa      	mov	sl, r5
 8006d5e:	46b3      	mov	fp, r6
 8006d60:	e7de      	b.n	8006d20 <_scanf_float+0x2e8>
 8006d62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	2965      	cmp	r1, #101	@ 0x65
 8006d6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d72:	6123      	str	r3, [r4, #16]
 8006d74:	d00c      	beq.n	8006d90 <_scanf_float+0x358>
 8006d76:	2945      	cmp	r1, #69	@ 0x45
 8006d78:	d00a      	beq.n	8006d90 <_scanf_float+0x358>
 8006d7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d7e:	463a      	mov	r2, r7
 8006d80:	4640      	mov	r0, r8
 8006d82:	4798      	blx	r3
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	1eb5      	subs	r5, r6, #2
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d94:	463a      	mov	r2, r7
 8006d96:	4640      	mov	r0, r8
 8006d98:	4798      	blx	r3
 8006d9a:	462e      	mov	r6, r5
 8006d9c:	6822      	ldr	r2, [r4, #0]
 8006d9e:	f012 0210 	ands.w	r2, r2, #16
 8006da2:	d001      	beq.n	8006da8 <_scanf_float+0x370>
 8006da4:	2000      	movs	r0, #0
 8006da6:	e68b      	b.n	8006ac0 <_scanf_float+0x88>
 8006da8:	7032      	strb	r2, [r6, #0]
 8006daa:	6823      	ldr	r3, [r4, #0]
 8006dac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006db0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006db4:	d11c      	bne.n	8006df0 <_scanf_float+0x3b8>
 8006db6:	9b02      	ldr	r3, [sp, #8]
 8006db8:	454b      	cmp	r3, r9
 8006dba:	eba3 0209 	sub.w	r2, r3, r9
 8006dbe:	d123      	bne.n	8006e08 <_scanf_float+0x3d0>
 8006dc0:	9901      	ldr	r1, [sp, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	4640      	mov	r0, r8
 8006dc6:	f002 fc0b 	bl	80095e0 <_strtod_r>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	6821      	ldr	r1, [r4, #0]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f011 0f02 	tst.w	r1, #2
 8006dd4:	ec57 6b10 	vmov	r6, r7, d0
 8006dd8:	f103 0204 	add.w	r2, r3, #4
 8006ddc:	d01f      	beq.n	8006e1e <_scanf_float+0x3e6>
 8006dde:	9903      	ldr	r1, [sp, #12]
 8006de0:	600a      	str	r2, [r1, #0]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	e9c3 6700 	strd	r6, r7, [r3]
 8006de8:	68e3      	ldr	r3, [r4, #12]
 8006dea:	3301      	adds	r3, #1
 8006dec:	60e3      	str	r3, [r4, #12]
 8006dee:	e7d9      	b.n	8006da4 <_scanf_float+0x36c>
 8006df0:	9b04      	ldr	r3, [sp, #16]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0e4      	beq.n	8006dc0 <_scanf_float+0x388>
 8006df6:	9905      	ldr	r1, [sp, #20]
 8006df8:	230a      	movs	r3, #10
 8006dfa:	3101      	adds	r1, #1
 8006dfc:	4640      	mov	r0, r8
 8006dfe:	f002 fc6f 	bl	80096e0 <_strtol_r>
 8006e02:	9b04      	ldr	r3, [sp, #16]
 8006e04:	9e05      	ldr	r6, [sp, #20]
 8006e06:	1ac2      	subs	r2, r0, r3
 8006e08:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006e0c:	429e      	cmp	r6, r3
 8006e0e:	bf28      	it	cs
 8006e10:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006e14:	4910      	ldr	r1, [pc, #64]	@ (8006e58 <_scanf_float+0x420>)
 8006e16:	4630      	mov	r0, r6
 8006e18:	f000 f8f6 	bl	8007008 <siprintf>
 8006e1c:	e7d0      	b.n	8006dc0 <_scanf_float+0x388>
 8006e1e:	f011 0f04 	tst.w	r1, #4
 8006e22:	9903      	ldr	r1, [sp, #12]
 8006e24:	600a      	str	r2, [r1, #0]
 8006e26:	d1dc      	bne.n	8006de2 <_scanf_float+0x3aa>
 8006e28:	681d      	ldr	r5, [r3, #0]
 8006e2a:	4632      	mov	r2, r6
 8006e2c:	463b      	mov	r3, r7
 8006e2e:	4630      	mov	r0, r6
 8006e30:	4639      	mov	r1, r7
 8006e32:	f7f9 fe9b 	bl	8000b6c <__aeabi_dcmpun>
 8006e36:	b128      	cbz	r0, 8006e44 <_scanf_float+0x40c>
 8006e38:	4808      	ldr	r0, [pc, #32]	@ (8006e5c <_scanf_float+0x424>)
 8006e3a:	f000 f9c9 	bl	80071d0 <nanf>
 8006e3e:	ed85 0a00 	vstr	s0, [r5]
 8006e42:	e7d1      	b.n	8006de8 <_scanf_float+0x3b0>
 8006e44:	4630      	mov	r0, r6
 8006e46:	4639      	mov	r1, r7
 8006e48:	f7f9 feee 	bl	8000c28 <__aeabi_d2f>
 8006e4c:	6028      	str	r0, [r5, #0]
 8006e4e:	e7cb      	b.n	8006de8 <_scanf_float+0x3b0>
 8006e50:	f04f 0900 	mov.w	r9, #0
 8006e54:	e629      	b.n	8006aaa <_scanf_float+0x72>
 8006e56:	bf00      	nop
 8006e58:	0800aa30 	.word	0x0800aa30
 8006e5c:	0800adc5 	.word	0x0800adc5

08006e60 <std>:
 8006e60:	2300      	movs	r3, #0
 8006e62:	b510      	push	{r4, lr}
 8006e64:	4604      	mov	r4, r0
 8006e66:	e9c0 3300 	strd	r3, r3, [r0]
 8006e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e6e:	6083      	str	r3, [r0, #8]
 8006e70:	8181      	strh	r1, [r0, #12]
 8006e72:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e74:	81c2      	strh	r2, [r0, #14]
 8006e76:	6183      	str	r3, [r0, #24]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	2208      	movs	r2, #8
 8006e7c:	305c      	adds	r0, #92	@ 0x5c
 8006e7e:	f000 f926 	bl	80070ce <memset>
 8006e82:	4b0d      	ldr	r3, [pc, #52]	@ (8006eb8 <std+0x58>)
 8006e84:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e86:	4b0d      	ldr	r3, [pc, #52]	@ (8006ebc <std+0x5c>)
 8006e88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec0 <std+0x60>)
 8006e8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec4 <std+0x64>)
 8006e90:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec8 <std+0x68>)
 8006e94:	6224      	str	r4, [r4, #32]
 8006e96:	429c      	cmp	r4, r3
 8006e98:	d006      	beq.n	8006ea8 <std+0x48>
 8006e9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e9e:	4294      	cmp	r4, r2
 8006ea0:	d002      	beq.n	8006ea8 <std+0x48>
 8006ea2:	33d0      	adds	r3, #208	@ 0xd0
 8006ea4:	429c      	cmp	r4, r3
 8006ea6:	d105      	bne.n	8006eb4 <std+0x54>
 8006ea8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb0:	f000 b98a 	b.w	80071c8 <__retarget_lock_init_recursive>
 8006eb4:	bd10      	pop	{r4, pc}
 8006eb6:	bf00      	nop
 8006eb8:	08007049 	.word	0x08007049
 8006ebc:	0800706b 	.word	0x0800706b
 8006ec0:	080070a3 	.word	0x080070a3
 8006ec4:	080070c7 	.word	0x080070c7
 8006ec8:	200003dc 	.word	0x200003dc

08006ecc <stdio_exit_handler>:
 8006ecc:	4a02      	ldr	r2, [pc, #8]	@ (8006ed8 <stdio_exit_handler+0xc>)
 8006ece:	4903      	ldr	r1, [pc, #12]	@ (8006edc <stdio_exit_handler+0x10>)
 8006ed0:	4803      	ldr	r0, [pc, #12]	@ (8006ee0 <stdio_exit_handler+0x14>)
 8006ed2:	f000 b869 	b.w	8006fa8 <_fwalk_sglue>
 8006ed6:	bf00      	nop
 8006ed8:	2000000c 	.word	0x2000000c
 8006edc:	08009d21 	.word	0x08009d21
 8006ee0:	2000001c 	.word	0x2000001c

08006ee4 <cleanup_stdio>:
 8006ee4:	6841      	ldr	r1, [r0, #4]
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f18 <cleanup_stdio+0x34>)
 8006ee8:	4299      	cmp	r1, r3
 8006eea:	b510      	push	{r4, lr}
 8006eec:	4604      	mov	r4, r0
 8006eee:	d001      	beq.n	8006ef4 <cleanup_stdio+0x10>
 8006ef0:	f002 ff16 	bl	8009d20 <_fflush_r>
 8006ef4:	68a1      	ldr	r1, [r4, #8]
 8006ef6:	4b09      	ldr	r3, [pc, #36]	@ (8006f1c <cleanup_stdio+0x38>)
 8006ef8:	4299      	cmp	r1, r3
 8006efa:	d002      	beq.n	8006f02 <cleanup_stdio+0x1e>
 8006efc:	4620      	mov	r0, r4
 8006efe:	f002 ff0f 	bl	8009d20 <_fflush_r>
 8006f02:	68e1      	ldr	r1, [r4, #12]
 8006f04:	4b06      	ldr	r3, [pc, #24]	@ (8006f20 <cleanup_stdio+0x3c>)
 8006f06:	4299      	cmp	r1, r3
 8006f08:	d004      	beq.n	8006f14 <cleanup_stdio+0x30>
 8006f0a:	4620      	mov	r0, r4
 8006f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f10:	f002 bf06 	b.w	8009d20 <_fflush_r>
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	bf00      	nop
 8006f18:	200003dc 	.word	0x200003dc
 8006f1c:	20000444 	.word	0x20000444
 8006f20:	200004ac 	.word	0x200004ac

08006f24 <global_stdio_init.part.0>:
 8006f24:	b510      	push	{r4, lr}
 8006f26:	4b0b      	ldr	r3, [pc, #44]	@ (8006f54 <global_stdio_init.part.0+0x30>)
 8006f28:	4c0b      	ldr	r4, [pc, #44]	@ (8006f58 <global_stdio_init.part.0+0x34>)
 8006f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8006f5c <global_stdio_init.part.0+0x38>)
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	2200      	movs	r2, #0
 8006f32:	2104      	movs	r1, #4
 8006f34:	f7ff ff94 	bl	8006e60 <std>
 8006f38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	2109      	movs	r1, #9
 8006f40:	f7ff ff8e 	bl	8006e60 <std>
 8006f44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f48:	2202      	movs	r2, #2
 8006f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f4e:	2112      	movs	r1, #18
 8006f50:	f7ff bf86 	b.w	8006e60 <std>
 8006f54:	20000514 	.word	0x20000514
 8006f58:	200003dc 	.word	0x200003dc
 8006f5c:	08006ecd 	.word	0x08006ecd

08006f60 <__sfp_lock_acquire>:
 8006f60:	4801      	ldr	r0, [pc, #4]	@ (8006f68 <__sfp_lock_acquire+0x8>)
 8006f62:	f000 b932 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8006f66:	bf00      	nop
 8006f68:	2000051d 	.word	0x2000051d

08006f6c <__sfp_lock_release>:
 8006f6c:	4801      	ldr	r0, [pc, #4]	@ (8006f74 <__sfp_lock_release+0x8>)
 8006f6e:	f000 b92d 	b.w	80071cc <__retarget_lock_release_recursive>
 8006f72:	bf00      	nop
 8006f74:	2000051d 	.word	0x2000051d

08006f78 <__sinit>:
 8006f78:	b510      	push	{r4, lr}
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	f7ff fff0 	bl	8006f60 <__sfp_lock_acquire>
 8006f80:	6a23      	ldr	r3, [r4, #32]
 8006f82:	b11b      	cbz	r3, 8006f8c <__sinit+0x14>
 8006f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f88:	f7ff bff0 	b.w	8006f6c <__sfp_lock_release>
 8006f8c:	4b04      	ldr	r3, [pc, #16]	@ (8006fa0 <__sinit+0x28>)
 8006f8e:	6223      	str	r3, [r4, #32]
 8006f90:	4b04      	ldr	r3, [pc, #16]	@ (8006fa4 <__sinit+0x2c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f5      	bne.n	8006f84 <__sinit+0xc>
 8006f98:	f7ff ffc4 	bl	8006f24 <global_stdio_init.part.0>
 8006f9c:	e7f2      	b.n	8006f84 <__sinit+0xc>
 8006f9e:	bf00      	nop
 8006fa0:	08006ee5 	.word	0x08006ee5
 8006fa4:	20000514 	.word	0x20000514

08006fa8 <_fwalk_sglue>:
 8006fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fac:	4607      	mov	r7, r0
 8006fae:	4688      	mov	r8, r1
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	2600      	movs	r6, #0
 8006fb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fb8:	f1b9 0901 	subs.w	r9, r9, #1
 8006fbc:	d505      	bpl.n	8006fca <_fwalk_sglue+0x22>
 8006fbe:	6824      	ldr	r4, [r4, #0]
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	d1f7      	bne.n	8006fb4 <_fwalk_sglue+0xc>
 8006fc4:	4630      	mov	r0, r6
 8006fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fca:	89ab      	ldrh	r3, [r5, #12]
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d907      	bls.n	8006fe0 <_fwalk_sglue+0x38>
 8006fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	d003      	beq.n	8006fe0 <_fwalk_sglue+0x38>
 8006fd8:	4629      	mov	r1, r5
 8006fda:	4638      	mov	r0, r7
 8006fdc:	47c0      	blx	r8
 8006fde:	4306      	orrs	r6, r0
 8006fe0:	3568      	adds	r5, #104	@ 0x68
 8006fe2:	e7e9      	b.n	8006fb8 <_fwalk_sglue+0x10>

08006fe4 <iprintf>:
 8006fe4:	b40f      	push	{r0, r1, r2, r3}
 8006fe6:	b507      	push	{r0, r1, r2, lr}
 8006fe8:	4906      	ldr	r1, [pc, #24]	@ (8007004 <iprintf+0x20>)
 8006fea:	ab04      	add	r3, sp, #16
 8006fec:	6808      	ldr	r0, [r1, #0]
 8006fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff2:	6881      	ldr	r1, [r0, #8]
 8006ff4:	9301      	str	r3, [sp, #4]
 8006ff6:	f002 fcf7 	bl	80099e8 <_vfiprintf_r>
 8006ffa:	b003      	add	sp, #12
 8006ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007000:	b004      	add	sp, #16
 8007002:	4770      	bx	lr
 8007004:	20000018 	.word	0x20000018

08007008 <siprintf>:
 8007008:	b40e      	push	{r1, r2, r3}
 800700a:	b500      	push	{lr}
 800700c:	b09c      	sub	sp, #112	@ 0x70
 800700e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007010:	9002      	str	r0, [sp, #8]
 8007012:	9006      	str	r0, [sp, #24]
 8007014:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007018:	4809      	ldr	r0, [pc, #36]	@ (8007040 <siprintf+0x38>)
 800701a:	9107      	str	r1, [sp, #28]
 800701c:	9104      	str	r1, [sp, #16]
 800701e:	4909      	ldr	r1, [pc, #36]	@ (8007044 <siprintf+0x3c>)
 8007020:	f853 2b04 	ldr.w	r2, [r3], #4
 8007024:	9105      	str	r1, [sp, #20]
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	a902      	add	r1, sp, #8
 800702c:	f002 fbb6 	bl	800979c <_svfiprintf_r>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	b01c      	add	sp, #112	@ 0x70
 8007038:	f85d eb04 	ldr.w	lr, [sp], #4
 800703c:	b003      	add	sp, #12
 800703e:	4770      	bx	lr
 8007040:	20000018 	.word	0x20000018
 8007044:	ffff0208 	.word	0xffff0208

08007048 <__sread>:
 8007048:	b510      	push	{r4, lr}
 800704a:	460c      	mov	r4, r1
 800704c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007050:	f000 f86c 	bl	800712c <_read_r>
 8007054:	2800      	cmp	r0, #0
 8007056:	bfab      	itete	ge
 8007058:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800705a:	89a3      	ldrhlt	r3, [r4, #12]
 800705c:	181b      	addge	r3, r3, r0
 800705e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007062:	bfac      	ite	ge
 8007064:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007066:	81a3      	strhlt	r3, [r4, #12]
 8007068:	bd10      	pop	{r4, pc}

0800706a <__swrite>:
 800706a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800706e:	461f      	mov	r7, r3
 8007070:	898b      	ldrh	r3, [r1, #12]
 8007072:	05db      	lsls	r3, r3, #23
 8007074:	4605      	mov	r5, r0
 8007076:	460c      	mov	r4, r1
 8007078:	4616      	mov	r6, r2
 800707a:	d505      	bpl.n	8007088 <__swrite+0x1e>
 800707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007080:	2302      	movs	r3, #2
 8007082:	2200      	movs	r2, #0
 8007084:	f000 f840 	bl	8007108 <_lseek_r>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800708e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007092:	81a3      	strh	r3, [r4, #12]
 8007094:	4632      	mov	r2, r6
 8007096:	463b      	mov	r3, r7
 8007098:	4628      	mov	r0, r5
 800709a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800709e:	f000 b857 	b.w	8007150 <_write_r>

080070a2 <__sseek>:
 80070a2:	b510      	push	{r4, lr}
 80070a4:	460c      	mov	r4, r1
 80070a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070aa:	f000 f82d 	bl	8007108 <_lseek_r>
 80070ae:	1c43      	adds	r3, r0, #1
 80070b0:	89a3      	ldrh	r3, [r4, #12]
 80070b2:	bf15      	itete	ne
 80070b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070be:	81a3      	strheq	r3, [r4, #12]
 80070c0:	bf18      	it	ne
 80070c2:	81a3      	strhne	r3, [r4, #12]
 80070c4:	bd10      	pop	{r4, pc}

080070c6 <__sclose>:
 80070c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ca:	f000 b80d 	b.w	80070e8 <_close_r>

080070ce <memset>:
 80070ce:	4402      	add	r2, r0
 80070d0:	4603      	mov	r3, r0
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d100      	bne.n	80070d8 <memset+0xa>
 80070d6:	4770      	bx	lr
 80070d8:	f803 1b01 	strb.w	r1, [r3], #1
 80070dc:	e7f9      	b.n	80070d2 <memset+0x4>
	...

080070e0 <_localeconv_r>:
 80070e0:	4800      	ldr	r0, [pc, #0]	@ (80070e4 <_localeconv_r+0x4>)
 80070e2:	4770      	bx	lr
 80070e4:	20000158 	.word	0x20000158

080070e8 <_close_r>:
 80070e8:	b538      	push	{r3, r4, r5, lr}
 80070ea:	4d06      	ldr	r5, [pc, #24]	@ (8007104 <_close_r+0x1c>)
 80070ec:	2300      	movs	r3, #0
 80070ee:	4604      	mov	r4, r0
 80070f0:	4608      	mov	r0, r1
 80070f2:	602b      	str	r3, [r5, #0]
 80070f4:	f7fa ff50 	bl	8001f98 <_close>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d102      	bne.n	8007102 <_close_r+0x1a>
 80070fc:	682b      	ldr	r3, [r5, #0]
 80070fe:	b103      	cbz	r3, 8007102 <_close_r+0x1a>
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	bd38      	pop	{r3, r4, r5, pc}
 8007104:	20000518 	.word	0x20000518

08007108 <_lseek_r>:
 8007108:	b538      	push	{r3, r4, r5, lr}
 800710a:	4d07      	ldr	r5, [pc, #28]	@ (8007128 <_lseek_r+0x20>)
 800710c:	4604      	mov	r4, r0
 800710e:	4608      	mov	r0, r1
 8007110:	4611      	mov	r1, r2
 8007112:	2200      	movs	r2, #0
 8007114:	602a      	str	r2, [r5, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	f7fa ff65 	bl	8001fe6 <_lseek>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	d102      	bne.n	8007126 <_lseek_r+0x1e>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	b103      	cbz	r3, 8007126 <_lseek_r+0x1e>
 8007124:	6023      	str	r3, [r4, #0]
 8007126:	bd38      	pop	{r3, r4, r5, pc}
 8007128:	20000518 	.word	0x20000518

0800712c <_read_r>:
 800712c:	b538      	push	{r3, r4, r5, lr}
 800712e:	4d07      	ldr	r5, [pc, #28]	@ (800714c <_read_r+0x20>)
 8007130:	4604      	mov	r4, r0
 8007132:	4608      	mov	r0, r1
 8007134:	4611      	mov	r1, r2
 8007136:	2200      	movs	r2, #0
 8007138:	602a      	str	r2, [r5, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f7fa ff0f 	bl	8001f5e <_read>
 8007140:	1c43      	adds	r3, r0, #1
 8007142:	d102      	bne.n	800714a <_read_r+0x1e>
 8007144:	682b      	ldr	r3, [r5, #0]
 8007146:	b103      	cbz	r3, 800714a <_read_r+0x1e>
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	bd38      	pop	{r3, r4, r5, pc}
 800714c:	20000518 	.word	0x20000518

08007150 <_write_r>:
 8007150:	b538      	push	{r3, r4, r5, lr}
 8007152:	4d07      	ldr	r5, [pc, #28]	@ (8007170 <_write_r+0x20>)
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	2200      	movs	r2, #0
 800715c:	602a      	str	r2, [r5, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	f7fa fce4 	bl	8001b2c <_write>
 8007164:	1c43      	adds	r3, r0, #1
 8007166:	d102      	bne.n	800716e <_write_r+0x1e>
 8007168:	682b      	ldr	r3, [r5, #0]
 800716a:	b103      	cbz	r3, 800716e <_write_r+0x1e>
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	bd38      	pop	{r3, r4, r5, pc}
 8007170:	20000518 	.word	0x20000518

08007174 <__errno>:
 8007174:	4b01      	ldr	r3, [pc, #4]	@ (800717c <__errno+0x8>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000018 	.word	0x20000018

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	4d0d      	ldr	r5, [pc, #52]	@ (80071b8 <__libc_init_array+0x38>)
 8007184:	4c0d      	ldr	r4, [pc, #52]	@ (80071bc <__libc_init_array+0x3c>)
 8007186:	1b64      	subs	r4, r4, r5
 8007188:	10a4      	asrs	r4, r4, #2
 800718a:	2600      	movs	r6, #0
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	4d0b      	ldr	r5, [pc, #44]	@ (80071c0 <__libc_init_array+0x40>)
 8007192:	4c0c      	ldr	r4, [pc, #48]	@ (80071c4 <__libc_init_array+0x44>)
 8007194:	f003 fbf4 	bl	800a980 <_init>
 8007198:	1b64      	subs	r4, r4, r5
 800719a:	10a4      	asrs	r4, r4, #2
 800719c:	2600      	movs	r6, #0
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	0800ae30 	.word	0x0800ae30
 80071bc:	0800ae30 	.word	0x0800ae30
 80071c0:	0800ae30 	.word	0x0800ae30
 80071c4:	0800ae34 	.word	0x0800ae34

080071c8 <__retarget_lock_init_recursive>:
 80071c8:	4770      	bx	lr

080071ca <__retarget_lock_acquire_recursive>:
 80071ca:	4770      	bx	lr

080071cc <__retarget_lock_release_recursive>:
 80071cc:	4770      	bx	lr
	...

080071d0 <nanf>:
 80071d0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80071d8 <nanf+0x8>
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	7fc00000 	.word	0x7fc00000

080071dc <quorem>:
 80071dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e0:	6903      	ldr	r3, [r0, #16]
 80071e2:	690c      	ldr	r4, [r1, #16]
 80071e4:	42a3      	cmp	r3, r4
 80071e6:	4607      	mov	r7, r0
 80071e8:	db7e      	blt.n	80072e8 <quorem+0x10c>
 80071ea:	3c01      	subs	r4, #1
 80071ec:	f101 0814 	add.w	r8, r1, #20
 80071f0:	00a3      	lsls	r3, r4, #2
 80071f2:	f100 0514 	add.w	r5, r0, #20
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007206:	3301      	adds	r3, #1
 8007208:	429a      	cmp	r2, r3
 800720a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800720e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007212:	d32e      	bcc.n	8007272 <quorem+0x96>
 8007214:	f04f 0a00 	mov.w	sl, #0
 8007218:	46c4      	mov	ip, r8
 800721a:	46ae      	mov	lr, r5
 800721c:	46d3      	mov	fp, sl
 800721e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007222:	b298      	uxth	r0, r3
 8007224:	fb06 a000 	mla	r0, r6, r0, sl
 8007228:	0c02      	lsrs	r2, r0, #16
 800722a:	0c1b      	lsrs	r3, r3, #16
 800722c:	fb06 2303 	mla	r3, r6, r3, r2
 8007230:	f8de 2000 	ldr.w	r2, [lr]
 8007234:	b280      	uxth	r0, r0
 8007236:	b292      	uxth	r2, r2
 8007238:	1a12      	subs	r2, r2, r0
 800723a:	445a      	add	r2, fp
 800723c:	f8de 0000 	ldr.w	r0, [lr]
 8007240:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007244:	b29b      	uxth	r3, r3
 8007246:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800724a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800724e:	b292      	uxth	r2, r2
 8007250:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007254:	45e1      	cmp	r9, ip
 8007256:	f84e 2b04 	str.w	r2, [lr], #4
 800725a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800725e:	d2de      	bcs.n	800721e <quorem+0x42>
 8007260:	9b00      	ldr	r3, [sp, #0]
 8007262:	58eb      	ldr	r3, [r5, r3]
 8007264:	b92b      	cbnz	r3, 8007272 <quorem+0x96>
 8007266:	9b01      	ldr	r3, [sp, #4]
 8007268:	3b04      	subs	r3, #4
 800726a:	429d      	cmp	r5, r3
 800726c:	461a      	mov	r2, r3
 800726e:	d32f      	bcc.n	80072d0 <quorem+0xf4>
 8007270:	613c      	str	r4, [r7, #16]
 8007272:	4638      	mov	r0, r7
 8007274:	f001 f9c4 	bl	8008600 <__mcmp>
 8007278:	2800      	cmp	r0, #0
 800727a:	db25      	blt.n	80072c8 <quorem+0xec>
 800727c:	4629      	mov	r1, r5
 800727e:	2000      	movs	r0, #0
 8007280:	f858 2b04 	ldr.w	r2, [r8], #4
 8007284:	f8d1 c000 	ldr.w	ip, [r1]
 8007288:	fa1f fe82 	uxth.w	lr, r2
 800728c:	fa1f f38c 	uxth.w	r3, ip
 8007290:	eba3 030e 	sub.w	r3, r3, lr
 8007294:	4403      	add	r3, r0
 8007296:	0c12      	lsrs	r2, r2, #16
 8007298:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800729c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072a6:	45c1      	cmp	r9, r8
 80072a8:	f841 3b04 	str.w	r3, [r1], #4
 80072ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 80072b0:	d2e6      	bcs.n	8007280 <quorem+0xa4>
 80072b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072ba:	b922      	cbnz	r2, 80072c6 <quorem+0xea>
 80072bc:	3b04      	subs	r3, #4
 80072be:	429d      	cmp	r5, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	d30b      	bcc.n	80072dc <quorem+0x100>
 80072c4:	613c      	str	r4, [r7, #16]
 80072c6:	3601      	adds	r6, #1
 80072c8:	4630      	mov	r0, r6
 80072ca:	b003      	add	sp, #12
 80072cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d0:	6812      	ldr	r2, [r2, #0]
 80072d2:	3b04      	subs	r3, #4
 80072d4:	2a00      	cmp	r2, #0
 80072d6:	d1cb      	bne.n	8007270 <quorem+0x94>
 80072d8:	3c01      	subs	r4, #1
 80072da:	e7c6      	b.n	800726a <quorem+0x8e>
 80072dc:	6812      	ldr	r2, [r2, #0]
 80072de:	3b04      	subs	r3, #4
 80072e0:	2a00      	cmp	r2, #0
 80072e2:	d1ef      	bne.n	80072c4 <quorem+0xe8>
 80072e4:	3c01      	subs	r4, #1
 80072e6:	e7ea      	b.n	80072be <quorem+0xe2>
 80072e8:	2000      	movs	r0, #0
 80072ea:	e7ee      	b.n	80072ca <quorem+0xee>
 80072ec:	0000      	movs	r0, r0
	...

080072f0 <_dtoa_r>:
 80072f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	69c7      	ldr	r7, [r0, #28]
 80072f6:	b099      	sub	sp, #100	@ 0x64
 80072f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80072fc:	ec55 4b10 	vmov	r4, r5, d0
 8007300:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007302:	9109      	str	r1, [sp, #36]	@ 0x24
 8007304:	4683      	mov	fp, r0
 8007306:	920e      	str	r2, [sp, #56]	@ 0x38
 8007308:	9313      	str	r3, [sp, #76]	@ 0x4c
 800730a:	b97f      	cbnz	r7, 800732c <_dtoa_r+0x3c>
 800730c:	2010      	movs	r0, #16
 800730e:	f000 fdfd 	bl	8007f0c <malloc>
 8007312:	4602      	mov	r2, r0
 8007314:	f8cb 001c 	str.w	r0, [fp, #28]
 8007318:	b920      	cbnz	r0, 8007324 <_dtoa_r+0x34>
 800731a:	4ba7      	ldr	r3, [pc, #668]	@ (80075b8 <_dtoa_r+0x2c8>)
 800731c:	21ef      	movs	r1, #239	@ 0xef
 800731e:	48a7      	ldr	r0, [pc, #668]	@ (80075bc <_dtoa_r+0x2cc>)
 8007320:	f002 fe0e 	bl	8009f40 <__assert_func>
 8007324:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007328:	6007      	str	r7, [r0, #0]
 800732a:	60c7      	str	r7, [r0, #12]
 800732c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007330:	6819      	ldr	r1, [r3, #0]
 8007332:	b159      	cbz	r1, 800734c <_dtoa_r+0x5c>
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	604a      	str	r2, [r1, #4]
 8007338:	2301      	movs	r3, #1
 800733a:	4093      	lsls	r3, r2
 800733c:	608b      	str	r3, [r1, #8]
 800733e:	4658      	mov	r0, fp
 8007340:	f000 feda 	bl	80080f8 <_Bfree>
 8007344:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
 800734c:	1e2b      	subs	r3, r5, #0
 800734e:	bfb9      	ittee	lt
 8007350:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007354:	9303      	strlt	r3, [sp, #12]
 8007356:	2300      	movge	r3, #0
 8007358:	6033      	strge	r3, [r6, #0]
 800735a:	9f03      	ldr	r7, [sp, #12]
 800735c:	4b98      	ldr	r3, [pc, #608]	@ (80075c0 <_dtoa_r+0x2d0>)
 800735e:	bfbc      	itt	lt
 8007360:	2201      	movlt	r2, #1
 8007362:	6032      	strlt	r2, [r6, #0]
 8007364:	43bb      	bics	r3, r7
 8007366:	d112      	bne.n	800738e <_dtoa_r+0x9e>
 8007368:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800736a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007374:	4323      	orrs	r3, r4
 8007376:	f000 854d 	beq.w	8007e14 <_dtoa_r+0xb24>
 800737a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800737c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80075d4 <_dtoa_r+0x2e4>
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 854f 	beq.w	8007e24 <_dtoa_r+0xb34>
 8007386:	f10a 0303 	add.w	r3, sl, #3
 800738a:	f000 bd49 	b.w	8007e20 <_dtoa_r+0xb30>
 800738e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007392:	2200      	movs	r2, #0
 8007394:	ec51 0b17 	vmov	r0, r1, d7
 8007398:	2300      	movs	r3, #0
 800739a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800739e:	f7f9 fbb3 	bl	8000b08 <__aeabi_dcmpeq>
 80073a2:	4680      	mov	r8, r0
 80073a4:	b158      	cbz	r0, 80073be <_dtoa_r+0xce>
 80073a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80073a8:	2301      	movs	r3, #1
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073ae:	b113      	cbz	r3, 80073b6 <_dtoa_r+0xc6>
 80073b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80073b2:	4b84      	ldr	r3, [pc, #528]	@ (80075c4 <_dtoa_r+0x2d4>)
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80075d8 <_dtoa_r+0x2e8>
 80073ba:	f000 bd33 	b.w	8007e24 <_dtoa_r+0xb34>
 80073be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80073c2:	aa16      	add	r2, sp, #88	@ 0x58
 80073c4:	a917      	add	r1, sp, #92	@ 0x5c
 80073c6:	4658      	mov	r0, fp
 80073c8:	f001 fa3a 	bl	8008840 <__d2b>
 80073cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073d0:	4681      	mov	r9, r0
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	d077      	beq.n	80074c6 <_dtoa_r+0x1d6>
 80073d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80073dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073f0:	4619      	mov	r1, r3
 80073f2:	2200      	movs	r2, #0
 80073f4:	4b74      	ldr	r3, [pc, #464]	@ (80075c8 <_dtoa_r+0x2d8>)
 80073f6:	f7f8 ff67 	bl	80002c8 <__aeabi_dsub>
 80073fa:	a369      	add	r3, pc, #420	@ (adr r3, 80075a0 <_dtoa_r+0x2b0>)
 80073fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007400:	f7f9 f91a 	bl	8000638 <__aeabi_dmul>
 8007404:	a368      	add	r3, pc, #416	@ (adr r3, 80075a8 <_dtoa_r+0x2b8>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f7f8 ff5f 	bl	80002cc <__adddf3>
 800740e:	4604      	mov	r4, r0
 8007410:	4630      	mov	r0, r6
 8007412:	460d      	mov	r5, r1
 8007414:	f7f9 f8a6 	bl	8000564 <__aeabi_i2d>
 8007418:	a365      	add	r3, pc, #404	@ (adr r3, 80075b0 <_dtoa_r+0x2c0>)
 800741a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741e:	f7f9 f90b 	bl	8000638 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	f7f8 ff4f 	bl	80002cc <__adddf3>
 800742e:	4604      	mov	r4, r0
 8007430:	460d      	mov	r5, r1
 8007432:	f7f9 fbb1 	bl	8000b98 <__aeabi_d2iz>
 8007436:	2200      	movs	r2, #0
 8007438:	4607      	mov	r7, r0
 800743a:	2300      	movs	r3, #0
 800743c:	4620      	mov	r0, r4
 800743e:	4629      	mov	r1, r5
 8007440:	f7f9 fb6c 	bl	8000b1c <__aeabi_dcmplt>
 8007444:	b140      	cbz	r0, 8007458 <_dtoa_r+0x168>
 8007446:	4638      	mov	r0, r7
 8007448:	f7f9 f88c 	bl	8000564 <__aeabi_i2d>
 800744c:	4622      	mov	r2, r4
 800744e:	462b      	mov	r3, r5
 8007450:	f7f9 fb5a 	bl	8000b08 <__aeabi_dcmpeq>
 8007454:	b900      	cbnz	r0, 8007458 <_dtoa_r+0x168>
 8007456:	3f01      	subs	r7, #1
 8007458:	2f16      	cmp	r7, #22
 800745a:	d851      	bhi.n	8007500 <_dtoa_r+0x210>
 800745c:	4b5b      	ldr	r3, [pc, #364]	@ (80075cc <_dtoa_r+0x2dc>)
 800745e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007466:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800746a:	f7f9 fb57 	bl	8000b1c <__aeabi_dcmplt>
 800746e:	2800      	cmp	r0, #0
 8007470:	d048      	beq.n	8007504 <_dtoa_r+0x214>
 8007472:	3f01      	subs	r7, #1
 8007474:	2300      	movs	r3, #0
 8007476:	9312      	str	r3, [sp, #72]	@ 0x48
 8007478:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800747a:	1b9b      	subs	r3, r3, r6
 800747c:	1e5a      	subs	r2, r3, #1
 800747e:	bf44      	itt	mi
 8007480:	f1c3 0801 	rsbmi	r8, r3, #1
 8007484:	2300      	movmi	r3, #0
 8007486:	9208      	str	r2, [sp, #32]
 8007488:	bf54      	ite	pl
 800748a:	f04f 0800 	movpl.w	r8, #0
 800748e:	9308      	strmi	r3, [sp, #32]
 8007490:	2f00      	cmp	r7, #0
 8007492:	db39      	blt.n	8007508 <_dtoa_r+0x218>
 8007494:	9b08      	ldr	r3, [sp, #32]
 8007496:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007498:	443b      	add	r3, r7
 800749a:	9308      	str	r3, [sp, #32]
 800749c:	2300      	movs	r3, #0
 800749e:	930a      	str	r3, [sp, #40]	@ 0x28
 80074a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d864      	bhi.n	8007570 <_dtoa_r+0x280>
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	bfc4      	itt	gt
 80074aa:	3b04      	subgt	r3, #4
 80074ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80074ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b0:	f1a3 0302 	sub.w	r3, r3, #2
 80074b4:	bfcc      	ite	gt
 80074b6:	2400      	movgt	r4, #0
 80074b8:	2401      	movle	r4, #1
 80074ba:	2b03      	cmp	r3, #3
 80074bc:	d863      	bhi.n	8007586 <_dtoa_r+0x296>
 80074be:	e8df f003 	tbb	[pc, r3]
 80074c2:	372a      	.short	0x372a
 80074c4:	5535      	.short	0x5535
 80074c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80074ca:	441e      	add	r6, r3
 80074cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	bfc1      	itttt	gt
 80074d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074d8:	409f      	lslgt	r7, r3
 80074da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074e2:	bfd6      	itet	le
 80074e4:	f1c3 0320 	rsble	r3, r3, #32
 80074e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80074ec:	fa04 f003 	lslle.w	r0, r4, r3
 80074f0:	f7f9 f828 	bl	8000544 <__aeabi_ui2d>
 80074f4:	2201      	movs	r2, #1
 80074f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074fa:	3e01      	subs	r6, #1
 80074fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80074fe:	e777      	b.n	80073f0 <_dtoa_r+0x100>
 8007500:	2301      	movs	r3, #1
 8007502:	e7b8      	b.n	8007476 <_dtoa_r+0x186>
 8007504:	9012      	str	r0, [sp, #72]	@ 0x48
 8007506:	e7b7      	b.n	8007478 <_dtoa_r+0x188>
 8007508:	427b      	negs	r3, r7
 800750a:	930a      	str	r3, [sp, #40]	@ 0x28
 800750c:	2300      	movs	r3, #0
 800750e:	eba8 0807 	sub.w	r8, r8, r7
 8007512:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007514:	e7c4      	b.n	80074a0 <_dtoa_r+0x1b0>
 8007516:	2300      	movs	r3, #0
 8007518:	930b      	str	r3, [sp, #44]	@ 0x2c
 800751a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800751c:	2b00      	cmp	r3, #0
 800751e:	dc35      	bgt.n	800758c <_dtoa_r+0x29c>
 8007520:	2301      	movs	r3, #1
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	9307      	str	r3, [sp, #28]
 8007526:	461a      	mov	r2, r3
 8007528:	920e      	str	r2, [sp, #56]	@ 0x38
 800752a:	e00b      	b.n	8007544 <_dtoa_r+0x254>
 800752c:	2301      	movs	r3, #1
 800752e:	e7f3      	b.n	8007518 <_dtoa_r+0x228>
 8007530:	2300      	movs	r3, #0
 8007532:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007534:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007536:	18fb      	adds	r3, r7, r3
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	3301      	adds	r3, #1
 800753c:	2b01      	cmp	r3, #1
 800753e:	9307      	str	r3, [sp, #28]
 8007540:	bfb8      	it	lt
 8007542:	2301      	movlt	r3, #1
 8007544:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007548:	2100      	movs	r1, #0
 800754a:	2204      	movs	r2, #4
 800754c:	f102 0514 	add.w	r5, r2, #20
 8007550:	429d      	cmp	r5, r3
 8007552:	d91f      	bls.n	8007594 <_dtoa_r+0x2a4>
 8007554:	6041      	str	r1, [r0, #4]
 8007556:	4658      	mov	r0, fp
 8007558:	f000 fd8e 	bl	8008078 <_Balloc>
 800755c:	4682      	mov	sl, r0
 800755e:	2800      	cmp	r0, #0
 8007560:	d13c      	bne.n	80075dc <_dtoa_r+0x2ec>
 8007562:	4b1b      	ldr	r3, [pc, #108]	@ (80075d0 <_dtoa_r+0x2e0>)
 8007564:	4602      	mov	r2, r0
 8007566:	f240 11af 	movw	r1, #431	@ 0x1af
 800756a:	e6d8      	b.n	800731e <_dtoa_r+0x2e>
 800756c:	2301      	movs	r3, #1
 800756e:	e7e0      	b.n	8007532 <_dtoa_r+0x242>
 8007570:	2401      	movs	r4, #1
 8007572:	2300      	movs	r3, #0
 8007574:	9309      	str	r3, [sp, #36]	@ 0x24
 8007576:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007578:	f04f 33ff 	mov.w	r3, #4294967295
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	9307      	str	r3, [sp, #28]
 8007580:	2200      	movs	r2, #0
 8007582:	2312      	movs	r3, #18
 8007584:	e7d0      	b.n	8007528 <_dtoa_r+0x238>
 8007586:	2301      	movs	r3, #1
 8007588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800758a:	e7f5      	b.n	8007578 <_dtoa_r+0x288>
 800758c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	9307      	str	r3, [sp, #28]
 8007592:	e7d7      	b.n	8007544 <_dtoa_r+0x254>
 8007594:	3101      	adds	r1, #1
 8007596:	0052      	lsls	r2, r2, #1
 8007598:	e7d8      	b.n	800754c <_dtoa_r+0x25c>
 800759a:	bf00      	nop
 800759c:	f3af 8000 	nop.w
 80075a0:	636f4361 	.word	0x636f4361
 80075a4:	3fd287a7 	.word	0x3fd287a7
 80075a8:	8b60c8b3 	.word	0x8b60c8b3
 80075ac:	3fc68a28 	.word	0x3fc68a28
 80075b0:	509f79fb 	.word	0x509f79fb
 80075b4:	3fd34413 	.word	0x3fd34413
 80075b8:	0800aa42 	.word	0x0800aa42
 80075bc:	0800aa59 	.word	0x0800aa59
 80075c0:	7ff00000 	.word	0x7ff00000
 80075c4:	0800aa0d 	.word	0x0800aa0d
 80075c8:	3ff80000 	.word	0x3ff80000
 80075cc:	0800ab50 	.word	0x0800ab50
 80075d0:	0800aab1 	.word	0x0800aab1
 80075d4:	0800aa3e 	.word	0x0800aa3e
 80075d8:	0800aa0c 	.word	0x0800aa0c
 80075dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075e0:	6018      	str	r0, [r3, #0]
 80075e2:	9b07      	ldr	r3, [sp, #28]
 80075e4:	2b0e      	cmp	r3, #14
 80075e6:	f200 80a4 	bhi.w	8007732 <_dtoa_r+0x442>
 80075ea:	2c00      	cmp	r4, #0
 80075ec:	f000 80a1 	beq.w	8007732 <_dtoa_r+0x442>
 80075f0:	2f00      	cmp	r7, #0
 80075f2:	dd33      	ble.n	800765c <_dtoa_r+0x36c>
 80075f4:	4bad      	ldr	r3, [pc, #692]	@ (80078ac <_dtoa_r+0x5bc>)
 80075f6:	f007 020f 	and.w	r2, r7, #15
 80075fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075fe:	ed93 7b00 	vldr	d7, [r3]
 8007602:	05f8      	lsls	r0, r7, #23
 8007604:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007608:	ea4f 1427 	mov.w	r4, r7, asr #4
 800760c:	d516      	bpl.n	800763c <_dtoa_r+0x34c>
 800760e:	4ba8      	ldr	r3, [pc, #672]	@ (80078b0 <_dtoa_r+0x5c0>)
 8007610:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007614:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007618:	f7f9 f938 	bl	800088c <__aeabi_ddiv>
 800761c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007620:	f004 040f 	and.w	r4, r4, #15
 8007624:	2603      	movs	r6, #3
 8007626:	4da2      	ldr	r5, [pc, #648]	@ (80078b0 <_dtoa_r+0x5c0>)
 8007628:	b954      	cbnz	r4, 8007640 <_dtoa_r+0x350>
 800762a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800762e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007632:	f7f9 f92b 	bl	800088c <__aeabi_ddiv>
 8007636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800763a:	e028      	b.n	800768e <_dtoa_r+0x39e>
 800763c:	2602      	movs	r6, #2
 800763e:	e7f2      	b.n	8007626 <_dtoa_r+0x336>
 8007640:	07e1      	lsls	r1, r4, #31
 8007642:	d508      	bpl.n	8007656 <_dtoa_r+0x366>
 8007644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007648:	e9d5 2300 	ldrd	r2, r3, [r5]
 800764c:	f7f8 fff4 	bl	8000638 <__aeabi_dmul>
 8007650:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007654:	3601      	adds	r6, #1
 8007656:	1064      	asrs	r4, r4, #1
 8007658:	3508      	adds	r5, #8
 800765a:	e7e5      	b.n	8007628 <_dtoa_r+0x338>
 800765c:	f000 80d2 	beq.w	8007804 <_dtoa_r+0x514>
 8007660:	427c      	negs	r4, r7
 8007662:	4b92      	ldr	r3, [pc, #584]	@ (80078ac <_dtoa_r+0x5bc>)
 8007664:	4d92      	ldr	r5, [pc, #584]	@ (80078b0 <_dtoa_r+0x5c0>)
 8007666:	f004 020f 	and.w	r2, r4, #15
 800766a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800766e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007676:	f7f8 ffdf 	bl	8000638 <__aeabi_dmul>
 800767a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800767e:	1124      	asrs	r4, r4, #4
 8007680:	2300      	movs	r3, #0
 8007682:	2602      	movs	r6, #2
 8007684:	2c00      	cmp	r4, #0
 8007686:	f040 80b2 	bne.w	80077ee <_dtoa_r+0x4fe>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1d3      	bne.n	8007636 <_dtoa_r+0x346>
 800768e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007690:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 80b7 	beq.w	8007808 <_dtoa_r+0x518>
 800769a:	4b86      	ldr	r3, [pc, #536]	@ (80078b4 <_dtoa_r+0x5c4>)
 800769c:	2200      	movs	r2, #0
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f9 fa3b 	bl	8000b1c <__aeabi_dcmplt>
 80076a6:	2800      	cmp	r0, #0
 80076a8:	f000 80ae 	beq.w	8007808 <_dtoa_r+0x518>
 80076ac:	9b07      	ldr	r3, [sp, #28]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	f000 80aa 	beq.w	8007808 <_dtoa_r+0x518>
 80076b4:	9b00      	ldr	r3, [sp, #0]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	dd37      	ble.n	800772a <_dtoa_r+0x43a>
 80076ba:	1e7b      	subs	r3, r7, #1
 80076bc:	9304      	str	r3, [sp, #16]
 80076be:	4620      	mov	r0, r4
 80076c0:	4b7d      	ldr	r3, [pc, #500]	@ (80078b8 <_dtoa_r+0x5c8>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	4629      	mov	r1, r5
 80076c6:	f7f8 ffb7 	bl	8000638 <__aeabi_dmul>
 80076ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076ce:	9c00      	ldr	r4, [sp, #0]
 80076d0:	3601      	adds	r6, #1
 80076d2:	4630      	mov	r0, r6
 80076d4:	f7f8 ff46 	bl	8000564 <__aeabi_i2d>
 80076d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076dc:	f7f8 ffac 	bl	8000638 <__aeabi_dmul>
 80076e0:	4b76      	ldr	r3, [pc, #472]	@ (80078bc <_dtoa_r+0x5cc>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	f7f8 fdf2 	bl	80002cc <__adddf3>
 80076e8:	4605      	mov	r5, r0
 80076ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076ee:	2c00      	cmp	r4, #0
 80076f0:	f040 808d 	bne.w	800780e <_dtoa_r+0x51e>
 80076f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076f8:	4b71      	ldr	r3, [pc, #452]	@ (80078c0 <_dtoa_r+0x5d0>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	f7f8 fde4 	bl	80002c8 <__aeabi_dsub>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007708:	462a      	mov	r2, r5
 800770a:	4633      	mov	r3, r6
 800770c:	f7f9 fa24 	bl	8000b58 <__aeabi_dcmpgt>
 8007710:	2800      	cmp	r0, #0
 8007712:	f040 828b 	bne.w	8007c2c <_dtoa_r+0x93c>
 8007716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800771a:	462a      	mov	r2, r5
 800771c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007720:	f7f9 f9fc 	bl	8000b1c <__aeabi_dcmplt>
 8007724:	2800      	cmp	r0, #0
 8007726:	f040 8128 	bne.w	800797a <_dtoa_r+0x68a>
 800772a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800772e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007734:	2b00      	cmp	r3, #0
 8007736:	f2c0 815a 	blt.w	80079ee <_dtoa_r+0x6fe>
 800773a:	2f0e      	cmp	r7, #14
 800773c:	f300 8157 	bgt.w	80079ee <_dtoa_r+0x6fe>
 8007740:	4b5a      	ldr	r3, [pc, #360]	@ (80078ac <_dtoa_r+0x5bc>)
 8007742:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007746:	ed93 7b00 	vldr	d7, [r3]
 800774a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800774c:	2b00      	cmp	r3, #0
 800774e:	ed8d 7b00 	vstr	d7, [sp]
 8007752:	da03      	bge.n	800775c <_dtoa_r+0x46c>
 8007754:	9b07      	ldr	r3, [sp, #28]
 8007756:	2b00      	cmp	r3, #0
 8007758:	f340 8101 	ble.w	800795e <_dtoa_r+0x66e>
 800775c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007760:	4656      	mov	r6, sl
 8007762:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f9 f88f 	bl	800088c <__aeabi_ddiv>
 800776e:	f7f9 fa13 	bl	8000b98 <__aeabi_d2iz>
 8007772:	4680      	mov	r8, r0
 8007774:	f7f8 fef6 	bl	8000564 <__aeabi_i2d>
 8007778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800777c:	f7f8 ff5c 	bl	8000638 <__aeabi_dmul>
 8007780:	4602      	mov	r2, r0
 8007782:	460b      	mov	r3, r1
 8007784:	4620      	mov	r0, r4
 8007786:	4629      	mov	r1, r5
 8007788:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800778c:	f7f8 fd9c 	bl	80002c8 <__aeabi_dsub>
 8007790:	f806 4b01 	strb.w	r4, [r6], #1
 8007794:	9d07      	ldr	r5, [sp, #28]
 8007796:	eba6 040a 	sub.w	r4, r6, sl
 800779a:	42a5      	cmp	r5, r4
 800779c:	4602      	mov	r2, r0
 800779e:	460b      	mov	r3, r1
 80077a0:	f040 8117 	bne.w	80079d2 <_dtoa_r+0x6e2>
 80077a4:	f7f8 fd92 	bl	80002cc <__adddf3>
 80077a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077ac:	4604      	mov	r4, r0
 80077ae:	460d      	mov	r5, r1
 80077b0:	f7f9 f9d2 	bl	8000b58 <__aeabi_dcmpgt>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	f040 80f9 	bne.w	80079ac <_dtoa_r+0x6bc>
 80077ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	f7f9 f9a1 	bl	8000b08 <__aeabi_dcmpeq>
 80077c6:	b118      	cbz	r0, 80077d0 <_dtoa_r+0x4e0>
 80077c8:	f018 0f01 	tst.w	r8, #1
 80077cc:	f040 80ee 	bne.w	80079ac <_dtoa_r+0x6bc>
 80077d0:	4649      	mov	r1, r9
 80077d2:	4658      	mov	r0, fp
 80077d4:	f000 fc90 	bl	80080f8 <_Bfree>
 80077d8:	2300      	movs	r3, #0
 80077da:	7033      	strb	r3, [r6, #0]
 80077dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80077de:	3701      	adds	r7, #1
 80077e0:	601f      	str	r7, [r3, #0]
 80077e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	f000 831d 	beq.w	8007e24 <_dtoa_r+0xb34>
 80077ea:	601e      	str	r6, [r3, #0]
 80077ec:	e31a      	b.n	8007e24 <_dtoa_r+0xb34>
 80077ee:	07e2      	lsls	r2, r4, #31
 80077f0:	d505      	bpl.n	80077fe <_dtoa_r+0x50e>
 80077f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077f6:	f7f8 ff1f 	bl	8000638 <__aeabi_dmul>
 80077fa:	3601      	adds	r6, #1
 80077fc:	2301      	movs	r3, #1
 80077fe:	1064      	asrs	r4, r4, #1
 8007800:	3508      	adds	r5, #8
 8007802:	e73f      	b.n	8007684 <_dtoa_r+0x394>
 8007804:	2602      	movs	r6, #2
 8007806:	e742      	b.n	800768e <_dtoa_r+0x39e>
 8007808:	9c07      	ldr	r4, [sp, #28]
 800780a:	9704      	str	r7, [sp, #16]
 800780c:	e761      	b.n	80076d2 <_dtoa_r+0x3e2>
 800780e:	4b27      	ldr	r3, [pc, #156]	@ (80078ac <_dtoa_r+0x5bc>)
 8007810:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007812:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007816:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800781a:	4454      	add	r4, sl
 800781c:	2900      	cmp	r1, #0
 800781e:	d053      	beq.n	80078c8 <_dtoa_r+0x5d8>
 8007820:	4928      	ldr	r1, [pc, #160]	@ (80078c4 <_dtoa_r+0x5d4>)
 8007822:	2000      	movs	r0, #0
 8007824:	f7f9 f832 	bl	800088c <__aeabi_ddiv>
 8007828:	4633      	mov	r3, r6
 800782a:	462a      	mov	r2, r5
 800782c:	f7f8 fd4c 	bl	80002c8 <__aeabi_dsub>
 8007830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007834:	4656      	mov	r6, sl
 8007836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800783a:	f7f9 f9ad 	bl	8000b98 <__aeabi_d2iz>
 800783e:	4605      	mov	r5, r0
 8007840:	f7f8 fe90 	bl	8000564 <__aeabi_i2d>
 8007844:	4602      	mov	r2, r0
 8007846:	460b      	mov	r3, r1
 8007848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784c:	f7f8 fd3c 	bl	80002c8 <__aeabi_dsub>
 8007850:	3530      	adds	r5, #48	@ 0x30
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800785a:	f806 5b01 	strb.w	r5, [r6], #1
 800785e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007862:	f7f9 f95b 	bl	8000b1c <__aeabi_dcmplt>
 8007866:	2800      	cmp	r0, #0
 8007868:	d171      	bne.n	800794e <_dtoa_r+0x65e>
 800786a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800786e:	4911      	ldr	r1, [pc, #68]	@ (80078b4 <_dtoa_r+0x5c4>)
 8007870:	2000      	movs	r0, #0
 8007872:	f7f8 fd29 	bl	80002c8 <__aeabi_dsub>
 8007876:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800787a:	f7f9 f94f 	bl	8000b1c <__aeabi_dcmplt>
 800787e:	2800      	cmp	r0, #0
 8007880:	f040 8095 	bne.w	80079ae <_dtoa_r+0x6be>
 8007884:	42a6      	cmp	r6, r4
 8007886:	f43f af50 	beq.w	800772a <_dtoa_r+0x43a>
 800788a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800788e:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <_dtoa_r+0x5c8>)
 8007890:	2200      	movs	r2, #0
 8007892:	f7f8 fed1 	bl	8000638 <__aeabi_dmul>
 8007896:	4b08      	ldr	r3, [pc, #32]	@ (80078b8 <_dtoa_r+0x5c8>)
 8007898:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800789c:	2200      	movs	r2, #0
 800789e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078a2:	f7f8 fec9 	bl	8000638 <__aeabi_dmul>
 80078a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078aa:	e7c4      	b.n	8007836 <_dtoa_r+0x546>
 80078ac:	0800ab50 	.word	0x0800ab50
 80078b0:	0800ab28 	.word	0x0800ab28
 80078b4:	3ff00000 	.word	0x3ff00000
 80078b8:	40240000 	.word	0x40240000
 80078bc:	401c0000 	.word	0x401c0000
 80078c0:	40140000 	.word	0x40140000
 80078c4:	3fe00000 	.word	0x3fe00000
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	f7f8 feb4 	bl	8000638 <__aeabi_dmul>
 80078d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80078d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80078d6:	4656      	mov	r6, sl
 80078d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078dc:	f7f9 f95c 	bl	8000b98 <__aeabi_d2iz>
 80078e0:	4605      	mov	r5, r0
 80078e2:	f7f8 fe3f 	bl	8000564 <__aeabi_i2d>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ee:	f7f8 fceb 	bl	80002c8 <__aeabi_dsub>
 80078f2:	3530      	adds	r5, #48	@ 0x30
 80078f4:	f806 5b01 	strb.w	r5, [r6], #1
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	42a6      	cmp	r6, r4
 80078fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	d124      	bne.n	8007952 <_dtoa_r+0x662>
 8007908:	4bac      	ldr	r3, [pc, #688]	@ (8007bbc <_dtoa_r+0x8cc>)
 800790a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800790e:	f7f8 fcdd 	bl	80002cc <__adddf3>
 8007912:	4602      	mov	r2, r0
 8007914:	460b      	mov	r3, r1
 8007916:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800791a:	f7f9 f91d 	bl	8000b58 <__aeabi_dcmpgt>
 800791e:	2800      	cmp	r0, #0
 8007920:	d145      	bne.n	80079ae <_dtoa_r+0x6be>
 8007922:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007926:	49a5      	ldr	r1, [pc, #660]	@ (8007bbc <_dtoa_r+0x8cc>)
 8007928:	2000      	movs	r0, #0
 800792a:	f7f8 fccd 	bl	80002c8 <__aeabi_dsub>
 800792e:	4602      	mov	r2, r0
 8007930:	460b      	mov	r3, r1
 8007932:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007936:	f7f9 f8f1 	bl	8000b1c <__aeabi_dcmplt>
 800793a:	2800      	cmp	r0, #0
 800793c:	f43f aef5 	beq.w	800772a <_dtoa_r+0x43a>
 8007940:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007942:	1e73      	subs	r3, r6, #1
 8007944:	9315      	str	r3, [sp, #84]	@ 0x54
 8007946:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800794a:	2b30      	cmp	r3, #48	@ 0x30
 800794c:	d0f8      	beq.n	8007940 <_dtoa_r+0x650>
 800794e:	9f04      	ldr	r7, [sp, #16]
 8007950:	e73e      	b.n	80077d0 <_dtoa_r+0x4e0>
 8007952:	4b9b      	ldr	r3, [pc, #620]	@ (8007bc0 <_dtoa_r+0x8d0>)
 8007954:	f7f8 fe70 	bl	8000638 <__aeabi_dmul>
 8007958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800795c:	e7bc      	b.n	80078d8 <_dtoa_r+0x5e8>
 800795e:	d10c      	bne.n	800797a <_dtoa_r+0x68a>
 8007960:	4b98      	ldr	r3, [pc, #608]	@ (8007bc4 <_dtoa_r+0x8d4>)
 8007962:	2200      	movs	r2, #0
 8007964:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007968:	f7f8 fe66 	bl	8000638 <__aeabi_dmul>
 800796c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007970:	f7f9 f8e8 	bl	8000b44 <__aeabi_dcmpge>
 8007974:	2800      	cmp	r0, #0
 8007976:	f000 8157 	beq.w	8007c28 <_dtoa_r+0x938>
 800797a:	2400      	movs	r4, #0
 800797c:	4625      	mov	r5, r4
 800797e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007980:	43db      	mvns	r3, r3
 8007982:	9304      	str	r3, [sp, #16]
 8007984:	4656      	mov	r6, sl
 8007986:	2700      	movs	r7, #0
 8007988:	4621      	mov	r1, r4
 800798a:	4658      	mov	r0, fp
 800798c:	f000 fbb4 	bl	80080f8 <_Bfree>
 8007990:	2d00      	cmp	r5, #0
 8007992:	d0dc      	beq.n	800794e <_dtoa_r+0x65e>
 8007994:	b12f      	cbz	r7, 80079a2 <_dtoa_r+0x6b2>
 8007996:	42af      	cmp	r7, r5
 8007998:	d003      	beq.n	80079a2 <_dtoa_r+0x6b2>
 800799a:	4639      	mov	r1, r7
 800799c:	4658      	mov	r0, fp
 800799e:	f000 fbab 	bl	80080f8 <_Bfree>
 80079a2:	4629      	mov	r1, r5
 80079a4:	4658      	mov	r0, fp
 80079a6:	f000 fba7 	bl	80080f8 <_Bfree>
 80079aa:	e7d0      	b.n	800794e <_dtoa_r+0x65e>
 80079ac:	9704      	str	r7, [sp, #16]
 80079ae:	4633      	mov	r3, r6
 80079b0:	461e      	mov	r6, r3
 80079b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079b6:	2a39      	cmp	r2, #57	@ 0x39
 80079b8:	d107      	bne.n	80079ca <_dtoa_r+0x6da>
 80079ba:	459a      	cmp	sl, r3
 80079bc:	d1f8      	bne.n	80079b0 <_dtoa_r+0x6c0>
 80079be:	9a04      	ldr	r2, [sp, #16]
 80079c0:	3201      	adds	r2, #1
 80079c2:	9204      	str	r2, [sp, #16]
 80079c4:	2230      	movs	r2, #48	@ 0x30
 80079c6:	f88a 2000 	strb.w	r2, [sl]
 80079ca:	781a      	ldrb	r2, [r3, #0]
 80079cc:	3201      	adds	r2, #1
 80079ce:	701a      	strb	r2, [r3, #0]
 80079d0:	e7bd      	b.n	800794e <_dtoa_r+0x65e>
 80079d2:	4b7b      	ldr	r3, [pc, #492]	@ (8007bc0 <_dtoa_r+0x8d0>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	f7f8 fe2f 	bl	8000638 <__aeabi_dmul>
 80079da:	2200      	movs	r2, #0
 80079dc:	2300      	movs	r3, #0
 80079de:	4604      	mov	r4, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	f7f9 f891 	bl	8000b08 <__aeabi_dcmpeq>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	f43f aebb 	beq.w	8007762 <_dtoa_r+0x472>
 80079ec:	e6f0      	b.n	80077d0 <_dtoa_r+0x4e0>
 80079ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80079f0:	2a00      	cmp	r2, #0
 80079f2:	f000 80db 	beq.w	8007bac <_dtoa_r+0x8bc>
 80079f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079f8:	2a01      	cmp	r2, #1
 80079fa:	f300 80bf 	bgt.w	8007b7c <_dtoa_r+0x88c>
 80079fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007a00:	2a00      	cmp	r2, #0
 8007a02:	f000 80b7 	beq.w	8007b74 <_dtoa_r+0x884>
 8007a06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007a0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a0c:	4646      	mov	r6, r8
 8007a0e:	9a08      	ldr	r2, [sp, #32]
 8007a10:	2101      	movs	r1, #1
 8007a12:	441a      	add	r2, r3
 8007a14:	4658      	mov	r0, fp
 8007a16:	4498      	add	r8, r3
 8007a18:	9208      	str	r2, [sp, #32]
 8007a1a:	f000 fc6b 	bl	80082f4 <__i2b>
 8007a1e:	4605      	mov	r5, r0
 8007a20:	b15e      	cbz	r6, 8007a3a <_dtoa_r+0x74a>
 8007a22:	9b08      	ldr	r3, [sp, #32]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	dd08      	ble.n	8007a3a <_dtoa_r+0x74a>
 8007a28:	42b3      	cmp	r3, r6
 8007a2a:	9a08      	ldr	r2, [sp, #32]
 8007a2c:	bfa8      	it	ge
 8007a2e:	4633      	movge	r3, r6
 8007a30:	eba8 0803 	sub.w	r8, r8, r3
 8007a34:	1af6      	subs	r6, r6, r3
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	9308      	str	r3, [sp, #32]
 8007a3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a3c:	b1f3      	cbz	r3, 8007a7c <_dtoa_r+0x78c>
 8007a3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 80b7 	beq.w	8007bb4 <_dtoa_r+0x8c4>
 8007a46:	b18c      	cbz	r4, 8007a6c <_dtoa_r+0x77c>
 8007a48:	4629      	mov	r1, r5
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	4658      	mov	r0, fp
 8007a4e:	f000 fd11 	bl	8008474 <__pow5mult>
 8007a52:	464a      	mov	r2, r9
 8007a54:	4601      	mov	r1, r0
 8007a56:	4605      	mov	r5, r0
 8007a58:	4658      	mov	r0, fp
 8007a5a:	f000 fc61 	bl	8008320 <__multiply>
 8007a5e:	4649      	mov	r1, r9
 8007a60:	9004      	str	r0, [sp, #16]
 8007a62:	4658      	mov	r0, fp
 8007a64:	f000 fb48 	bl	80080f8 <_Bfree>
 8007a68:	9b04      	ldr	r3, [sp, #16]
 8007a6a:	4699      	mov	r9, r3
 8007a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a6e:	1b1a      	subs	r2, r3, r4
 8007a70:	d004      	beq.n	8007a7c <_dtoa_r+0x78c>
 8007a72:	4649      	mov	r1, r9
 8007a74:	4658      	mov	r0, fp
 8007a76:	f000 fcfd 	bl	8008474 <__pow5mult>
 8007a7a:	4681      	mov	r9, r0
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	4658      	mov	r0, fp
 8007a80:	f000 fc38 	bl	80082f4 <__i2b>
 8007a84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a86:	4604      	mov	r4, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 81cf 	beq.w	8007e2c <_dtoa_r+0xb3c>
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4601      	mov	r1, r0
 8007a92:	4658      	mov	r0, fp
 8007a94:	f000 fcee 	bl	8008474 <__pow5mult>
 8007a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	4604      	mov	r4, r0
 8007a9e:	f300 8095 	bgt.w	8007bcc <_dtoa_r+0x8dc>
 8007aa2:	9b02      	ldr	r3, [sp, #8]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	f040 8087 	bne.w	8007bb8 <_dtoa_r+0x8c8>
 8007aaa:	9b03      	ldr	r3, [sp, #12]
 8007aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f040 8089 	bne.w	8007bc8 <_dtoa_r+0x8d8>
 8007ab6:	9b03      	ldr	r3, [sp, #12]
 8007ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007abc:	0d1b      	lsrs	r3, r3, #20
 8007abe:	051b      	lsls	r3, r3, #20
 8007ac0:	b12b      	cbz	r3, 8007ace <_dtoa_r+0x7de>
 8007ac2:	9b08      	ldr	r3, [sp, #32]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	9308      	str	r3, [sp, #32]
 8007ac8:	f108 0801 	add.w	r8, r8, #1
 8007acc:	2301      	movs	r3, #1
 8007ace:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ad0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 81b0 	beq.w	8007e38 <_dtoa_r+0xb48>
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ade:	6918      	ldr	r0, [r3, #16]
 8007ae0:	f000 fbbc 	bl	800825c <__hi0bits>
 8007ae4:	f1c0 0020 	rsb	r0, r0, #32
 8007ae8:	9b08      	ldr	r3, [sp, #32]
 8007aea:	4418      	add	r0, r3
 8007aec:	f010 001f 	ands.w	r0, r0, #31
 8007af0:	d077      	beq.n	8007be2 <_dtoa_r+0x8f2>
 8007af2:	f1c0 0320 	rsb	r3, r0, #32
 8007af6:	2b04      	cmp	r3, #4
 8007af8:	dd6b      	ble.n	8007bd2 <_dtoa_r+0x8e2>
 8007afa:	9b08      	ldr	r3, [sp, #32]
 8007afc:	f1c0 001c 	rsb	r0, r0, #28
 8007b00:	4403      	add	r3, r0
 8007b02:	4480      	add	r8, r0
 8007b04:	4406      	add	r6, r0
 8007b06:	9308      	str	r3, [sp, #32]
 8007b08:	f1b8 0f00 	cmp.w	r8, #0
 8007b0c:	dd05      	ble.n	8007b1a <_dtoa_r+0x82a>
 8007b0e:	4649      	mov	r1, r9
 8007b10:	4642      	mov	r2, r8
 8007b12:	4658      	mov	r0, fp
 8007b14:	f000 fd08 	bl	8008528 <__lshift>
 8007b18:	4681      	mov	r9, r0
 8007b1a:	9b08      	ldr	r3, [sp, #32]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	dd05      	ble.n	8007b2c <_dtoa_r+0x83c>
 8007b20:	4621      	mov	r1, r4
 8007b22:	461a      	mov	r2, r3
 8007b24:	4658      	mov	r0, fp
 8007b26:	f000 fcff 	bl	8008528 <__lshift>
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d059      	beq.n	8007be6 <_dtoa_r+0x8f6>
 8007b32:	4621      	mov	r1, r4
 8007b34:	4648      	mov	r0, r9
 8007b36:	f000 fd63 	bl	8008600 <__mcmp>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	da53      	bge.n	8007be6 <_dtoa_r+0x8f6>
 8007b3e:	1e7b      	subs	r3, r7, #1
 8007b40:	9304      	str	r3, [sp, #16]
 8007b42:	4649      	mov	r1, r9
 8007b44:	2300      	movs	r3, #0
 8007b46:	220a      	movs	r2, #10
 8007b48:	4658      	mov	r0, fp
 8007b4a:	f000 faf7 	bl	800813c <__multadd>
 8007b4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b50:	4681      	mov	r9, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 8172 	beq.w	8007e3c <_dtoa_r+0xb4c>
 8007b58:	2300      	movs	r3, #0
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	220a      	movs	r2, #10
 8007b5e:	4658      	mov	r0, fp
 8007b60:	f000 faec 	bl	800813c <__multadd>
 8007b64:	9b00      	ldr	r3, [sp, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	4605      	mov	r5, r0
 8007b6a:	dc67      	bgt.n	8007c3c <_dtoa_r+0x94c>
 8007b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b6e:	2b02      	cmp	r3, #2
 8007b70:	dc41      	bgt.n	8007bf6 <_dtoa_r+0x906>
 8007b72:	e063      	b.n	8007c3c <_dtoa_r+0x94c>
 8007b74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007b76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b7a:	e746      	b.n	8007a0a <_dtoa_r+0x71a>
 8007b7c:	9b07      	ldr	r3, [sp, #28]
 8007b7e:	1e5c      	subs	r4, r3, #1
 8007b80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b82:	42a3      	cmp	r3, r4
 8007b84:	bfbf      	itttt	lt
 8007b86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007b88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007b8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007b8c:	1ae3      	sublt	r3, r4, r3
 8007b8e:	bfb4      	ite	lt
 8007b90:	18d2      	addlt	r2, r2, r3
 8007b92:	1b1c      	subge	r4, r3, r4
 8007b94:	9b07      	ldr	r3, [sp, #28]
 8007b96:	bfbc      	itt	lt
 8007b98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007b9a:	2400      	movlt	r4, #0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	bfb5      	itete	lt
 8007ba0:	eba8 0603 	sublt.w	r6, r8, r3
 8007ba4:	9b07      	ldrge	r3, [sp, #28]
 8007ba6:	2300      	movlt	r3, #0
 8007ba8:	4646      	movge	r6, r8
 8007baa:	e730      	b.n	8007a0e <_dtoa_r+0x71e>
 8007bac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007bae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007bb0:	4646      	mov	r6, r8
 8007bb2:	e735      	b.n	8007a20 <_dtoa_r+0x730>
 8007bb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bb6:	e75c      	b.n	8007a72 <_dtoa_r+0x782>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	e788      	b.n	8007ace <_dtoa_r+0x7de>
 8007bbc:	3fe00000 	.word	0x3fe00000
 8007bc0:	40240000 	.word	0x40240000
 8007bc4:	40140000 	.word	0x40140000
 8007bc8:	9b02      	ldr	r3, [sp, #8]
 8007bca:	e780      	b.n	8007ace <_dtoa_r+0x7de>
 8007bcc:	2300      	movs	r3, #0
 8007bce:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd0:	e782      	b.n	8007ad8 <_dtoa_r+0x7e8>
 8007bd2:	d099      	beq.n	8007b08 <_dtoa_r+0x818>
 8007bd4:	9a08      	ldr	r2, [sp, #32]
 8007bd6:	331c      	adds	r3, #28
 8007bd8:	441a      	add	r2, r3
 8007bda:	4498      	add	r8, r3
 8007bdc:	441e      	add	r6, r3
 8007bde:	9208      	str	r2, [sp, #32]
 8007be0:	e792      	b.n	8007b08 <_dtoa_r+0x818>
 8007be2:	4603      	mov	r3, r0
 8007be4:	e7f6      	b.n	8007bd4 <_dtoa_r+0x8e4>
 8007be6:	9b07      	ldr	r3, [sp, #28]
 8007be8:	9704      	str	r7, [sp, #16]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	dc20      	bgt.n	8007c30 <_dtoa_r+0x940>
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	dd1e      	ble.n	8007c34 <_dtoa_r+0x944>
 8007bf6:	9b00      	ldr	r3, [sp, #0]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f47f aec0 	bne.w	800797e <_dtoa_r+0x68e>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	2205      	movs	r2, #5
 8007c02:	4658      	mov	r0, fp
 8007c04:	f000 fa9a 	bl	800813c <__multadd>
 8007c08:	4601      	mov	r1, r0
 8007c0a:	4604      	mov	r4, r0
 8007c0c:	4648      	mov	r0, r9
 8007c0e:	f000 fcf7 	bl	8008600 <__mcmp>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	f77f aeb3 	ble.w	800797e <_dtoa_r+0x68e>
 8007c18:	4656      	mov	r6, sl
 8007c1a:	2331      	movs	r3, #49	@ 0x31
 8007c1c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c20:	9b04      	ldr	r3, [sp, #16]
 8007c22:	3301      	adds	r3, #1
 8007c24:	9304      	str	r3, [sp, #16]
 8007c26:	e6ae      	b.n	8007986 <_dtoa_r+0x696>
 8007c28:	9c07      	ldr	r4, [sp, #28]
 8007c2a:	9704      	str	r7, [sp, #16]
 8007c2c:	4625      	mov	r5, r4
 8007c2e:	e7f3      	b.n	8007c18 <_dtoa_r+0x928>
 8007c30:	9b07      	ldr	r3, [sp, #28]
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8104 	beq.w	8007e44 <_dtoa_r+0xb54>
 8007c3c:	2e00      	cmp	r6, #0
 8007c3e:	dd05      	ble.n	8007c4c <_dtoa_r+0x95c>
 8007c40:	4629      	mov	r1, r5
 8007c42:	4632      	mov	r2, r6
 8007c44:	4658      	mov	r0, fp
 8007c46:	f000 fc6f 	bl	8008528 <__lshift>
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d05a      	beq.n	8007d08 <_dtoa_r+0xa18>
 8007c52:	6869      	ldr	r1, [r5, #4]
 8007c54:	4658      	mov	r0, fp
 8007c56:	f000 fa0f 	bl	8008078 <_Balloc>
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	b928      	cbnz	r0, 8007c6a <_dtoa_r+0x97a>
 8007c5e:	4b84      	ldr	r3, [pc, #528]	@ (8007e70 <_dtoa_r+0xb80>)
 8007c60:	4602      	mov	r2, r0
 8007c62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c66:	f7ff bb5a 	b.w	800731e <_dtoa_r+0x2e>
 8007c6a:	692a      	ldr	r2, [r5, #16]
 8007c6c:	3202      	adds	r2, #2
 8007c6e:	0092      	lsls	r2, r2, #2
 8007c70:	f105 010c 	add.w	r1, r5, #12
 8007c74:	300c      	adds	r0, #12
 8007c76:	f002 f94b 	bl	8009f10 <memcpy>
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4658      	mov	r0, fp
 8007c80:	f000 fc52 	bl	8008528 <__lshift>
 8007c84:	f10a 0301 	add.w	r3, sl, #1
 8007c88:	9307      	str	r3, [sp, #28]
 8007c8a:	9b00      	ldr	r3, [sp, #0]
 8007c8c:	4453      	add	r3, sl
 8007c8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c90:	9b02      	ldr	r3, [sp, #8]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	462f      	mov	r7, r5
 8007c98:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	9b07      	ldr	r3, [sp, #28]
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	4648      	mov	r0, r9
 8007ca4:	9300      	str	r3, [sp, #0]
 8007ca6:	f7ff fa99 	bl	80071dc <quorem>
 8007caa:	4639      	mov	r1, r7
 8007cac:	9002      	str	r0, [sp, #8]
 8007cae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007cb2:	4648      	mov	r0, r9
 8007cb4:	f000 fca4 	bl	8008600 <__mcmp>
 8007cb8:	462a      	mov	r2, r5
 8007cba:	9008      	str	r0, [sp, #32]
 8007cbc:	4621      	mov	r1, r4
 8007cbe:	4658      	mov	r0, fp
 8007cc0:	f000 fcba 	bl	8008638 <__mdiff>
 8007cc4:	68c2      	ldr	r2, [r0, #12]
 8007cc6:	4606      	mov	r6, r0
 8007cc8:	bb02      	cbnz	r2, 8007d0c <_dtoa_r+0xa1c>
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4648      	mov	r0, r9
 8007cce:	f000 fc97 	bl	8008600 <__mcmp>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4658      	mov	r0, fp
 8007cd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8007cda:	f000 fa0d 	bl	80080f8 <_Bfree>
 8007cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007ce2:	9e07      	ldr	r6, [sp, #28]
 8007ce4:	ea43 0102 	orr.w	r1, r3, r2
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cea:	4319      	orrs	r1, r3
 8007cec:	d110      	bne.n	8007d10 <_dtoa_r+0xa20>
 8007cee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007cf2:	d029      	beq.n	8007d48 <_dtoa_r+0xa58>
 8007cf4:	9b08      	ldr	r3, [sp, #32]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	dd02      	ble.n	8007d00 <_dtoa_r+0xa10>
 8007cfa:	9b02      	ldr	r3, [sp, #8]
 8007cfc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007d00:	9b00      	ldr	r3, [sp, #0]
 8007d02:	f883 8000 	strb.w	r8, [r3]
 8007d06:	e63f      	b.n	8007988 <_dtoa_r+0x698>
 8007d08:	4628      	mov	r0, r5
 8007d0a:	e7bb      	b.n	8007c84 <_dtoa_r+0x994>
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	e7e1      	b.n	8007cd4 <_dtoa_r+0x9e4>
 8007d10:	9b08      	ldr	r3, [sp, #32]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	db04      	blt.n	8007d20 <_dtoa_r+0xa30>
 8007d16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007d1c:	430b      	orrs	r3, r1
 8007d1e:	d120      	bne.n	8007d62 <_dtoa_r+0xa72>
 8007d20:	2a00      	cmp	r2, #0
 8007d22:	dded      	ble.n	8007d00 <_dtoa_r+0xa10>
 8007d24:	4649      	mov	r1, r9
 8007d26:	2201      	movs	r2, #1
 8007d28:	4658      	mov	r0, fp
 8007d2a:	f000 fbfd 	bl	8008528 <__lshift>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4681      	mov	r9, r0
 8007d32:	f000 fc65 	bl	8008600 <__mcmp>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	dc03      	bgt.n	8007d42 <_dtoa_r+0xa52>
 8007d3a:	d1e1      	bne.n	8007d00 <_dtoa_r+0xa10>
 8007d3c:	f018 0f01 	tst.w	r8, #1
 8007d40:	d0de      	beq.n	8007d00 <_dtoa_r+0xa10>
 8007d42:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d46:	d1d8      	bne.n	8007cfa <_dtoa_r+0xa0a>
 8007d48:	9a00      	ldr	r2, [sp, #0]
 8007d4a:	2339      	movs	r3, #57	@ 0x39
 8007d4c:	7013      	strb	r3, [r2, #0]
 8007d4e:	4633      	mov	r3, r6
 8007d50:	461e      	mov	r6, r3
 8007d52:	3b01      	subs	r3, #1
 8007d54:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d58:	2a39      	cmp	r2, #57	@ 0x39
 8007d5a:	d052      	beq.n	8007e02 <_dtoa_r+0xb12>
 8007d5c:	3201      	adds	r2, #1
 8007d5e:	701a      	strb	r2, [r3, #0]
 8007d60:	e612      	b.n	8007988 <_dtoa_r+0x698>
 8007d62:	2a00      	cmp	r2, #0
 8007d64:	dd07      	ble.n	8007d76 <_dtoa_r+0xa86>
 8007d66:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007d6a:	d0ed      	beq.n	8007d48 <_dtoa_r+0xa58>
 8007d6c:	9a00      	ldr	r2, [sp, #0]
 8007d6e:	f108 0301 	add.w	r3, r8, #1
 8007d72:	7013      	strb	r3, [r2, #0]
 8007d74:	e608      	b.n	8007988 <_dtoa_r+0x698>
 8007d76:	9b07      	ldr	r3, [sp, #28]
 8007d78:	9a07      	ldr	r2, [sp, #28]
 8007d7a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d028      	beq.n	8007dd6 <_dtoa_r+0xae6>
 8007d84:	4649      	mov	r1, r9
 8007d86:	2300      	movs	r3, #0
 8007d88:	220a      	movs	r2, #10
 8007d8a:	4658      	mov	r0, fp
 8007d8c:	f000 f9d6 	bl	800813c <__multadd>
 8007d90:	42af      	cmp	r7, r5
 8007d92:	4681      	mov	r9, r0
 8007d94:	f04f 0300 	mov.w	r3, #0
 8007d98:	f04f 020a 	mov.w	r2, #10
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4658      	mov	r0, fp
 8007da0:	d107      	bne.n	8007db2 <_dtoa_r+0xac2>
 8007da2:	f000 f9cb 	bl	800813c <__multadd>
 8007da6:	4607      	mov	r7, r0
 8007da8:	4605      	mov	r5, r0
 8007daa:	9b07      	ldr	r3, [sp, #28]
 8007dac:	3301      	adds	r3, #1
 8007dae:	9307      	str	r3, [sp, #28]
 8007db0:	e774      	b.n	8007c9c <_dtoa_r+0x9ac>
 8007db2:	f000 f9c3 	bl	800813c <__multadd>
 8007db6:	4629      	mov	r1, r5
 8007db8:	4607      	mov	r7, r0
 8007dba:	2300      	movs	r3, #0
 8007dbc:	220a      	movs	r2, #10
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	f000 f9bc 	bl	800813c <__multadd>
 8007dc4:	4605      	mov	r5, r0
 8007dc6:	e7f0      	b.n	8007daa <_dtoa_r+0xaba>
 8007dc8:	9b00      	ldr	r3, [sp, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	bfcc      	ite	gt
 8007dce:	461e      	movgt	r6, r3
 8007dd0:	2601      	movle	r6, #1
 8007dd2:	4456      	add	r6, sl
 8007dd4:	2700      	movs	r7, #0
 8007dd6:	4649      	mov	r1, r9
 8007dd8:	2201      	movs	r2, #1
 8007dda:	4658      	mov	r0, fp
 8007ddc:	f000 fba4 	bl	8008528 <__lshift>
 8007de0:	4621      	mov	r1, r4
 8007de2:	4681      	mov	r9, r0
 8007de4:	f000 fc0c 	bl	8008600 <__mcmp>
 8007de8:	2800      	cmp	r0, #0
 8007dea:	dcb0      	bgt.n	8007d4e <_dtoa_r+0xa5e>
 8007dec:	d102      	bne.n	8007df4 <_dtoa_r+0xb04>
 8007dee:	f018 0f01 	tst.w	r8, #1
 8007df2:	d1ac      	bne.n	8007d4e <_dtoa_r+0xa5e>
 8007df4:	4633      	mov	r3, r6
 8007df6:	461e      	mov	r6, r3
 8007df8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dfc:	2a30      	cmp	r2, #48	@ 0x30
 8007dfe:	d0fa      	beq.n	8007df6 <_dtoa_r+0xb06>
 8007e00:	e5c2      	b.n	8007988 <_dtoa_r+0x698>
 8007e02:	459a      	cmp	sl, r3
 8007e04:	d1a4      	bne.n	8007d50 <_dtoa_r+0xa60>
 8007e06:	9b04      	ldr	r3, [sp, #16]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	9304      	str	r3, [sp, #16]
 8007e0c:	2331      	movs	r3, #49	@ 0x31
 8007e0e:	f88a 3000 	strb.w	r3, [sl]
 8007e12:	e5b9      	b.n	8007988 <_dtoa_r+0x698>
 8007e14:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e16:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007e74 <_dtoa_r+0xb84>
 8007e1a:	b11b      	cbz	r3, 8007e24 <_dtoa_r+0xb34>
 8007e1c:	f10a 0308 	add.w	r3, sl, #8
 8007e20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007e22:	6013      	str	r3, [r2, #0]
 8007e24:	4650      	mov	r0, sl
 8007e26:	b019      	add	sp, #100	@ 0x64
 8007e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	f77f ae37 	ble.w	8007aa2 <_dtoa_r+0x7b2>
 8007e34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e38:	2001      	movs	r0, #1
 8007e3a:	e655      	b.n	8007ae8 <_dtoa_r+0x7f8>
 8007e3c:	9b00      	ldr	r3, [sp, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f77f aed6 	ble.w	8007bf0 <_dtoa_r+0x900>
 8007e44:	4656      	mov	r6, sl
 8007e46:	4621      	mov	r1, r4
 8007e48:	4648      	mov	r0, r9
 8007e4a:	f7ff f9c7 	bl	80071dc <quorem>
 8007e4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e52:	f806 8b01 	strb.w	r8, [r6], #1
 8007e56:	9b00      	ldr	r3, [sp, #0]
 8007e58:	eba6 020a 	sub.w	r2, r6, sl
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	ddb3      	ble.n	8007dc8 <_dtoa_r+0xad8>
 8007e60:	4649      	mov	r1, r9
 8007e62:	2300      	movs	r3, #0
 8007e64:	220a      	movs	r2, #10
 8007e66:	4658      	mov	r0, fp
 8007e68:	f000 f968 	bl	800813c <__multadd>
 8007e6c:	4681      	mov	r9, r0
 8007e6e:	e7ea      	b.n	8007e46 <_dtoa_r+0xb56>
 8007e70:	0800aab1 	.word	0x0800aab1
 8007e74:	0800aa35 	.word	0x0800aa35

08007e78 <_free_r>:
 8007e78:	b538      	push	{r3, r4, r5, lr}
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	2900      	cmp	r1, #0
 8007e7e:	d041      	beq.n	8007f04 <_free_r+0x8c>
 8007e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e84:	1f0c      	subs	r4, r1, #4
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	bfb8      	it	lt
 8007e8a:	18e4      	addlt	r4, r4, r3
 8007e8c:	f000 f8e8 	bl	8008060 <__malloc_lock>
 8007e90:	4a1d      	ldr	r2, [pc, #116]	@ (8007f08 <_free_r+0x90>)
 8007e92:	6813      	ldr	r3, [r2, #0]
 8007e94:	b933      	cbnz	r3, 8007ea4 <_free_r+0x2c>
 8007e96:	6063      	str	r3, [r4, #4]
 8007e98:	6014      	str	r4, [r2, #0]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ea0:	f000 b8e4 	b.w	800806c <__malloc_unlock>
 8007ea4:	42a3      	cmp	r3, r4
 8007ea6:	d908      	bls.n	8007eba <_free_r+0x42>
 8007ea8:	6820      	ldr	r0, [r4, #0]
 8007eaa:	1821      	adds	r1, r4, r0
 8007eac:	428b      	cmp	r3, r1
 8007eae:	bf01      	itttt	eq
 8007eb0:	6819      	ldreq	r1, [r3, #0]
 8007eb2:	685b      	ldreq	r3, [r3, #4]
 8007eb4:	1809      	addeq	r1, r1, r0
 8007eb6:	6021      	streq	r1, [r4, #0]
 8007eb8:	e7ed      	b.n	8007e96 <_free_r+0x1e>
 8007eba:	461a      	mov	r2, r3
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	b10b      	cbz	r3, 8007ec4 <_free_r+0x4c>
 8007ec0:	42a3      	cmp	r3, r4
 8007ec2:	d9fa      	bls.n	8007eba <_free_r+0x42>
 8007ec4:	6811      	ldr	r1, [r2, #0]
 8007ec6:	1850      	adds	r0, r2, r1
 8007ec8:	42a0      	cmp	r0, r4
 8007eca:	d10b      	bne.n	8007ee4 <_free_r+0x6c>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	4401      	add	r1, r0
 8007ed0:	1850      	adds	r0, r2, r1
 8007ed2:	4283      	cmp	r3, r0
 8007ed4:	6011      	str	r1, [r2, #0]
 8007ed6:	d1e0      	bne.n	8007e9a <_free_r+0x22>
 8007ed8:	6818      	ldr	r0, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	6053      	str	r3, [r2, #4]
 8007ede:	4408      	add	r0, r1
 8007ee0:	6010      	str	r0, [r2, #0]
 8007ee2:	e7da      	b.n	8007e9a <_free_r+0x22>
 8007ee4:	d902      	bls.n	8007eec <_free_r+0x74>
 8007ee6:	230c      	movs	r3, #12
 8007ee8:	602b      	str	r3, [r5, #0]
 8007eea:	e7d6      	b.n	8007e9a <_free_r+0x22>
 8007eec:	6820      	ldr	r0, [r4, #0]
 8007eee:	1821      	adds	r1, r4, r0
 8007ef0:	428b      	cmp	r3, r1
 8007ef2:	bf04      	itt	eq
 8007ef4:	6819      	ldreq	r1, [r3, #0]
 8007ef6:	685b      	ldreq	r3, [r3, #4]
 8007ef8:	6063      	str	r3, [r4, #4]
 8007efa:	bf04      	itt	eq
 8007efc:	1809      	addeq	r1, r1, r0
 8007efe:	6021      	streq	r1, [r4, #0]
 8007f00:	6054      	str	r4, [r2, #4]
 8007f02:	e7ca      	b.n	8007e9a <_free_r+0x22>
 8007f04:	bd38      	pop	{r3, r4, r5, pc}
 8007f06:	bf00      	nop
 8007f08:	20000524 	.word	0x20000524

08007f0c <malloc>:
 8007f0c:	4b02      	ldr	r3, [pc, #8]	@ (8007f18 <malloc+0xc>)
 8007f0e:	4601      	mov	r1, r0
 8007f10:	6818      	ldr	r0, [r3, #0]
 8007f12:	f000 b825 	b.w	8007f60 <_malloc_r>
 8007f16:	bf00      	nop
 8007f18:	20000018 	.word	0x20000018

08007f1c <sbrk_aligned>:
 8007f1c:	b570      	push	{r4, r5, r6, lr}
 8007f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8007f5c <sbrk_aligned+0x40>)
 8007f20:	460c      	mov	r4, r1
 8007f22:	6831      	ldr	r1, [r6, #0]
 8007f24:	4605      	mov	r5, r0
 8007f26:	b911      	cbnz	r1, 8007f2e <sbrk_aligned+0x12>
 8007f28:	f001 ffe2 	bl	8009ef0 <_sbrk_r>
 8007f2c:	6030      	str	r0, [r6, #0]
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4628      	mov	r0, r5
 8007f32:	f001 ffdd 	bl	8009ef0 <_sbrk_r>
 8007f36:	1c43      	adds	r3, r0, #1
 8007f38:	d103      	bne.n	8007f42 <sbrk_aligned+0x26>
 8007f3a:	f04f 34ff 	mov.w	r4, #4294967295
 8007f3e:	4620      	mov	r0, r4
 8007f40:	bd70      	pop	{r4, r5, r6, pc}
 8007f42:	1cc4      	adds	r4, r0, #3
 8007f44:	f024 0403 	bic.w	r4, r4, #3
 8007f48:	42a0      	cmp	r0, r4
 8007f4a:	d0f8      	beq.n	8007f3e <sbrk_aligned+0x22>
 8007f4c:	1a21      	subs	r1, r4, r0
 8007f4e:	4628      	mov	r0, r5
 8007f50:	f001 ffce 	bl	8009ef0 <_sbrk_r>
 8007f54:	3001      	adds	r0, #1
 8007f56:	d1f2      	bne.n	8007f3e <sbrk_aligned+0x22>
 8007f58:	e7ef      	b.n	8007f3a <sbrk_aligned+0x1e>
 8007f5a:	bf00      	nop
 8007f5c:	20000520 	.word	0x20000520

08007f60 <_malloc_r>:
 8007f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f64:	1ccd      	adds	r5, r1, #3
 8007f66:	f025 0503 	bic.w	r5, r5, #3
 8007f6a:	3508      	adds	r5, #8
 8007f6c:	2d0c      	cmp	r5, #12
 8007f6e:	bf38      	it	cc
 8007f70:	250c      	movcc	r5, #12
 8007f72:	2d00      	cmp	r5, #0
 8007f74:	4606      	mov	r6, r0
 8007f76:	db01      	blt.n	8007f7c <_malloc_r+0x1c>
 8007f78:	42a9      	cmp	r1, r5
 8007f7a:	d904      	bls.n	8007f86 <_malloc_r+0x26>
 8007f7c:	230c      	movs	r3, #12
 8007f7e:	6033      	str	r3, [r6, #0]
 8007f80:	2000      	movs	r0, #0
 8007f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800805c <_malloc_r+0xfc>
 8007f8a:	f000 f869 	bl	8008060 <__malloc_lock>
 8007f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f92:	461c      	mov	r4, r3
 8007f94:	bb44      	cbnz	r4, 8007fe8 <_malloc_r+0x88>
 8007f96:	4629      	mov	r1, r5
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7ff ffbf 	bl	8007f1c <sbrk_aligned>
 8007f9e:	1c43      	adds	r3, r0, #1
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	d158      	bne.n	8008056 <_malloc_r+0xf6>
 8007fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8007fa8:	4627      	mov	r7, r4
 8007faa:	2f00      	cmp	r7, #0
 8007fac:	d143      	bne.n	8008036 <_malloc_r+0xd6>
 8007fae:	2c00      	cmp	r4, #0
 8007fb0:	d04b      	beq.n	800804a <_malloc_r+0xea>
 8007fb2:	6823      	ldr	r3, [r4, #0]
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	eb04 0903 	add.w	r9, r4, r3
 8007fbc:	f001 ff98 	bl	8009ef0 <_sbrk_r>
 8007fc0:	4581      	cmp	r9, r0
 8007fc2:	d142      	bne.n	800804a <_malloc_r+0xea>
 8007fc4:	6821      	ldr	r1, [r4, #0]
 8007fc6:	1a6d      	subs	r5, r5, r1
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7ff ffa6 	bl	8007f1c <sbrk_aligned>
 8007fd0:	3001      	adds	r0, #1
 8007fd2:	d03a      	beq.n	800804a <_malloc_r+0xea>
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	442b      	add	r3, r5
 8007fd8:	6023      	str	r3, [r4, #0]
 8007fda:	f8d8 3000 	ldr.w	r3, [r8]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	bb62      	cbnz	r2, 800803c <_malloc_r+0xdc>
 8007fe2:	f8c8 7000 	str.w	r7, [r8]
 8007fe6:	e00f      	b.n	8008008 <_malloc_r+0xa8>
 8007fe8:	6822      	ldr	r2, [r4, #0]
 8007fea:	1b52      	subs	r2, r2, r5
 8007fec:	d420      	bmi.n	8008030 <_malloc_r+0xd0>
 8007fee:	2a0b      	cmp	r2, #11
 8007ff0:	d917      	bls.n	8008022 <_malloc_r+0xc2>
 8007ff2:	1961      	adds	r1, r4, r5
 8007ff4:	42a3      	cmp	r3, r4
 8007ff6:	6025      	str	r5, [r4, #0]
 8007ff8:	bf18      	it	ne
 8007ffa:	6059      	strne	r1, [r3, #4]
 8007ffc:	6863      	ldr	r3, [r4, #4]
 8007ffe:	bf08      	it	eq
 8008000:	f8c8 1000 	streq.w	r1, [r8]
 8008004:	5162      	str	r2, [r4, r5]
 8008006:	604b      	str	r3, [r1, #4]
 8008008:	4630      	mov	r0, r6
 800800a:	f000 f82f 	bl	800806c <__malloc_unlock>
 800800e:	f104 000b 	add.w	r0, r4, #11
 8008012:	1d23      	adds	r3, r4, #4
 8008014:	f020 0007 	bic.w	r0, r0, #7
 8008018:	1ac2      	subs	r2, r0, r3
 800801a:	bf1c      	itt	ne
 800801c:	1a1b      	subne	r3, r3, r0
 800801e:	50a3      	strne	r3, [r4, r2]
 8008020:	e7af      	b.n	8007f82 <_malloc_r+0x22>
 8008022:	6862      	ldr	r2, [r4, #4]
 8008024:	42a3      	cmp	r3, r4
 8008026:	bf0c      	ite	eq
 8008028:	f8c8 2000 	streq.w	r2, [r8]
 800802c:	605a      	strne	r2, [r3, #4]
 800802e:	e7eb      	b.n	8008008 <_malloc_r+0xa8>
 8008030:	4623      	mov	r3, r4
 8008032:	6864      	ldr	r4, [r4, #4]
 8008034:	e7ae      	b.n	8007f94 <_malloc_r+0x34>
 8008036:	463c      	mov	r4, r7
 8008038:	687f      	ldr	r7, [r7, #4]
 800803a:	e7b6      	b.n	8007faa <_malloc_r+0x4a>
 800803c:	461a      	mov	r2, r3
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	42a3      	cmp	r3, r4
 8008042:	d1fb      	bne.n	800803c <_malloc_r+0xdc>
 8008044:	2300      	movs	r3, #0
 8008046:	6053      	str	r3, [r2, #4]
 8008048:	e7de      	b.n	8008008 <_malloc_r+0xa8>
 800804a:	230c      	movs	r3, #12
 800804c:	6033      	str	r3, [r6, #0]
 800804e:	4630      	mov	r0, r6
 8008050:	f000 f80c 	bl	800806c <__malloc_unlock>
 8008054:	e794      	b.n	8007f80 <_malloc_r+0x20>
 8008056:	6005      	str	r5, [r0, #0]
 8008058:	e7d6      	b.n	8008008 <_malloc_r+0xa8>
 800805a:	bf00      	nop
 800805c:	20000524 	.word	0x20000524

08008060 <__malloc_lock>:
 8008060:	4801      	ldr	r0, [pc, #4]	@ (8008068 <__malloc_lock+0x8>)
 8008062:	f7ff b8b2 	b.w	80071ca <__retarget_lock_acquire_recursive>
 8008066:	bf00      	nop
 8008068:	2000051c 	.word	0x2000051c

0800806c <__malloc_unlock>:
 800806c:	4801      	ldr	r0, [pc, #4]	@ (8008074 <__malloc_unlock+0x8>)
 800806e:	f7ff b8ad 	b.w	80071cc <__retarget_lock_release_recursive>
 8008072:	bf00      	nop
 8008074:	2000051c 	.word	0x2000051c

08008078 <_Balloc>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	69c6      	ldr	r6, [r0, #28]
 800807c:	4604      	mov	r4, r0
 800807e:	460d      	mov	r5, r1
 8008080:	b976      	cbnz	r6, 80080a0 <_Balloc+0x28>
 8008082:	2010      	movs	r0, #16
 8008084:	f7ff ff42 	bl	8007f0c <malloc>
 8008088:	4602      	mov	r2, r0
 800808a:	61e0      	str	r0, [r4, #28]
 800808c:	b920      	cbnz	r0, 8008098 <_Balloc+0x20>
 800808e:	4b18      	ldr	r3, [pc, #96]	@ (80080f0 <_Balloc+0x78>)
 8008090:	4818      	ldr	r0, [pc, #96]	@ (80080f4 <_Balloc+0x7c>)
 8008092:	216b      	movs	r1, #107	@ 0x6b
 8008094:	f001 ff54 	bl	8009f40 <__assert_func>
 8008098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800809c:	6006      	str	r6, [r0, #0]
 800809e:	60c6      	str	r6, [r0, #12]
 80080a0:	69e6      	ldr	r6, [r4, #28]
 80080a2:	68f3      	ldr	r3, [r6, #12]
 80080a4:	b183      	cbz	r3, 80080c8 <_Balloc+0x50>
 80080a6:	69e3      	ldr	r3, [r4, #28]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080ae:	b9b8      	cbnz	r0, 80080e0 <_Balloc+0x68>
 80080b0:	2101      	movs	r1, #1
 80080b2:	fa01 f605 	lsl.w	r6, r1, r5
 80080b6:	1d72      	adds	r2, r6, #5
 80080b8:	0092      	lsls	r2, r2, #2
 80080ba:	4620      	mov	r0, r4
 80080bc:	f001 ff5e 	bl	8009f7c <_calloc_r>
 80080c0:	b160      	cbz	r0, 80080dc <_Balloc+0x64>
 80080c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080c6:	e00e      	b.n	80080e6 <_Balloc+0x6e>
 80080c8:	2221      	movs	r2, #33	@ 0x21
 80080ca:	2104      	movs	r1, #4
 80080cc:	4620      	mov	r0, r4
 80080ce:	f001 ff55 	bl	8009f7c <_calloc_r>
 80080d2:	69e3      	ldr	r3, [r4, #28]
 80080d4:	60f0      	str	r0, [r6, #12]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e4      	bne.n	80080a6 <_Balloc+0x2e>
 80080dc:	2000      	movs	r0, #0
 80080de:	bd70      	pop	{r4, r5, r6, pc}
 80080e0:	6802      	ldr	r2, [r0, #0]
 80080e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080e6:	2300      	movs	r3, #0
 80080e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080ec:	e7f7      	b.n	80080de <_Balloc+0x66>
 80080ee:	bf00      	nop
 80080f0:	0800aa42 	.word	0x0800aa42
 80080f4:	0800aac2 	.word	0x0800aac2

080080f8 <_Bfree>:
 80080f8:	b570      	push	{r4, r5, r6, lr}
 80080fa:	69c6      	ldr	r6, [r0, #28]
 80080fc:	4605      	mov	r5, r0
 80080fe:	460c      	mov	r4, r1
 8008100:	b976      	cbnz	r6, 8008120 <_Bfree+0x28>
 8008102:	2010      	movs	r0, #16
 8008104:	f7ff ff02 	bl	8007f0c <malloc>
 8008108:	4602      	mov	r2, r0
 800810a:	61e8      	str	r0, [r5, #28]
 800810c:	b920      	cbnz	r0, 8008118 <_Bfree+0x20>
 800810e:	4b09      	ldr	r3, [pc, #36]	@ (8008134 <_Bfree+0x3c>)
 8008110:	4809      	ldr	r0, [pc, #36]	@ (8008138 <_Bfree+0x40>)
 8008112:	218f      	movs	r1, #143	@ 0x8f
 8008114:	f001 ff14 	bl	8009f40 <__assert_func>
 8008118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800811c:	6006      	str	r6, [r0, #0]
 800811e:	60c6      	str	r6, [r0, #12]
 8008120:	b13c      	cbz	r4, 8008132 <_Bfree+0x3a>
 8008122:	69eb      	ldr	r3, [r5, #28]
 8008124:	6862      	ldr	r2, [r4, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800812c:	6021      	str	r1, [r4, #0]
 800812e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008132:	bd70      	pop	{r4, r5, r6, pc}
 8008134:	0800aa42 	.word	0x0800aa42
 8008138:	0800aac2 	.word	0x0800aac2

0800813c <__multadd>:
 800813c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008140:	690d      	ldr	r5, [r1, #16]
 8008142:	4607      	mov	r7, r0
 8008144:	460c      	mov	r4, r1
 8008146:	461e      	mov	r6, r3
 8008148:	f101 0c14 	add.w	ip, r1, #20
 800814c:	2000      	movs	r0, #0
 800814e:	f8dc 3000 	ldr.w	r3, [ip]
 8008152:	b299      	uxth	r1, r3
 8008154:	fb02 6101 	mla	r1, r2, r1, r6
 8008158:	0c1e      	lsrs	r6, r3, #16
 800815a:	0c0b      	lsrs	r3, r1, #16
 800815c:	fb02 3306 	mla	r3, r2, r6, r3
 8008160:	b289      	uxth	r1, r1
 8008162:	3001      	adds	r0, #1
 8008164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008168:	4285      	cmp	r5, r0
 800816a:	f84c 1b04 	str.w	r1, [ip], #4
 800816e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008172:	dcec      	bgt.n	800814e <__multadd+0x12>
 8008174:	b30e      	cbz	r6, 80081ba <__multadd+0x7e>
 8008176:	68a3      	ldr	r3, [r4, #8]
 8008178:	42ab      	cmp	r3, r5
 800817a:	dc19      	bgt.n	80081b0 <__multadd+0x74>
 800817c:	6861      	ldr	r1, [r4, #4]
 800817e:	4638      	mov	r0, r7
 8008180:	3101      	adds	r1, #1
 8008182:	f7ff ff79 	bl	8008078 <_Balloc>
 8008186:	4680      	mov	r8, r0
 8008188:	b928      	cbnz	r0, 8008196 <__multadd+0x5a>
 800818a:	4602      	mov	r2, r0
 800818c:	4b0c      	ldr	r3, [pc, #48]	@ (80081c0 <__multadd+0x84>)
 800818e:	480d      	ldr	r0, [pc, #52]	@ (80081c4 <__multadd+0x88>)
 8008190:	21ba      	movs	r1, #186	@ 0xba
 8008192:	f001 fed5 	bl	8009f40 <__assert_func>
 8008196:	6922      	ldr	r2, [r4, #16]
 8008198:	3202      	adds	r2, #2
 800819a:	f104 010c 	add.w	r1, r4, #12
 800819e:	0092      	lsls	r2, r2, #2
 80081a0:	300c      	adds	r0, #12
 80081a2:	f001 feb5 	bl	8009f10 <memcpy>
 80081a6:	4621      	mov	r1, r4
 80081a8:	4638      	mov	r0, r7
 80081aa:	f7ff ffa5 	bl	80080f8 <_Bfree>
 80081ae:	4644      	mov	r4, r8
 80081b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081b4:	3501      	adds	r5, #1
 80081b6:	615e      	str	r6, [r3, #20]
 80081b8:	6125      	str	r5, [r4, #16]
 80081ba:	4620      	mov	r0, r4
 80081bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c0:	0800aab1 	.word	0x0800aab1
 80081c4:	0800aac2 	.word	0x0800aac2

080081c8 <__s2b>:
 80081c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081cc:	460c      	mov	r4, r1
 80081ce:	4615      	mov	r5, r2
 80081d0:	461f      	mov	r7, r3
 80081d2:	2209      	movs	r2, #9
 80081d4:	3308      	adds	r3, #8
 80081d6:	4606      	mov	r6, r0
 80081d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80081dc:	2100      	movs	r1, #0
 80081de:	2201      	movs	r2, #1
 80081e0:	429a      	cmp	r2, r3
 80081e2:	db09      	blt.n	80081f8 <__s2b+0x30>
 80081e4:	4630      	mov	r0, r6
 80081e6:	f7ff ff47 	bl	8008078 <_Balloc>
 80081ea:	b940      	cbnz	r0, 80081fe <__s2b+0x36>
 80081ec:	4602      	mov	r2, r0
 80081ee:	4b19      	ldr	r3, [pc, #100]	@ (8008254 <__s2b+0x8c>)
 80081f0:	4819      	ldr	r0, [pc, #100]	@ (8008258 <__s2b+0x90>)
 80081f2:	21d3      	movs	r1, #211	@ 0xd3
 80081f4:	f001 fea4 	bl	8009f40 <__assert_func>
 80081f8:	0052      	lsls	r2, r2, #1
 80081fa:	3101      	adds	r1, #1
 80081fc:	e7f0      	b.n	80081e0 <__s2b+0x18>
 80081fe:	9b08      	ldr	r3, [sp, #32]
 8008200:	6143      	str	r3, [r0, #20]
 8008202:	2d09      	cmp	r5, #9
 8008204:	f04f 0301 	mov.w	r3, #1
 8008208:	6103      	str	r3, [r0, #16]
 800820a:	dd16      	ble.n	800823a <__s2b+0x72>
 800820c:	f104 0909 	add.w	r9, r4, #9
 8008210:	46c8      	mov	r8, r9
 8008212:	442c      	add	r4, r5
 8008214:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008218:	4601      	mov	r1, r0
 800821a:	3b30      	subs	r3, #48	@ 0x30
 800821c:	220a      	movs	r2, #10
 800821e:	4630      	mov	r0, r6
 8008220:	f7ff ff8c 	bl	800813c <__multadd>
 8008224:	45a0      	cmp	r8, r4
 8008226:	d1f5      	bne.n	8008214 <__s2b+0x4c>
 8008228:	f1a5 0408 	sub.w	r4, r5, #8
 800822c:	444c      	add	r4, r9
 800822e:	1b2d      	subs	r5, r5, r4
 8008230:	1963      	adds	r3, r4, r5
 8008232:	42bb      	cmp	r3, r7
 8008234:	db04      	blt.n	8008240 <__s2b+0x78>
 8008236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823a:	340a      	adds	r4, #10
 800823c:	2509      	movs	r5, #9
 800823e:	e7f6      	b.n	800822e <__s2b+0x66>
 8008240:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008244:	4601      	mov	r1, r0
 8008246:	3b30      	subs	r3, #48	@ 0x30
 8008248:	220a      	movs	r2, #10
 800824a:	4630      	mov	r0, r6
 800824c:	f7ff ff76 	bl	800813c <__multadd>
 8008250:	e7ee      	b.n	8008230 <__s2b+0x68>
 8008252:	bf00      	nop
 8008254:	0800aab1 	.word	0x0800aab1
 8008258:	0800aac2 	.word	0x0800aac2

0800825c <__hi0bits>:
 800825c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008260:	4603      	mov	r3, r0
 8008262:	bf36      	itet	cc
 8008264:	0403      	lslcc	r3, r0, #16
 8008266:	2000      	movcs	r0, #0
 8008268:	2010      	movcc	r0, #16
 800826a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800826e:	bf3c      	itt	cc
 8008270:	021b      	lslcc	r3, r3, #8
 8008272:	3008      	addcc	r0, #8
 8008274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008278:	bf3c      	itt	cc
 800827a:	011b      	lslcc	r3, r3, #4
 800827c:	3004      	addcc	r0, #4
 800827e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008282:	bf3c      	itt	cc
 8008284:	009b      	lslcc	r3, r3, #2
 8008286:	3002      	addcc	r0, #2
 8008288:	2b00      	cmp	r3, #0
 800828a:	db05      	blt.n	8008298 <__hi0bits+0x3c>
 800828c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008290:	f100 0001 	add.w	r0, r0, #1
 8008294:	bf08      	it	eq
 8008296:	2020      	moveq	r0, #32
 8008298:	4770      	bx	lr

0800829a <__lo0bits>:
 800829a:	6803      	ldr	r3, [r0, #0]
 800829c:	4602      	mov	r2, r0
 800829e:	f013 0007 	ands.w	r0, r3, #7
 80082a2:	d00b      	beq.n	80082bc <__lo0bits+0x22>
 80082a4:	07d9      	lsls	r1, r3, #31
 80082a6:	d421      	bmi.n	80082ec <__lo0bits+0x52>
 80082a8:	0798      	lsls	r0, r3, #30
 80082aa:	bf49      	itett	mi
 80082ac:	085b      	lsrmi	r3, r3, #1
 80082ae:	089b      	lsrpl	r3, r3, #2
 80082b0:	2001      	movmi	r0, #1
 80082b2:	6013      	strmi	r3, [r2, #0]
 80082b4:	bf5c      	itt	pl
 80082b6:	6013      	strpl	r3, [r2, #0]
 80082b8:	2002      	movpl	r0, #2
 80082ba:	4770      	bx	lr
 80082bc:	b299      	uxth	r1, r3
 80082be:	b909      	cbnz	r1, 80082c4 <__lo0bits+0x2a>
 80082c0:	0c1b      	lsrs	r3, r3, #16
 80082c2:	2010      	movs	r0, #16
 80082c4:	b2d9      	uxtb	r1, r3
 80082c6:	b909      	cbnz	r1, 80082cc <__lo0bits+0x32>
 80082c8:	3008      	adds	r0, #8
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	0719      	lsls	r1, r3, #28
 80082ce:	bf04      	itt	eq
 80082d0:	091b      	lsreq	r3, r3, #4
 80082d2:	3004      	addeq	r0, #4
 80082d4:	0799      	lsls	r1, r3, #30
 80082d6:	bf04      	itt	eq
 80082d8:	089b      	lsreq	r3, r3, #2
 80082da:	3002      	addeq	r0, #2
 80082dc:	07d9      	lsls	r1, r3, #31
 80082de:	d403      	bmi.n	80082e8 <__lo0bits+0x4e>
 80082e0:	085b      	lsrs	r3, r3, #1
 80082e2:	f100 0001 	add.w	r0, r0, #1
 80082e6:	d003      	beq.n	80082f0 <__lo0bits+0x56>
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	4770      	bx	lr
 80082ec:	2000      	movs	r0, #0
 80082ee:	4770      	bx	lr
 80082f0:	2020      	movs	r0, #32
 80082f2:	4770      	bx	lr

080082f4 <__i2b>:
 80082f4:	b510      	push	{r4, lr}
 80082f6:	460c      	mov	r4, r1
 80082f8:	2101      	movs	r1, #1
 80082fa:	f7ff febd 	bl	8008078 <_Balloc>
 80082fe:	4602      	mov	r2, r0
 8008300:	b928      	cbnz	r0, 800830e <__i2b+0x1a>
 8008302:	4b05      	ldr	r3, [pc, #20]	@ (8008318 <__i2b+0x24>)
 8008304:	4805      	ldr	r0, [pc, #20]	@ (800831c <__i2b+0x28>)
 8008306:	f240 1145 	movw	r1, #325	@ 0x145
 800830a:	f001 fe19 	bl	8009f40 <__assert_func>
 800830e:	2301      	movs	r3, #1
 8008310:	6144      	str	r4, [r0, #20]
 8008312:	6103      	str	r3, [r0, #16]
 8008314:	bd10      	pop	{r4, pc}
 8008316:	bf00      	nop
 8008318:	0800aab1 	.word	0x0800aab1
 800831c:	0800aac2 	.word	0x0800aac2

08008320 <__multiply>:
 8008320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008324:	4614      	mov	r4, r2
 8008326:	690a      	ldr	r2, [r1, #16]
 8008328:	6923      	ldr	r3, [r4, #16]
 800832a:	429a      	cmp	r2, r3
 800832c:	bfa8      	it	ge
 800832e:	4623      	movge	r3, r4
 8008330:	460f      	mov	r7, r1
 8008332:	bfa4      	itt	ge
 8008334:	460c      	movge	r4, r1
 8008336:	461f      	movge	r7, r3
 8008338:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800833c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008340:	68a3      	ldr	r3, [r4, #8]
 8008342:	6861      	ldr	r1, [r4, #4]
 8008344:	eb0a 0609 	add.w	r6, sl, r9
 8008348:	42b3      	cmp	r3, r6
 800834a:	b085      	sub	sp, #20
 800834c:	bfb8      	it	lt
 800834e:	3101      	addlt	r1, #1
 8008350:	f7ff fe92 	bl	8008078 <_Balloc>
 8008354:	b930      	cbnz	r0, 8008364 <__multiply+0x44>
 8008356:	4602      	mov	r2, r0
 8008358:	4b44      	ldr	r3, [pc, #272]	@ (800846c <__multiply+0x14c>)
 800835a:	4845      	ldr	r0, [pc, #276]	@ (8008470 <__multiply+0x150>)
 800835c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008360:	f001 fdee 	bl	8009f40 <__assert_func>
 8008364:	f100 0514 	add.w	r5, r0, #20
 8008368:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800836c:	462b      	mov	r3, r5
 800836e:	2200      	movs	r2, #0
 8008370:	4543      	cmp	r3, r8
 8008372:	d321      	bcc.n	80083b8 <__multiply+0x98>
 8008374:	f107 0114 	add.w	r1, r7, #20
 8008378:	f104 0214 	add.w	r2, r4, #20
 800837c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008380:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008384:	9302      	str	r3, [sp, #8]
 8008386:	1b13      	subs	r3, r2, r4
 8008388:	3b15      	subs	r3, #21
 800838a:	f023 0303 	bic.w	r3, r3, #3
 800838e:	3304      	adds	r3, #4
 8008390:	f104 0715 	add.w	r7, r4, #21
 8008394:	42ba      	cmp	r2, r7
 8008396:	bf38      	it	cc
 8008398:	2304      	movcc	r3, #4
 800839a:	9301      	str	r3, [sp, #4]
 800839c:	9b02      	ldr	r3, [sp, #8]
 800839e:	9103      	str	r1, [sp, #12]
 80083a0:	428b      	cmp	r3, r1
 80083a2:	d80c      	bhi.n	80083be <__multiply+0x9e>
 80083a4:	2e00      	cmp	r6, #0
 80083a6:	dd03      	ble.n	80083b0 <__multiply+0x90>
 80083a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d05b      	beq.n	8008468 <__multiply+0x148>
 80083b0:	6106      	str	r6, [r0, #16]
 80083b2:	b005      	add	sp, #20
 80083b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b8:	f843 2b04 	str.w	r2, [r3], #4
 80083bc:	e7d8      	b.n	8008370 <__multiply+0x50>
 80083be:	f8b1 a000 	ldrh.w	sl, [r1]
 80083c2:	f1ba 0f00 	cmp.w	sl, #0
 80083c6:	d024      	beq.n	8008412 <__multiply+0xf2>
 80083c8:	f104 0e14 	add.w	lr, r4, #20
 80083cc:	46a9      	mov	r9, r5
 80083ce:	f04f 0c00 	mov.w	ip, #0
 80083d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083d6:	f8d9 3000 	ldr.w	r3, [r9]
 80083da:	fa1f fb87 	uxth.w	fp, r7
 80083de:	b29b      	uxth	r3, r3
 80083e0:	fb0a 330b 	mla	r3, sl, fp, r3
 80083e4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80083e8:	f8d9 7000 	ldr.w	r7, [r9]
 80083ec:	4463      	add	r3, ip
 80083ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80083f2:	fb0a c70b 	mla	r7, sl, fp, ip
 80083f6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008400:	4572      	cmp	r2, lr
 8008402:	f849 3b04 	str.w	r3, [r9], #4
 8008406:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800840a:	d8e2      	bhi.n	80083d2 <__multiply+0xb2>
 800840c:	9b01      	ldr	r3, [sp, #4]
 800840e:	f845 c003 	str.w	ip, [r5, r3]
 8008412:	9b03      	ldr	r3, [sp, #12]
 8008414:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008418:	3104      	adds	r1, #4
 800841a:	f1b9 0f00 	cmp.w	r9, #0
 800841e:	d021      	beq.n	8008464 <__multiply+0x144>
 8008420:	682b      	ldr	r3, [r5, #0]
 8008422:	f104 0c14 	add.w	ip, r4, #20
 8008426:	46ae      	mov	lr, r5
 8008428:	f04f 0a00 	mov.w	sl, #0
 800842c:	f8bc b000 	ldrh.w	fp, [ip]
 8008430:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008434:	fb09 770b 	mla	r7, r9, fp, r7
 8008438:	4457      	add	r7, sl
 800843a:	b29b      	uxth	r3, r3
 800843c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008440:	f84e 3b04 	str.w	r3, [lr], #4
 8008444:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008448:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800844c:	f8be 3000 	ldrh.w	r3, [lr]
 8008450:	fb09 330a 	mla	r3, r9, sl, r3
 8008454:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008458:	4562      	cmp	r2, ip
 800845a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800845e:	d8e5      	bhi.n	800842c <__multiply+0x10c>
 8008460:	9f01      	ldr	r7, [sp, #4]
 8008462:	51eb      	str	r3, [r5, r7]
 8008464:	3504      	adds	r5, #4
 8008466:	e799      	b.n	800839c <__multiply+0x7c>
 8008468:	3e01      	subs	r6, #1
 800846a:	e79b      	b.n	80083a4 <__multiply+0x84>
 800846c:	0800aab1 	.word	0x0800aab1
 8008470:	0800aac2 	.word	0x0800aac2

08008474 <__pow5mult>:
 8008474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008478:	4615      	mov	r5, r2
 800847a:	f012 0203 	ands.w	r2, r2, #3
 800847e:	4607      	mov	r7, r0
 8008480:	460e      	mov	r6, r1
 8008482:	d007      	beq.n	8008494 <__pow5mult+0x20>
 8008484:	4c25      	ldr	r4, [pc, #148]	@ (800851c <__pow5mult+0xa8>)
 8008486:	3a01      	subs	r2, #1
 8008488:	2300      	movs	r3, #0
 800848a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800848e:	f7ff fe55 	bl	800813c <__multadd>
 8008492:	4606      	mov	r6, r0
 8008494:	10ad      	asrs	r5, r5, #2
 8008496:	d03d      	beq.n	8008514 <__pow5mult+0xa0>
 8008498:	69fc      	ldr	r4, [r7, #28]
 800849a:	b97c      	cbnz	r4, 80084bc <__pow5mult+0x48>
 800849c:	2010      	movs	r0, #16
 800849e:	f7ff fd35 	bl	8007f0c <malloc>
 80084a2:	4602      	mov	r2, r0
 80084a4:	61f8      	str	r0, [r7, #28]
 80084a6:	b928      	cbnz	r0, 80084b4 <__pow5mult+0x40>
 80084a8:	4b1d      	ldr	r3, [pc, #116]	@ (8008520 <__pow5mult+0xac>)
 80084aa:	481e      	ldr	r0, [pc, #120]	@ (8008524 <__pow5mult+0xb0>)
 80084ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80084b0:	f001 fd46 	bl	8009f40 <__assert_func>
 80084b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084b8:	6004      	str	r4, [r0, #0]
 80084ba:	60c4      	str	r4, [r0, #12]
 80084bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084c4:	b94c      	cbnz	r4, 80084da <__pow5mult+0x66>
 80084c6:	f240 2171 	movw	r1, #625	@ 0x271
 80084ca:	4638      	mov	r0, r7
 80084cc:	f7ff ff12 	bl	80082f4 <__i2b>
 80084d0:	2300      	movs	r3, #0
 80084d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80084d6:	4604      	mov	r4, r0
 80084d8:	6003      	str	r3, [r0, #0]
 80084da:	f04f 0900 	mov.w	r9, #0
 80084de:	07eb      	lsls	r3, r5, #31
 80084e0:	d50a      	bpl.n	80084f8 <__pow5mult+0x84>
 80084e2:	4631      	mov	r1, r6
 80084e4:	4622      	mov	r2, r4
 80084e6:	4638      	mov	r0, r7
 80084e8:	f7ff ff1a 	bl	8008320 <__multiply>
 80084ec:	4631      	mov	r1, r6
 80084ee:	4680      	mov	r8, r0
 80084f0:	4638      	mov	r0, r7
 80084f2:	f7ff fe01 	bl	80080f8 <_Bfree>
 80084f6:	4646      	mov	r6, r8
 80084f8:	106d      	asrs	r5, r5, #1
 80084fa:	d00b      	beq.n	8008514 <__pow5mult+0xa0>
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	b938      	cbnz	r0, 8008510 <__pow5mult+0x9c>
 8008500:	4622      	mov	r2, r4
 8008502:	4621      	mov	r1, r4
 8008504:	4638      	mov	r0, r7
 8008506:	f7ff ff0b 	bl	8008320 <__multiply>
 800850a:	6020      	str	r0, [r4, #0]
 800850c:	f8c0 9000 	str.w	r9, [r0]
 8008510:	4604      	mov	r4, r0
 8008512:	e7e4      	b.n	80084de <__pow5mult+0x6a>
 8008514:	4630      	mov	r0, r6
 8008516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800851a:	bf00      	nop
 800851c:	0800ab1c 	.word	0x0800ab1c
 8008520:	0800aa42 	.word	0x0800aa42
 8008524:	0800aac2 	.word	0x0800aac2

08008528 <__lshift>:
 8008528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800852c:	460c      	mov	r4, r1
 800852e:	6849      	ldr	r1, [r1, #4]
 8008530:	6923      	ldr	r3, [r4, #16]
 8008532:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008536:	68a3      	ldr	r3, [r4, #8]
 8008538:	4607      	mov	r7, r0
 800853a:	4691      	mov	r9, r2
 800853c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008540:	f108 0601 	add.w	r6, r8, #1
 8008544:	42b3      	cmp	r3, r6
 8008546:	db0b      	blt.n	8008560 <__lshift+0x38>
 8008548:	4638      	mov	r0, r7
 800854a:	f7ff fd95 	bl	8008078 <_Balloc>
 800854e:	4605      	mov	r5, r0
 8008550:	b948      	cbnz	r0, 8008566 <__lshift+0x3e>
 8008552:	4602      	mov	r2, r0
 8008554:	4b28      	ldr	r3, [pc, #160]	@ (80085f8 <__lshift+0xd0>)
 8008556:	4829      	ldr	r0, [pc, #164]	@ (80085fc <__lshift+0xd4>)
 8008558:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800855c:	f001 fcf0 	bl	8009f40 <__assert_func>
 8008560:	3101      	adds	r1, #1
 8008562:	005b      	lsls	r3, r3, #1
 8008564:	e7ee      	b.n	8008544 <__lshift+0x1c>
 8008566:	2300      	movs	r3, #0
 8008568:	f100 0114 	add.w	r1, r0, #20
 800856c:	f100 0210 	add.w	r2, r0, #16
 8008570:	4618      	mov	r0, r3
 8008572:	4553      	cmp	r3, sl
 8008574:	db33      	blt.n	80085de <__lshift+0xb6>
 8008576:	6920      	ldr	r0, [r4, #16]
 8008578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800857c:	f104 0314 	add.w	r3, r4, #20
 8008580:	f019 091f 	ands.w	r9, r9, #31
 8008584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800858c:	d02b      	beq.n	80085e6 <__lshift+0xbe>
 800858e:	f1c9 0e20 	rsb	lr, r9, #32
 8008592:	468a      	mov	sl, r1
 8008594:	2200      	movs	r2, #0
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	fa00 f009 	lsl.w	r0, r0, r9
 800859c:	4310      	orrs	r0, r2
 800859e:	f84a 0b04 	str.w	r0, [sl], #4
 80085a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085a6:	459c      	cmp	ip, r3
 80085a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80085ac:	d8f3      	bhi.n	8008596 <__lshift+0x6e>
 80085ae:	ebac 0304 	sub.w	r3, ip, r4
 80085b2:	3b15      	subs	r3, #21
 80085b4:	f023 0303 	bic.w	r3, r3, #3
 80085b8:	3304      	adds	r3, #4
 80085ba:	f104 0015 	add.w	r0, r4, #21
 80085be:	4584      	cmp	ip, r0
 80085c0:	bf38      	it	cc
 80085c2:	2304      	movcc	r3, #4
 80085c4:	50ca      	str	r2, [r1, r3]
 80085c6:	b10a      	cbz	r2, 80085cc <__lshift+0xa4>
 80085c8:	f108 0602 	add.w	r6, r8, #2
 80085cc:	3e01      	subs	r6, #1
 80085ce:	4638      	mov	r0, r7
 80085d0:	612e      	str	r6, [r5, #16]
 80085d2:	4621      	mov	r1, r4
 80085d4:	f7ff fd90 	bl	80080f8 <_Bfree>
 80085d8:	4628      	mov	r0, r5
 80085da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085de:	f842 0f04 	str.w	r0, [r2, #4]!
 80085e2:	3301      	adds	r3, #1
 80085e4:	e7c5      	b.n	8008572 <__lshift+0x4a>
 80085e6:	3904      	subs	r1, #4
 80085e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80085ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80085f0:	459c      	cmp	ip, r3
 80085f2:	d8f9      	bhi.n	80085e8 <__lshift+0xc0>
 80085f4:	e7ea      	b.n	80085cc <__lshift+0xa4>
 80085f6:	bf00      	nop
 80085f8:	0800aab1 	.word	0x0800aab1
 80085fc:	0800aac2 	.word	0x0800aac2

08008600 <__mcmp>:
 8008600:	690a      	ldr	r2, [r1, #16]
 8008602:	4603      	mov	r3, r0
 8008604:	6900      	ldr	r0, [r0, #16]
 8008606:	1a80      	subs	r0, r0, r2
 8008608:	b530      	push	{r4, r5, lr}
 800860a:	d10e      	bne.n	800862a <__mcmp+0x2a>
 800860c:	3314      	adds	r3, #20
 800860e:	3114      	adds	r1, #20
 8008610:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008614:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008618:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800861c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008620:	4295      	cmp	r5, r2
 8008622:	d003      	beq.n	800862c <__mcmp+0x2c>
 8008624:	d205      	bcs.n	8008632 <__mcmp+0x32>
 8008626:	f04f 30ff 	mov.w	r0, #4294967295
 800862a:	bd30      	pop	{r4, r5, pc}
 800862c:	42a3      	cmp	r3, r4
 800862e:	d3f3      	bcc.n	8008618 <__mcmp+0x18>
 8008630:	e7fb      	b.n	800862a <__mcmp+0x2a>
 8008632:	2001      	movs	r0, #1
 8008634:	e7f9      	b.n	800862a <__mcmp+0x2a>
	...

08008638 <__mdiff>:
 8008638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	4689      	mov	r9, r1
 800863e:	4606      	mov	r6, r0
 8008640:	4611      	mov	r1, r2
 8008642:	4648      	mov	r0, r9
 8008644:	4614      	mov	r4, r2
 8008646:	f7ff ffdb 	bl	8008600 <__mcmp>
 800864a:	1e05      	subs	r5, r0, #0
 800864c:	d112      	bne.n	8008674 <__mdiff+0x3c>
 800864e:	4629      	mov	r1, r5
 8008650:	4630      	mov	r0, r6
 8008652:	f7ff fd11 	bl	8008078 <_Balloc>
 8008656:	4602      	mov	r2, r0
 8008658:	b928      	cbnz	r0, 8008666 <__mdiff+0x2e>
 800865a:	4b3f      	ldr	r3, [pc, #252]	@ (8008758 <__mdiff+0x120>)
 800865c:	f240 2137 	movw	r1, #567	@ 0x237
 8008660:	483e      	ldr	r0, [pc, #248]	@ (800875c <__mdiff+0x124>)
 8008662:	f001 fc6d 	bl	8009f40 <__assert_func>
 8008666:	2301      	movs	r3, #1
 8008668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800866c:	4610      	mov	r0, r2
 800866e:	b003      	add	sp, #12
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	bfbc      	itt	lt
 8008676:	464b      	movlt	r3, r9
 8008678:	46a1      	movlt	r9, r4
 800867a:	4630      	mov	r0, r6
 800867c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008680:	bfba      	itte	lt
 8008682:	461c      	movlt	r4, r3
 8008684:	2501      	movlt	r5, #1
 8008686:	2500      	movge	r5, #0
 8008688:	f7ff fcf6 	bl	8008078 <_Balloc>
 800868c:	4602      	mov	r2, r0
 800868e:	b918      	cbnz	r0, 8008698 <__mdiff+0x60>
 8008690:	4b31      	ldr	r3, [pc, #196]	@ (8008758 <__mdiff+0x120>)
 8008692:	f240 2145 	movw	r1, #581	@ 0x245
 8008696:	e7e3      	b.n	8008660 <__mdiff+0x28>
 8008698:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800869c:	6926      	ldr	r6, [r4, #16]
 800869e:	60c5      	str	r5, [r0, #12]
 80086a0:	f109 0310 	add.w	r3, r9, #16
 80086a4:	f109 0514 	add.w	r5, r9, #20
 80086a8:	f104 0e14 	add.w	lr, r4, #20
 80086ac:	f100 0b14 	add.w	fp, r0, #20
 80086b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80086b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086b8:	9301      	str	r3, [sp, #4]
 80086ba:	46d9      	mov	r9, fp
 80086bc:	f04f 0c00 	mov.w	ip, #0
 80086c0:	9b01      	ldr	r3, [sp, #4]
 80086c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086ca:	9301      	str	r3, [sp, #4]
 80086cc:	fa1f f38a 	uxth.w	r3, sl
 80086d0:	4619      	mov	r1, r3
 80086d2:	b283      	uxth	r3, r0
 80086d4:	1acb      	subs	r3, r1, r3
 80086d6:	0c00      	lsrs	r0, r0, #16
 80086d8:	4463      	add	r3, ip
 80086da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086e2:	b29b      	uxth	r3, r3
 80086e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086e8:	4576      	cmp	r6, lr
 80086ea:	f849 3b04 	str.w	r3, [r9], #4
 80086ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086f2:	d8e5      	bhi.n	80086c0 <__mdiff+0x88>
 80086f4:	1b33      	subs	r3, r6, r4
 80086f6:	3b15      	subs	r3, #21
 80086f8:	f023 0303 	bic.w	r3, r3, #3
 80086fc:	3415      	adds	r4, #21
 80086fe:	3304      	adds	r3, #4
 8008700:	42a6      	cmp	r6, r4
 8008702:	bf38      	it	cc
 8008704:	2304      	movcc	r3, #4
 8008706:	441d      	add	r5, r3
 8008708:	445b      	add	r3, fp
 800870a:	461e      	mov	r6, r3
 800870c:	462c      	mov	r4, r5
 800870e:	4544      	cmp	r4, r8
 8008710:	d30e      	bcc.n	8008730 <__mdiff+0xf8>
 8008712:	f108 0103 	add.w	r1, r8, #3
 8008716:	1b49      	subs	r1, r1, r5
 8008718:	f021 0103 	bic.w	r1, r1, #3
 800871c:	3d03      	subs	r5, #3
 800871e:	45a8      	cmp	r8, r5
 8008720:	bf38      	it	cc
 8008722:	2100      	movcc	r1, #0
 8008724:	440b      	add	r3, r1
 8008726:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800872a:	b191      	cbz	r1, 8008752 <__mdiff+0x11a>
 800872c:	6117      	str	r7, [r2, #16]
 800872e:	e79d      	b.n	800866c <__mdiff+0x34>
 8008730:	f854 1b04 	ldr.w	r1, [r4], #4
 8008734:	46e6      	mov	lr, ip
 8008736:	0c08      	lsrs	r0, r1, #16
 8008738:	fa1c fc81 	uxtah	ip, ip, r1
 800873c:	4471      	add	r1, lr
 800873e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008742:	b289      	uxth	r1, r1
 8008744:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008748:	f846 1b04 	str.w	r1, [r6], #4
 800874c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008750:	e7dd      	b.n	800870e <__mdiff+0xd6>
 8008752:	3f01      	subs	r7, #1
 8008754:	e7e7      	b.n	8008726 <__mdiff+0xee>
 8008756:	bf00      	nop
 8008758:	0800aab1 	.word	0x0800aab1
 800875c:	0800aac2 	.word	0x0800aac2

08008760 <__ulp>:
 8008760:	b082      	sub	sp, #8
 8008762:	ed8d 0b00 	vstr	d0, [sp]
 8008766:	9a01      	ldr	r2, [sp, #4]
 8008768:	4b0f      	ldr	r3, [pc, #60]	@ (80087a8 <__ulp+0x48>)
 800876a:	4013      	ands	r3, r2
 800876c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008770:	2b00      	cmp	r3, #0
 8008772:	dc08      	bgt.n	8008786 <__ulp+0x26>
 8008774:	425b      	negs	r3, r3
 8008776:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800877a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800877e:	da04      	bge.n	800878a <__ulp+0x2a>
 8008780:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008784:	4113      	asrs	r3, r2
 8008786:	2200      	movs	r2, #0
 8008788:	e008      	b.n	800879c <__ulp+0x3c>
 800878a:	f1a2 0314 	sub.w	r3, r2, #20
 800878e:	2b1e      	cmp	r3, #30
 8008790:	bfda      	itte	le
 8008792:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008796:	40da      	lsrle	r2, r3
 8008798:	2201      	movgt	r2, #1
 800879a:	2300      	movs	r3, #0
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	ec41 0b10 	vmov	d0, r0, r1
 80087a4:	b002      	add	sp, #8
 80087a6:	4770      	bx	lr
 80087a8:	7ff00000 	.word	0x7ff00000

080087ac <__b2d>:
 80087ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b0:	6906      	ldr	r6, [r0, #16]
 80087b2:	f100 0814 	add.w	r8, r0, #20
 80087b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80087ba:	1f37      	subs	r7, r6, #4
 80087bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80087c0:	4610      	mov	r0, r2
 80087c2:	f7ff fd4b 	bl	800825c <__hi0bits>
 80087c6:	f1c0 0320 	rsb	r3, r0, #32
 80087ca:	280a      	cmp	r0, #10
 80087cc:	600b      	str	r3, [r1, #0]
 80087ce:	491b      	ldr	r1, [pc, #108]	@ (800883c <__b2d+0x90>)
 80087d0:	dc15      	bgt.n	80087fe <__b2d+0x52>
 80087d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80087d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80087da:	45b8      	cmp	r8, r7
 80087dc:	ea43 0501 	orr.w	r5, r3, r1
 80087e0:	bf34      	ite	cc
 80087e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80087e6:	2300      	movcs	r3, #0
 80087e8:	3015      	adds	r0, #21
 80087ea:	fa02 f000 	lsl.w	r0, r2, r0
 80087ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80087f2:	4303      	orrs	r3, r0
 80087f4:	461c      	mov	r4, r3
 80087f6:	ec45 4b10 	vmov	d0, r4, r5
 80087fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087fe:	45b8      	cmp	r8, r7
 8008800:	bf3a      	itte	cc
 8008802:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008806:	f1a6 0708 	subcc.w	r7, r6, #8
 800880a:	2300      	movcs	r3, #0
 800880c:	380b      	subs	r0, #11
 800880e:	d012      	beq.n	8008836 <__b2d+0x8a>
 8008810:	f1c0 0120 	rsb	r1, r0, #32
 8008814:	fa23 f401 	lsr.w	r4, r3, r1
 8008818:	4082      	lsls	r2, r0
 800881a:	4322      	orrs	r2, r4
 800881c:	4547      	cmp	r7, r8
 800881e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008822:	bf8c      	ite	hi
 8008824:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008828:	2200      	movls	r2, #0
 800882a:	4083      	lsls	r3, r0
 800882c:	40ca      	lsrs	r2, r1
 800882e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008832:	4313      	orrs	r3, r2
 8008834:	e7de      	b.n	80087f4 <__b2d+0x48>
 8008836:	ea42 0501 	orr.w	r5, r2, r1
 800883a:	e7db      	b.n	80087f4 <__b2d+0x48>
 800883c:	3ff00000 	.word	0x3ff00000

08008840 <__d2b>:
 8008840:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008844:	460f      	mov	r7, r1
 8008846:	2101      	movs	r1, #1
 8008848:	ec59 8b10 	vmov	r8, r9, d0
 800884c:	4616      	mov	r6, r2
 800884e:	f7ff fc13 	bl	8008078 <_Balloc>
 8008852:	4604      	mov	r4, r0
 8008854:	b930      	cbnz	r0, 8008864 <__d2b+0x24>
 8008856:	4602      	mov	r2, r0
 8008858:	4b23      	ldr	r3, [pc, #140]	@ (80088e8 <__d2b+0xa8>)
 800885a:	4824      	ldr	r0, [pc, #144]	@ (80088ec <__d2b+0xac>)
 800885c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008860:	f001 fb6e 	bl	8009f40 <__assert_func>
 8008864:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008868:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800886c:	b10d      	cbz	r5, 8008872 <__d2b+0x32>
 800886e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008872:	9301      	str	r3, [sp, #4]
 8008874:	f1b8 0300 	subs.w	r3, r8, #0
 8008878:	d023      	beq.n	80088c2 <__d2b+0x82>
 800887a:	4668      	mov	r0, sp
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	f7ff fd0c 	bl	800829a <__lo0bits>
 8008882:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008886:	b1d0      	cbz	r0, 80088be <__d2b+0x7e>
 8008888:	f1c0 0320 	rsb	r3, r0, #32
 800888c:	fa02 f303 	lsl.w	r3, r2, r3
 8008890:	430b      	orrs	r3, r1
 8008892:	40c2      	lsrs	r2, r0
 8008894:	6163      	str	r3, [r4, #20]
 8008896:	9201      	str	r2, [sp, #4]
 8008898:	9b01      	ldr	r3, [sp, #4]
 800889a:	61a3      	str	r3, [r4, #24]
 800889c:	2b00      	cmp	r3, #0
 800889e:	bf0c      	ite	eq
 80088a0:	2201      	moveq	r2, #1
 80088a2:	2202      	movne	r2, #2
 80088a4:	6122      	str	r2, [r4, #16]
 80088a6:	b1a5      	cbz	r5, 80088d2 <__d2b+0x92>
 80088a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80088ac:	4405      	add	r5, r0
 80088ae:	603d      	str	r5, [r7, #0]
 80088b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088b4:	6030      	str	r0, [r6, #0]
 80088b6:	4620      	mov	r0, r4
 80088b8:	b003      	add	sp, #12
 80088ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088be:	6161      	str	r1, [r4, #20]
 80088c0:	e7ea      	b.n	8008898 <__d2b+0x58>
 80088c2:	a801      	add	r0, sp, #4
 80088c4:	f7ff fce9 	bl	800829a <__lo0bits>
 80088c8:	9b01      	ldr	r3, [sp, #4]
 80088ca:	6163      	str	r3, [r4, #20]
 80088cc:	3020      	adds	r0, #32
 80088ce:	2201      	movs	r2, #1
 80088d0:	e7e8      	b.n	80088a4 <__d2b+0x64>
 80088d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80088da:	6038      	str	r0, [r7, #0]
 80088dc:	6918      	ldr	r0, [r3, #16]
 80088de:	f7ff fcbd 	bl	800825c <__hi0bits>
 80088e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088e6:	e7e5      	b.n	80088b4 <__d2b+0x74>
 80088e8:	0800aab1 	.word	0x0800aab1
 80088ec:	0800aac2 	.word	0x0800aac2

080088f0 <__ratio>:
 80088f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	b085      	sub	sp, #20
 80088f6:	e9cd 1000 	strd	r1, r0, [sp]
 80088fa:	a902      	add	r1, sp, #8
 80088fc:	f7ff ff56 	bl	80087ac <__b2d>
 8008900:	9800      	ldr	r0, [sp, #0]
 8008902:	a903      	add	r1, sp, #12
 8008904:	ec55 4b10 	vmov	r4, r5, d0
 8008908:	f7ff ff50 	bl	80087ac <__b2d>
 800890c:	9b01      	ldr	r3, [sp, #4]
 800890e:	6919      	ldr	r1, [r3, #16]
 8008910:	9b00      	ldr	r3, [sp, #0]
 8008912:	691b      	ldr	r3, [r3, #16]
 8008914:	1ac9      	subs	r1, r1, r3
 8008916:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800891a:	1a9b      	subs	r3, r3, r2
 800891c:	ec5b ab10 	vmov	sl, fp, d0
 8008920:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008924:	2b00      	cmp	r3, #0
 8008926:	bfce      	itee	gt
 8008928:	462a      	movgt	r2, r5
 800892a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800892e:	465a      	movle	r2, fp
 8008930:	462f      	mov	r7, r5
 8008932:	46d9      	mov	r9, fp
 8008934:	bfcc      	ite	gt
 8008936:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800893a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800893e:	464b      	mov	r3, r9
 8008940:	4652      	mov	r2, sl
 8008942:	4620      	mov	r0, r4
 8008944:	4639      	mov	r1, r7
 8008946:	f7f7 ffa1 	bl	800088c <__aeabi_ddiv>
 800894a:	ec41 0b10 	vmov	d0, r0, r1
 800894e:	b005      	add	sp, #20
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008954 <__copybits>:
 8008954:	3901      	subs	r1, #1
 8008956:	b570      	push	{r4, r5, r6, lr}
 8008958:	1149      	asrs	r1, r1, #5
 800895a:	6914      	ldr	r4, [r2, #16]
 800895c:	3101      	adds	r1, #1
 800895e:	f102 0314 	add.w	r3, r2, #20
 8008962:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008966:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800896a:	1f05      	subs	r5, r0, #4
 800896c:	42a3      	cmp	r3, r4
 800896e:	d30c      	bcc.n	800898a <__copybits+0x36>
 8008970:	1aa3      	subs	r3, r4, r2
 8008972:	3b11      	subs	r3, #17
 8008974:	f023 0303 	bic.w	r3, r3, #3
 8008978:	3211      	adds	r2, #17
 800897a:	42a2      	cmp	r2, r4
 800897c:	bf88      	it	hi
 800897e:	2300      	movhi	r3, #0
 8008980:	4418      	add	r0, r3
 8008982:	2300      	movs	r3, #0
 8008984:	4288      	cmp	r0, r1
 8008986:	d305      	bcc.n	8008994 <__copybits+0x40>
 8008988:	bd70      	pop	{r4, r5, r6, pc}
 800898a:	f853 6b04 	ldr.w	r6, [r3], #4
 800898e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008992:	e7eb      	b.n	800896c <__copybits+0x18>
 8008994:	f840 3b04 	str.w	r3, [r0], #4
 8008998:	e7f4      	b.n	8008984 <__copybits+0x30>

0800899a <__any_on>:
 800899a:	f100 0214 	add.w	r2, r0, #20
 800899e:	6900      	ldr	r0, [r0, #16]
 80089a0:	114b      	asrs	r3, r1, #5
 80089a2:	4298      	cmp	r0, r3
 80089a4:	b510      	push	{r4, lr}
 80089a6:	db11      	blt.n	80089cc <__any_on+0x32>
 80089a8:	dd0a      	ble.n	80089c0 <__any_on+0x26>
 80089aa:	f011 011f 	ands.w	r1, r1, #31
 80089ae:	d007      	beq.n	80089c0 <__any_on+0x26>
 80089b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80089b4:	fa24 f001 	lsr.w	r0, r4, r1
 80089b8:	fa00 f101 	lsl.w	r1, r0, r1
 80089bc:	428c      	cmp	r4, r1
 80089be:	d10b      	bne.n	80089d8 <__any_on+0x3e>
 80089c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d803      	bhi.n	80089d0 <__any_on+0x36>
 80089c8:	2000      	movs	r0, #0
 80089ca:	bd10      	pop	{r4, pc}
 80089cc:	4603      	mov	r3, r0
 80089ce:	e7f7      	b.n	80089c0 <__any_on+0x26>
 80089d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089d4:	2900      	cmp	r1, #0
 80089d6:	d0f5      	beq.n	80089c4 <__any_on+0x2a>
 80089d8:	2001      	movs	r0, #1
 80089da:	e7f6      	b.n	80089ca <__any_on+0x30>

080089dc <sulp>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4604      	mov	r4, r0
 80089e0:	460d      	mov	r5, r1
 80089e2:	ec45 4b10 	vmov	d0, r4, r5
 80089e6:	4616      	mov	r6, r2
 80089e8:	f7ff feba 	bl	8008760 <__ulp>
 80089ec:	ec51 0b10 	vmov	r0, r1, d0
 80089f0:	b17e      	cbz	r6, 8008a12 <sulp+0x36>
 80089f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dd09      	ble.n	8008a12 <sulp+0x36>
 80089fe:	051b      	lsls	r3, r3, #20
 8008a00:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008a04:	2400      	movs	r4, #0
 8008a06:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008a0a:	4622      	mov	r2, r4
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	f7f7 fe13 	bl	8000638 <__aeabi_dmul>
 8008a12:	ec41 0b10 	vmov	d0, r0, r1
 8008a16:	bd70      	pop	{r4, r5, r6, pc}

08008a18 <_strtod_l>:
 8008a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a1c:	b09f      	sub	sp, #124	@ 0x7c
 8008a1e:	460c      	mov	r4, r1
 8008a20:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a22:	2200      	movs	r2, #0
 8008a24:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a26:	9005      	str	r0, [sp, #20]
 8008a28:	f04f 0a00 	mov.w	sl, #0
 8008a2c:	f04f 0b00 	mov.w	fp, #0
 8008a30:	460a      	mov	r2, r1
 8008a32:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a34:	7811      	ldrb	r1, [r2, #0]
 8008a36:	292b      	cmp	r1, #43	@ 0x2b
 8008a38:	d04a      	beq.n	8008ad0 <_strtod_l+0xb8>
 8008a3a:	d838      	bhi.n	8008aae <_strtod_l+0x96>
 8008a3c:	290d      	cmp	r1, #13
 8008a3e:	d832      	bhi.n	8008aa6 <_strtod_l+0x8e>
 8008a40:	2908      	cmp	r1, #8
 8008a42:	d832      	bhi.n	8008aaa <_strtod_l+0x92>
 8008a44:	2900      	cmp	r1, #0
 8008a46:	d03b      	beq.n	8008ac0 <_strtod_l+0xa8>
 8008a48:	2200      	movs	r2, #0
 8008a4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008a4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a4e:	782a      	ldrb	r2, [r5, #0]
 8008a50:	2a30      	cmp	r2, #48	@ 0x30
 8008a52:	f040 80b3 	bne.w	8008bbc <_strtod_l+0x1a4>
 8008a56:	786a      	ldrb	r2, [r5, #1]
 8008a58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a5c:	2a58      	cmp	r2, #88	@ 0x58
 8008a5e:	d16e      	bne.n	8008b3e <_strtod_l+0x126>
 8008a60:	9302      	str	r3, [sp, #8]
 8008a62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a64:	9301      	str	r3, [sp, #4]
 8008a66:	ab1a      	add	r3, sp, #104	@ 0x68
 8008a68:	9300      	str	r3, [sp, #0]
 8008a6a:	4a8e      	ldr	r2, [pc, #568]	@ (8008ca4 <_strtod_l+0x28c>)
 8008a6c:	9805      	ldr	r0, [sp, #20]
 8008a6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a70:	a919      	add	r1, sp, #100	@ 0x64
 8008a72:	f001 faff 	bl	800a074 <__gethex>
 8008a76:	f010 060f 	ands.w	r6, r0, #15
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	d005      	beq.n	8008a8a <_strtod_l+0x72>
 8008a7e:	2e06      	cmp	r6, #6
 8008a80:	d128      	bne.n	8008ad4 <_strtod_l+0xbc>
 8008a82:	3501      	adds	r5, #1
 8008a84:	2300      	movs	r3, #0
 8008a86:	9519      	str	r5, [sp, #100]	@ 0x64
 8008a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 858e 	bne.w	80095ae <_strtod_l+0xb96>
 8008a92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a94:	b1cb      	cbz	r3, 8008aca <_strtod_l+0xb2>
 8008a96:	4652      	mov	r2, sl
 8008a98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008a9c:	ec43 2b10 	vmov	d0, r2, r3
 8008aa0:	b01f      	add	sp, #124	@ 0x7c
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	2920      	cmp	r1, #32
 8008aa8:	d1ce      	bne.n	8008a48 <_strtod_l+0x30>
 8008aaa:	3201      	adds	r2, #1
 8008aac:	e7c1      	b.n	8008a32 <_strtod_l+0x1a>
 8008aae:	292d      	cmp	r1, #45	@ 0x2d
 8008ab0:	d1ca      	bne.n	8008a48 <_strtod_l+0x30>
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008ab6:	1c51      	adds	r1, r2, #1
 8008ab8:	9119      	str	r1, [sp, #100]	@ 0x64
 8008aba:	7852      	ldrb	r2, [r2, #1]
 8008abc:	2a00      	cmp	r2, #0
 8008abe:	d1c5      	bne.n	8008a4c <_strtod_l+0x34>
 8008ac0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008ac2:	9419      	str	r4, [sp, #100]	@ 0x64
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f040 8570 	bne.w	80095aa <_strtod_l+0xb92>
 8008aca:	4652      	mov	r2, sl
 8008acc:	465b      	mov	r3, fp
 8008ace:	e7e5      	b.n	8008a9c <_strtod_l+0x84>
 8008ad0:	2100      	movs	r1, #0
 8008ad2:	e7ef      	b.n	8008ab4 <_strtod_l+0x9c>
 8008ad4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008ad6:	b13a      	cbz	r2, 8008ae8 <_strtod_l+0xd0>
 8008ad8:	2135      	movs	r1, #53	@ 0x35
 8008ada:	a81c      	add	r0, sp, #112	@ 0x70
 8008adc:	f7ff ff3a 	bl	8008954 <__copybits>
 8008ae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008ae2:	9805      	ldr	r0, [sp, #20]
 8008ae4:	f7ff fb08 	bl	80080f8 <_Bfree>
 8008ae8:	3e01      	subs	r6, #1
 8008aea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008aec:	2e04      	cmp	r6, #4
 8008aee:	d806      	bhi.n	8008afe <_strtod_l+0xe6>
 8008af0:	e8df f006 	tbb	[pc, r6]
 8008af4:	201d0314 	.word	0x201d0314
 8008af8:	14          	.byte	0x14
 8008af9:	00          	.byte	0x00
 8008afa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008afe:	05e1      	lsls	r1, r4, #23
 8008b00:	bf48      	it	mi
 8008b02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008b06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b0a:	0d1b      	lsrs	r3, r3, #20
 8008b0c:	051b      	lsls	r3, r3, #20
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1bb      	bne.n	8008a8a <_strtod_l+0x72>
 8008b12:	f7fe fb2f 	bl	8007174 <__errno>
 8008b16:	2322      	movs	r3, #34	@ 0x22
 8008b18:	6003      	str	r3, [r0, #0]
 8008b1a:	e7b6      	b.n	8008a8a <_strtod_l+0x72>
 8008b1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b2c:	e7e7      	b.n	8008afe <_strtod_l+0xe6>
 8008b2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008cac <_strtod_l+0x294>
 8008b32:	e7e4      	b.n	8008afe <_strtod_l+0xe6>
 8008b34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b38:	f04f 3aff 	mov.w	sl, #4294967295
 8008b3c:	e7df      	b.n	8008afe <_strtod_l+0xe6>
 8008b3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b40:	1c5a      	adds	r2, r3, #1
 8008b42:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b44:	785b      	ldrb	r3, [r3, #1]
 8008b46:	2b30      	cmp	r3, #48	@ 0x30
 8008b48:	d0f9      	beq.n	8008b3e <_strtod_l+0x126>
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d09d      	beq.n	8008a8a <_strtod_l+0x72>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b54:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b56:	2300      	movs	r3, #0
 8008b58:	9308      	str	r3, [sp, #32]
 8008b5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b5c:	461f      	mov	r7, r3
 8008b5e:	220a      	movs	r2, #10
 8008b60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b62:	7805      	ldrb	r5, [r0, #0]
 8008b64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008b68:	b2d9      	uxtb	r1, r3
 8008b6a:	2909      	cmp	r1, #9
 8008b6c:	d928      	bls.n	8008bc0 <_strtod_l+0x1a8>
 8008b6e:	494e      	ldr	r1, [pc, #312]	@ (8008ca8 <_strtod_l+0x290>)
 8008b70:	2201      	movs	r2, #1
 8008b72:	f001 f9ab 	bl	8009ecc <strncmp>
 8008b76:	2800      	cmp	r0, #0
 8008b78:	d032      	beq.n	8008be0 <_strtod_l+0x1c8>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	462a      	mov	r2, r5
 8008b7e:	4681      	mov	r9, r0
 8008b80:	463d      	mov	r5, r7
 8008b82:	4603      	mov	r3, r0
 8008b84:	2a65      	cmp	r2, #101	@ 0x65
 8008b86:	d001      	beq.n	8008b8c <_strtod_l+0x174>
 8008b88:	2a45      	cmp	r2, #69	@ 0x45
 8008b8a:	d114      	bne.n	8008bb6 <_strtod_l+0x19e>
 8008b8c:	b91d      	cbnz	r5, 8008b96 <_strtod_l+0x17e>
 8008b8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b90:	4302      	orrs	r2, r0
 8008b92:	d095      	beq.n	8008ac0 <_strtod_l+0xa8>
 8008b94:	2500      	movs	r5, #0
 8008b96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b98:	1c62      	adds	r2, r4, #1
 8008b9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b9c:	7862      	ldrb	r2, [r4, #1]
 8008b9e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008ba0:	d077      	beq.n	8008c92 <_strtod_l+0x27a>
 8008ba2:	2a2d      	cmp	r2, #45	@ 0x2d
 8008ba4:	d07b      	beq.n	8008c9e <_strtod_l+0x286>
 8008ba6:	f04f 0c00 	mov.w	ip, #0
 8008baa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008bae:	2909      	cmp	r1, #9
 8008bb0:	f240 8082 	bls.w	8008cb8 <_strtod_l+0x2a0>
 8008bb4:	9419      	str	r4, [sp, #100]	@ 0x64
 8008bb6:	f04f 0800 	mov.w	r8, #0
 8008bba:	e0a2      	b.n	8008d02 <_strtod_l+0x2ea>
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e7c7      	b.n	8008b50 <_strtod_l+0x138>
 8008bc0:	2f08      	cmp	r7, #8
 8008bc2:	bfd5      	itete	le
 8008bc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008bc6:	9908      	ldrgt	r1, [sp, #32]
 8008bc8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008bd0:	f100 0001 	add.w	r0, r0, #1
 8008bd4:	bfd4      	ite	le
 8008bd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008bd8:	9308      	strgt	r3, [sp, #32]
 8008bda:	3701      	adds	r7, #1
 8008bdc:	9019      	str	r0, [sp, #100]	@ 0x64
 8008bde:	e7bf      	b.n	8008b60 <_strtod_l+0x148>
 8008be0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008be2:	1c5a      	adds	r2, r3, #1
 8008be4:	9219      	str	r2, [sp, #100]	@ 0x64
 8008be6:	785a      	ldrb	r2, [r3, #1]
 8008be8:	b37f      	cbz	r7, 8008c4a <_strtod_l+0x232>
 8008bea:	4681      	mov	r9, r0
 8008bec:	463d      	mov	r5, r7
 8008bee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008bf2:	2b09      	cmp	r3, #9
 8008bf4:	d912      	bls.n	8008c1c <_strtod_l+0x204>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e7c4      	b.n	8008b84 <_strtod_l+0x16c>
 8008bfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c00:	785a      	ldrb	r2, [r3, #1]
 8008c02:	3001      	adds	r0, #1
 8008c04:	2a30      	cmp	r2, #48	@ 0x30
 8008c06:	d0f8      	beq.n	8008bfa <_strtod_l+0x1e2>
 8008c08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008c0c:	2b08      	cmp	r3, #8
 8008c0e:	f200 84d3 	bhi.w	80095b8 <_strtod_l+0xba0>
 8008c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c14:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c16:	4681      	mov	r9, r0
 8008c18:	2000      	movs	r0, #0
 8008c1a:	4605      	mov	r5, r0
 8008c1c:	3a30      	subs	r2, #48	@ 0x30
 8008c1e:	f100 0301 	add.w	r3, r0, #1
 8008c22:	d02a      	beq.n	8008c7a <_strtod_l+0x262>
 8008c24:	4499      	add	r9, r3
 8008c26:	eb00 0c05 	add.w	ip, r0, r5
 8008c2a:	462b      	mov	r3, r5
 8008c2c:	210a      	movs	r1, #10
 8008c2e:	4563      	cmp	r3, ip
 8008c30:	d10d      	bne.n	8008c4e <_strtod_l+0x236>
 8008c32:	1c69      	adds	r1, r5, #1
 8008c34:	4401      	add	r1, r0
 8008c36:	4428      	add	r0, r5
 8008c38:	2808      	cmp	r0, #8
 8008c3a:	dc16      	bgt.n	8008c6a <_strtod_l+0x252>
 8008c3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008c3e:	230a      	movs	r3, #10
 8008c40:	fb03 2300 	mla	r3, r3, r0, r2
 8008c44:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c46:	2300      	movs	r3, #0
 8008c48:	e018      	b.n	8008c7c <_strtod_l+0x264>
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	e7da      	b.n	8008c04 <_strtod_l+0x1ec>
 8008c4e:	2b08      	cmp	r3, #8
 8008c50:	f103 0301 	add.w	r3, r3, #1
 8008c54:	dc03      	bgt.n	8008c5e <_strtod_l+0x246>
 8008c56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008c58:	434e      	muls	r6, r1
 8008c5a:	960a      	str	r6, [sp, #40]	@ 0x28
 8008c5c:	e7e7      	b.n	8008c2e <_strtod_l+0x216>
 8008c5e:	2b10      	cmp	r3, #16
 8008c60:	bfde      	ittt	le
 8008c62:	9e08      	ldrle	r6, [sp, #32]
 8008c64:	434e      	mulle	r6, r1
 8008c66:	9608      	strle	r6, [sp, #32]
 8008c68:	e7e1      	b.n	8008c2e <_strtod_l+0x216>
 8008c6a:	280f      	cmp	r0, #15
 8008c6c:	dceb      	bgt.n	8008c46 <_strtod_l+0x22e>
 8008c6e:	9808      	ldr	r0, [sp, #32]
 8008c70:	230a      	movs	r3, #10
 8008c72:	fb03 2300 	mla	r3, r3, r0, r2
 8008c76:	9308      	str	r3, [sp, #32]
 8008c78:	e7e5      	b.n	8008c46 <_strtod_l+0x22e>
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c7e:	1c50      	adds	r0, r2, #1
 8008c80:	9019      	str	r0, [sp, #100]	@ 0x64
 8008c82:	7852      	ldrb	r2, [r2, #1]
 8008c84:	4618      	mov	r0, r3
 8008c86:	460d      	mov	r5, r1
 8008c88:	e7b1      	b.n	8008bee <_strtod_l+0x1d6>
 8008c8a:	f04f 0900 	mov.w	r9, #0
 8008c8e:	2301      	movs	r3, #1
 8008c90:	e77d      	b.n	8008b8e <_strtod_l+0x176>
 8008c92:	f04f 0c00 	mov.w	ip, #0
 8008c96:	1ca2      	adds	r2, r4, #2
 8008c98:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c9a:	78a2      	ldrb	r2, [r4, #2]
 8008c9c:	e785      	b.n	8008baa <_strtod_l+0x192>
 8008c9e:	f04f 0c01 	mov.w	ip, #1
 8008ca2:	e7f8      	b.n	8008c96 <_strtod_l+0x27e>
 8008ca4:	0800ac30 	.word	0x0800ac30
 8008ca8:	0800ac18 	.word	0x0800ac18
 8008cac:	7ff00000 	.word	0x7ff00000
 8008cb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cb2:	1c51      	adds	r1, r2, #1
 8008cb4:	9119      	str	r1, [sp, #100]	@ 0x64
 8008cb6:	7852      	ldrb	r2, [r2, #1]
 8008cb8:	2a30      	cmp	r2, #48	@ 0x30
 8008cba:	d0f9      	beq.n	8008cb0 <_strtod_l+0x298>
 8008cbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008cc0:	2908      	cmp	r1, #8
 8008cc2:	f63f af78 	bhi.w	8008bb6 <_strtod_l+0x19e>
 8008cc6:	3a30      	subs	r2, #48	@ 0x30
 8008cc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ccc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008cce:	f04f 080a 	mov.w	r8, #10
 8008cd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cd4:	1c56      	adds	r6, r2, #1
 8008cd6:	9619      	str	r6, [sp, #100]	@ 0x64
 8008cd8:	7852      	ldrb	r2, [r2, #1]
 8008cda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008cde:	f1be 0f09 	cmp.w	lr, #9
 8008ce2:	d939      	bls.n	8008d58 <_strtod_l+0x340>
 8008ce4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ce6:	1a76      	subs	r6, r6, r1
 8008ce8:	2e08      	cmp	r6, #8
 8008cea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008cee:	dc03      	bgt.n	8008cf8 <_strtod_l+0x2e0>
 8008cf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008cf2:	4588      	cmp	r8, r1
 8008cf4:	bfa8      	it	ge
 8008cf6:	4688      	movge	r8, r1
 8008cf8:	f1bc 0f00 	cmp.w	ip, #0
 8008cfc:	d001      	beq.n	8008d02 <_strtod_l+0x2ea>
 8008cfe:	f1c8 0800 	rsb	r8, r8, #0
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	d14e      	bne.n	8008da4 <_strtod_l+0x38c>
 8008d06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d08:	4308      	orrs	r0, r1
 8008d0a:	f47f aebe 	bne.w	8008a8a <_strtod_l+0x72>
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f47f aed6 	bne.w	8008ac0 <_strtod_l+0xa8>
 8008d14:	2a69      	cmp	r2, #105	@ 0x69
 8008d16:	d028      	beq.n	8008d6a <_strtod_l+0x352>
 8008d18:	dc25      	bgt.n	8008d66 <_strtod_l+0x34e>
 8008d1a:	2a49      	cmp	r2, #73	@ 0x49
 8008d1c:	d025      	beq.n	8008d6a <_strtod_l+0x352>
 8008d1e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d20:	f47f aece 	bne.w	8008ac0 <_strtod_l+0xa8>
 8008d24:	499b      	ldr	r1, [pc, #620]	@ (8008f94 <_strtod_l+0x57c>)
 8008d26:	a819      	add	r0, sp, #100	@ 0x64
 8008d28:	f001 fbc6 	bl	800a4b8 <__match>
 8008d2c:	2800      	cmp	r0, #0
 8008d2e:	f43f aec7 	beq.w	8008ac0 <_strtod_l+0xa8>
 8008d32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	2b28      	cmp	r3, #40	@ 0x28
 8008d38:	d12e      	bne.n	8008d98 <_strtod_l+0x380>
 8008d3a:	4997      	ldr	r1, [pc, #604]	@ (8008f98 <_strtod_l+0x580>)
 8008d3c:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d3e:	a819      	add	r0, sp, #100	@ 0x64
 8008d40:	f001 fbce 	bl	800a4e0 <__hexnan>
 8008d44:	2805      	cmp	r0, #5
 8008d46:	d127      	bne.n	8008d98 <_strtod_l+0x380>
 8008d48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d56:	e698      	b.n	8008a8a <_strtod_l+0x72>
 8008d58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008d5a:	fb08 2101 	mla	r1, r8, r1, r2
 8008d5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d62:	920e      	str	r2, [sp, #56]	@ 0x38
 8008d64:	e7b5      	b.n	8008cd2 <_strtod_l+0x2ba>
 8008d66:	2a6e      	cmp	r2, #110	@ 0x6e
 8008d68:	e7da      	b.n	8008d20 <_strtod_l+0x308>
 8008d6a:	498c      	ldr	r1, [pc, #560]	@ (8008f9c <_strtod_l+0x584>)
 8008d6c:	a819      	add	r0, sp, #100	@ 0x64
 8008d6e:	f001 fba3 	bl	800a4b8 <__match>
 8008d72:	2800      	cmp	r0, #0
 8008d74:	f43f aea4 	beq.w	8008ac0 <_strtod_l+0xa8>
 8008d78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d7a:	4989      	ldr	r1, [pc, #548]	@ (8008fa0 <_strtod_l+0x588>)
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	a819      	add	r0, sp, #100	@ 0x64
 8008d80:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d82:	f001 fb99 	bl	800a4b8 <__match>
 8008d86:	b910      	cbnz	r0, 8008d8e <_strtod_l+0x376>
 8008d88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d8a:	3301      	adds	r3, #1
 8008d8c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008fb0 <_strtod_l+0x598>
 8008d92:	f04f 0a00 	mov.w	sl, #0
 8008d96:	e678      	b.n	8008a8a <_strtod_l+0x72>
 8008d98:	4882      	ldr	r0, [pc, #520]	@ (8008fa4 <_strtod_l+0x58c>)
 8008d9a:	f001 f8c9 	bl	8009f30 <nan>
 8008d9e:	ec5b ab10 	vmov	sl, fp, d0
 8008da2:	e672      	b.n	8008a8a <_strtod_l+0x72>
 8008da4:	eba8 0309 	sub.w	r3, r8, r9
 8008da8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008daa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dac:	2f00      	cmp	r7, #0
 8008dae:	bf08      	it	eq
 8008db0:	462f      	moveq	r7, r5
 8008db2:	2d10      	cmp	r5, #16
 8008db4:	462c      	mov	r4, r5
 8008db6:	bfa8      	it	ge
 8008db8:	2410      	movge	r4, #16
 8008dba:	f7f7 fbc3 	bl	8000544 <__aeabi_ui2d>
 8008dbe:	2d09      	cmp	r5, #9
 8008dc0:	4682      	mov	sl, r0
 8008dc2:	468b      	mov	fp, r1
 8008dc4:	dc13      	bgt.n	8008dee <_strtod_l+0x3d6>
 8008dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f43f ae5e 	beq.w	8008a8a <_strtod_l+0x72>
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	dd78      	ble.n	8008ec4 <_strtod_l+0x4ac>
 8008dd2:	2b16      	cmp	r3, #22
 8008dd4:	dc5f      	bgt.n	8008e96 <_strtod_l+0x47e>
 8008dd6:	4974      	ldr	r1, [pc, #464]	@ (8008fa8 <_strtod_l+0x590>)
 8008dd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008de0:	4652      	mov	r2, sl
 8008de2:	465b      	mov	r3, fp
 8008de4:	f7f7 fc28 	bl	8000638 <__aeabi_dmul>
 8008de8:	4682      	mov	sl, r0
 8008dea:	468b      	mov	fp, r1
 8008dec:	e64d      	b.n	8008a8a <_strtod_l+0x72>
 8008dee:	4b6e      	ldr	r3, [pc, #440]	@ (8008fa8 <_strtod_l+0x590>)
 8008df0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008df4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008df8:	f7f7 fc1e 	bl	8000638 <__aeabi_dmul>
 8008dfc:	4682      	mov	sl, r0
 8008dfe:	9808      	ldr	r0, [sp, #32]
 8008e00:	468b      	mov	fp, r1
 8008e02:	f7f7 fb9f 	bl	8000544 <__aeabi_ui2d>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	f7f7 fa5d 	bl	80002cc <__adddf3>
 8008e12:	2d0f      	cmp	r5, #15
 8008e14:	4682      	mov	sl, r0
 8008e16:	468b      	mov	fp, r1
 8008e18:	ddd5      	ble.n	8008dc6 <_strtod_l+0x3ae>
 8008e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e1c:	1b2c      	subs	r4, r5, r4
 8008e1e:	441c      	add	r4, r3
 8008e20:	2c00      	cmp	r4, #0
 8008e22:	f340 8096 	ble.w	8008f52 <_strtod_l+0x53a>
 8008e26:	f014 030f 	ands.w	r3, r4, #15
 8008e2a:	d00a      	beq.n	8008e42 <_strtod_l+0x42a>
 8008e2c:	495e      	ldr	r1, [pc, #376]	@ (8008fa8 <_strtod_l+0x590>)
 8008e2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e32:	4652      	mov	r2, sl
 8008e34:	465b      	mov	r3, fp
 8008e36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e3a:	f7f7 fbfd 	bl	8000638 <__aeabi_dmul>
 8008e3e:	4682      	mov	sl, r0
 8008e40:	468b      	mov	fp, r1
 8008e42:	f034 040f 	bics.w	r4, r4, #15
 8008e46:	d073      	beq.n	8008f30 <_strtod_l+0x518>
 8008e48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e4c:	dd48      	ble.n	8008ee0 <_strtod_l+0x4c8>
 8008e4e:	2400      	movs	r4, #0
 8008e50:	46a0      	mov	r8, r4
 8008e52:	940a      	str	r4, [sp, #40]	@ 0x28
 8008e54:	46a1      	mov	r9, r4
 8008e56:	9a05      	ldr	r2, [sp, #20]
 8008e58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008fb0 <_strtod_l+0x598>
 8008e5c:	2322      	movs	r3, #34	@ 0x22
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	f04f 0a00 	mov.w	sl, #0
 8008e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	f43f ae0f 	beq.w	8008a8a <_strtod_l+0x72>
 8008e6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e6e:	9805      	ldr	r0, [sp, #20]
 8008e70:	f7ff f942 	bl	80080f8 <_Bfree>
 8008e74:	9805      	ldr	r0, [sp, #20]
 8008e76:	4649      	mov	r1, r9
 8008e78:	f7ff f93e 	bl	80080f8 <_Bfree>
 8008e7c:	9805      	ldr	r0, [sp, #20]
 8008e7e:	4641      	mov	r1, r8
 8008e80:	f7ff f93a 	bl	80080f8 <_Bfree>
 8008e84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e86:	9805      	ldr	r0, [sp, #20]
 8008e88:	f7ff f936 	bl	80080f8 <_Bfree>
 8008e8c:	9805      	ldr	r0, [sp, #20]
 8008e8e:	4621      	mov	r1, r4
 8008e90:	f7ff f932 	bl	80080f8 <_Bfree>
 8008e94:	e5f9      	b.n	8008a8a <_strtod_l+0x72>
 8008e96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	dbbc      	blt.n	8008e1a <_strtod_l+0x402>
 8008ea0:	4c41      	ldr	r4, [pc, #260]	@ (8008fa8 <_strtod_l+0x590>)
 8008ea2:	f1c5 050f 	rsb	r5, r5, #15
 8008ea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008eaa:	4652      	mov	r2, sl
 8008eac:	465b      	mov	r3, fp
 8008eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008eb2:	f7f7 fbc1 	bl	8000638 <__aeabi_dmul>
 8008eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008eb8:	1b5d      	subs	r5, r3, r5
 8008eba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008ebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008ec2:	e78f      	b.n	8008de4 <_strtod_l+0x3cc>
 8008ec4:	3316      	adds	r3, #22
 8008ec6:	dba8      	blt.n	8008e1a <_strtod_l+0x402>
 8008ec8:	4b37      	ldr	r3, [pc, #220]	@ (8008fa8 <_strtod_l+0x590>)
 8008eca:	eba9 0808 	sub.w	r8, r9, r8
 8008ece:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ed2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ed6:	4650      	mov	r0, sl
 8008ed8:	4659      	mov	r1, fp
 8008eda:	f7f7 fcd7 	bl	800088c <__aeabi_ddiv>
 8008ede:	e783      	b.n	8008de8 <_strtod_l+0x3d0>
 8008ee0:	4b32      	ldr	r3, [pc, #200]	@ (8008fac <_strtod_l+0x594>)
 8008ee2:	9308      	str	r3, [sp, #32]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	1124      	asrs	r4, r4, #4
 8008ee8:	4650      	mov	r0, sl
 8008eea:	4659      	mov	r1, fp
 8008eec:	461e      	mov	r6, r3
 8008eee:	2c01      	cmp	r4, #1
 8008ef0:	dc21      	bgt.n	8008f36 <_strtod_l+0x51e>
 8008ef2:	b10b      	cbz	r3, 8008ef8 <_strtod_l+0x4e0>
 8008ef4:	4682      	mov	sl, r0
 8008ef6:	468b      	mov	fp, r1
 8008ef8:	492c      	ldr	r1, [pc, #176]	@ (8008fac <_strtod_l+0x594>)
 8008efa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008efe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008f02:	4652      	mov	r2, sl
 8008f04:	465b      	mov	r3, fp
 8008f06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008f0a:	f7f7 fb95 	bl	8000638 <__aeabi_dmul>
 8008f0e:	4b28      	ldr	r3, [pc, #160]	@ (8008fb0 <_strtod_l+0x598>)
 8008f10:	460a      	mov	r2, r1
 8008f12:	400b      	ands	r3, r1
 8008f14:	4927      	ldr	r1, [pc, #156]	@ (8008fb4 <_strtod_l+0x59c>)
 8008f16:	428b      	cmp	r3, r1
 8008f18:	4682      	mov	sl, r0
 8008f1a:	d898      	bhi.n	8008e4e <_strtod_l+0x436>
 8008f1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f20:	428b      	cmp	r3, r1
 8008f22:	bf86      	itte	hi
 8008f24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008fb8 <_strtod_l+0x5a0>
 8008f28:	f04f 3aff 	movhi.w	sl, #4294967295
 8008f2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f30:	2300      	movs	r3, #0
 8008f32:	9308      	str	r3, [sp, #32]
 8008f34:	e07a      	b.n	800902c <_strtod_l+0x614>
 8008f36:	07e2      	lsls	r2, r4, #31
 8008f38:	d505      	bpl.n	8008f46 <_strtod_l+0x52e>
 8008f3a:	9b08      	ldr	r3, [sp, #32]
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f7f7 fb7a 	bl	8000638 <__aeabi_dmul>
 8008f44:	2301      	movs	r3, #1
 8008f46:	9a08      	ldr	r2, [sp, #32]
 8008f48:	3208      	adds	r2, #8
 8008f4a:	3601      	adds	r6, #1
 8008f4c:	1064      	asrs	r4, r4, #1
 8008f4e:	9208      	str	r2, [sp, #32]
 8008f50:	e7cd      	b.n	8008eee <_strtod_l+0x4d6>
 8008f52:	d0ed      	beq.n	8008f30 <_strtod_l+0x518>
 8008f54:	4264      	negs	r4, r4
 8008f56:	f014 020f 	ands.w	r2, r4, #15
 8008f5a:	d00a      	beq.n	8008f72 <_strtod_l+0x55a>
 8008f5c:	4b12      	ldr	r3, [pc, #72]	@ (8008fa8 <_strtod_l+0x590>)
 8008f5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f62:	4650      	mov	r0, sl
 8008f64:	4659      	mov	r1, fp
 8008f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f6a:	f7f7 fc8f 	bl	800088c <__aeabi_ddiv>
 8008f6e:	4682      	mov	sl, r0
 8008f70:	468b      	mov	fp, r1
 8008f72:	1124      	asrs	r4, r4, #4
 8008f74:	d0dc      	beq.n	8008f30 <_strtod_l+0x518>
 8008f76:	2c1f      	cmp	r4, #31
 8008f78:	dd20      	ble.n	8008fbc <_strtod_l+0x5a4>
 8008f7a:	2400      	movs	r4, #0
 8008f7c:	46a0      	mov	r8, r4
 8008f7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8008f80:	46a1      	mov	r9, r4
 8008f82:	9a05      	ldr	r2, [sp, #20]
 8008f84:	2322      	movs	r3, #34	@ 0x22
 8008f86:	f04f 0a00 	mov.w	sl, #0
 8008f8a:	f04f 0b00 	mov.w	fp, #0
 8008f8e:	6013      	str	r3, [r2, #0]
 8008f90:	e768      	b.n	8008e64 <_strtod_l+0x44c>
 8008f92:	bf00      	nop
 8008f94:	0800aa09 	.word	0x0800aa09
 8008f98:	0800ac1c 	.word	0x0800ac1c
 8008f9c:	0800aa01 	.word	0x0800aa01
 8008fa0:	0800aa38 	.word	0x0800aa38
 8008fa4:	0800adc5 	.word	0x0800adc5
 8008fa8:	0800ab50 	.word	0x0800ab50
 8008fac:	0800ab28 	.word	0x0800ab28
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	7ca00000 	.word	0x7ca00000
 8008fb8:	7fefffff 	.word	0x7fefffff
 8008fbc:	f014 0310 	ands.w	r3, r4, #16
 8008fc0:	bf18      	it	ne
 8008fc2:	236a      	movne	r3, #106	@ 0x6a
 8008fc4:	4ea9      	ldr	r6, [pc, #676]	@ (800926c <_strtod_l+0x854>)
 8008fc6:	9308      	str	r3, [sp, #32]
 8008fc8:	4650      	mov	r0, sl
 8008fca:	4659      	mov	r1, fp
 8008fcc:	2300      	movs	r3, #0
 8008fce:	07e2      	lsls	r2, r4, #31
 8008fd0:	d504      	bpl.n	8008fdc <_strtod_l+0x5c4>
 8008fd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fd6:	f7f7 fb2f 	bl	8000638 <__aeabi_dmul>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	1064      	asrs	r4, r4, #1
 8008fde:	f106 0608 	add.w	r6, r6, #8
 8008fe2:	d1f4      	bne.n	8008fce <_strtod_l+0x5b6>
 8008fe4:	b10b      	cbz	r3, 8008fea <_strtod_l+0x5d2>
 8008fe6:	4682      	mov	sl, r0
 8008fe8:	468b      	mov	fp, r1
 8008fea:	9b08      	ldr	r3, [sp, #32]
 8008fec:	b1b3      	cbz	r3, 800901c <_strtod_l+0x604>
 8008fee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008ff2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	4659      	mov	r1, fp
 8008ffa:	dd0f      	ble.n	800901c <_strtod_l+0x604>
 8008ffc:	2b1f      	cmp	r3, #31
 8008ffe:	dd55      	ble.n	80090ac <_strtod_l+0x694>
 8009000:	2b34      	cmp	r3, #52	@ 0x34
 8009002:	bfde      	ittt	le
 8009004:	f04f 33ff 	movle.w	r3, #4294967295
 8009008:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800900c:	4093      	lslle	r3, r2
 800900e:	f04f 0a00 	mov.w	sl, #0
 8009012:	bfcc      	ite	gt
 8009014:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009018:	ea03 0b01 	andle.w	fp, r3, r1
 800901c:	2200      	movs	r2, #0
 800901e:	2300      	movs	r3, #0
 8009020:	4650      	mov	r0, sl
 8009022:	4659      	mov	r1, fp
 8009024:	f7f7 fd70 	bl	8000b08 <__aeabi_dcmpeq>
 8009028:	2800      	cmp	r0, #0
 800902a:	d1a6      	bne.n	8008f7a <_strtod_l+0x562>
 800902c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009032:	9805      	ldr	r0, [sp, #20]
 8009034:	462b      	mov	r3, r5
 8009036:	463a      	mov	r2, r7
 8009038:	f7ff f8c6 	bl	80081c8 <__s2b>
 800903c:	900a      	str	r0, [sp, #40]	@ 0x28
 800903e:	2800      	cmp	r0, #0
 8009040:	f43f af05 	beq.w	8008e4e <_strtod_l+0x436>
 8009044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009046:	2a00      	cmp	r2, #0
 8009048:	eba9 0308 	sub.w	r3, r9, r8
 800904c:	bfa8      	it	ge
 800904e:	2300      	movge	r3, #0
 8009050:	9312      	str	r3, [sp, #72]	@ 0x48
 8009052:	2400      	movs	r4, #0
 8009054:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009058:	9316      	str	r3, [sp, #88]	@ 0x58
 800905a:	46a0      	mov	r8, r4
 800905c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800905e:	9805      	ldr	r0, [sp, #20]
 8009060:	6859      	ldr	r1, [r3, #4]
 8009062:	f7ff f809 	bl	8008078 <_Balloc>
 8009066:	4681      	mov	r9, r0
 8009068:	2800      	cmp	r0, #0
 800906a:	f43f aef4 	beq.w	8008e56 <_strtod_l+0x43e>
 800906e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009070:	691a      	ldr	r2, [r3, #16]
 8009072:	3202      	adds	r2, #2
 8009074:	f103 010c 	add.w	r1, r3, #12
 8009078:	0092      	lsls	r2, r2, #2
 800907a:	300c      	adds	r0, #12
 800907c:	f000 ff48 	bl	8009f10 <memcpy>
 8009080:	ec4b ab10 	vmov	d0, sl, fp
 8009084:	9805      	ldr	r0, [sp, #20]
 8009086:	aa1c      	add	r2, sp, #112	@ 0x70
 8009088:	a91b      	add	r1, sp, #108	@ 0x6c
 800908a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800908e:	f7ff fbd7 	bl	8008840 <__d2b>
 8009092:	901a      	str	r0, [sp, #104]	@ 0x68
 8009094:	2800      	cmp	r0, #0
 8009096:	f43f aede 	beq.w	8008e56 <_strtod_l+0x43e>
 800909a:	9805      	ldr	r0, [sp, #20]
 800909c:	2101      	movs	r1, #1
 800909e:	f7ff f929 	bl	80082f4 <__i2b>
 80090a2:	4680      	mov	r8, r0
 80090a4:	b948      	cbnz	r0, 80090ba <_strtod_l+0x6a2>
 80090a6:	f04f 0800 	mov.w	r8, #0
 80090aa:	e6d4      	b.n	8008e56 <_strtod_l+0x43e>
 80090ac:	f04f 32ff 	mov.w	r2, #4294967295
 80090b0:	fa02 f303 	lsl.w	r3, r2, r3
 80090b4:	ea03 0a0a 	and.w	sl, r3, sl
 80090b8:	e7b0      	b.n	800901c <_strtod_l+0x604>
 80090ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80090bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80090be:	2d00      	cmp	r5, #0
 80090c0:	bfab      	itete	ge
 80090c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80090c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80090c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80090c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80090ca:	bfac      	ite	ge
 80090cc:	18ef      	addge	r7, r5, r3
 80090ce:	1b5e      	sublt	r6, r3, r5
 80090d0:	9b08      	ldr	r3, [sp, #32]
 80090d2:	1aed      	subs	r5, r5, r3
 80090d4:	4415      	add	r5, r2
 80090d6:	4b66      	ldr	r3, [pc, #408]	@ (8009270 <_strtod_l+0x858>)
 80090d8:	3d01      	subs	r5, #1
 80090da:	429d      	cmp	r5, r3
 80090dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80090e0:	da50      	bge.n	8009184 <_strtod_l+0x76c>
 80090e2:	1b5b      	subs	r3, r3, r5
 80090e4:	2b1f      	cmp	r3, #31
 80090e6:	eba2 0203 	sub.w	r2, r2, r3
 80090ea:	f04f 0101 	mov.w	r1, #1
 80090ee:	dc3d      	bgt.n	800916c <_strtod_l+0x754>
 80090f0:	fa01 f303 	lsl.w	r3, r1, r3
 80090f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090f6:	2300      	movs	r3, #0
 80090f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80090fa:	18bd      	adds	r5, r7, r2
 80090fc:	9b08      	ldr	r3, [sp, #32]
 80090fe:	42af      	cmp	r7, r5
 8009100:	4416      	add	r6, r2
 8009102:	441e      	add	r6, r3
 8009104:	463b      	mov	r3, r7
 8009106:	bfa8      	it	ge
 8009108:	462b      	movge	r3, r5
 800910a:	42b3      	cmp	r3, r6
 800910c:	bfa8      	it	ge
 800910e:	4633      	movge	r3, r6
 8009110:	2b00      	cmp	r3, #0
 8009112:	bfc2      	ittt	gt
 8009114:	1aed      	subgt	r5, r5, r3
 8009116:	1af6      	subgt	r6, r6, r3
 8009118:	1aff      	subgt	r7, r7, r3
 800911a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800911c:	2b00      	cmp	r3, #0
 800911e:	dd16      	ble.n	800914e <_strtod_l+0x736>
 8009120:	4641      	mov	r1, r8
 8009122:	9805      	ldr	r0, [sp, #20]
 8009124:	461a      	mov	r2, r3
 8009126:	f7ff f9a5 	bl	8008474 <__pow5mult>
 800912a:	4680      	mov	r8, r0
 800912c:	2800      	cmp	r0, #0
 800912e:	d0ba      	beq.n	80090a6 <_strtod_l+0x68e>
 8009130:	4601      	mov	r1, r0
 8009132:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009134:	9805      	ldr	r0, [sp, #20]
 8009136:	f7ff f8f3 	bl	8008320 <__multiply>
 800913a:	900e      	str	r0, [sp, #56]	@ 0x38
 800913c:	2800      	cmp	r0, #0
 800913e:	f43f ae8a 	beq.w	8008e56 <_strtod_l+0x43e>
 8009142:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009144:	9805      	ldr	r0, [sp, #20]
 8009146:	f7fe ffd7 	bl	80080f8 <_Bfree>
 800914a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800914c:	931a      	str	r3, [sp, #104]	@ 0x68
 800914e:	2d00      	cmp	r5, #0
 8009150:	dc1d      	bgt.n	800918e <_strtod_l+0x776>
 8009152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009154:	2b00      	cmp	r3, #0
 8009156:	dd23      	ble.n	80091a0 <_strtod_l+0x788>
 8009158:	4649      	mov	r1, r9
 800915a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800915c:	9805      	ldr	r0, [sp, #20]
 800915e:	f7ff f989 	bl	8008474 <__pow5mult>
 8009162:	4681      	mov	r9, r0
 8009164:	b9e0      	cbnz	r0, 80091a0 <_strtod_l+0x788>
 8009166:	f04f 0900 	mov.w	r9, #0
 800916a:	e674      	b.n	8008e56 <_strtod_l+0x43e>
 800916c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009170:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009174:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009178:	35e2      	adds	r5, #226	@ 0xe2
 800917a:	fa01 f305 	lsl.w	r3, r1, r5
 800917e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009180:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009182:	e7ba      	b.n	80090fa <_strtod_l+0x6e2>
 8009184:	2300      	movs	r3, #0
 8009186:	9310      	str	r3, [sp, #64]	@ 0x40
 8009188:	2301      	movs	r3, #1
 800918a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800918c:	e7b5      	b.n	80090fa <_strtod_l+0x6e2>
 800918e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009190:	9805      	ldr	r0, [sp, #20]
 8009192:	462a      	mov	r2, r5
 8009194:	f7ff f9c8 	bl	8008528 <__lshift>
 8009198:	901a      	str	r0, [sp, #104]	@ 0x68
 800919a:	2800      	cmp	r0, #0
 800919c:	d1d9      	bne.n	8009152 <_strtod_l+0x73a>
 800919e:	e65a      	b.n	8008e56 <_strtod_l+0x43e>
 80091a0:	2e00      	cmp	r6, #0
 80091a2:	dd07      	ble.n	80091b4 <_strtod_l+0x79c>
 80091a4:	4649      	mov	r1, r9
 80091a6:	9805      	ldr	r0, [sp, #20]
 80091a8:	4632      	mov	r2, r6
 80091aa:	f7ff f9bd 	bl	8008528 <__lshift>
 80091ae:	4681      	mov	r9, r0
 80091b0:	2800      	cmp	r0, #0
 80091b2:	d0d8      	beq.n	8009166 <_strtod_l+0x74e>
 80091b4:	2f00      	cmp	r7, #0
 80091b6:	dd08      	ble.n	80091ca <_strtod_l+0x7b2>
 80091b8:	4641      	mov	r1, r8
 80091ba:	9805      	ldr	r0, [sp, #20]
 80091bc:	463a      	mov	r2, r7
 80091be:	f7ff f9b3 	bl	8008528 <__lshift>
 80091c2:	4680      	mov	r8, r0
 80091c4:	2800      	cmp	r0, #0
 80091c6:	f43f ae46 	beq.w	8008e56 <_strtod_l+0x43e>
 80091ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091cc:	9805      	ldr	r0, [sp, #20]
 80091ce:	464a      	mov	r2, r9
 80091d0:	f7ff fa32 	bl	8008638 <__mdiff>
 80091d4:	4604      	mov	r4, r0
 80091d6:	2800      	cmp	r0, #0
 80091d8:	f43f ae3d 	beq.w	8008e56 <_strtod_l+0x43e>
 80091dc:	68c3      	ldr	r3, [r0, #12]
 80091de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091e0:	2300      	movs	r3, #0
 80091e2:	60c3      	str	r3, [r0, #12]
 80091e4:	4641      	mov	r1, r8
 80091e6:	f7ff fa0b 	bl	8008600 <__mcmp>
 80091ea:	2800      	cmp	r0, #0
 80091ec:	da46      	bge.n	800927c <_strtod_l+0x864>
 80091ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091f0:	ea53 030a 	orrs.w	r3, r3, sl
 80091f4:	d16c      	bne.n	80092d0 <_strtod_l+0x8b8>
 80091f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d168      	bne.n	80092d0 <_strtod_l+0x8b8>
 80091fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009202:	0d1b      	lsrs	r3, r3, #20
 8009204:	051b      	lsls	r3, r3, #20
 8009206:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800920a:	d961      	bls.n	80092d0 <_strtod_l+0x8b8>
 800920c:	6963      	ldr	r3, [r4, #20]
 800920e:	b913      	cbnz	r3, 8009216 <_strtod_l+0x7fe>
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	2b01      	cmp	r3, #1
 8009214:	dd5c      	ble.n	80092d0 <_strtod_l+0x8b8>
 8009216:	4621      	mov	r1, r4
 8009218:	2201      	movs	r2, #1
 800921a:	9805      	ldr	r0, [sp, #20]
 800921c:	f7ff f984 	bl	8008528 <__lshift>
 8009220:	4641      	mov	r1, r8
 8009222:	4604      	mov	r4, r0
 8009224:	f7ff f9ec 	bl	8008600 <__mcmp>
 8009228:	2800      	cmp	r0, #0
 800922a:	dd51      	ble.n	80092d0 <_strtod_l+0x8b8>
 800922c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009230:	9a08      	ldr	r2, [sp, #32]
 8009232:	0d1b      	lsrs	r3, r3, #20
 8009234:	051b      	lsls	r3, r3, #20
 8009236:	2a00      	cmp	r2, #0
 8009238:	d06b      	beq.n	8009312 <_strtod_l+0x8fa>
 800923a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800923e:	d868      	bhi.n	8009312 <_strtod_l+0x8fa>
 8009240:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009244:	f67f ae9d 	bls.w	8008f82 <_strtod_l+0x56a>
 8009248:	4b0a      	ldr	r3, [pc, #40]	@ (8009274 <_strtod_l+0x85c>)
 800924a:	4650      	mov	r0, sl
 800924c:	4659      	mov	r1, fp
 800924e:	2200      	movs	r2, #0
 8009250:	f7f7 f9f2 	bl	8000638 <__aeabi_dmul>
 8009254:	4b08      	ldr	r3, [pc, #32]	@ (8009278 <_strtod_l+0x860>)
 8009256:	400b      	ands	r3, r1
 8009258:	4682      	mov	sl, r0
 800925a:	468b      	mov	fp, r1
 800925c:	2b00      	cmp	r3, #0
 800925e:	f47f ae05 	bne.w	8008e6c <_strtod_l+0x454>
 8009262:	9a05      	ldr	r2, [sp, #20]
 8009264:	2322      	movs	r3, #34	@ 0x22
 8009266:	6013      	str	r3, [r2, #0]
 8009268:	e600      	b.n	8008e6c <_strtod_l+0x454>
 800926a:	bf00      	nop
 800926c:	0800ac48 	.word	0x0800ac48
 8009270:	fffffc02 	.word	0xfffffc02
 8009274:	39500000 	.word	0x39500000
 8009278:	7ff00000 	.word	0x7ff00000
 800927c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009280:	d165      	bne.n	800934e <_strtod_l+0x936>
 8009282:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009288:	b35a      	cbz	r2, 80092e2 <_strtod_l+0x8ca>
 800928a:	4a9f      	ldr	r2, [pc, #636]	@ (8009508 <_strtod_l+0xaf0>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d12b      	bne.n	80092e8 <_strtod_l+0x8d0>
 8009290:	9b08      	ldr	r3, [sp, #32]
 8009292:	4651      	mov	r1, sl
 8009294:	b303      	cbz	r3, 80092d8 <_strtod_l+0x8c0>
 8009296:	4b9d      	ldr	r3, [pc, #628]	@ (800950c <_strtod_l+0xaf4>)
 8009298:	465a      	mov	r2, fp
 800929a:	4013      	ands	r3, r2
 800929c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80092a0:	f04f 32ff 	mov.w	r2, #4294967295
 80092a4:	d81b      	bhi.n	80092de <_strtod_l+0x8c6>
 80092a6:	0d1b      	lsrs	r3, r3, #20
 80092a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80092ac:	fa02 f303 	lsl.w	r3, r2, r3
 80092b0:	4299      	cmp	r1, r3
 80092b2:	d119      	bne.n	80092e8 <_strtod_l+0x8d0>
 80092b4:	4b96      	ldr	r3, [pc, #600]	@ (8009510 <_strtod_l+0xaf8>)
 80092b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092b8:	429a      	cmp	r2, r3
 80092ba:	d102      	bne.n	80092c2 <_strtod_l+0x8aa>
 80092bc:	3101      	adds	r1, #1
 80092be:	f43f adca 	beq.w	8008e56 <_strtod_l+0x43e>
 80092c2:	4b92      	ldr	r3, [pc, #584]	@ (800950c <_strtod_l+0xaf4>)
 80092c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092c6:	401a      	ands	r2, r3
 80092c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80092cc:	f04f 0a00 	mov.w	sl, #0
 80092d0:	9b08      	ldr	r3, [sp, #32]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1b8      	bne.n	8009248 <_strtod_l+0x830>
 80092d6:	e5c9      	b.n	8008e6c <_strtod_l+0x454>
 80092d8:	f04f 33ff 	mov.w	r3, #4294967295
 80092dc:	e7e8      	b.n	80092b0 <_strtod_l+0x898>
 80092de:	4613      	mov	r3, r2
 80092e0:	e7e6      	b.n	80092b0 <_strtod_l+0x898>
 80092e2:	ea53 030a 	orrs.w	r3, r3, sl
 80092e6:	d0a1      	beq.n	800922c <_strtod_l+0x814>
 80092e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092ea:	b1db      	cbz	r3, 8009324 <_strtod_l+0x90c>
 80092ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092ee:	4213      	tst	r3, r2
 80092f0:	d0ee      	beq.n	80092d0 <_strtod_l+0x8b8>
 80092f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092f4:	9a08      	ldr	r2, [sp, #32]
 80092f6:	4650      	mov	r0, sl
 80092f8:	4659      	mov	r1, fp
 80092fa:	b1bb      	cbz	r3, 800932c <_strtod_l+0x914>
 80092fc:	f7ff fb6e 	bl	80089dc <sulp>
 8009300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009304:	ec53 2b10 	vmov	r2, r3, d0
 8009308:	f7f6 ffe0 	bl	80002cc <__adddf3>
 800930c:	4682      	mov	sl, r0
 800930e:	468b      	mov	fp, r1
 8009310:	e7de      	b.n	80092d0 <_strtod_l+0x8b8>
 8009312:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009316:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800931a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800931e:	f04f 3aff 	mov.w	sl, #4294967295
 8009322:	e7d5      	b.n	80092d0 <_strtod_l+0x8b8>
 8009324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009326:	ea13 0f0a 	tst.w	r3, sl
 800932a:	e7e1      	b.n	80092f0 <_strtod_l+0x8d8>
 800932c:	f7ff fb56 	bl	80089dc <sulp>
 8009330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009334:	ec53 2b10 	vmov	r2, r3, d0
 8009338:	f7f6 ffc6 	bl	80002c8 <__aeabi_dsub>
 800933c:	2200      	movs	r2, #0
 800933e:	2300      	movs	r3, #0
 8009340:	4682      	mov	sl, r0
 8009342:	468b      	mov	fp, r1
 8009344:	f7f7 fbe0 	bl	8000b08 <__aeabi_dcmpeq>
 8009348:	2800      	cmp	r0, #0
 800934a:	d0c1      	beq.n	80092d0 <_strtod_l+0x8b8>
 800934c:	e619      	b.n	8008f82 <_strtod_l+0x56a>
 800934e:	4641      	mov	r1, r8
 8009350:	4620      	mov	r0, r4
 8009352:	f7ff facd 	bl	80088f0 <__ratio>
 8009356:	ec57 6b10 	vmov	r6, r7, d0
 800935a:	2200      	movs	r2, #0
 800935c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009360:	4630      	mov	r0, r6
 8009362:	4639      	mov	r1, r7
 8009364:	f7f7 fbe4 	bl	8000b30 <__aeabi_dcmple>
 8009368:	2800      	cmp	r0, #0
 800936a:	d06f      	beq.n	800944c <_strtod_l+0xa34>
 800936c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800936e:	2b00      	cmp	r3, #0
 8009370:	d17a      	bne.n	8009468 <_strtod_l+0xa50>
 8009372:	f1ba 0f00 	cmp.w	sl, #0
 8009376:	d158      	bne.n	800942a <_strtod_l+0xa12>
 8009378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800937a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800937e:	2b00      	cmp	r3, #0
 8009380:	d15a      	bne.n	8009438 <_strtod_l+0xa20>
 8009382:	4b64      	ldr	r3, [pc, #400]	@ (8009514 <_strtod_l+0xafc>)
 8009384:	2200      	movs	r2, #0
 8009386:	4630      	mov	r0, r6
 8009388:	4639      	mov	r1, r7
 800938a:	f7f7 fbc7 	bl	8000b1c <__aeabi_dcmplt>
 800938e:	2800      	cmp	r0, #0
 8009390:	d159      	bne.n	8009446 <_strtod_l+0xa2e>
 8009392:	4630      	mov	r0, r6
 8009394:	4639      	mov	r1, r7
 8009396:	4b60      	ldr	r3, [pc, #384]	@ (8009518 <_strtod_l+0xb00>)
 8009398:	2200      	movs	r2, #0
 800939a:	f7f7 f94d 	bl	8000638 <__aeabi_dmul>
 800939e:	4606      	mov	r6, r0
 80093a0:	460f      	mov	r7, r1
 80093a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80093a6:	9606      	str	r6, [sp, #24]
 80093a8:	9307      	str	r3, [sp, #28]
 80093aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093ae:	4d57      	ldr	r5, [pc, #348]	@ (800950c <_strtod_l+0xaf4>)
 80093b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80093b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093b6:	401d      	ands	r5, r3
 80093b8:	4b58      	ldr	r3, [pc, #352]	@ (800951c <_strtod_l+0xb04>)
 80093ba:	429d      	cmp	r5, r3
 80093bc:	f040 80b2 	bne.w	8009524 <_strtod_l+0xb0c>
 80093c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80093c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80093c6:	ec4b ab10 	vmov	d0, sl, fp
 80093ca:	f7ff f9c9 	bl	8008760 <__ulp>
 80093ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093d2:	ec51 0b10 	vmov	r0, r1, d0
 80093d6:	f7f7 f92f 	bl	8000638 <__aeabi_dmul>
 80093da:	4652      	mov	r2, sl
 80093dc:	465b      	mov	r3, fp
 80093de:	f7f6 ff75 	bl	80002cc <__adddf3>
 80093e2:	460b      	mov	r3, r1
 80093e4:	4949      	ldr	r1, [pc, #292]	@ (800950c <_strtod_l+0xaf4>)
 80093e6:	4a4e      	ldr	r2, [pc, #312]	@ (8009520 <_strtod_l+0xb08>)
 80093e8:	4019      	ands	r1, r3
 80093ea:	4291      	cmp	r1, r2
 80093ec:	4682      	mov	sl, r0
 80093ee:	d942      	bls.n	8009476 <_strtod_l+0xa5e>
 80093f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093f2:	4b47      	ldr	r3, [pc, #284]	@ (8009510 <_strtod_l+0xaf8>)
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d103      	bne.n	8009400 <_strtod_l+0x9e8>
 80093f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093fa:	3301      	adds	r3, #1
 80093fc:	f43f ad2b 	beq.w	8008e56 <_strtod_l+0x43e>
 8009400:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009510 <_strtod_l+0xaf8>
 8009404:	f04f 3aff 	mov.w	sl, #4294967295
 8009408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800940a:	9805      	ldr	r0, [sp, #20]
 800940c:	f7fe fe74 	bl	80080f8 <_Bfree>
 8009410:	9805      	ldr	r0, [sp, #20]
 8009412:	4649      	mov	r1, r9
 8009414:	f7fe fe70 	bl	80080f8 <_Bfree>
 8009418:	9805      	ldr	r0, [sp, #20]
 800941a:	4641      	mov	r1, r8
 800941c:	f7fe fe6c 	bl	80080f8 <_Bfree>
 8009420:	9805      	ldr	r0, [sp, #20]
 8009422:	4621      	mov	r1, r4
 8009424:	f7fe fe68 	bl	80080f8 <_Bfree>
 8009428:	e618      	b.n	800905c <_strtod_l+0x644>
 800942a:	f1ba 0f01 	cmp.w	sl, #1
 800942e:	d103      	bne.n	8009438 <_strtod_l+0xa20>
 8009430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009432:	2b00      	cmp	r3, #0
 8009434:	f43f ada5 	beq.w	8008f82 <_strtod_l+0x56a>
 8009438:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80094e8 <_strtod_l+0xad0>
 800943c:	4f35      	ldr	r7, [pc, #212]	@ (8009514 <_strtod_l+0xafc>)
 800943e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009442:	2600      	movs	r6, #0
 8009444:	e7b1      	b.n	80093aa <_strtod_l+0x992>
 8009446:	4f34      	ldr	r7, [pc, #208]	@ (8009518 <_strtod_l+0xb00>)
 8009448:	2600      	movs	r6, #0
 800944a:	e7aa      	b.n	80093a2 <_strtod_l+0x98a>
 800944c:	4b32      	ldr	r3, [pc, #200]	@ (8009518 <_strtod_l+0xb00>)
 800944e:	4630      	mov	r0, r6
 8009450:	4639      	mov	r1, r7
 8009452:	2200      	movs	r2, #0
 8009454:	f7f7 f8f0 	bl	8000638 <__aeabi_dmul>
 8009458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800945a:	4606      	mov	r6, r0
 800945c:	460f      	mov	r7, r1
 800945e:	2b00      	cmp	r3, #0
 8009460:	d09f      	beq.n	80093a2 <_strtod_l+0x98a>
 8009462:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009466:	e7a0      	b.n	80093aa <_strtod_l+0x992>
 8009468:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80094f0 <_strtod_l+0xad8>
 800946c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009470:	ec57 6b17 	vmov	r6, r7, d7
 8009474:	e799      	b.n	80093aa <_strtod_l+0x992>
 8009476:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800947a:	9b08      	ldr	r3, [sp, #32]
 800947c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1c1      	bne.n	8009408 <_strtod_l+0x9f0>
 8009484:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009488:	0d1b      	lsrs	r3, r3, #20
 800948a:	051b      	lsls	r3, r3, #20
 800948c:	429d      	cmp	r5, r3
 800948e:	d1bb      	bne.n	8009408 <_strtod_l+0x9f0>
 8009490:	4630      	mov	r0, r6
 8009492:	4639      	mov	r1, r7
 8009494:	f7f7 fc30 	bl	8000cf8 <__aeabi_d2lz>
 8009498:	f7f7 f8a0 	bl	80005dc <__aeabi_l2d>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4630      	mov	r0, r6
 80094a2:	4639      	mov	r1, r7
 80094a4:	f7f6 ff10 	bl	80002c8 <__aeabi_dsub>
 80094a8:	460b      	mov	r3, r1
 80094aa:	4602      	mov	r2, r0
 80094ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80094b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80094b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094b6:	ea46 060a 	orr.w	r6, r6, sl
 80094ba:	431e      	orrs	r6, r3
 80094bc:	d06f      	beq.n	800959e <_strtod_l+0xb86>
 80094be:	a30e      	add	r3, pc, #56	@ (adr r3, 80094f8 <_strtod_l+0xae0>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f7f7 fb2a 	bl	8000b1c <__aeabi_dcmplt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	f47f accf 	bne.w	8008e6c <_strtod_l+0x454>
 80094ce:	a30c      	add	r3, pc, #48	@ (adr r3, 8009500 <_strtod_l+0xae8>)
 80094d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094d8:	f7f7 fb3e 	bl	8000b58 <__aeabi_dcmpgt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d093      	beq.n	8009408 <_strtod_l+0x9f0>
 80094e0:	e4c4      	b.n	8008e6c <_strtod_l+0x454>
 80094e2:	bf00      	nop
 80094e4:	f3af 8000 	nop.w
 80094e8:	00000000 	.word	0x00000000
 80094ec:	bff00000 	.word	0xbff00000
 80094f0:	00000000 	.word	0x00000000
 80094f4:	3ff00000 	.word	0x3ff00000
 80094f8:	94a03595 	.word	0x94a03595
 80094fc:	3fdfffff 	.word	0x3fdfffff
 8009500:	35afe535 	.word	0x35afe535
 8009504:	3fe00000 	.word	0x3fe00000
 8009508:	000fffff 	.word	0x000fffff
 800950c:	7ff00000 	.word	0x7ff00000
 8009510:	7fefffff 	.word	0x7fefffff
 8009514:	3ff00000 	.word	0x3ff00000
 8009518:	3fe00000 	.word	0x3fe00000
 800951c:	7fe00000 	.word	0x7fe00000
 8009520:	7c9fffff 	.word	0x7c9fffff
 8009524:	9b08      	ldr	r3, [sp, #32]
 8009526:	b323      	cbz	r3, 8009572 <_strtod_l+0xb5a>
 8009528:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800952c:	d821      	bhi.n	8009572 <_strtod_l+0xb5a>
 800952e:	a328      	add	r3, pc, #160	@ (adr r3, 80095d0 <_strtod_l+0xbb8>)
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	4630      	mov	r0, r6
 8009536:	4639      	mov	r1, r7
 8009538:	f7f7 fafa 	bl	8000b30 <__aeabi_dcmple>
 800953c:	b1a0      	cbz	r0, 8009568 <_strtod_l+0xb50>
 800953e:	4639      	mov	r1, r7
 8009540:	4630      	mov	r0, r6
 8009542:	f7f7 fb51 	bl	8000be8 <__aeabi_d2uiz>
 8009546:	2801      	cmp	r0, #1
 8009548:	bf38      	it	cc
 800954a:	2001      	movcc	r0, #1
 800954c:	f7f6 fffa 	bl	8000544 <__aeabi_ui2d>
 8009550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009552:	4606      	mov	r6, r0
 8009554:	460f      	mov	r7, r1
 8009556:	b9fb      	cbnz	r3, 8009598 <_strtod_l+0xb80>
 8009558:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800955c:	9014      	str	r0, [sp, #80]	@ 0x50
 800955e:	9315      	str	r3, [sp, #84]	@ 0x54
 8009560:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009564:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009568:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800956a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800956e:	1b5b      	subs	r3, r3, r5
 8009570:	9311      	str	r3, [sp, #68]	@ 0x44
 8009572:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009576:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800957a:	f7ff f8f1 	bl	8008760 <__ulp>
 800957e:	4650      	mov	r0, sl
 8009580:	ec53 2b10 	vmov	r2, r3, d0
 8009584:	4659      	mov	r1, fp
 8009586:	f7f7 f857 	bl	8000638 <__aeabi_dmul>
 800958a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800958e:	f7f6 fe9d 	bl	80002cc <__adddf3>
 8009592:	4682      	mov	sl, r0
 8009594:	468b      	mov	fp, r1
 8009596:	e770      	b.n	800947a <_strtod_l+0xa62>
 8009598:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800959c:	e7e0      	b.n	8009560 <_strtod_l+0xb48>
 800959e:	a30e      	add	r3, pc, #56	@ (adr r3, 80095d8 <_strtod_l+0xbc0>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	f7f7 faba 	bl	8000b1c <__aeabi_dcmplt>
 80095a8:	e798      	b.n	80094dc <_strtod_l+0xac4>
 80095aa:	2300      	movs	r3, #0
 80095ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80095b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	f7ff ba6d 	b.w	8008a92 <_strtod_l+0x7a>
 80095b8:	2a65      	cmp	r2, #101	@ 0x65
 80095ba:	f43f ab66 	beq.w	8008c8a <_strtod_l+0x272>
 80095be:	2a45      	cmp	r2, #69	@ 0x45
 80095c0:	f43f ab63 	beq.w	8008c8a <_strtod_l+0x272>
 80095c4:	2301      	movs	r3, #1
 80095c6:	f7ff bb9e 	b.w	8008d06 <_strtod_l+0x2ee>
 80095ca:	bf00      	nop
 80095cc:	f3af 8000 	nop.w
 80095d0:	ffc00000 	.word	0xffc00000
 80095d4:	41dfffff 	.word	0x41dfffff
 80095d8:	94a03595 	.word	0x94a03595
 80095dc:	3fcfffff 	.word	0x3fcfffff

080095e0 <_strtod_r>:
 80095e0:	4b01      	ldr	r3, [pc, #4]	@ (80095e8 <_strtod_r+0x8>)
 80095e2:	f7ff ba19 	b.w	8008a18 <_strtod_l>
 80095e6:	bf00      	nop
 80095e8:	20000068 	.word	0x20000068

080095ec <_strtol_l.constprop.0>:
 80095ec:	2b24      	cmp	r3, #36	@ 0x24
 80095ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095f2:	4686      	mov	lr, r0
 80095f4:	4690      	mov	r8, r2
 80095f6:	d801      	bhi.n	80095fc <_strtol_l.constprop.0+0x10>
 80095f8:	2b01      	cmp	r3, #1
 80095fa:	d106      	bne.n	800960a <_strtol_l.constprop.0+0x1e>
 80095fc:	f7fd fdba 	bl	8007174 <__errno>
 8009600:	2316      	movs	r3, #22
 8009602:	6003      	str	r3, [r0, #0]
 8009604:	2000      	movs	r0, #0
 8009606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800960a:	4834      	ldr	r0, [pc, #208]	@ (80096dc <_strtol_l.constprop.0+0xf0>)
 800960c:	460d      	mov	r5, r1
 800960e:	462a      	mov	r2, r5
 8009610:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009614:	5d06      	ldrb	r6, [r0, r4]
 8009616:	f016 0608 	ands.w	r6, r6, #8
 800961a:	d1f8      	bne.n	800960e <_strtol_l.constprop.0+0x22>
 800961c:	2c2d      	cmp	r4, #45	@ 0x2d
 800961e:	d12d      	bne.n	800967c <_strtol_l.constprop.0+0x90>
 8009620:	782c      	ldrb	r4, [r5, #0]
 8009622:	2601      	movs	r6, #1
 8009624:	1c95      	adds	r5, r2, #2
 8009626:	f033 0210 	bics.w	r2, r3, #16
 800962a:	d109      	bne.n	8009640 <_strtol_l.constprop.0+0x54>
 800962c:	2c30      	cmp	r4, #48	@ 0x30
 800962e:	d12a      	bne.n	8009686 <_strtol_l.constprop.0+0x9a>
 8009630:	782a      	ldrb	r2, [r5, #0]
 8009632:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009636:	2a58      	cmp	r2, #88	@ 0x58
 8009638:	d125      	bne.n	8009686 <_strtol_l.constprop.0+0x9a>
 800963a:	786c      	ldrb	r4, [r5, #1]
 800963c:	2310      	movs	r3, #16
 800963e:	3502      	adds	r5, #2
 8009640:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009644:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009648:	2200      	movs	r2, #0
 800964a:	fbbc f9f3 	udiv	r9, ip, r3
 800964e:	4610      	mov	r0, r2
 8009650:	fb03 ca19 	mls	sl, r3, r9, ip
 8009654:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009658:	2f09      	cmp	r7, #9
 800965a:	d81b      	bhi.n	8009694 <_strtol_l.constprop.0+0xa8>
 800965c:	463c      	mov	r4, r7
 800965e:	42a3      	cmp	r3, r4
 8009660:	dd27      	ble.n	80096b2 <_strtol_l.constprop.0+0xc6>
 8009662:	1c57      	adds	r7, r2, #1
 8009664:	d007      	beq.n	8009676 <_strtol_l.constprop.0+0x8a>
 8009666:	4581      	cmp	r9, r0
 8009668:	d320      	bcc.n	80096ac <_strtol_l.constprop.0+0xc0>
 800966a:	d101      	bne.n	8009670 <_strtol_l.constprop.0+0x84>
 800966c:	45a2      	cmp	sl, r4
 800966e:	db1d      	blt.n	80096ac <_strtol_l.constprop.0+0xc0>
 8009670:	fb00 4003 	mla	r0, r0, r3, r4
 8009674:	2201      	movs	r2, #1
 8009676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800967a:	e7eb      	b.n	8009654 <_strtol_l.constprop.0+0x68>
 800967c:	2c2b      	cmp	r4, #43	@ 0x2b
 800967e:	bf04      	itt	eq
 8009680:	782c      	ldrbeq	r4, [r5, #0]
 8009682:	1c95      	addeq	r5, r2, #2
 8009684:	e7cf      	b.n	8009626 <_strtol_l.constprop.0+0x3a>
 8009686:	2b00      	cmp	r3, #0
 8009688:	d1da      	bne.n	8009640 <_strtol_l.constprop.0+0x54>
 800968a:	2c30      	cmp	r4, #48	@ 0x30
 800968c:	bf0c      	ite	eq
 800968e:	2308      	moveq	r3, #8
 8009690:	230a      	movne	r3, #10
 8009692:	e7d5      	b.n	8009640 <_strtol_l.constprop.0+0x54>
 8009694:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009698:	2f19      	cmp	r7, #25
 800969a:	d801      	bhi.n	80096a0 <_strtol_l.constprop.0+0xb4>
 800969c:	3c37      	subs	r4, #55	@ 0x37
 800969e:	e7de      	b.n	800965e <_strtol_l.constprop.0+0x72>
 80096a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80096a4:	2f19      	cmp	r7, #25
 80096a6:	d804      	bhi.n	80096b2 <_strtol_l.constprop.0+0xc6>
 80096a8:	3c57      	subs	r4, #87	@ 0x57
 80096aa:	e7d8      	b.n	800965e <_strtol_l.constprop.0+0x72>
 80096ac:	f04f 32ff 	mov.w	r2, #4294967295
 80096b0:	e7e1      	b.n	8009676 <_strtol_l.constprop.0+0x8a>
 80096b2:	1c53      	adds	r3, r2, #1
 80096b4:	d108      	bne.n	80096c8 <_strtol_l.constprop.0+0xdc>
 80096b6:	2322      	movs	r3, #34	@ 0x22
 80096b8:	f8ce 3000 	str.w	r3, [lr]
 80096bc:	4660      	mov	r0, ip
 80096be:	f1b8 0f00 	cmp.w	r8, #0
 80096c2:	d0a0      	beq.n	8009606 <_strtol_l.constprop.0+0x1a>
 80096c4:	1e69      	subs	r1, r5, #1
 80096c6:	e006      	b.n	80096d6 <_strtol_l.constprop.0+0xea>
 80096c8:	b106      	cbz	r6, 80096cc <_strtol_l.constprop.0+0xe0>
 80096ca:	4240      	negs	r0, r0
 80096cc:	f1b8 0f00 	cmp.w	r8, #0
 80096d0:	d099      	beq.n	8009606 <_strtol_l.constprop.0+0x1a>
 80096d2:	2a00      	cmp	r2, #0
 80096d4:	d1f6      	bne.n	80096c4 <_strtol_l.constprop.0+0xd8>
 80096d6:	f8c8 1000 	str.w	r1, [r8]
 80096da:	e794      	b.n	8009606 <_strtol_l.constprop.0+0x1a>
 80096dc:	0800ac71 	.word	0x0800ac71

080096e0 <_strtol_r>:
 80096e0:	f7ff bf84 	b.w	80095ec <_strtol_l.constprop.0>

080096e4 <__ssputs_r>:
 80096e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e8:	688e      	ldr	r6, [r1, #8]
 80096ea:	461f      	mov	r7, r3
 80096ec:	42be      	cmp	r6, r7
 80096ee:	680b      	ldr	r3, [r1, #0]
 80096f0:	4682      	mov	sl, r0
 80096f2:	460c      	mov	r4, r1
 80096f4:	4690      	mov	r8, r2
 80096f6:	d82d      	bhi.n	8009754 <__ssputs_r+0x70>
 80096f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009700:	d026      	beq.n	8009750 <__ssputs_r+0x6c>
 8009702:	6965      	ldr	r5, [r4, #20]
 8009704:	6909      	ldr	r1, [r1, #16]
 8009706:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800970a:	eba3 0901 	sub.w	r9, r3, r1
 800970e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009712:	1c7b      	adds	r3, r7, #1
 8009714:	444b      	add	r3, r9
 8009716:	106d      	asrs	r5, r5, #1
 8009718:	429d      	cmp	r5, r3
 800971a:	bf38      	it	cc
 800971c:	461d      	movcc	r5, r3
 800971e:	0553      	lsls	r3, r2, #21
 8009720:	d527      	bpl.n	8009772 <__ssputs_r+0x8e>
 8009722:	4629      	mov	r1, r5
 8009724:	f7fe fc1c 	bl	8007f60 <_malloc_r>
 8009728:	4606      	mov	r6, r0
 800972a:	b360      	cbz	r0, 8009786 <__ssputs_r+0xa2>
 800972c:	6921      	ldr	r1, [r4, #16]
 800972e:	464a      	mov	r2, r9
 8009730:	f000 fbee 	bl	8009f10 <memcpy>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800973a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800973e:	81a3      	strh	r3, [r4, #12]
 8009740:	6126      	str	r6, [r4, #16]
 8009742:	6165      	str	r5, [r4, #20]
 8009744:	444e      	add	r6, r9
 8009746:	eba5 0509 	sub.w	r5, r5, r9
 800974a:	6026      	str	r6, [r4, #0]
 800974c:	60a5      	str	r5, [r4, #8]
 800974e:	463e      	mov	r6, r7
 8009750:	42be      	cmp	r6, r7
 8009752:	d900      	bls.n	8009756 <__ssputs_r+0x72>
 8009754:	463e      	mov	r6, r7
 8009756:	6820      	ldr	r0, [r4, #0]
 8009758:	4632      	mov	r2, r6
 800975a:	4641      	mov	r1, r8
 800975c:	f000 fb9c 	bl	8009e98 <memmove>
 8009760:	68a3      	ldr	r3, [r4, #8]
 8009762:	1b9b      	subs	r3, r3, r6
 8009764:	60a3      	str	r3, [r4, #8]
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	4433      	add	r3, r6
 800976a:	6023      	str	r3, [r4, #0]
 800976c:	2000      	movs	r0, #0
 800976e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009772:	462a      	mov	r2, r5
 8009774:	f000 ff61 	bl	800a63a <_realloc_r>
 8009778:	4606      	mov	r6, r0
 800977a:	2800      	cmp	r0, #0
 800977c:	d1e0      	bne.n	8009740 <__ssputs_r+0x5c>
 800977e:	6921      	ldr	r1, [r4, #16]
 8009780:	4650      	mov	r0, sl
 8009782:	f7fe fb79 	bl	8007e78 <_free_r>
 8009786:	230c      	movs	r3, #12
 8009788:	f8ca 3000 	str.w	r3, [sl]
 800978c:	89a3      	ldrh	r3, [r4, #12]
 800978e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009792:	81a3      	strh	r3, [r4, #12]
 8009794:	f04f 30ff 	mov.w	r0, #4294967295
 8009798:	e7e9      	b.n	800976e <__ssputs_r+0x8a>
	...

0800979c <_svfiprintf_r>:
 800979c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a0:	4698      	mov	r8, r3
 80097a2:	898b      	ldrh	r3, [r1, #12]
 80097a4:	061b      	lsls	r3, r3, #24
 80097a6:	b09d      	sub	sp, #116	@ 0x74
 80097a8:	4607      	mov	r7, r0
 80097aa:	460d      	mov	r5, r1
 80097ac:	4614      	mov	r4, r2
 80097ae:	d510      	bpl.n	80097d2 <_svfiprintf_r+0x36>
 80097b0:	690b      	ldr	r3, [r1, #16]
 80097b2:	b973      	cbnz	r3, 80097d2 <_svfiprintf_r+0x36>
 80097b4:	2140      	movs	r1, #64	@ 0x40
 80097b6:	f7fe fbd3 	bl	8007f60 <_malloc_r>
 80097ba:	6028      	str	r0, [r5, #0]
 80097bc:	6128      	str	r0, [r5, #16]
 80097be:	b930      	cbnz	r0, 80097ce <_svfiprintf_r+0x32>
 80097c0:	230c      	movs	r3, #12
 80097c2:	603b      	str	r3, [r7, #0]
 80097c4:	f04f 30ff 	mov.w	r0, #4294967295
 80097c8:	b01d      	add	sp, #116	@ 0x74
 80097ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ce:	2340      	movs	r3, #64	@ 0x40
 80097d0:	616b      	str	r3, [r5, #20]
 80097d2:	2300      	movs	r3, #0
 80097d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d6:	2320      	movs	r3, #32
 80097d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80097e0:	2330      	movs	r3, #48	@ 0x30
 80097e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009980 <_svfiprintf_r+0x1e4>
 80097e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097ea:	f04f 0901 	mov.w	r9, #1
 80097ee:	4623      	mov	r3, r4
 80097f0:	469a      	mov	sl, r3
 80097f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097f6:	b10a      	cbz	r2, 80097fc <_svfiprintf_r+0x60>
 80097f8:	2a25      	cmp	r2, #37	@ 0x25
 80097fa:	d1f9      	bne.n	80097f0 <_svfiprintf_r+0x54>
 80097fc:	ebba 0b04 	subs.w	fp, sl, r4
 8009800:	d00b      	beq.n	800981a <_svfiprintf_r+0x7e>
 8009802:	465b      	mov	r3, fp
 8009804:	4622      	mov	r2, r4
 8009806:	4629      	mov	r1, r5
 8009808:	4638      	mov	r0, r7
 800980a:	f7ff ff6b 	bl	80096e4 <__ssputs_r>
 800980e:	3001      	adds	r0, #1
 8009810:	f000 80a7 	beq.w	8009962 <_svfiprintf_r+0x1c6>
 8009814:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009816:	445a      	add	r2, fp
 8009818:	9209      	str	r2, [sp, #36]	@ 0x24
 800981a:	f89a 3000 	ldrb.w	r3, [sl]
 800981e:	2b00      	cmp	r3, #0
 8009820:	f000 809f 	beq.w	8009962 <_svfiprintf_r+0x1c6>
 8009824:	2300      	movs	r3, #0
 8009826:	f04f 32ff 	mov.w	r2, #4294967295
 800982a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800982e:	f10a 0a01 	add.w	sl, sl, #1
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	9307      	str	r3, [sp, #28]
 8009836:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800983a:	931a      	str	r3, [sp, #104]	@ 0x68
 800983c:	4654      	mov	r4, sl
 800983e:	2205      	movs	r2, #5
 8009840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009844:	484e      	ldr	r0, [pc, #312]	@ (8009980 <_svfiprintf_r+0x1e4>)
 8009846:	f7f6 fce3 	bl	8000210 <memchr>
 800984a:	9a04      	ldr	r2, [sp, #16]
 800984c:	b9d8      	cbnz	r0, 8009886 <_svfiprintf_r+0xea>
 800984e:	06d0      	lsls	r0, r2, #27
 8009850:	bf44      	itt	mi
 8009852:	2320      	movmi	r3, #32
 8009854:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009858:	0711      	lsls	r1, r2, #28
 800985a:	bf44      	itt	mi
 800985c:	232b      	movmi	r3, #43	@ 0x2b
 800985e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009862:	f89a 3000 	ldrb.w	r3, [sl]
 8009866:	2b2a      	cmp	r3, #42	@ 0x2a
 8009868:	d015      	beq.n	8009896 <_svfiprintf_r+0xfa>
 800986a:	9a07      	ldr	r2, [sp, #28]
 800986c:	4654      	mov	r4, sl
 800986e:	2000      	movs	r0, #0
 8009870:	f04f 0c0a 	mov.w	ip, #10
 8009874:	4621      	mov	r1, r4
 8009876:	f811 3b01 	ldrb.w	r3, [r1], #1
 800987a:	3b30      	subs	r3, #48	@ 0x30
 800987c:	2b09      	cmp	r3, #9
 800987e:	d94b      	bls.n	8009918 <_svfiprintf_r+0x17c>
 8009880:	b1b0      	cbz	r0, 80098b0 <_svfiprintf_r+0x114>
 8009882:	9207      	str	r2, [sp, #28]
 8009884:	e014      	b.n	80098b0 <_svfiprintf_r+0x114>
 8009886:	eba0 0308 	sub.w	r3, r0, r8
 800988a:	fa09 f303 	lsl.w	r3, r9, r3
 800988e:	4313      	orrs	r3, r2
 8009890:	9304      	str	r3, [sp, #16]
 8009892:	46a2      	mov	sl, r4
 8009894:	e7d2      	b.n	800983c <_svfiprintf_r+0xa0>
 8009896:	9b03      	ldr	r3, [sp, #12]
 8009898:	1d19      	adds	r1, r3, #4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	9103      	str	r1, [sp, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	bfbb      	ittet	lt
 80098a2:	425b      	neglt	r3, r3
 80098a4:	f042 0202 	orrlt.w	r2, r2, #2
 80098a8:	9307      	strge	r3, [sp, #28]
 80098aa:	9307      	strlt	r3, [sp, #28]
 80098ac:	bfb8      	it	lt
 80098ae:	9204      	strlt	r2, [sp, #16]
 80098b0:	7823      	ldrb	r3, [r4, #0]
 80098b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80098b4:	d10a      	bne.n	80098cc <_svfiprintf_r+0x130>
 80098b6:	7863      	ldrb	r3, [r4, #1]
 80098b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80098ba:	d132      	bne.n	8009922 <_svfiprintf_r+0x186>
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	1d1a      	adds	r2, r3, #4
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	9203      	str	r2, [sp, #12]
 80098c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098c8:	3402      	adds	r4, #2
 80098ca:	9305      	str	r3, [sp, #20]
 80098cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009990 <_svfiprintf_r+0x1f4>
 80098d0:	7821      	ldrb	r1, [r4, #0]
 80098d2:	2203      	movs	r2, #3
 80098d4:	4650      	mov	r0, sl
 80098d6:	f7f6 fc9b 	bl	8000210 <memchr>
 80098da:	b138      	cbz	r0, 80098ec <_svfiprintf_r+0x150>
 80098dc:	9b04      	ldr	r3, [sp, #16]
 80098de:	eba0 000a 	sub.w	r0, r0, sl
 80098e2:	2240      	movs	r2, #64	@ 0x40
 80098e4:	4082      	lsls	r2, r0
 80098e6:	4313      	orrs	r3, r2
 80098e8:	3401      	adds	r4, #1
 80098ea:	9304      	str	r3, [sp, #16]
 80098ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098f0:	4824      	ldr	r0, [pc, #144]	@ (8009984 <_svfiprintf_r+0x1e8>)
 80098f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098f6:	2206      	movs	r2, #6
 80098f8:	f7f6 fc8a 	bl	8000210 <memchr>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	d036      	beq.n	800996e <_svfiprintf_r+0x1d2>
 8009900:	4b21      	ldr	r3, [pc, #132]	@ (8009988 <_svfiprintf_r+0x1ec>)
 8009902:	bb1b      	cbnz	r3, 800994c <_svfiprintf_r+0x1b0>
 8009904:	9b03      	ldr	r3, [sp, #12]
 8009906:	3307      	adds	r3, #7
 8009908:	f023 0307 	bic.w	r3, r3, #7
 800990c:	3308      	adds	r3, #8
 800990e:	9303      	str	r3, [sp, #12]
 8009910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009912:	4433      	add	r3, r6
 8009914:	9309      	str	r3, [sp, #36]	@ 0x24
 8009916:	e76a      	b.n	80097ee <_svfiprintf_r+0x52>
 8009918:	fb0c 3202 	mla	r2, ip, r2, r3
 800991c:	460c      	mov	r4, r1
 800991e:	2001      	movs	r0, #1
 8009920:	e7a8      	b.n	8009874 <_svfiprintf_r+0xd8>
 8009922:	2300      	movs	r3, #0
 8009924:	3401      	adds	r4, #1
 8009926:	9305      	str	r3, [sp, #20]
 8009928:	4619      	mov	r1, r3
 800992a:	f04f 0c0a 	mov.w	ip, #10
 800992e:	4620      	mov	r0, r4
 8009930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009934:	3a30      	subs	r2, #48	@ 0x30
 8009936:	2a09      	cmp	r2, #9
 8009938:	d903      	bls.n	8009942 <_svfiprintf_r+0x1a6>
 800993a:	2b00      	cmp	r3, #0
 800993c:	d0c6      	beq.n	80098cc <_svfiprintf_r+0x130>
 800993e:	9105      	str	r1, [sp, #20]
 8009940:	e7c4      	b.n	80098cc <_svfiprintf_r+0x130>
 8009942:	fb0c 2101 	mla	r1, ip, r1, r2
 8009946:	4604      	mov	r4, r0
 8009948:	2301      	movs	r3, #1
 800994a:	e7f0      	b.n	800992e <_svfiprintf_r+0x192>
 800994c:	ab03      	add	r3, sp, #12
 800994e:	9300      	str	r3, [sp, #0]
 8009950:	462a      	mov	r2, r5
 8009952:	4b0e      	ldr	r3, [pc, #56]	@ (800998c <_svfiprintf_r+0x1f0>)
 8009954:	a904      	add	r1, sp, #16
 8009956:	4638      	mov	r0, r7
 8009958:	f7fc fcb6 	bl	80062c8 <_printf_float>
 800995c:	1c42      	adds	r2, r0, #1
 800995e:	4606      	mov	r6, r0
 8009960:	d1d6      	bne.n	8009910 <_svfiprintf_r+0x174>
 8009962:	89ab      	ldrh	r3, [r5, #12]
 8009964:	065b      	lsls	r3, r3, #25
 8009966:	f53f af2d 	bmi.w	80097c4 <_svfiprintf_r+0x28>
 800996a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800996c:	e72c      	b.n	80097c8 <_svfiprintf_r+0x2c>
 800996e:	ab03      	add	r3, sp, #12
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	462a      	mov	r2, r5
 8009974:	4b05      	ldr	r3, [pc, #20]	@ (800998c <_svfiprintf_r+0x1f0>)
 8009976:	a904      	add	r1, sp, #16
 8009978:	4638      	mov	r0, r7
 800997a:	f7fc ff3d 	bl	80067f8 <_printf_i>
 800997e:	e7ed      	b.n	800995c <_svfiprintf_r+0x1c0>
 8009980:	0800ad71 	.word	0x0800ad71
 8009984:	0800ad7b 	.word	0x0800ad7b
 8009988:	080062c9 	.word	0x080062c9
 800998c:	080096e5 	.word	0x080096e5
 8009990:	0800ad77 	.word	0x0800ad77

08009994 <__sfputc_r>:
 8009994:	6893      	ldr	r3, [r2, #8]
 8009996:	3b01      	subs	r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	b410      	push	{r4}
 800999c:	6093      	str	r3, [r2, #8]
 800999e:	da08      	bge.n	80099b2 <__sfputc_r+0x1e>
 80099a0:	6994      	ldr	r4, [r2, #24]
 80099a2:	42a3      	cmp	r3, r4
 80099a4:	db01      	blt.n	80099aa <__sfputc_r+0x16>
 80099a6:	290a      	cmp	r1, #10
 80099a8:	d103      	bne.n	80099b2 <__sfputc_r+0x1e>
 80099aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099ae:	f000 b9df 	b.w	8009d70 <__swbuf_r>
 80099b2:	6813      	ldr	r3, [r2, #0]
 80099b4:	1c58      	adds	r0, r3, #1
 80099b6:	6010      	str	r0, [r2, #0]
 80099b8:	7019      	strb	r1, [r3, #0]
 80099ba:	4608      	mov	r0, r1
 80099bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <__sfputs_r>:
 80099c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c4:	4606      	mov	r6, r0
 80099c6:	460f      	mov	r7, r1
 80099c8:	4614      	mov	r4, r2
 80099ca:	18d5      	adds	r5, r2, r3
 80099cc:	42ac      	cmp	r4, r5
 80099ce:	d101      	bne.n	80099d4 <__sfputs_r+0x12>
 80099d0:	2000      	movs	r0, #0
 80099d2:	e007      	b.n	80099e4 <__sfputs_r+0x22>
 80099d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099d8:	463a      	mov	r2, r7
 80099da:	4630      	mov	r0, r6
 80099dc:	f7ff ffda 	bl	8009994 <__sfputc_r>
 80099e0:	1c43      	adds	r3, r0, #1
 80099e2:	d1f3      	bne.n	80099cc <__sfputs_r+0xa>
 80099e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099e8 <_vfiprintf_r>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	460d      	mov	r5, r1
 80099ee:	b09d      	sub	sp, #116	@ 0x74
 80099f0:	4614      	mov	r4, r2
 80099f2:	4698      	mov	r8, r3
 80099f4:	4606      	mov	r6, r0
 80099f6:	b118      	cbz	r0, 8009a00 <_vfiprintf_r+0x18>
 80099f8:	6a03      	ldr	r3, [r0, #32]
 80099fa:	b90b      	cbnz	r3, 8009a00 <_vfiprintf_r+0x18>
 80099fc:	f7fd fabc 	bl	8006f78 <__sinit>
 8009a00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a02:	07d9      	lsls	r1, r3, #31
 8009a04:	d405      	bmi.n	8009a12 <_vfiprintf_r+0x2a>
 8009a06:	89ab      	ldrh	r3, [r5, #12]
 8009a08:	059a      	lsls	r2, r3, #22
 8009a0a:	d402      	bmi.n	8009a12 <_vfiprintf_r+0x2a>
 8009a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a0e:	f7fd fbdc 	bl	80071ca <__retarget_lock_acquire_recursive>
 8009a12:	89ab      	ldrh	r3, [r5, #12]
 8009a14:	071b      	lsls	r3, r3, #28
 8009a16:	d501      	bpl.n	8009a1c <_vfiprintf_r+0x34>
 8009a18:	692b      	ldr	r3, [r5, #16]
 8009a1a:	b99b      	cbnz	r3, 8009a44 <_vfiprintf_r+0x5c>
 8009a1c:	4629      	mov	r1, r5
 8009a1e:	4630      	mov	r0, r6
 8009a20:	f000 f9e4 	bl	8009dec <__swsetup_r>
 8009a24:	b170      	cbz	r0, 8009a44 <_vfiprintf_r+0x5c>
 8009a26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a28:	07dc      	lsls	r4, r3, #31
 8009a2a:	d504      	bpl.n	8009a36 <_vfiprintf_r+0x4e>
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a30:	b01d      	add	sp, #116	@ 0x74
 8009a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a36:	89ab      	ldrh	r3, [r5, #12]
 8009a38:	0598      	lsls	r0, r3, #22
 8009a3a:	d4f7      	bmi.n	8009a2c <_vfiprintf_r+0x44>
 8009a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a3e:	f7fd fbc5 	bl	80071cc <__retarget_lock_release_recursive>
 8009a42:	e7f3      	b.n	8009a2c <_vfiprintf_r+0x44>
 8009a44:	2300      	movs	r3, #0
 8009a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a48:	2320      	movs	r3, #32
 8009a4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a52:	2330      	movs	r3, #48	@ 0x30
 8009a54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c04 <_vfiprintf_r+0x21c>
 8009a58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a5c:	f04f 0901 	mov.w	r9, #1
 8009a60:	4623      	mov	r3, r4
 8009a62:	469a      	mov	sl, r3
 8009a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a68:	b10a      	cbz	r2, 8009a6e <_vfiprintf_r+0x86>
 8009a6a:	2a25      	cmp	r2, #37	@ 0x25
 8009a6c:	d1f9      	bne.n	8009a62 <_vfiprintf_r+0x7a>
 8009a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8009a72:	d00b      	beq.n	8009a8c <_vfiprintf_r+0xa4>
 8009a74:	465b      	mov	r3, fp
 8009a76:	4622      	mov	r2, r4
 8009a78:	4629      	mov	r1, r5
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ffa1 	bl	80099c2 <__sfputs_r>
 8009a80:	3001      	adds	r0, #1
 8009a82:	f000 80a7 	beq.w	8009bd4 <_vfiprintf_r+0x1ec>
 8009a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a88:	445a      	add	r2, fp
 8009a8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 809f 	beq.w	8009bd4 <_vfiprintf_r+0x1ec>
 8009a96:	2300      	movs	r3, #0
 8009a98:	f04f 32ff 	mov.w	r2, #4294967295
 8009a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009aa0:	f10a 0a01 	add.w	sl, sl, #1
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	9307      	str	r3, [sp, #28]
 8009aa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009aac:	931a      	str	r3, [sp, #104]	@ 0x68
 8009aae:	4654      	mov	r4, sl
 8009ab0:	2205      	movs	r2, #5
 8009ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab6:	4853      	ldr	r0, [pc, #332]	@ (8009c04 <_vfiprintf_r+0x21c>)
 8009ab8:	f7f6 fbaa 	bl	8000210 <memchr>
 8009abc:	9a04      	ldr	r2, [sp, #16]
 8009abe:	b9d8      	cbnz	r0, 8009af8 <_vfiprintf_r+0x110>
 8009ac0:	06d1      	lsls	r1, r2, #27
 8009ac2:	bf44      	itt	mi
 8009ac4:	2320      	movmi	r3, #32
 8009ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aca:	0713      	lsls	r3, r2, #28
 8009acc:	bf44      	itt	mi
 8009ace:	232b      	movmi	r3, #43	@ 0x2b
 8009ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ada:	d015      	beq.n	8009b08 <_vfiprintf_r+0x120>
 8009adc:	9a07      	ldr	r2, [sp, #28]
 8009ade:	4654      	mov	r4, sl
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	f04f 0c0a 	mov.w	ip, #10
 8009ae6:	4621      	mov	r1, r4
 8009ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aec:	3b30      	subs	r3, #48	@ 0x30
 8009aee:	2b09      	cmp	r3, #9
 8009af0:	d94b      	bls.n	8009b8a <_vfiprintf_r+0x1a2>
 8009af2:	b1b0      	cbz	r0, 8009b22 <_vfiprintf_r+0x13a>
 8009af4:	9207      	str	r2, [sp, #28]
 8009af6:	e014      	b.n	8009b22 <_vfiprintf_r+0x13a>
 8009af8:	eba0 0308 	sub.w	r3, r0, r8
 8009afc:	fa09 f303 	lsl.w	r3, r9, r3
 8009b00:	4313      	orrs	r3, r2
 8009b02:	9304      	str	r3, [sp, #16]
 8009b04:	46a2      	mov	sl, r4
 8009b06:	e7d2      	b.n	8009aae <_vfiprintf_r+0xc6>
 8009b08:	9b03      	ldr	r3, [sp, #12]
 8009b0a:	1d19      	adds	r1, r3, #4
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	9103      	str	r1, [sp, #12]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	bfbb      	ittet	lt
 8009b14:	425b      	neglt	r3, r3
 8009b16:	f042 0202 	orrlt.w	r2, r2, #2
 8009b1a:	9307      	strge	r3, [sp, #28]
 8009b1c:	9307      	strlt	r3, [sp, #28]
 8009b1e:	bfb8      	it	lt
 8009b20:	9204      	strlt	r2, [sp, #16]
 8009b22:	7823      	ldrb	r3, [r4, #0]
 8009b24:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b26:	d10a      	bne.n	8009b3e <_vfiprintf_r+0x156>
 8009b28:	7863      	ldrb	r3, [r4, #1]
 8009b2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b2c:	d132      	bne.n	8009b94 <_vfiprintf_r+0x1ac>
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	1d1a      	adds	r2, r3, #4
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	9203      	str	r2, [sp, #12]
 8009b36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b3a:	3402      	adds	r4, #2
 8009b3c:	9305      	str	r3, [sp, #20]
 8009b3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c14 <_vfiprintf_r+0x22c>
 8009b42:	7821      	ldrb	r1, [r4, #0]
 8009b44:	2203      	movs	r2, #3
 8009b46:	4650      	mov	r0, sl
 8009b48:	f7f6 fb62 	bl	8000210 <memchr>
 8009b4c:	b138      	cbz	r0, 8009b5e <_vfiprintf_r+0x176>
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	eba0 000a 	sub.w	r0, r0, sl
 8009b54:	2240      	movs	r2, #64	@ 0x40
 8009b56:	4082      	lsls	r2, r0
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	3401      	adds	r4, #1
 8009b5c:	9304      	str	r3, [sp, #16]
 8009b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b62:	4829      	ldr	r0, [pc, #164]	@ (8009c08 <_vfiprintf_r+0x220>)
 8009b64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b68:	2206      	movs	r2, #6
 8009b6a:	f7f6 fb51 	bl	8000210 <memchr>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	d03f      	beq.n	8009bf2 <_vfiprintf_r+0x20a>
 8009b72:	4b26      	ldr	r3, [pc, #152]	@ (8009c0c <_vfiprintf_r+0x224>)
 8009b74:	bb1b      	cbnz	r3, 8009bbe <_vfiprintf_r+0x1d6>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	3307      	adds	r3, #7
 8009b7a:	f023 0307 	bic.w	r3, r3, #7
 8009b7e:	3308      	adds	r3, #8
 8009b80:	9303      	str	r3, [sp, #12]
 8009b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b84:	443b      	add	r3, r7
 8009b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b88:	e76a      	b.n	8009a60 <_vfiprintf_r+0x78>
 8009b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b8e:	460c      	mov	r4, r1
 8009b90:	2001      	movs	r0, #1
 8009b92:	e7a8      	b.n	8009ae6 <_vfiprintf_r+0xfe>
 8009b94:	2300      	movs	r3, #0
 8009b96:	3401      	adds	r4, #1
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	f04f 0c0a 	mov.w	ip, #10
 8009ba0:	4620      	mov	r0, r4
 8009ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ba6:	3a30      	subs	r2, #48	@ 0x30
 8009ba8:	2a09      	cmp	r2, #9
 8009baa:	d903      	bls.n	8009bb4 <_vfiprintf_r+0x1cc>
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0c6      	beq.n	8009b3e <_vfiprintf_r+0x156>
 8009bb0:	9105      	str	r1, [sp, #20]
 8009bb2:	e7c4      	b.n	8009b3e <_vfiprintf_r+0x156>
 8009bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bb8:	4604      	mov	r4, r0
 8009bba:	2301      	movs	r3, #1
 8009bbc:	e7f0      	b.n	8009ba0 <_vfiprintf_r+0x1b8>
 8009bbe:	ab03      	add	r3, sp, #12
 8009bc0:	9300      	str	r3, [sp, #0]
 8009bc2:	462a      	mov	r2, r5
 8009bc4:	4b12      	ldr	r3, [pc, #72]	@ (8009c10 <_vfiprintf_r+0x228>)
 8009bc6:	a904      	add	r1, sp, #16
 8009bc8:	4630      	mov	r0, r6
 8009bca:	f7fc fb7d 	bl	80062c8 <_printf_float>
 8009bce:	4607      	mov	r7, r0
 8009bd0:	1c78      	adds	r0, r7, #1
 8009bd2:	d1d6      	bne.n	8009b82 <_vfiprintf_r+0x19a>
 8009bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009bd6:	07d9      	lsls	r1, r3, #31
 8009bd8:	d405      	bmi.n	8009be6 <_vfiprintf_r+0x1fe>
 8009bda:	89ab      	ldrh	r3, [r5, #12]
 8009bdc:	059a      	lsls	r2, r3, #22
 8009bde:	d402      	bmi.n	8009be6 <_vfiprintf_r+0x1fe>
 8009be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009be2:	f7fd faf3 	bl	80071cc <__retarget_lock_release_recursive>
 8009be6:	89ab      	ldrh	r3, [r5, #12]
 8009be8:	065b      	lsls	r3, r3, #25
 8009bea:	f53f af1f 	bmi.w	8009a2c <_vfiprintf_r+0x44>
 8009bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bf0:	e71e      	b.n	8009a30 <_vfiprintf_r+0x48>
 8009bf2:	ab03      	add	r3, sp, #12
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	462a      	mov	r2, r5
 8009bf8:	4b05      	ldr	r3, [pc, #20]	@ (8009c10 <_vfiprintf_r+0x228>)
 8009bfa:	a904      	add	r1, sp, #16
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f7fc fdfb 	bl	80067f8 <_printf_i>
 8009c02:	e7e4      	b.n	8009bce <_vfiprintf_r+0x1e6>
 8009c04:	0800ad71 	.word	0x0800ad71
 8009c08:	0800ad7b 	.word	0x0800ad7b
 8009c0c:	080062c9 	.word	0x080062c9
 8009c10:	080099c3 	.word	0x080099c3
 8009c14:	0800ad77 	.word	0x0800ad77

08009c18 <__sflush_r>:
 8009c18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c20:	0716      	lsls	r6, r2, #28
 8009c22:	4605      	mov	r5, r0
 8009c24:	460c      	mov	r4, r1
 8009c26:	d454      	bmi.n	8009cd2 <__sflush_r+0xba>
 8009c28:	684b      	ldr	r3, [r1, #4]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	dc02      	bgt.n	8009c34 <__sflush_r+0x1c>
 8009c2e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	dd48      	ble.n	8009cc6 <__sflush_r+0xae>
 8009c34:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c36:	2e00      	cmp	r6, #0
 8009c38:	d045      	beq.n	8009cc6 <__sflush_r+0xae>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c40:	682f      	ldr	r7, [r5, #0]
 8009c42:	6a21      	ldr	r1, [r4, #32]
 8009c44:	602b      	str	r3, [r5, #0]
 8009c46:	d030      	beq.n	8009caa <__sflush_r+0x92>
 8009c48:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c4a:	89a3      	ldrh	r3, [r4, #12]
 8009c4c:	0759      	lsls	r1, r3, #29
 8009c4e:	d505      	bpl.n	8009c5c <__sflush_r+0x44>
 8009c50:	6863      	ldr	r3, [r4, #4]
 8009c52:	1ad2      	subs	r2, r2, r3
 8009c54:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c56:	b10b      	cbz	r3, 8009c5c <__sflush_r+0x44>
 8009c58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c5a:	1ad2      	subs	r2, r2, r3
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c60:	6a21      	ldr	r1, [r4, #32]
 8009c62:	4628      	mov	r0, r5
 8009c64:	47b0      	blx	r6
 8009c66:	1c43      	adds	r3, r0, #1
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	d106      	bne.n	8009c7a <__sflush_r+0x62>
 8009c6c:	6829      	ldr	r1, [r5, #0]
 8009c6e:	291d      	cmp	r1, #29
 8009c70:	d82b      	bhi.n	8009cca <__sflush_r+0xb2>
 8009c72:	4a2a      	ldr	r2, [pc, #168]	@ (8009d1c <__sflush_r+0x104>)
 8009c74:	410a      	asrs	r2, r1
 8009c76:	07d6      	lsls	r6, r2, #31
 8009c78:	d427      	bmi.n	8009cca <__sflush_r+0xb2>
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	6062      	str	r2, [r4, #4]
 8009c7e:	04d9      	lsls	r1, r3, #19
 8009c80:	6922      	ldr	r2, [r4, #16]
 8009c82:	6022      	str	r2, [r4, #0]
 8009c84:	d504      	bpl.n	8009c90 <__sflush_r+0x78>
 8009c86:	1c42      	adds	r2, r0, #1
 8009c88:	d101      	bne.n	8009c8e <__sflush_r+0x76>
 8009c8a:	682b      	ldr	r3, [r5, #0]
 8009c8c:	b903      	cbnz	r3, 8009c90 <__sflush_r+0x78>
 8009c8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c92:	602f      	str	r7, [r5, #0]
 8009c94:	b1b9      	cbz	r1, 8009cc6 <__sflush_r+0xae>
 8009c96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c9a:	4299      	cmp	r1, r3
 8009c9c:	d002      	beq.n	8009ca4 <__sflush_r+0x8c>
 8009c9e:	4628      	mov	r0, r5
 8009ca0:	f7fe f8ea 	bl	8007e78 <_free_r>
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ca8:	e00d      	b.n	8009cc6 <__sflush_r+0xae>
 8009caa:	2301      	movs	r3, #1
 8009cac:	4628      	mov	r0, r5
 8009cae:	47b0      	blx	r6
 8009cb0:	4602      	mov	r2, r0
 8009cb2:	1c50      	adds	r0, r2, #1
 8009cb4:	d1c9      	bne.n	8009c4a <__sflush_r+0x32>
 8009cb6:	682b      	ldr	r3, [r5, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d0c6      	beq.n	8009c4a <__sflush_r+0x32>
 8009cbc:	2b1d      	cmp	r3, #29
 8009cbe:	d001      	beq.n	8009cc4 <__sflush_r+0xac>
 8009cc0:	2b16      	cmp	r3, #22
 8009cc2:	d11e      	bne.n	8009d02 <__sflush_r+0xea>
 8009cc4:	602f      	str	r7, [r5, #0]
 8009cc6:	2000      	movs	r0, #0
 8009cc8:	e022      	b.n	8009d10 <__sflush_r+0xf8>
 8009cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cce:	b21b      	sxth	r3, r3
 8009cd0:	e01b      	b.n	8009d0a <__sflush_r+0xf2>
 8009cd2:	690f      	ldr	r7, [r1, #16]
 8009cd4:	2f00      	cmp	r7, #0
 8009cd6:	d0f6      	beq.n	8009cc6 <__sflush_r+0xae>
 8009cd8:	0793      	lsls	r3, r2, #30
 8009cda:	680e      	ldr	r6, [r1, #0]
 8009cdc:	bf08      	it	eq
 8009cde:	694b      	ldreq	r3, [r1, #20]
 8009ce0:	600f      	str	r7, [r1, #0]
 8009ce2:	bf18      	it	ne
 8009ce4:	2300      	movne	r3, #0
 8009ce6:	eba6 0807 	sub.w	r8, r6, r7
 8009cea:	608b      	str	r3, [r1, #8]
 8009cec:	f1b8 0f00 	cmp.w	r8, #0
 8009cf0:	dde9      	ble.n	8009cc6 <__sflush_r+0xae>
 8009cf2:	6a21      	ldr	r1, [r4, #32]
 8009cf4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cf6:	4643      	mov	r3, r8
 8009cf8:	463a      	mov	r2, r7
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	47b0      	blx	r6
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	dc08      	bgt.n	8009d14 <__sflush_r+0xfc>
 8009d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d14:	4407      	add	r7, r0
 8009d16:	eba8 0800 	sub.w	r8, r8, r0
 8009d1a:	e7e7      	b.n	8009cec <__sflush_r+0xd4>
 8009d1c:	dfbffffe 	.word	0xdfbffffe

08009d20 <_fflush_r>:
 8009d20:	b538      	push	{r3, r4, r5, lr}
 8009d22:	690b      	ldr	r3, [r1, #16]
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	b913      	cbnz	r3, 8009d30 <_fflush_r+0x10>
 8009d2a:	2500      	movs	r5, #0
 8009d2c:	4628      	mov	r0, r5
 8009d2e:	bd38      	pop	{r3, r4, r5, pc}
 8009d30:	b118      	cbz	r0, 8009d3a <_fflush_r+0x1a>
 8009d32:	6a03      	ldr	r3, [r0, #32]
 8009d34:	b90b      	cbnz	r3, 8009d3a <_fflush_r+0x1a>
 8009d36:	f7fd f91f 	bl	8006f78 <__sinit>
 8009d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d0f3      	beq.n	8009d2a <_fflush_r+0xa>
 8009d42:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d44:	07d0      	lsls	r0, r2, #31
 8009d46:	d404      	bmi.n	8009d52 <_fflush_r+0x32>
 8009d48:	0599      	lsls	r1, r3, #22
 8009d4a:	d402      	bmi.n	8009d52 <_fflush_r+0x32>
 8009d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d4e:	f7fd fa3c 	bl	80071ca <__retarget_lock_acquire_recursive>
 8009d52:	4628      	mov	r0, r5
 8009d54:	4621      	mov	r1, r4
 8009d56:	f7ff ff5f 	bl	8009c18 <__sflush_r>
 8009d5a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d5c:	07da      	lsls	r2, r3, #31
 8009d5e:	4605      	mov	r5, r0
 8009d60:	d4e4      	bmi.n	8009d2c <_fflush_r+0xc>
 8009d62:	89a3      	ldrh	r3, [r4, #12]
 8009d64:	059b      	lsls	r3, r3, #22
 8009d66:	d4e1      	bmi.n	8009d2c <_fflush_r+0xc>
 8009d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d6a:	f7fd fa2f 	bl	80071cc <__retarget_lock_release_recursive>
 8009d6e:	e7dd      	b.n	8009d2c <_fflush_r+0xc>

08009d70 <__swbuf_r>:
 8009d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d72:	460e      	mov	r6, r1
 8009d74:	4614      	mov	r4, r2
 8009d76:	4605      	mov	r5, r0
 8009d78:	b118      	cbz	r0, 8009d82 <__swbuf_r+0x12>
 8009d7a:	6a03      	ldr	r3, [r0, #32]
 8009d7c:	b90b      	cbnz	r3, 8009d82 <__swbuf_r+0x12>
 8009d7e:	f7fd f8fb 	bl	8006f78 <__sinit>
 8009d82:	69a3      	ldr	r3, [r4, #24]
 8009d84:	60a3      	str	r3, [r4, #8]
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	071a      	lsls	r2, r3, #28
 8009d8a:	d501      	bpl.n	8009d90 <__swbuf_r+0x20>
 8009d8c:	6923      	ldr	r3, [r4, #16]
 8009d8e:	b943      	cbnz	r3, 8009da2 <__swbuf_r+0x32>
 8009d90:	4621      	mov	r1, r4
 8009d92:	4628      	mov	r0, r5
 8009d94:	f000 f82a 	bl	8009dec <__swsetup_r>
 8009d98:	b118      	cbz	r0, 8009da2 <__swbuf_r+0x32>
 8009d9a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d9e:	4638      	mov	r0, r7
 8009da0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	6922      	ldr	r2, [r4, #16]
 8009da6:	1a98      	subs	r0, r3, r2
 8009da8:	6963      	ldr	r3, [r4, #20]
 8009daa:	b2f6      	uxtb	r6, r6
 8009dac:	4283      	cmp	r3, r0
 8009dae:	4637      	mov	r7, r6
 8009db0:	dc05      	bgt.n	8009dbe <__swbuf_r+0x4e>
 8009db2:	4621      	mov	r1, r4
 8009db4:	4628      	mov	r0, r5
 8009db6:	f7ff ffb3 	bl	8009d20 <_fflush_r>
 8009dba:	2800      	cmp	r0, #0
 8009dbc:	d1ed      	bne.n	8009d9a <__swbuf_r+0x2a>
 8009dbe:	68a3      	ldr	r3, [r4, #8]
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	60a3      	str	r3, [r4, #8]
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	1c5a      	adds	r2, r3, #1
 8009dc8:	6022      	str	r2, [r4, #0]
 8009dca:	701e      	strb	r6, [r3, #0]
 8009dcc:	6962      	ldr	r2, [r4, #20]
 8009dce:	1c43      	adds	r3, r0, #1
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d004      	beq.n	8009dde <__swbuf_r+0x6e>
 8009dd4:	89a3      	ldrh	r3, [r4, #12]
 8009dd6:	07db      	lsls	r3, r3, #31
 8009dd8:	d5e1      	bpl.n	8009d9e <__swbuf_r+0x2e>
 8009dda:	2e0a      	cmp	r6, #10
 8009ddc:	d1df      	bne.n	8009d9e <__swbuf_r+0x2e>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	f7ff ff9d 	bl	8009d20 <_fflush_r>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d0d9      	beq.n	8009d9e <__swbuf_r+0x2e>
 8009dea:	e7d6      	b.n	8009d9a <__swbuf_r+0x2a>

08009dec <__swsetup_r>:
 8009dec:	b538      	push	{r3, r4, r5, lr}
 8009dee:	4b29      	ldr	r3, [pc, #164]	@ (8009e94 <__swsetup_r+0xa8>)
 8009df0:	4605      	mov	r5, r0
 8009df2:	6818      	ldr	r0, [r3, #0]
 8009df4:	460c      	mov	r4, r1
 8009df6:	b118      	cbz	r0, 8009e00 <__swsetup_r+0x14>
 8009df8:	6a03      	ldr	r3, [r0, #32]
 8009dfa:	b90b      	cbnz	r3, 8009e00 <__swsetup_r+0x14>
 8009dfc:	f7fd f8bc 	bl	8006f78 <__sinit>
 8009e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e04:	0719      	lsls	r1, r3, #28
 8009e06:	d422      	bmi.n	8009e4e <__swsetup_r+0x62>
 8009e08:	06da      	lsls	r2, r3, #27
 8009e0a:	d407      	bmi.n	8009e1c <__swsetup_r+0x30>
 8009e0c:	2209      	movs	r2, #9
 8009e0e:	602a      	str	r2, [r5, #0]
 8009e10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e14:	81a3      	strh	r3, [r4, #12]
 8009e16:	f04f 30ff 	mov.w	r0, #4294967295
 8009e1a:	e033      	b.n	8009e84 <__swsetup_r+0x98>
 8009e1c:	0758      	lsls	r0, r3, #29
 8009e1e:	d512      	bpl.n	8009e46 <__swsetup_r+0x5a>
 8009e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e22:	b141      	cbz	r1, 8009e36 <__swsetup_r+0x4a>
 8009e24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e28:	4299      	cmp	r1, r3
 8009e2a:	d002      	beq.n	8009e32 <__swsetup_r+0x46>
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	f7fe f823 	bl	8007e78 <_free_r>
 8009e32:	2300      	movs	r3, #0
 8009e34:	6363      	str	r3, [r4, #52]	@ 0x34
 8009e36:	89a3      	ldrh	r3, [r4, #12]
 8009e38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009e3c:	81a3      	strh	r3, [r4, #12]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	6063      	str	r3, [r4, #4]
 8009e42:	6923      	ldr	r3, [r4, #16]
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	f043 0308 	orr.w	r3, r3, #8
 8009e4c:	81a3      	strh	r3, [r4, #12]
 8009e4e:	6923      	ldr	r3, [r4, #16]
 8009e50:	b94b      	cbnz	r3, 8009e66 <__swsetup_r+0x7a>
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009e58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e5c:	d003      	beq.n	8009e66 <__swsetup_r+0x7a>
 8009e5e:	4621      	mov	r1, r4
 8009e60:	4628      	mov	r0, r5
 8009e62:	f000 fc5d 	bl	800a720 <__smakebuf_r>
 8009e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e6a:	f013 0201 	ands.w	r2, r3, #1
 8009e6e:	d00a      	beq.n	8009e86 <__swsetup_r+0x9a>
 8009e70:	2200      	movs	r2, #0
 8009e72:	60a2      	str	r2, [r4, #8]
 8009e74:	6962      	ldr	r2, [r4, #20]
 8009e76:	4252      	negs	r2, r2
 8009e78:	61a2      	str	r2, [r4, #24]
 8009e7a:	6922      	ldr	r2, [r4, #16]
 8009e7c:	b942      	cbnz	r2, 8009e90 <__swsetup_r+0xa4>
 8009e7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e82:	d1c5      	bne.n	8009e10 <__swsetup_r+0x24>
 8009e84:	bd38      	pop	{r3, r4, r5, pc}
 8009e86:	0799      	lsls	r1, r3, #30
 8009e88:	bf58      	it	pl
 8009e8a:	6962      	ldrpl	r2, [r4, #20]
 8009e8c:	60a2      	str	r2, [r4, #8]
 8009e8e:	e7f4      	b.n	8009e7a <__swsetup_r+0x8e>
 8009e90:	2000      	movs	r0, #0
 8009e92:	e7f7      	b.n	8009e84 <__swsetup_r+0x98>
 8009e94:	20000018 	.word	0x20000018

08009e98 <memmove>:
 8009e98:	4288      	cmp	r0, r1
 8009e9a:	b510      	push	{r4, lr}
 8009e9c:	eb01 0402 	add.w	r4, r1, r2
 8009ea0:	d902      	bls.n	8009ea8 <memmove+0x10>
 8009ea2:	4284      	cmp	r4, r0
 8009ea4:	4623      	mov	r3, r4
 8009ea6:	d807      	bhi.n	8009eb8 <memmove+0x20>
 8009ea8:	1e43      	subs	r3, r0, #1
 8009eaa:	42a1      	cmp	r1, r4
 8009eac:	d008      	beq.n	8009ec0 <memmove+0x28>
 8009eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009eb6:	e7f8      	b.n	8009eaa <memmove+0x12>
 8009eb8:	4402      	add	r2, r0
 8009eba:	4601      	mov	r1, r0
 8009ebc:	428a      	cmp	r2, r1
 8009ebe:	d100      	bne.n	8009ec2 <memmove+0x2a>
 8009ec0:	bd10      	pop	{r4, pc}
 8009ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eca:	e7f7      	b.n	8009ebc <memmove+0x24>

08009ecc <strncmp>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	b16a      	cbz	r2, 8009eec <strncmp+0x20>
 8009ed0:	3901      	subs	r1, #1
 8009ed2:	1884      	adds	r4, r0, r2
 8009ed4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ed8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d103      	bne.n	8009ee8 <strncmp+0x1c>
 8009ee0:	42a0      	cmp	r0, r4
 8009ee2:	d001      	beq.n	8009ee8 <strncmp+0x1c>
 8009ee4:	2a00      	cmp	r2, #0
 8009ee6:	d1f5      	bne.n	8009ed4 <strncmp+0x8>
 8009ee8:	1ad0      	subs	r0, r2, r3
 8009eea:	bd10      	pop	{r4, pc}
 8009eec:	4610      	mov	r0, r2
 8009eee:	e7fc      	b.n	8009eea <strncmp+0x1e>

08009ef0 <_sbrk_r>:
 8009ef0:	b538      	push	{r3, r4, r5, lr}
 8009ef2:	4d06      	ldr	r5, [pc, #24]	@ (8009f0c <_sbrk_r+0x1c>)
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	4604      	mov	r4, r0
 8009ef8:	4608      	mov	r0, r1
 8009efa:	602b      	str	r3, [r5, #0]
 8009efc:	f7f8 f880 	bl	8002000 <_sbrk>
 8009f00:	1c43      	adds	r3, r0, #1
 8009f02:	d102      	bne.n	8009f0a <_sbrk_r+0x1a>
 8009f04:	682b      	ldr	r3, [r5, #0]
 8009f06:	b103      	cbz	r3, 8009f0a <_sbrk_r+0x1a>
 8009f08:	6023      	str	r3, [r4, #0]
 8009f0a:	bd38      	pop	{r3, r4, r5, pc}
 8009f0c:	20000518 	.word	0x20000518

08009f10 <memcpy>:
 8009f10:	440a      	add	r2, r1
 8009f12:	4291      	cmp	r1, r2
 8009f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f18:	d100      	bne.n	8009f1c <memcpy+0xc>
 8009f1a:	4770      	bx	lr
 8009f1c:	b510      	push	{r4, lr}
 8009f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f26:	4291      	cmp	r1, r2
 8009f28:	d1f9      	bne.n	8009f1e <memcpy+0xe>
 8009f2a:	bd10      	pop	{r4, pc}
 8009f2c:	0000      	movs	r0, r0
	...

08009f30 <nan>:
 8009f30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009f38 <nan+0x8>
 8009f34:	4770      	bx	lr
 8009f36:	bf00      	nop
 8009f38:	00000000 	.word	0x00000000
 8009f3c:	7ff80000 	.word	0x7ff80000

08009f40 <__assert_func>:
 8009f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009f42:	4614      	mov	r4, r2
 8009f44:	461a      	mov	r2, r3
 8009f46:	4b09      	ldr	r3, [pc, #36]	@ (8009f6c <__assert_func+0x2c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4605      	mov	r5, r0
 8009f4c:	68d8      	ldr	r0, [r3, #12]
 8009f4e:	b954      	cbnz	r4, 8009f66 <__assert_func+0x26>
 8009f50:	4b07      	ldr	r3, [pc, #28]	@ (8009f70 <__assert_func+0x30>)
 8009f52:	461c      	mov	r4, r3
 8009f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f58:	9100      	str	r1, [sp, #0]
 8009f5a:	462b      	mov	r3, r5
 8009f5c:	4905      	ldr	r1, [pc, #20]	@ (8009f74 <__assert_func+0x34>)
 8009f5e:	f000 fba7 	bl	800a6b0 <fiprintf>
 8009f62:	f000 fc3b 	bl	800a7dc <abort>
 8009f66:	4b04      	ldr	r3, [pc, #16]	@ (8009f78 <__assert_func+0x38>)
 8009f68:	e7f4      	b.n	8009f54 <__assert_func+0x14>
 8009f6a:	bf00      	nop
 8009f6c:	20000018 	.word	0x20000018
 8009f70:	0800adc5 	.word	0x0800adc5
 8009f74:	0800ad97 	.word	0x0800ad97
 8009f78:	0800ad8a 	.word	0x0800ad8a

08009f7c <_calloc_r>:
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	fba1 5402 	umull	r5, r4, r1, r2
 8009f82:	b93c      	cbnz	r4, 8009f94 <_calloc_r+0x18>
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7fd ffeb 	bl	8007f60 <_malloc_r>
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	b928      	cbnz	r0, 8009f9a <_calloc_r+0x1e>
 8009f8e:	2600      	movs	r6, #0
 8009f90:	4630      	mov	r0, r6
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	220c      	movs	r2, #12
 8009f96:	6002      	str	r2, [r0, #0]
 8009f98:	e7f9      	b.n	8009f8e <_calloc_r+0x12>
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	f7fd f896 	bl	80070ce <memset>
 8009fa2:	e7f5      	b.n	8009f90 <_calloc_r+0x14>

08009fa4 <rshift>:
 8009fa4:	6903      	ldr	r3, [r0, #16]
 8009fa6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009faa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fae:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009fb2:	f100 0414 	add.w	r4, r0, #20
 8009fb6:	dd45      	ble.n	800a044 <rshift+0xa0>
 8009fb8:	f011 011f 	ands.w	r1, r1, #31
 8009fbc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009fc0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009fc4:	d10c      	bne.n	8009fe0 <rshift+0x3c>
 8009fc6:	f100 0710 	add.w	r7, r0, #16
 8009fca:	4629      	mov	r1, r5
 8009fcc:	42b1      	cmp	r1, r6
 8009fce:	d334      	bcc.n	800a03a <rshift+0x96>
 8009fd0:	1a9b      	subs	r3, r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	1eea      	subs	r2, r5, #3
 8009fd6:	4296      	cmp	r6, r2
 8009fd8:	bf38      	it	cc
 8009fda:	2300      	movcc	r3, #0
 8009fdc:	4423      	add	r3, r4
 8009fde:	e015      	b.n	800a00c <rshift+0x68>
 8009fe0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009fe4:	f1c1 0820 	rsb	r8, r1, #32
 8009fe8:	40cf      	lsrs	r7, r1
 8009fea:	f105 0e04 	add.w	lr, r5, #4
 8009fee:	46a1      	mov	r9, r4
 8009ff0:	4576      	cmp	r6, lr
 8009ff2:	46f4      	mov	ip, lr
 8009ff4:	d815      	bhi.n	800a022 <rshift+0x7e>
 8009ff6:	1a9a      	subs	r2, r3, r2
 8009ff8:	0092      	lsls	r2, r2, #2
 8009ffa:	3a04      	subs	r2, #4
 8009ffc:	3501      	adds	r5, #1
 8009ffe:	42ae      	cmp	r6, r5
 800a000:	bf38      	it	cc
 800a002:	2200      	movcc	r2, #0
 800a004:	18a3      	adds	r3, r4, r2
 800a006:	50a7      	str	r7, [r4, r2]
 800a008:	b107      	cbz	r7, 800a00c <rshift+0x68>
 800a00a:	3304      	adds	r3, #4
 800a00c:	1b1a      	subs	r2, r3, r4
 800a00e:	42a3      	cmp	r3, r4
 800a010:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a014:	bf08      	it	eq
 800a016:	2300      	moveq	r3, #0
 800a018:	6102      	str	r2, [r0, #16]
 800a01a:	bf08      	it	eq
 800a01c:	6143      	streq	r3, [r0, #20]
 800a01e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a022:	f8dc c000 	ldr.w	ip, [ip]
 800a026:	fa0c fc08 	lsl.w	ip, ip, r8
 800a02a:	ea4c 0707 	orr.w	r7, ip, r7
 800a02e:	f849 7b04 	str.w	r7, [r9], #4
 800a032:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a036:	40cf      	lsrs	r7, r1
 800a038:	e7da      	b.n	8009ff0 <rshift+0x4c>
 800a03a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a03e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a042:	e7c3      	b.n	8009fcc <rshift+0x28>
 800a044:	4623      	mov	r3, r4
 800a046:	e7e1      	b.n	800a00c <rshift+0x68>

0800a048 <__hexdig_fun>:
 800a048:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a04c:	2b09      	cmp	r3, #9
 800a04e:	d802      	bhi.n	800a056 <__hexdig_fun+0xe>
 800a050:	3820      	subs	r0, #32
 800a052:	b2c0      	uxtb	r0, r0
 800a054:	4770      	bx	lr
 800a056:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	d801      	bhi.n	800a062 <__hexdig_fun+0x1a>
 800a05e:	3847      	subs	r0, #71	@ 0x47
 800a060:	e7f7      	b.n	800a052 <__hexdig_fun+0xa>
 800a062:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a066:	2b05      	cmp	r3, #5
 800a068:	d801      	bhi.n	800a06e <__hexdig_fun+0x26>
 800a06a:	3827      	subs	r0, #39	@ 0x27
 800a06c:	e7f1      	b.n	800a052 <__hexdig_fun+0xa>
 800a06e:	2000      	movs	r0, #0
 800a070:	4770      	bx	lr
	...

0800a074 <__gethex>:
 800a074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a078:	b085      	sub	sp, #20
 800a07a:	468a      	mov	sl, r1
 800a07c:	9302      	str	r3, [sp, #8]
 800a07e:	680b      	ldr	r3, [r1, #0]
 800a080:	9001      	str	r0, [sp, #4]
 800a082:	4690      	mov	r8, r2
 800a084:	1c9c      	adds	r4, r3, #2
 800a086:	46a1      	mov	r9, r4
 800a088:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a08c:	2830      	cmp	r0, #48	@ 0x30
 800a08e:	d0fa      	beq.n	800a086 <__gethex+0x12>
 800a090:	eba9 0303 	sub.w	r3, r9, r3
 800a094:	f1a3 0b02 	sub.w	fp, r3, #2
 800a098:	f7ff ffd6 	bl	800a048 <__hexdig_fun>
 800a09c:	4605      	mov	r5, r0
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	d168      	bne.n	800a174 <__gethex+0x100>
 800a0a2:	49a0      	ldr	r1, [pc, #640]	@ (800a324 <__gethex+0x2b0>)
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	4648      	mov	r0, r9
 800a0a8:	f7ff ff10 	bl	8009ecc <strncmp>
 800a0ac:	4607      	mov	r7, r0
 800a0ae:	2800      	cmp	r0, #0
 800a0b0:	d167      	bne.n	800a182 <__gethex+0x10e>
 800a0b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a0b6:	4626      	mov	r6, r4
 800a0b8:	f7ff ffc6 	bl	800a048 <__hexdig_fun>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d062      	beq.n	800a186 <__gethex+0x112>
 800a0c0:	4623      	mov	r3, r4
 800a0c2:	7818      	ldrb	r0, [r3, #0]
 800a0c4:	2830      	cmp	r0, #48	@ 0x30
 800a0c6:	4699      	mov	r9, r3
 800a0c8:	f103 0301 	add.w	r3, r3, #1
 800a0cc:	d0f9      	beq.n	800a0c2 <__gethex+0x4e>
 800a0ce:	f7ff ffbb 	bl	800a048 <__hexdig_fun>
 800a0d2:	fab0 f580 	clz	r5, r0
 800a0d6:	096d      	lsrs	r5, r5, #5
 800a0d8:	f04f 0b01 	mov.w	fp, #1
 800a0dc:	464a      	mov	r2, r9
 800a0de:	4616      	mov	r6, r2
 800a0e0:	3201      	adds	r2, #1
 800a0e2:	7830      	ldrb	r0, [r6, #0]
 800a0e4:	f7ff ffb0 	bl	800a048 <__hexdig_fun>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d1f8      	bne.n	800a0de <__gethex+0x6a>
 800a0ec:	498d      	ldr	r1, [pc, #564]	@ (800a324 <__gethex+0x2b0>)
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	f7ff feeb 	bl	8009ecc <strncmp>
 800a0f6:	2800      	cmp	r0, #0
 800a0f8:	d13f      	bne.n	800a17a <__gethex+0x106>
 800a0fa:	b944      	cbnz	r4, 800a10e <__gethex+0x9a>
 800a0fc:	1c74      	adds	r4, r6, #1
 800a0fe:	4622      	mov	r2, r4
 800a100:	4616      	mov	r6, r2
 800a102:	3201      	adds	r2, #1
 800a104:	7830      	ldrb	r0, [r6, #0]
 800a106:	f7ff ff9f 	bl	800a048 <__hexdig_fun>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d1f8      	bne.n	800a100 <__gethex+0x8c>
 800a10e:	1ba4      	subs	r4, r4, r6
 800a110:	00a7      	lsls	r7, r4, #2
 800a112:	7833      	ldrb	r3, [r6, #0]
 800a114:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a118:	2b50      	cmp	r3, #80	@ 0x50
 800a11a:	d13e      	bne.n	800a19a <__gethex+0x126>
 800a11c:	7873      	ldrb	r3, [r6, #1]
 800a11e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a120:	d033      	beq.n	800a18a <__gethex+0x116>
 800a122:	2b2d      	cmp	r3, #45	@ 0x2d
 800a124:	d034      	beq.n	800a190 <__gethex+0x11c>
 800a126:	1c71      	adds	r1, r6, #1
 800a128:	2400      	movs	r4, #0
 800a12a:	7808      	ldrb	r0, [r1, #0]
 800a12c:	f7ff ff8c 	bl	800a048 <__hexdig_fun>
 800a130:	1e43      	subs	r3, r0, #1
 800a132:	b2db      	uxtb	r3, r3
 800a134:	2b18      	cmp	r3, #24
 800a136:	d830      	bhi.n	800a19a <__gethex+0x126>
 800a138:	f1a0 0210 	sub.w	r2, r0, #16
 800a13c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a140:	f7ff ff82 	bl	800a048 <__hexdig_fun>
 800a144:	f100 3cff 	add.w	ip, r0, #4294967295
 800a148:	fa5f fc8c 	uxtb.w	ip, ip
 800a14c:	f1bc 0f18 	cmp.w	ip, #24
 800a150:	f04f 030a 	mov.w	r3, #10
 800a154:	d91e      	bls.n	800a194 <__gethex+0x120>
 800a156:	b104      	cbz	r4, 800a15a <__gethex+0xe6>
 800a158:	4252      	negs	r2, r2
 800a15a:	4417      	add	r7, r2
 800a15c:	f8ca 1000 	str.w	r1, [sl]
 800a160:	b1ed      	cbz	r5, 800a19e <__gethex+0x12a>
 800a162:	f1bb 0f00 	cmp.w	fp, #0
 800a166:	bf0c      	ite	eq
 800a168:	2506      	moveq	r5, #6
 800a16a:	2500      	movne	r5, #0
 800a16c:	4628      	mov	r0, r5
 800a16e:	b005      	add	sp, #20
 800a170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a174:	2500      	movs	r5, #0
 800a176:	462c      	mov	r4, r5
 800a178:	e7b0      	b.n	800a0dc <__gethex+0x68>
 800a17a:	2c00      	cmp	r4, #0
 800a17c:	d1c7      	bne.n	800a10e <__gethex+0x9a>
 800a17e:	4627      	mov	r7, r4
 800a180:	e7c7      	b.n	800a112 <__gethex+0x9e>
 800a182:	464e      	mov	r6, r9
 800a184:	462f      	mov	r7, r5
 800a186:	2501      	movs	r5, #1
 800a188:	e7c3      	b.n	800a112 <__gethex+0x9e>
 800a18a:	2400      	movs	r4, #0
 800a18c:	1cb1      	adds	r1, r6, #2
 800a18e:	e7cc      	b.n	800a12a <__gethex+0xb6>
 800a190:	2401      	movs	r4, #1
 800a192:	e7fb      	b.n	800a18c <__gethex+0x118>
 800a194:	fb03 0002 	mla	r0, r3, r2, r0
 800a198:	e7ce      	b.n	800a138 <__gethex+0xc4>
 800a19a:	4631      	mov	r1, r6
 800a19c:	e7de      	b.n	800a15c <__gethex+0xe8>
 800a19e:	eba6 0309 	sub.w	r3, r6, r9
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	4629      	mov	r1, r5
 800a1a6:	2b07      	cmp	r3, #7
 800a1a8:	dc0a      	bgt.n	800a1c0 <__gethex+0x14c>
 800a1aa:	9801      	ldr	r0, [sp, #4]
 800a1ac:	f7fd ff64 	bl	8008078 <_Balloc>
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	b940      	cbnz	r0, 800a1c6 <__gethex+0x152>
 800a1b4:	4b5c      	ldr	r3, [pc, #368]	@ (800a328 <__gethex+0x2b4>)
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	21e4      	movs	r1, #228	@ 0xe4
 800a1ba:	485c      	ldr	r0, [pc, #368]	@ (800a32c <__gethex+0x2b8>)
 800a1bc:	f7ff fec0 	bl	8009f40 <__assert_func>
 800a1c0:	3101      	adds	r1, #1
 800a1c2:	105b      	asrs	r3, r3, #1
 800a1c4:	e7ef      	b.n	800a1a6 <__gethex+0x132>
 800a1c6:	f100 0a14 	add.w	sl, r0, #20
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	4655      	mov	r5, sl
 800a1ce:	469b      	mov	fp, r3
 800a1d0:	45b1      	cmp	r9, r6
 800a1d2:	d337      	bcc.n	800a244 <__gethex+0x1d0>
 800a1d4:	f845 bb04 	str.w	fp, [r5], #4
 800a1d8:	eba5 050a 	sub.w	r5, r5, sl
 800a1dc:	10ad      	asrs	r5, r5, #2
 800a1de:	6125      	str	r5, [r4, #16]
 800a1e0:	4658      	mov	r0, fp
 800a1e2:	f7fe f83b 	bl	800825c <__hi0bits>
 800a1e6:	016d      	lsls	r5, r5, #5
 800a1e8:	f8d8 6000 	ldr.w	r6, [r8]
 800a1ec:	1a2d      	subs	r5, r5, r0
 800a1ee:	42b5      	cmp	r5, r6
 800a1f0:	dd54      	ble.n	800a29c <__gethex+0x228>
 800a1f2:	1bad      	subs	r5, r5, r6
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	f7fe fbcf 	bl	800899a <__any_on>
 800a1fc:	4681      	mov	r9, r0
 800a1fe:	b178      	cbz	r0, 800a220 <__gethex+0x1ac>
 800a200:	1e6b      	subs	r3, r5, #1
 800a202:	1159      	asrs	r1, r3, #5
 800a204:	f003 021f 	and.w	r2, r3, #31
 800a208:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a20c:	f04f 0901 	mov.w	r9, #1
 800a210:	fa09 f202 	lsl.w	r2, r9, r2
 800a214:	420a      	tst	r2, r1
 800a216:	d003      	beq.n	800a220 <__gethex+0x1ac>
 800a218:	454b      	cmp	r3, r9
 800a21a:	dc36      	bgt.n	800a28a <__gethex+0x216>
 800a21c:	f04f 0902 	mov.w	r9, #2
 800a220:	4629      	mov	r1, r5
 800a222:	4620      	mov	r0, r4
 800a224:	f7ff febe 	bl	8009fa4 <rshift>
 800a228:	442f      	add	r7, r5
 800a22a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a22e:	42bb      	cmp	r3, r7
 800a230:	da42      	bge.n	800a2b8 <__gethex+0x244>
 800a232:	9801      	ldr	r0, [sp, #4]
 800a234:	4621      	mov	r1, r4
 800a236:	f7fd ff5f 	bl	80080f8 <_Bfree>
 800a23a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a23c:	2300      	movs	r3, #0
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	25a3      	movs	r5, #163	@ 0xa3
 800a242:	e793      	b.n	800a16c <__gethex+0xf8>
 800a244:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a248:	2a2e      	cmp	r2, #46	@ 0x2e
 800a24a:	d012      	beq.n	800a272 <__gethex+0x1fe>
 800a24c:	2b20      	cmp	r3, #32
 800a24e:	d104      	bne.n	800a25a <__gethex+0x1e6>
 800a250:	f845 bb04 	str.w	fp, [r5], #4
 800a254:	f04f 0b00 	mov.w	fp, #0
 800a258:	465b      	mov	r3, fp
 800a25a:	7830      	ldrb	r0, [r6, #0]
 800a25c:	9303      	str	r3, [sp, #12]
 800a25e:	f7ff fef3 	bl	800a048 <__hexdig_fun>
 800a262:	9b03      	ldr	r3, [sp, #12]
 800a264:	f000 000f 	and.w	r0, r0, #15
 800a268:	4098      	lsls	r0, r3
 800a26a:	ea4b 0b00 	orr.w	fp, fp, r0
 800a26e:	3304      	adds	r3, #4
 800a270:	e7ae      	b.n	800a1d0 <__gethex+0x15c>
 800a272:	45b1      	cmp	r9, r6
 800a274:	d8ea      	bhi.n	800a24c <__gethex+0x1d8>
 800a276:	492b      	ldr	r1, [pc, #172]	@ (800a324 <__gethex+0x2b0>)
 800a278:	9303      	str	r3, [sp, #12]
 800a27a:	2201      	movs	r2, #1
 800a27c:	4630      	mov	r0, r6
 800a27e:	f7ff fe25 	bl	8009ecc <strncmp>
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	2800      	cmp	r0, #0
 800a286:	d1e1      	bne.n	800a24c <__gethex+0x1d8>
 800a288:	e7a2      	b.n	800a1d0 <__gethex+0x15c>
 800a28a:	1ea9      	subs	r1, r5, #2
 800a28c:	4620      	mov	r0, r4
 800a28e:	f7fe fb84 	bl	800899a <__any_on>
 800a292:	2800      	cmp	r0, #0
 800a294:	d0c2      	beq.n	800a21c <__gethex+0x1a8>
 800a296:	f04f 0903 	mov.w	r9, #3
 800a29a:	e7c1      	b.n	800a220 <__gethex+0x1ac>
 800a29c:	da09      	bge.n	800a2b2 <__gethex+0x23e>
 800a29e:	1b75      	subs	r5, r6, r5
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	9801      	ldr	r0, [sp, #4]
 800a2a4:	462a      	mov	r2, r5
 800a2a6:	f7fe f93f 	bl	8008528 <__lshift>
 800a2aa:	1b7f      	subs	r7, r7, r5
 800a2ac:	4604      	mov	r4, r0
 800a2ae:	f100 0a14 	add.w	sl, r0, #20
 800a2b2:	f04f 0900 	mov.w	r9, #0
 800a2b6:	e7b8      	b.n	800a22a <__gethex+0x1b6>
 800a2b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a2bc:	42bd      	cmp	r5, r7
 800a2be:	dd6f      	ble.n	800a3a0 <__gethex+0x32c>
 800a2c0:	1bed      	subs	r5, r5, r7
 800a2c2:	42ae      	cmp	r6, r5
 800a2c4:	dc34      	bgt.n	800a330 <__gethex+0x2bc>
 800a2c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d022      	beq.n	800a314 <__gethex+0x2a0>
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d024      	beq.n	800a31c <__gethex+0x2a8>
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d115      	bne.n	800a302 <__gethex+0x28e>
 800a2d6:	42ae      	cmp	r6, r5
 800a2d8:	d113      	bne.n	800a302 <__gethex+0x28e>
 800a2da:	2e01      	cmp	r6, #1
 800a2dc:	d10b      	bne.n	800a2f6 <__gethex+0x282>
 800a2de:	9a02      	ldr	r2, [sp, #8]
 800a2e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2e4:	6013      	str	r3, [r2, #0]
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	6123      	str	r3, [r4, #16]
 800a2ea:	f8ca 3000 	str.w	r3, [sl]
 800a2ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a2f0:	2562      	movs	r5, #98	@ 0x62
 800a2f2:	601c      	str	r4, [r3, #0]
 800a2f4:	e73a      	b.n	800a16c <__gethex+0xf8>
 800a2f6:	1e71      	subs	r1, r6, #1
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f7fe fb4e 	bl	800899a <__any_on>
 800a2fe:	2800      	cmp	r0, #0
 800a300:	d1ed      	bne.n	800a2de <__gethex+0x26a>
 800a302:	9801      	ldr	r0, [sp, #4]
 800a304:	4621      	mov	r1, r4
 800a306:	f7fd fef7 	bl	80080f8 <_Bfree>
 800a30a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a30c:	2300      	movs	r3, #0
 800a30e:	6013      	str	r3, [r2, #0]
 800a310:	2550      	movs	r5, #80	@ 0x50
 800a312:	e72b      	b.n	800a16c <__gethex+0xf8>
 800a314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1f3      	bne.n	800a302 <__gethex+0x28e>
 800a31a:	e7e0      	b.n	800a2de <__gethex+0x26a>
 800a31c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1dd      	bne.n	800a2de <__gethex+0x26a>
 800a322:	e7ee      	b.n	800a302 <__gethex+0x28e>
 800a324:	0800ac18 	.word	0x0800ac18
 800a328:	0800aab1 	.word	0x0800aab1
 800a32c:	0800adc6 	.word	0x0800adc6
 800a330:	1e6f      	subs	r7, r5, #1
 800a332:	f1b9 0f00 	cmp.w	r9, #0
 800a336:	d130      	bne.n	800a39a <__gethex+0x326>
 800a338:	b127      	cbz	r7, 800a344 <__gethex+0x2d0>
 800a33a:	4639      	mov	r1, r7
 800a33c:	4620      	mov	r0, r4
 800a33e:	f7fe fb2c 	bl	800899a <__any_on>
 800a342:	4681      	mov	r9, r0
 800a344:	117a      	asrs	r2, r7, #5
 800a346:	2301      	movs	r3, #1
 800a348:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a34c:	f007 071f 	and.w	r7, r7, #31
 800a350:	40bb      	lsls	r3, r7
 800a352:	4213      	tst	r3, r2
 800a354:	4629      	mov	r1, r5
 800a356:	4620      	mov	r0, r4
 800a358:	bf18      	it	ne
 800a35a:	f049 0902 	orrne.w	r9, r9, #2
 800a35e:	f7ff fe21 	bl	8009fa4 <rshift>
 800a362:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a366:	1b76      	subs	r6, r6, r5
 800a368:	2502      	movs	r5, #2
 800a36a:	f1b9 0f00 	cmp.w	r9, #0
 800a36e:	d047      	beq.n	800a400 <__gethex+0x38c>
 800a370:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a374:	2b02      	cmp	r3, #2
 800a376:	d015      	beq.n	800a3a4 <__gethex+0x330>
 800a378:	2b03      	cmp	r3, #3
 800a37a:	d017      	beq.n	800a3ac <__gethex+0x338>
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d109      	bne.n	800a394 <__gethex+0x320>
 800a380:	f019 0f02 	tst.w	r9, #2
 800a384:	d006      	beq.n	800a394 <__gethex+0x320>
 800a386:	f8da 3000 	ldr.w	r3, [sl]
 800a38a:	ea49 0903 	orr.w	r9, r9, r3
 800a38e:	f019 0f01 	tst.w	r9, #1
 800a392:	d10e      	bne.n	800a3b2 <__gethex+0x33e>
 800a394:	f045 0510 	orr.w	r5, r5, #16
 800a398:	e032      	b.n	800a400 <__gethex+0x38c>
 800a39a:	f04f 0901 	mov.w	r9, #1
 800a39e:	e7d1      	b.n	800a344 <__gethex+0x2d0>
 800a3a0:	2501      	movs	r5, #1
 800a3a2:	e7e2      	b.n	800a36a <__gethex+0x2f6>
 800a3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3a6:	f1c3 0301 	rsb	r3, r3, #1
 800a3aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a3ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0f0      	beq.n	800a394 <__gethex+0x320>
 800a3b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3b6:	f104 0314 	add.w	r3, r4, #20
 800a3ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a3be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a3c2:	f04f 0c00 	mov.w	ip, #0
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a3d0:	d01b      	beq.n	800a40a <__gethex+0x396>
 800a3d2:	3201      	adds	r2, #1
 800a3d4:	6002      	str	r2, [r0, #0]
 800a3d6:	2d02      	cmp	r5, #2
 800a3d8:	f104 0314 	add.w	r3, r4, #20
 800a3dc:	d13c      	bne.n	800a458 <__gethex+0x3e4>
 800a3de:	f8d8 2000 	ldr.w	r2, [r8]
 800a3e2:	3a01      	subs	r2, #1
 800a3e4:	42b2      	cmp	r2, r6
 800a3e6:	d109      	bne.n	800a3fc <__gethex+0x388>
 800a3e8:	1171      	asrs	r1, r6, #5
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3f0:	f006 061f 	and.w	r6, r6, #31
 800a3f4:	fa02 f606 	lsl.w	r6, r2, r6
 800a3f8:	421e      	tst	r6, r3
 800a3fa:	d13a      	bne.n	800a472 <__gethex+0x3fe>
 800a3fc:	f045 0520 	orr.w	r5, r5, #32
 800a400:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a402:	601c      	str	r4, [r3, #0]
 800a404:	9b02      	ldr	r3, [sp, #8]
 800a406:	601f      	str	r7, [r3, #0]
 800a408:	e6b0      	b.n	800a16c <__gethex+0xf8>
 800a40a:	4299      	cmp	r1, r3
 800a40c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a410:	d8d9      	bhi.n	800a3c6 <__gethex+0x352>
 800a412:	68a3      	ldr	r3, [r4, #8]
 800a414:	459b      	cmp	fp, r3
 800a416:	db17      	blt.n	800a448 <__gethex+0x3d4>
 800a418:	6861      	ldr	r1, [r4, #4]
 800a41a:	9801      	ldr	r0, [sp, #4]
 800a41c:	3101      	adds	r1, #1
 800a41e:	f7fd fe2b 	bl	8008078 <_Balloc>
 800a422:	4681      	mov	r9, r0
 800a424:	b918      	cbnz	r0, 800a42e <__gethex+0x3ba>
 800a426:	4b1a      	ldr	r3, [pc, #104]	@ (800a490 <__gethex+0x41c>)
 800a428:	4602      	mov	r2, r0
 800a42a:	2184      	movs	r1, #132	@ 0x84
 800a42c:	e6c5      	b.n	800a1ba <__gethex+0x146>
 800a42e:	6922      	ldr	r2, [r4, #16]
 800a430:	3202      	adds	r2, #2
 800a432:	f104 010c 	add.w	r1, r4, #12
 800a436:	0092      	lsls	r2, r2, #2
 800a438:	300c      	adds	r0, #12
 800a43a:	f7ff fd69 	bl	8009f10 <memcpy>
 800a43e:	4621      	mov	r1, r4
 800a440:	9801      	ldr	r0, [sp, #4]
 800a442:	f7fd fe59 	bl	80080f8 <_Bfree>
 800a446:	464c      	mov	r4, r9
 800a448:	6923      	ldr	r3, [r4, #16]
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a450:	6122      	str	r2, [r4, #16]
 800a452:	2201      	movs	r2, #1
 800a454:	615a      	str	r2, [r3, #20]
 800a456:	e7be      	b.n	800a3d6 <__gethex+0x362>
 800a458:	6922      	ldr	r2, [r4, #16]
 800a45a:	455a      	cmp	r2, fp
 800a45c:	dd0b      	ble.n	800a476 <__gethex+0x402>
 800a45e:	2101      	movs	r1, #1
 800a460:	4620      	mov	r0, r4
 800a462:	f7ff fd9f 	bl	8009fa4 <rshift>
 800a466:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a46a:	3701      	adds	r7, #1
 800a46c:	42bb      	cmp	r3, r7
 800a46e:	f6ff aee0 	blt.w	800a232 <__gethex+0x1be>
 800a472:	2501      	movs	r5, #1
 800a474:	e7c2      	b.n	800a3fc <__gethex+0x388>
 800a476:	f016 061f 	ands.w	r6, r6, #31
 800a47a:	d0fa      	beq.n	800a472 <__gethex+0x3fe>
 800a47c:	4453      	add	r3, sl
 800a47e:	f1c6 0620 	rsb	r6, r6, #32
 800a482:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a486:	f7fd fee9 	bl	800825c <__hi0bits>
 800a48a:	42b0      	cmp	r0, r6
 800a48c:	dbe7      	blt.n	800a45e <__gethex+0x3ea>
 800a48e:	e7f0      	b.n	800a472 <__gethex+0x3fe>
 800a490:	0800aab1 	.word	0x0800aab1

0800a494 <L_shift>:
 800a494:	f1c2 0208 	rsb	r2, r2, #8
 800a498:	0092      	lsls	r2, r2, #2
 800a49a:	b570      	push	{r4, r5, r6, lr}
 800a49c:	f1c2 0620 	rsb	r6, r2, #32
 800a4a0:	6843      	ldr	r3, [r0, #4]
 800a4a2:	6804      	ldr	r4, [r0, #0]
 800a4a4:	fa03 f506 	lsl.w	r5, r3, r6
 800a4a8:	432c      	orrs	r4, r5
 800a4aa:	40d3      	lsrs	r3, r2
 800a4ac:	6004      	str	r4, [r0, #0]
 800a4ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4b2:	4288      	cmp	r0, r1
 800a4b4:	d3f4      	bcc.n	800a4a0 <L_shift+0xc>
 800a4b6:	bd70      	pop	{r4, r5, r6, pc}

0800a4b8 <__match>:
 800a4b8:	b530      	push	{r4, r5, lr}
 800a4ba:	6803      	ldr	r3, [r0, #0]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4c2:	b914      	cbnz	r4, 800a4ca <__match+0x12>
 800a4c4:	6003      	str	r3, [r0, #0]
 800a4c6:	2001      	movs	r0, #1
 800a4c8:	bd30      	pop	{r4, r5, pc}
 800a4ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a4d2:	2d19      	cmp	r5, #25
 800a4d4:	bf98      	it	ls
 800a4d6:	3220      	addls	r2, #32
 800a4d8:	42a2      	cmp	r2, r4
 800a4da:	d0f0      	beq.n	800a4be <__match+0x6>
 800a4dc:	2000      	movs	r0, #0
 800a4de:	e7f3      	b.n	800a4c8 <__match+0x10>

0800a4e0 <__hexnan>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	680b      	ldr	r3, [r1, #0]
 800a4e6:	6801      	ldr	r1, [r0, #0]
 800a4e8:	115e      	asrs	r6, r3, #5
 800a4ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a4ee:	f013 031f 	ands.w	r3, r3, #31
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	bf18      	it	ne
 800a4f6:	3604      	addne	r6, #4
 800a4f8:	2500      	movs	r5, #0
 800a4fa:	1f37      	subs	r7, r6, #4
 800a4fc:	4682      	mov	sl, r0
 800a4fe:	4690      	mov	r8, r2
 800a500:	9301      	str	r3, [sp, #4]
 800a502:	f846 5c04 	str.w	r5, [r6, #-4]
 800a506:	46b9      	mov	r9, r7
 800a508:	463c      	mov	r4, r7
 800a50a:	9502      	str	r5, [sp, #8]
 800a50c:	46ab      	mov	fp, r5
 800a50e:	784a      	ldrb	r2, [r1, #1]
 800a510:	1c4b      	adds	r3, r1, #1
 800a512:	9303      	str	r3, [sp, #12]
 800a514:	b342      	cbz	r2, 800a568 <__hexnan+0x88>
 800a516:	4610      	mov	r0, r2
 800a518:	9105      	str	r1, [sp, #20]
 800a51a:	9204      	str	r2, [sp, #16]
 800a51c:	f7ff fd94 	bl	800a048 <__hexdig_fun>
 800a520:	2800      	cmp	r0, #0
 800a522:	d151      	bne.n	800a5c8 <__hexnan+0xe8>
 800a524:	9a04      	ldr	r2, [sp, #16]
 800a526:	9905      	ldr	r1, [sp, #20]
 800a528:	2a20      	cmp	r2, #32
 800a52a:	d818      	bhi.n	800a55e <__hexnan+0x7e>
 800a52c:	9b02      	ldr	r3, [sp, #8]
 800a52e:	459b      	cmp	fp, r3
 800a530:	dd13      	ble.n	800a55a <__hexnan+0x7a>
 800a532:	454c      	cmp	r4, r9
 800a534:	d206      	bcs.n	800a544 <__hexnan+0x64>
 800a536:	2d07      	cmp	r5, #7
 800a538:	dc04      	bgt.n	800a544 <__hexnan+0x64>
 800a53a:	462a      	mov	r2, r5
 800a53c:	4649      	mov	r1, r9
 800a53e:	4620      	mov	r0, r4
 800a540:	f7ff ffa8 	bl	800a494 <L_shift>
 800a544:	4544      	cmp	r4, r8
 800a546:	d952      	bls.n	800a5ee <__hexnan+0x10e>
 800a548:	2300      	movs	r3, #0
 800a54a:	f1a4 0904 	sub.w	r9, r4, #4
 800a54e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a552:	f8cd b008 	str.w	fp, [sp, #8]
 800a556:	464c      	mov	r4, r9
 800a558:	461d      	mov	r5, r3
 800a55a:	9903      	ldr	r1, [sp, #12]
 800a55c:	e7d7      	b.n	800a50e <__hexnan+0x2e>
 800a55e:	2a29      	cmp	r2, #41	@ 0x29
 800a560:	d157      	bne.n	800a612 <__hexnan+0x132>
 800a562:	3102      	adds	r1, #2
 800a564:	f8ca 1000 	str.w	r1, [sl]
 800a568:	f1bb 0f00 	cmp.w	fp, #0
 800a56c:	d051      	beq.n	800a612 <__hexnan+0x132>
 800a56e:	454c      	cmp	r4, r9
 800a570:	d206      	bcs.n	800a580 <__hexnan+0xa0>
 800a572:	2d07      	cmp	r5, #7
 800a574:	dc04      	bgt.n	800a580 <__hexnan+0xa0>
 800a576:	462a      	mov	r2, r5
 800a578:	4649      	mov	r1, r9
 800a57a:	4620      	mov	r0, r4
 800a57c:	f7ff ff8a 	bl	800a494 <L_shift>
 800a580:	4544      	cmp	r4, r8
 800a582:	d936      	bls.n	800a5f2 <__hexnan+0x112>
 800a584:	f1a8 0204 	sub.w	r2, r8, #4
 800a588:	4623      	mov	r3, r4
 800a58a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a58e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a592:	429f      	cmp	r7, r3
 800a594:	d2f9      	bcs.n	800a58a <__hexnan+0xaa>
 800a596:	1b3b      	subs	r3, r7, r4
 800a598:	f023 0303 	bic.w	r3, r3, #3
 800a59c:	3304      	adds	r3, #4
 800a59e:	3401      	adds	r4, #1
 800a5a0:	3e03      	subs	r6, #3
 800a5a2:	42b4      	cmp	r4, r6
 800a5a4:	bf88      	it	hi
 800a5a6:	2304      	movhi	r3, #4
 800a5a8:	4443      	add	r3, r8
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f843 2b04 	str.w	r2, [r3], #4
 800a5b0:	429f      	cmp	r7, r3
 800a5b2:	d2fb      	bcs.n	800a5ac <__hexnan+0xcc>
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	b91b      	cbnz	r3, 800a5c0 <__hexnan+0xe0>
 800a5b8:	4547      	cmp	r7, r8
 800a5ba:	d128      	bne.n	800a60e <__hexnan+0x12e>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	603b      	str	r3, [r7, #0]
 800a5c0:	2005      	movs	r0, #5
 800a5c2:	b007      	add	sp, #28
 800a5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5c8:	3501      	adds	r5, #1
 800a5ca:	2d08      	cmp	r5, #8
 800a5cc:	f10b 0b01 	add.w	fp, fp, #1
 800a5d0:	dd06      	ble.n	800a5e0 <__hexnan+0x100>
 800a5d2:	4544      	cmp	r4, r8
 800a5d4:	d9c1      	bls.n	800a55a <__hexnan+0x7a>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5dc:	2501      	movs	r5, #1
 800a5de:	3c04      	subs	r4, #4
 800a5e0:	6822      	ldr	r2, [r4, #0]
 800a5e2:	f000 000f 	and.w	r0, r0, #15
 800a5e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a5ea:	6020      	str	r0, [r4, #0]
 800a5ec:	e7b5      	b.n	800a55a <__hexnan+0x7a>
 800a5ee:	2508      	movs	r5, #8
 800a5f0:	e7b3      	b.n	800a55a <__hexnan+0x7a>
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d0dd      	beq.n	800a5b4 <__hexnan+0xd4>
 800a5f8:	f1c3 0320 	rsb	r3, r3, #32
 800a5fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a600:	40da      	lsrs	r2, r3
 800a602:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a606:	4013      	ands	r3, r2
 800a608:	f846 3c04 	str.w	r3, [r6, #-4]
 800a60c:	e7d2      	b.n	800a5b4 <__hexnan+0xd4>
 800a60e:	3f04      	subs	r7, #4
 800a610:	e7d0      	b.n	800a5b4 <__hexnan+0xd4>
 800a612:	2004      	movs	r0, #4
 800a614:	e7d5      	b.n	800a5c2 <__hexnan+0xe2>

0800a616 <__ascii_mbtowc>:
 800a616:	b082      	sub	sp, #8
 800a618:	b901      	cbnz	r1, 800a61c <__ascii_mbtowc+0x6>
 800a61a:	a901      	add	r1, sp, #4
 800a61c:	b142      	cbz	r2, 800a630 <__ascii_mbtowc+0x1a>
 800a61e:	b14b      	cbz	r3, 800a634 <__ascii_mbtowc+0x1e>
 800a620:	7813      	ldrb	r3, [r2, #0]
 800a622:	600b      	str	r3, [r1, #0]
 800a624:	7812      	ldrb	r2, [r2, #0]
 800a626:	1e10      	subs	r0, r2, #0
 800a628:	bf18      	it	ne
 800a62a:	2001      	movne	r0, #1
 800a62c:	b002      	add	sp, #8
 800a62e:	4770      	bx	lr
 800a630:	4610      	mov	r0, r2
 800a632:	e7fb      	b.n	800a62c <__ascii_mbtowc+0x16>
 800a634:	f06f 0001 	mvn.w	r0, #1
 800a638:	e7f8      	b.n	800a62c <__ascii_mbtowc+0x16>

0800a63a <_realloc_r>:
 800a63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a63e:	4680      	mov	r8, r0
 800a640:	4615      	mov	r5, r2
 800a642:	460c      	mov	r4, r1
 800a644:	b921      	cbnz	r1, 800a650 <_realloc_r+0x16>
 800a646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a64a:	4611      	mov	r1, r2
 800a64c:	f7fd bc88 	b.w	8007f60 <_malloc_r>
 800a650:	b92a      	cbnz	r2, 800a65e <_realloc_r+0x24>
 800a652:	f7fd fc11 	bl	8007e78 <_free_r>
 800a656:	2400      	movs	r4, #0
 800a658:	4620      	mov	r0, r4
 800a65a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a65e:	f000 f8c4 	bl	800a7ea <_malloc_usable_size_r>
 800a662:	4285      	cmp	r5, r0
 800a664:	4606      	mov	r6, r0
 800a666:	d802      	bhi.n	800a66e <_realloc_r+0x34>
 800a668:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a66c:	d8f4      	bhi.n	800a658 <_realloc_r+0x1e>
 800a66e:	4629      	mov	r1, r5
 800a670:	4640      	mov	r0, r8
 800a672:	f7fd fc75 	bl	8007f60 <_malloc_r>
 800a676:	4607      	mov	r7, r0
 800a678:	2800      	cmp	r0, #0
 800a67a:	d0ec      	beq.n	800a656 <_realloc_r+0x1c>
 800a67c:	42b5      	cmp	r5, r6
 800a67e:	462a      	mov	r2, r5
 800a680:	4621      	mov	r1, r4
 800a682:	bf28      	it	cs
 800a684:	4632      	movcs	r2, r6
 800a686:	f7ff fc43 	bl	8009f10 <memcpy>
 800a68a:	4621      	mov	r1, r4
 800a68c:	4640      	mov	r0, r8
 800a68e:	f7fd fbf3 	bl	8007e78 <_free_r>
 800a692:	463c      	mov	r4, r7
 800a694:	e7e0      	b.n	800a658 <_realloc_r+0x1e>

0800a696 <__ascii_wctomb>:
 800a696:	4603      	mov	r3, r0
 800a698:	4608      	mov	r0, r1
 800a69a:	b141      	cbz	r1, 800a6ae <__ascii_wctomb+0x18>
 800a69c:	2aff      	cmp	r2, #255	@ 0xff
 800a69e:	d904      	bls.n	800a6aa <__ascii_wctomb+0x14>
 800a6a0:	228a      	movs	r2, #138	@ 0x8a
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6a8:	4770      	bx	lr
 800a6aa:	700a      	strb	r2, [r1, #0]
 800a6ac:	2001      	movs	r0, #1
 800a6ae:	4770      	bx	lr

0800a6b0 <fiprintf>:
 800a6b0:	b40e      	push	{r1, r2, r3}
 800a6b2:	b503      	push	{r0, r1, lr}
 800a6b4:	4601      	mov	r1, r0
 800a6b6:	ab03      	add	r3, sp, #12
 800a6b8:	4805      	ldr	r0, [pc, #20]	@ (800a6d0 <fiprintf+0x20>)
 800a6ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6be:	6800      	ldr	r0, [r0, #0]
 800a6c0:	9301      	str	r3, [sp, #4]
 800a6c2:	f7ff f991 	bl	80099e8 <_vfiprintf_r>
 800a6c6:	b002      	add	sp, #8
 800a6c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6cc:	b003      	add	sp, #12
 800a6ce:	4770      	bx	lr
 800a6d0:	20000018 	.word	0x20000018

0800a6d4 <__swhatbuf_r>:
 800a6d4:	b570      	push	{r4, r5, r6, lr}
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6dc:	2900      	cmp	r1, #0
 800a6de:	b096      	sub	sp, #88	@ 0x58
 800a6e0:	4615      	mov	r5, r2
 800a6e2:	461e      	mov	r6, r3
 800a6e4:	da0d      	bge.n	800a702 <__swhatbuf_r+0x2e>
 800a6e6:	89a3      	ldrh	r3, [r4, #12]
 800a6e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6ec:	f04f 0100 	mov.w	r1, #0
 800a6f0:	bf14      	ite	ne
 800a6f2:	2340      	movne	r3, #64	@ 0x40
 800a6f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6f8:	2000      	movs	r0, #0
 800a6fa:	6031      	str	r1, [r6, #0]
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	b016      	add	sp, #88	@ 0x58
 800a700:	bd70      	pop	{r4, r5, r6, pc}
 800a702:	466a      	mov	r2, sp
 800a704:	f000 f848 	bl	800a798 <_fstat_r>
 800a708:	2800      	cmp	r0, #0
 800a70a:	dbec      	blt.n	800a6e6 <__swhatbuf_r+0x12>
 800a70c:	9901      	ldr	r1, [sp, #4]
 800a70e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a712:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a716:	4259      	negs	r1, r3
 800a718:	4159      	adcs	r1, r3
 800a71a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a71e:	e7eb      	b.n	800a6f8 <__swhatbuf_r+0x24>

0800a720 <__smakebuf_r>:
 800a720:	898b      	ldrh	r3, [r1, #12]
 800a722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a724:	079d      	lsls	r5, r3, #30
 800a726:	4606      	mov	r6, r0
 800a728:	460c      	mov	r4, r1
 800a72a:	d507      	bpl.n	800a73c <__smakebuf_r+0x1c>
 800a72c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	6123      	str	r3, [r4, #16]
 800a734:	2301      	movs	r3, #1
 800a736:	6163      	str	r3, [r4, #20]
 800a738:	b003      	add	sp, #12
 800a73a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a73c:	ab01      	add	r3, sp, #4
 800a73e:	466a      	mov	r2, sp
 800a740:	f7ff ffc8 	bl	800a6d4 <__swhatbuf_r>
 800a744:	9f00      	ldr	r7, [sp, #0]
 800a746:	4605      	mov	r5, r0
 800a748:	4639      	mov	r1, r7
 800a74a:	4630      	mov	r0, r6
 800a74c:	f7fd fc08 	bl	8007f60 <_malloc_r>
 800a750:	b948      	cbnz	r0, 800a766 <__smakebuf_r+0x46>
 800a752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a756:	059a      	lsls	r2, r3, #22
 800a758:	d4ee      	bmi.n	800a738 <__smakebuf_r+0x18>
 800a75a:	f023 0303 	bic.w	r3, r3, #3
 800a75e:	f043 0302 	orr.w	r3, r3, #2
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	e7e2      	b.n	800a72c <__smakebuf_r+0xc>
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	6020      	str	r0, [r4, #0]
 800a76a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a76e:	81a3      	strh	r3, [r4, #12]
 800a770:	9b01      	ldr	r3, [sp, #4]
 800a772:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a776:	b15b      	cbz	r3, 800a790 <__smakebuf_r+0x70>
 800a778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a77c:	4630      	mov	r0, r6
 800a77e:	f000 f81d 	bl	800a7bc <_isatty_r>
 800a782:	b128      	cbz	r0, 800a790 <__smakebuf_r+0x70>
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	f023 0303 	bic.w	r3, r3, #3
 800a78a:	f043 0301 	orr.w	r3, r3, #1
 800a78e:	81a3      	strh	r3, [r4, #12]
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	431d      	orrs	r5, r3
 800a794:	81a5      	strh	r5, [r4, #12]
 800a796:	e7cf      	b.n	800a738 <__smakebuf_r+0x18>

0800a798 <_fstat_r>:
 800a798:	b538      	push	{r3, r4, r5, lr}
 800a79a:	4d07      	ldr	r5, [pc, #28]	@ (800a7b8 <_fstat_r+0x20>)
 800a79c:	2300      	movs	r3, #0
 800a79e:	4604      	mov	r4, r0
 800a7a0:	4608      	mov	r0, r1
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	602b      	str	r3, [r5, #0]
 800a7a6:	f7f7 fc03 	bl	8001fb0 <_fstat>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	d102      	bne.n	800a7b4 <_fstat_r+0x1c>
 800a7ae:	682b      	ldr	r3, [r5, #0]
 800a7b0:	b103      	cbz	r3, 800a7b4 <_fstat_r+0x1c>
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	bd38      	pop	{r3, r4, r5, pc}
 800a7b6:	bf00      	nop
 800a7b8:	20000518 	.word	0x20000518

0800a7bc <_isatty_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d06      	ldr	r5, [pc, #24]	@ (800a7d8 <_isatty_r+0x1c>)
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	4604      	mov	r4, r0
 800a7c4:	4608      	mov	r0, r1
 800a7c6:	602b      	str	r3, [r5, #0]
 800a7c8:	f7f7 fc02 	bl	8001fd0 <_isatty>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d102      	bne.n	800a7d6 <_isatty_r+0x1a>
 800a7d0:	682b      	ldr	r3, [r5, #0]
 800a7d2:	b103      	cbz	r3, 800a7d6 <_isatty_r+0x1a>
 800a7d4:	6023      	str	r3, [r4, #0]
 800a7d6:	bd38      	pop	{r3, r4, r5, pc}
 800a7d8:	20000518 	.word	0x20000518

0800a7dc <abort>:
 800a7dc:	b508      	push	{r3, lr}
 800a7de:	2006      	movs	r0, #6
 800a7e0:	f000 f834 	bl	800a84c <raise>
 800a7e4:	2001      	movs	r0, #1
 800a7e6:	f7f7 fbaf 	bl	8001f48 <_exit>

0800a7ea <_malloc_usable_size_r>:
 800a7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ee:	1f18      	subs	r0, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bfbc      	itt	lt
 800a7f4:	580b      	ldrlt	r3, [r1, r0]
 800a7f6:	18c0      	addlt	r0, r0, r3
 800a7f8:	4770      	bx	lr

0800a7fa <_raise_r>:
 800a7fa:	291f      	cmp	r1, #31
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4605      	mov	r5, r0
 800a800:	460c      	mov	r4, r1
 800a802:	d904      	bls.n	800a80e <_raise_r+0x14>
 800a804:	2316      	movs	r3, #22
 800a806:	6003      	str	r3, [r0, #0]
 800a808:	f04f 30ff 	mov.w	r0, #4294967295
 800a80c:	bd38      	pop	{r3, r4, r5, pc}
 800a80e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a810:	b112      	cbz	r2, 800a818 <_raise_r+0x1e>
 800a812:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a816:	b94b      	cbnz	r3, 800a82c <_raise_r+0x32>
 800a818:	4628      	mov	r0, r5
 800a81a:	f000 f831 	bl	800a880 <_getpid_r>
 800a81e:	4622      	mov	r2, r4
 800a820:	4601      	mov	r1, r0
 800a822:	4628      	mov	r0, r5
 800a824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a828:	f000 b818 	b.w	800a85c <_kill_r>
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	d00a      	beq.n	800a846 <_raise_r+0x4c>
 800a830:	1c59      	adds	r1, r3, #1
 800a832:	d103      	bne.n	800a83c <_raise_r+0x42>
 800a834:	2316      	movs	r3, #22
 800a836:	6003      	str	r3, [r0, #0]
 800a838:	2001      	movs	r0, #1
 800a83a:	e7e7      	b.n	800a80c <_raise_r+0x12>
 800a83c:	2100      	movs	r1, #0
 800a83e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a842:	4620      	mov	r0, r4
 800a844:	4798      	blx	r3
 800a846:	2000      	movs	r0, #0
 800a848:	e7e0      	b.n	800a80c <_raise_r+0x12>
	...

0800a84c <raise>:
 800a84c:	4b02      	ldr	r3, [pc, #8]	@ (800a858 <raise+0xc>)
 800a84e:	4601      	mov	r1, r0
 800a850:	6818      	ldr	r0, [r3, #0]
 800a852:	f7ff bfd2 	b.w	800a7fa <_raise_r>
 800a856:	bf00      	nop
 800a858:	20000018 	.word	0x20000018

0800a85c <_kill_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d07      	ldr	r5, [pc, #28]	@ (800a87c <_kill_r+0x20>)
 800a860:	2300      	movs	r3, #0
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	4611      	mov	r1, r2
 800a868:	602b      	str	r3, [r5, #0]
 800a86a:	f7f7 fb5d 	bl	8001f28 <_kill>
 800a86e:	1c43      	adds	r3, r0, #1
 800a870:	d102      	bne.n	800a878 <_kill_r+0x1c>
 800a872:	682b      	ldr	r3, [r5, #0]
 800a874:	b103      	cbz	r3, 800a878 <_kill_r+0x1c>
 800a876:	6023      	str	r3, [r4, #0]
 800a878:	bd38      	pop	{r3, r4, r5, pc}
 800a87a:	bf00      	nop
 800a87c:	20000518 	.word	0x20000518

0800a880 <_getpid_r>:
 800a880:	f7f7 bb4a 	b.w	8001f18 <_getpid>

0800a884 <fmax>:
 800a884:	b508      	push	{r3, lr}
 800a886:	ed2d 8b04 	vpush	{d8-d9}
 800a88a:	eeb0 8a40 	vmov.f32	s16, s0
 800a88e:	eef0 8a60 	vmov.f32	s17, s1
 800a892:	eeb0 9a41 	vmov.f32	s18, s2
 800a896:	eef0 9a61 	vmov.f32	s19, s3
 800a89a:	f000 f847 	bl	800a92c <__fpclassifyd>
 800a89e:	b950      	cbnz	r0, 800a8b6 <fmax+0x32>
 800a8a0:	eeb0 8a49 	vmov.f32	s16, s18
 800a8a4:	eef0 8a69 	vmov.f32	s17, s19
 800a8a8:	eeb0 0a48 	vmov.f32	s0, s16
 800a8ac:	eef0 0a68 	vmov.f32	s1, s17
 800a8b0:	ecbd 8b04 	vpop	{d8-d9}
 800a8b4:	bd08      	pop	{r3, pc}
 800a8b6:	eeb0 0a49 	vmov.f32	s0, s18
 800a8ba:	eef0 0a69 	vmov.f32	s1, s19
 800a8be:	f000 f835 	bl	800a92c <__fpclassifyd>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	d0f0      	beq.n	800a8a8 <fmax+0x24>
 800a8c6:	ec53 2b19 	vmov	r2, r3, d9
 800a8ca:	ec51 0b18 	vmov	r0, r1, d8
 800a8ce:	f7f6 f943 	bl	8000b58 <__aeabi_dcmpgt>
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	d0e4      	beq.n	800a8a0 <fmax+0x1c>
 800a8d6:	e7e7      	b.n	800a8a8 <fmax+0x24>

0800a8d8 <fmin>:
 800a8d8:	b508      	push	{r3, lr}
 800a8da:	ed2d 8b04 	vpush	{d8-d9}
 800a8de:	eeb0 8a40 	vmov.f32	s16, s0
 800a8e2:	eef0 8a60 	vmov.f32	s17, s1
 800a8e6:	eeb0 9a41 	vmov.f32	s18, s2
 800a8ea:	eef0 9a61 	vmov.f32	s19, s3
 800a8ee:	f000 f81d 	bl	800a92c <__fpclassifyd>
 800a8f2:	b950      	cbnz	r0, 800a90a <fmin+0x32>
 800a8f4:	eeb0 8a49 	vmov.f32	s16, s18
 800a8f8:	eef0 8a69 	vmov.f32	s17, s19
 800a8fc:	eeb0 0a48 	vmov.f32	s0, s16
 800a900:	eef0 0a68 	vmov.f32	s1, s17
 800a904:	ecbd 8b04 	vpop	{d8-d9}
 800a908:	bd08      	pop	{r3, pc}
 800a90a:	eeb0 0a49 	vmov.f32	s0, s18
 800a90e:	eef0 0a69 	vmov.f32	s1, s19
 800a912:	f000 f80b 	bl	800a92c <__fpclassifyd>
 800a916:	2800      	cmp	r0, #0
 800a918:	d0f0      	beq.n	800a8fc <fmin+0x24>
 800a91a:	ec53 2b19 	vmov	r2, r3, d9
 800a91e:	ec51 0b18 	vmov	r0, r1, d8
 800a922:	f7f6 f8fb 	bl	8000b1c <__aeabi_dcmplt>
 800a926:	2800      	cmp	r0, #0
 800a928:	d0e4      	beq.n	800a8f4 <fmin+0x1c>
 800a92a:	e7e7      	b.n	800a8fc <fmin+0x24>

0800a92c <__fpclassifyd>:
 800a92c:	ec51 0b10 	vmov	r0, r1, d0
 800a930:	b510      	push	{r4, lr}
 800a932:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800a936:	460b      	mov	r3, r1
 800a938:	d019      	beq.n	800a96e <__fpclassifyd+0x42>
 800a93a:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800a93e:	490e      	ldr	r1, [pc, #56]	@ (800a978 <__fpclassifyd+0x4c>)
 800a940:	428a      	cmp	r2, r1
 800a942:	d90e      	bls.n	800a962 <__fpclassifyd+0x36>
 800a944:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800a948:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800a94c:	428a      	cmp	r2, r1
 800a94e:	d908      	bls.n	800a962 <__fpclassifyd+0x36>
 800a950:	4a0a      	ldr	r2, [pc, #40]	@ (800a97c <__fpclassifyd+0x50>)
 800a952:	4213      	tst	r3, r2
 800a954:	d007      	beq.n	800a966 <__fpclassifyd+0x3a>
 800a956:	4294      	cmp	r4, r2
 800a958:	d107      	bne.n	800a96a <__fpclassifyd+0x3e>
 800a95a:	fab0 f080 	clz	r0, r0
 800a95e:	0940      	lsrs	r0, r0, #5
 800a960:	bd10      	pop	{r4, pc}
 800a962:	2004      	movs	r0, #4
 800a964:	e7fc      	b.n	800a960 <__fpclassifyd+0x34>
 800a966:	2003      	movs	r0, #3
 800a968:	e7fa      	b.n	800a960 <__fpclassifyd+0x34>
 800a96a:	2000      	movs	r0, #0
 800a96c:	e7f8      	b.n	800a960 <__fpclassifyd+0x34>
 800a96e:	2800      	cmp	r0, #0
 800a970:	d1ee      	bne.n	800a950 <__fpclassifyd+0x24>
 800a972:	2002      	movs	r0, #2
 800a974:	e7f4      	b.n	800a960 <__fpclassifyd+0x34>
 800a976:	bf00      	nop
 800a978:	7fdfffff 	.word	0x7fdfffff
 800a97c:	7ff00000 	.word	0x7ff00000

0800a980 <_init>:
 800a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a982:	bf00      	nop
 800a984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a986:	bc08      	pop	{r3}
 800a988:	469e      	mov	lr, r3
 800a98a:	4770      	bx	lr

0800a98c <_fini>:
 800a98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a98e:	bf00      	nop
 800a990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a992:	bc08      	pop	{r3}
 800a994:	469e      	mov	lr, r3
 800a996:	4770      	bx	lr
