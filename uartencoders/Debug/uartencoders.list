
uartencoders.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f70  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08007140  08007140  00008140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073d8  080073d8  00009080  2**0
                  CONTENTS
  4 .ARM          00000008  080073d8  080073d8  000083d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073e0  080073e0  00009080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073e0  080073e0  000083e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080073e4  080073e4  000083e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080073e8  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000080  08007468  00009080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08007468  00009450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d403  00000000  00000000  000090b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d7d  00000000  00000000  000164b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00018230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a39  00000000  00000000  00018f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002303b  00000000  00000000  00019979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f91a  00000000  00000000  0003c9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d42cd  00000000  00000000  0004c2ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012059b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004308  00000000  00000000  001205e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001248e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007128 	.word	0x08007128

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08007128 	.word	0x08007128

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b96a 	b.w	8000ec4 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	460c      	mov	r4, r1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d14e      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c14:	4694      	mov	ip, r2
 8000c16:	458c      	cmp	ip, r1
 8000c18:	4686      	mov	lr, r0
 8000c1a:	fab2 f282 	clz	r2, r2
 8000c1e:	d962      	bls.n	8000ce6 <__udivmoddi4+0xde>
 8000c20:	b14a      	cbz	r2, 8000c36 <__udivmoddi4+0x2e>
 8000c22:	f1c2 0320 	rsb	r3, r2, #32
 8000c26:	4091      	lsls	r1, r2
 8000c28:	fa20 f303 	lsr.w	r3, r0, r3
 8000c2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c30:	4319      	orrs	r1, r3
 8000c32:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c3a:	fa1f f68c 	uxth.w	r6, ip
 8000c3e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb07 1114 	mls	r1, r7, r4, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb04 f106 	mul.w	r1, r4, r6
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c5e:	f080 8112 	bcs.w	8000e86 <__udivmoddi4+0x27e>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 810f 	bls.w	8000e86 <__udivmoddi4+0x27e>
 8000c68:	3c02      	subs	r4, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a59      	subs	r1, r3, r1
 8000c6e:	fa1f f38e 	uxth.w	r3, lr
 8000c72:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c76:	fb07 1110 	mls	r1, r7, r0, r1
 8000c7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7e:	fb00 f606 	mul.w	r6, r0, r6
 8000c82:	429e      	cmp	r6, r3
 8000c84:	d90a      	bls.n	8000c9c <__udivmoddi4+0x94>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c8e:	f080 80fc 	bcs.w	8000e8a <__udivmoddi4+0x282>
 8000c92:	429e      	cmp	r6, r3
 8000c94:	f240 80f9 	bls.w	8000e8a <__udivmoddi4+0x282>
 8000c98:	4463      	add	r3, ip
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	b11d      	cbz	r5, 8000cae <__udivmoddi4+0xa6>
 8000ca6:	40d3      	lsrs	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	e9c5 3200 	strd	r3, r2, [r5]
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d905      	bls.n	8000cc2 <__udivmoddi4+0xba>
 8000cb6:	b10d      	cbz	r5, 8000cbc <__udivmoddi4+0xb4>
 8000cb8:	e9c5 0100 	strd	r0, r1, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e7f5      	b.n	8000cae <__udivmoddi4+0xa6>
 8000cc2:	fab3 f183 	clz	r1, r3
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d146      	bne.n	8000d58 <__udivmoddi4+0x150>
 8000cca:	42a3      	cmp	r3, r4
 8000ccc:	d302      	bcc.n	8000cd4 <__udivmoddi4+0xcc>
 8000cce:	4290      	cmp	r0, r2
 8000cd0:	f0c0 80f0 	bcc.w	8000eb4 <__udivmoddi4+0x2ac>
 8000cd4:	1a86      	subs	r6, r0, r2
 8000cd6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	2d00      	cmp	r5, #0
 8000cde:	d0e6      	beq.n	8000cae <__udivmoddi4+0xa6>
 8000ce0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ce4:	e7e3      	b.n	8000cae <__udivmoddi4+0xa6>
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	f040 8090 	bne.w	8000e0c <__udivmoddi4+0x204>
 8000cec:	eba1 040c 	sub.w	r4, r1, ip
 8000cf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d02:	fb08 4416 	mls	r4, r8, r6, r4
 8000d06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d0a:	fb07 f006 	mul.w	r0, r7, r6
 8000d0e:	4298      	cmp	r0, r3
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x11c>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x11a>
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	f200 80cd 	bhi.w	8000ebc <__udivmoddi4+0x2b4>
 8000d22:	4626      	mov	r6, r4
 8000d24:	1a1c      	subs	r4, r3, r0
 8000d26:	fa1f f38e 	uxth.w	r3, lr
 8000d2a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d2e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d36:	fb00 f707 	mul.w	r7, r0, r7
 8000d3a:	429f      	cmp	r7, r3
 8000d3c:	d908      	bls.n	8000d50 <__udivmoddi4+0x148>
 8000d3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d42:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x146>
 8000d48:	429f      	cmp	r7, r3
 8000d4a:	f200 80b0 	bhi.w	8000eae <__udivmoddi4+0x2a6>
 8000d4e:	4620      	mov	r0, r4
 8000d50:	1bdb      	subs	r3, r3, r7
 8000d52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d56:	e7a5      	b.n	8000ca4 <__udivmoddi4+0x9c>
 8000d58:	f1c1 0620 	rsb	r6, r1, #32
 8000d5c:	408b      	lsls	r3, r1
 8000d5e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d62:	431f      	orrs	r7, r3
 8000d64:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d68:	fa04 f301 	lsl.w	r3, r4, r1
 8000d6c:	ea43 030c 	orr.w	r3, r3, ip
 8000d70:	40f4      	lsrs	r4, r6
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	0c38      	lsrs	r0, r7, #16
 8000d78:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d7c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d80:	fa1f fc87 	uxth.w	ip, r7
 8000d84:	fb00 441e 	mls	r4, r0, lr, r4
 8000d88:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d8c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d90:	45a1      	cmp	r9, r4
 8000d92:	fa02 f201 	lsl.w	r2, r2, r1
 8000d96:	d90a      	bls.n	8000dae <__udivmoddi4+0x1a6>
 8000d98:	193c      	adds	r4, r7, r4
 8000d9a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d9e:	f080 8084 	bcs.w	8000eaa <__udivmoddi4+0x2a2>
 8000da2:	45a1      	cmp	r9, r4
 8000da4:	f240 8081 	bls.w	8000eaa <__udivmoddi4+0x2a2>
 8000da8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dac:	443c      	add	r4, r7
 8000dae:	eba4 0409 	sub.w	r4, r4, r9
 8000db2:	fa1f f983 	uxth.w	r9, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dc2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x1d2>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	d267      	bcs.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd2:	45a4      	cmp	ip, r4
 8000dd4:	d965      	bls.n	8000ea2 <__udivmoddi4+0x29a>
 8000dd6:	3b02      	subs	r3, #2
 8000dd8:	443c      	add	r4, r7
 8000dda:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dde:	fba0 9302 	umull	r9, r3, r0, r2
 8000de2:	eba4 040c 	sub.w	r4, r4, ip
 8000de6:	429c      	cmp	r4, r3
 8000de8:	46ce      	mov	lr, r9
 8000dea:	469c      	mov	ip, r3
 8000dec:	d351      	bcc.n	8000e92 <__udivmoddi4+0x28a>
 8000dee:	d04e      	beq.n	8000e8e <__udivmoddi4+0x286>
 8000df0:	b155      	cbz	r5, 8000e08 <__udivmoddi4+0x200>
 8000df2:	ebb8 030e 	subs.w	r3, r8, lr
 8000df6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dfa:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfe:	40cb      	lsrs	r3, r1
 8000e00:	431e      	orrs	r6, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c5 6400 	strd	r6, r4, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e750      	b.n	8000cae <__udivmoddi4+0xa6>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f103 	lsr.w	r1, r0, r3
 8000e14:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e18:	fa24 f303 	lsr.w	r3, r4, r3
 8000e1c:	4094      	lsls	r4, r2
 8000e1e:	430c      	orrs	r4, r1
 8000e20:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e24:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e28:	fa1f f78c 	uxth.w	r7, ip
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3110 	mls	r1, r8, r0, r3
 8000e34:	0c23      	lsrs	r3, r4, #16
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f107 	mul.w	r1, r0, r7
 8000e3e:	4299      	cmp	r1, r3
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x24c>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e4a:	d22c      	bcs.n	8000ea6 <__udivmoddi4+0x29e>
 8000e4c:	4299      	cmp	r1, r3
 8000e4e:	d92a      	bls.n	8000ea6 <__udivmoddi4+0x29e>
 8000e50:	3802      	subs	r0, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e5c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb01 f307 	mul.w	r3, r1, r7
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x276>
 8000e6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e70:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e74:	d213      	bcs.n	8000e9e <__udivmoddi4+0x296>
 8000e76:	42a3      	cmp	r3, r4
 8000e78:	d911      	bls.n	8000e9e <__udivmoddi4+0x296>
 8000e7a:	3902      	subs	r1, #2
 8000e7c:	4464      	add	r4, ip
 8000e7e:	1ae4      	subs	r4, r4, r3
 8000e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e84:	e739      	b.n	8000cfa <__udivmoddi4+0xf2>
 8000e86:	4604      	mov	r4, r0
 8000e88:	e6f0      	b.n	8000c6c <__udivmoddi4+0x64>
 8000e8a:	4608      	mov	r0, r1
 8000e8c:	e706      	b.n	8000c9c <__udivmoddi4+0x94>
 8000e8e:	45c8      	cmp	r8, r9
 8000e90:	d2ae      	bcs.n	8000df0 <__udivmoddi4+0x1e8>
 8000e92:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e96:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e9a:	3801      	subs	r0, #1
 8000e9c:	e7a8      	b.n	8000df0 <__udivmoddi4+0x1e8>
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	e7ed      	b.n	8000e7e <__udivmoddi4+0x276>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	e799      	b.n	8000dda <__udivmoddi4+0x1d2>
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	e7d4      	b.n	8000e54 <__udivmoddi4+0x24c>
 8000eaa:	46d6      	mov	lr, sl
 8000eac:	e77f      	b.n	8000dae <__udivmoddi4+0x1a6>
 8000eae:	4463      	add	r3, ip
 8000eb0:	3802      	subs	r0, #2
 8000eb2:	e74d      	b.n	8000d50 <__udivmoddi4+0x148>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	4623      	mov	r3, r4
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e70f      	b.n	8000cdc <__udivmoddi4+0xd4>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	4463      	add	r3, ip
 8000ec0:	e730      	b.n	8000d24 <__udivmoddi4+0x11c>
 8000ec2:	bf00      	nop

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <constrain>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int constrain(int value, int min_val, int max_val) {
 8000ec8:	b480      	push	{r7}
 8000eca:	b085      	sub	sp, #20
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
    if (value < min_val) return min_val;
 8000ed4:	68fa      	ldr	r2, [r7, #12]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	da01      	bge.n	8000ee0 <constrain+0x18>
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	e006      	b.n	8000eee <constrain+0x26>
    if (value > max_val) return max_val;
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dd01      	ble.n	8000eec <constrain+0x24>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	e000      	b.n	8000eee <constrain+0x26>
    return value;
 8000eec:	68fb      	ldr	r3, [r7, #12]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	0000      	movs	r0, r0
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <compute3wheel>:
void compute3wheel() {
 8000f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f04:	b08a      	sub	sp, #40	@ 0x28
 8000f06:	af00      	add	r7, sp, #0
  // Calculate joystick-based velocities
	  const double theta = -30 * pi / 180;
 8000f08:	a397      	add	r3, pc, #604	@ (adr r3, 8001168 <compute3wheel+0x268>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double lx_rotated = lx * cos(theta) - ly * sin(theta);
 8000f12:	4b8b      	ldr	r3, [pc, #556]	@ (8001140 <compute3wheel+0x240>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fb1c 	bl	8000554 <__aeabi_i2d>
 8000f1c:	4604      	mov	r4, r0
 8000f1e:	460d      	mov	r5, r1
 8000f20:	ed97 0b08 	vldr	d0, [r7, #32]
 8000f24:	f004 ffa0 	bl	8005e68 <cos>
 8000f28:	ec53 2b10 	vmov	r2, r3, d0
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	4629      	mov	r1, r5
 8000f30:	f7ff fb7a 	bl	8000628 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4690      	mov	r8, r2
 8000f3a:	4699      	mov	r9, r3
 8000f3c:	4b81      	ldr	r3, [pc, #516]	@ (8001144 <compute3wheel+0x244>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fb07 	bl	8000554 <__aeabi_i2d>
 8000f46:	4604      	mov	r4, r0
 8000f48:	460d      	mov	r5, r1
 8000f4a:	ed97 0b08 	vldr	d0, [r7, #32]
 8000f4e:	f004 ffdf 	bl	8005f10 <sin>
 8000f52:	ec53 2b10 	vmov	r2, r3, d0
 8000f56:	4620      	mov	r0, r4
 8000f58:	4629      	mov	r1, r5
 8000f5a:	f7ff fb65 	bl	8000628 <__aeabi_dmul>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4640      	mov	r0, r8
 8000f64:	4649      	mov	r1, r9
 8000f66:	f7ff f9a7 	bl	80002b8 <__aeabi_dsub>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  double ly_rotated = lx * sin(theta) + ly * cos(theta);
 8000f72:	4b73      	ldr	r3, [pc, #460]	@ (8001140 <compute3wheel+0x240>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff faec 	bl	8000554 <__aeabi_i2d>
 8000f7c:	4604      	mov	r4, r0
 8000f7e:	460d      	mov	r5, r1
 8000f80:	ed97 0b08 	vldr	d0, [r7, #32]
 8000f84:	f004 ffc4 	bl	8005f10 <sin>
 8000f88:	ec53 2b10 	vmov	r2, r3, d0
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	4629      	mov	r1, r5
 8000f90:	f7ff fb4a 	bl	8000628 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4690      	mov	r8, r2
 8000f9a:	4699      	mov	r9, r3
 8000f9c:	4b69      	ldr	r3, [pc, #420]	@ (8001144 <compute3wheel+0x244>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f7ff fad7 	bl	8000554 <__aeabi_i2d>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	460d      	mov	r5, r1
 8000faa:	ed97 0b08 	vldr	d0, [r7, #32]
 8000fae:	f004 ff5b 	bl	8005e68 <cos>
 8000fb2:	ec53 2b10 	vmov	r2, r3, d0
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	4629      	mov	r1, r5
 8000fba:	f7ff fb35 	bl	8000628 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4640      	mov	r0, r8
 8000fc4:	4649      	mov	r1, r9
 8000fc6:	f7ff f979 	bl	80002bc <__adddf3>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	e9c7 2304 	strd	r2, r3, [r7, #16]
	  double vx = ly_rotated;
 8000fd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000fd6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	  double vy = lx_rotated;
 8000fda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000fde:	e9c7 2300 	strd	r2, r3, [r7]
  w = rx;
 8000fe2:	4b59      	ldr	r3, [pc, #356]	@ (8001148 <compute3wheel+0x248>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a59      	ldr	r2, [pc, #356]	@ (800114c <compute3wheel+0x24c>)
 8000fe8:	6013      	str	r3, [r2, #0]
    target_wf = ((-0.5*vx) + (sqrt(3)/2)*vy + l0*w);
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	4b58      	ldr	r3, [pc, #352]	@ (8001150 <compute3wheel+0x250>)
 8000ff0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000ff4:	f7ff fb18 	bl	8000628 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	461d      	mov	r5, r3
 8001000:	a34d      	add	r3, pc, #308	@ (adr r3, 8001138 <compute3wheel+0x238>)
 8001002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800100a:	f7ff fb0d 	bl	8000628 <__aeabi_dmul>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4620      	mov	r0, r4
 8001014:	4629      	mov	r1, r5
 8001016:	f7ff f951 	bl	80002bc <__adddf3>
 800101a:	4602      	mov	r2, r0
 800101c:	460b      	mov	r3, r1
 800101e:	4614      	mov	r4, r2
 8001020:	461d      	mov	r5, r3
 8001022:	4b4c      	ldr	r3, [pc, #304]	@ (8001154 <compute3wheel+0x254>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a49      	ldr	r2, [pc, #292]	@ (800114c <compute3wheel+0x24c>)
 8001028:	6812      	ldr	r2, [r2, #0]
 800102a:	fb02 f303 	mul.w	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fa90 	bl	8000554 <__aeabi_i2d>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4620      	mov	r0, r4
 800103a:	4629      	mov	r1, r5
 800103c:	f7ff f93e 	bl	80002bc <__adddf3>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fd9e 	bl	8000b88 <__aeabi_d2iz>
 800104c:	4603      	mov	r3, r0
 800104e:	4a42      	ldr	r2, [pc, #264]	@ (8001158 <compute3wheel+0x258>)
 8001050:	6013      	str	r3, [r2, #0]
    target_wrr = ((-0.5*vx)-(sqrt(3)/2)*vy + l0*w) ;
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	4b3e      	ldr	r3, [pc, #248]	@ (8001150 <compute3wheel+0x250>)
 8001058:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800105c:	f7ff fae4 	bl	8000628 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4614      	mov	r4, r2
 8001066:	461d      	mov	r5, r3
 8001068:	a333      	add	r3, pc, #204	@ (adr r3, 8001138 <compute3wheel+0x238>)
 800106a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001072:	f7ff fad9 	bl	8000628 <__aeabi_dmul>
 8001076:	4602      	mov	r2, r0
 8001078:	460b      	mov	r3, r1
 800107a:	4620      	mov	r0, r4
 800107c:	4629      	mov	r1, r5
 800107e:	f7ff f91b 	bl	80002b8 <__aeabi_dsub>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4614      	mov	r4, r2
 8001088:	461d      	mov	r5, r3
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <compute3wheel+0x254>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a2f      	ldr	r2, [pc, #188]	@ (800114c <compute3wheel+0x24c>)
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	fb02 f303 	mul.w	r3, r2, r3
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff fa5c 	bl	8000554 <__aeabi_i2d>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4620      	mov	r0, r4
 80010a2:	4629      	mov	r1, r5
 80010a4:	f7ff f90a 	bl	80002bc <__adddf3>
 80010a8:	4602      	mov	r2, r0
 80010aa:	460b      	mov	r3, r1
 80010ac:	4610      	mov	r0, r2
 80010ae:	4619      	mov	r1, r3
 80010b0:	f7ff fd6a 	bl	8000b88 <__aeabi_d2iz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a29      	ldr	r2, [pc, #164]	@ (800115c <compute3wheel+0x25c>)
 80010b8:	6013      	str	r3, [r2, #0]
    target_wrl = (vx+l0*w);
 80010ba:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <compute3wheel+0x254>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a23      	ldr	r2, [pc, #140]	@ (800114c <compute3wheel+0x24c>)
 80010c0:	6812      	ldr	r2, [r2, #0]
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa44 	bl	8000554 <__aeabi_i2d>
 80010cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010d0:	f7ff f8f4 	bl	80002bc <__adddf3>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fd54 	bl	8000b88 <__aeabi_d2iz>
 80010e0:	4603      	mov	r3, r0
 80010e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001160 <compute3wheel+0x260>)
 80010e4:	6013      	str	r3, [r2, #0]

    // Constrain target wheel speeds
    target_wf = constrain(target_wf, -800, 800);
 80010e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001158 <compute3wheel+0x258>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80010ee:	491d      	ldr	r1, [pc, #116]	@ (8001164 <compute3wheel+0x264>)
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fee9 	bl	8000ec8 <constrain>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4a17      	ldr	r2, [pc, #92]	@ (8001158 <compute3wheel+0x258>)
 80010fa:	6013      	str	r3, [r2, #0]
    target_wrr = constrain(target_wrr, -800, 800);
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <compute3wheel+0x25c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001104:	4917      	ldr	r1, [pc, #92]	@ (8001164 <compute3wheel+0x264>)
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fede 	bl	8000ec8 <constrain>
 800110c:	4603      	mov	r3, r0
 800110e:	4a13      	ldr	r2, [pc, #76]	@ (800115c <compute3wheel+0x25c>)
 8001110:	6013      	str	r3, [r2, #0]
    target_wrl = constrain(target_wrl, -800, 800);
 8001112:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <compute3wheel+0x260>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800111a:	4912      	ldr	r1, [pc, #72]	@ (8001164 <compute3wheel+0x264>)
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fed3 	bl	8000ec8 <constrain>
 8001122:	4603      	mov	r3, r0
 8001124:	4a0e      	ldr	r2, [pc, #56]	@ (8001160 <compute3wheel+0x260>)
 8001126:	6013      	str	r3, [r2, #0]
}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	@ 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	e8584caa 	.word	0xe8584caa
 800113c:	3febb67a 	.word	0x3febb67a
 8001140:	200000bc 	.word	0x200000bc
 8001144:	200000c0 	.word	0x200000c0
 8001148:	200000c4 	.word	0x200000c4
 800114c:	200000b8 	.word	0x200000b8
 8001150:	bfe00000 	.word	0xbfe00000
 8001154:	20000004 	.word	0x20000004
 8001158:	200000ac 	.word	0x200000ac
 800115c:	200000b0 	.word	0x200000b0
 8001160:	200000b4 	.word	0x200000b4
 8001164:	fffffce0 	.word	0xfffffce0
 8001168:	382b64d8 	.word	0x382b64d8
 800116c:	bfe0c152 	.word	0xbfe0c152

08001170 <main>:
int main(void)
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b091      	sub	sp, #68	@ 0x44
 8001174:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001176:	f001 f973 	bl	8002460 <HAL_Init>

  /* USER CODE BEGIN Init */
  int counterValue,counterValue1,counterValue2;
  	int pastCounterValue=0,pastCounterValue1=0,pastCounterValue2=0;
 800117a:	2300      	movs	r3, #0
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001186:	f000 fb2d 	bl	80017e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118a:	f000 fe07 	bl	8001d9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800118e:	f000 fddb 	bl	8001d48 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8001192:	f000 fdaf 	bl	8001cf4 <MX_UART4_Init>
  MX_TIM2_Init();
 8001196:	f000 fc4b 	bl	8001a30 <MX_TIM2_Init>
  MX_TIM3_Init();
 800119a:	f000 fc9d 	bl	8001ad8 <MX_TIM3_Init>
  MX_TIM4_Init();
 800119e:	f000 fcef 	bl	8001b80 <MX_TIM4_Init>
  MX_TIM1_Init();
 80011a2:	f000 fb8d 	bl	80018c0 <MX_TIM1_Init>
  MX_TIM8_Init();
 80011a6:	f000 fd3f 	bl	8001c28 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive(&huart4, rxbuff, 64,1000);
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	2240      	movs	r2, #64	@ 0x40
 80011b0:	497e      	ldr	r1, [pc, #504]	@ (80013ac <main+0x23c>)
 80011b2:	487f      	ldr	r0, [pc, #508]	@ (80013b0 <main+0x240>)
 80011b4:	f003 fb35 	bl	8004822 <HAL_UART_Receive>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80011b8:	213c      	movs	r1, #60	@ 0x3c
 80011ba:	487e      	ldr	r0, [pc, #504]	@ (80013b4 <main+0x244>)
 80011bc:	f002 fc54 	bl	8003a68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80011c0:	213c      	movs	r1, #60	@ 0x3c
 80011c2:	487d      	ldr	r0, [pc, #500]	@ (80013b8 <main+0x248>)
 80011c4:	f002 fc50 	bl	8003a68 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80011c8:	213c      	movs	r1, #60	@ 0x3c
 80011ca:	487c      	ldr	r0, [pc, #496]	@ (80013bc <main+0x24c>)
 80011cc:	f002 fc4c 	bl	8003a68 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		  HAL_StatusTypeDef status;
		  status=HAL_UART_Receive(&huart4, rxbuff,64,1000);
 80011d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d4:	2240      	movs	r2, #64	@ 0x40
 80011d6:	4975      	ldr	r1, [pc, #468]	@ (80013ac <main+0x23c>)
 80011d8:	4875      	ldr	r0, [pc, #468]	@ (80013b0 <main+0x240>)
 80011da:	f003 fb22 	bl	8004822 <HAL_UART_Receive>
 80011de:	4603      	mov	r3, r0
 80011e0:	76fb      	strb	r3, [r7, #27]
		  if (status == HAL_OK)
 80011e2:	7efb      	ldrb	r3, [r7, #27]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f040 810b 	bne.w	8001400 <main+0x290>
		  {
			  	  	  	  // Convert the received bytes to signed integers
		  	  	 	 	   lx = (rxbuff[0] & 0x80) ? (int32_t)rxbuff[0] - 256 : (int32_t)rxbuff[0];
 80011ea:	4b70      	ldr	r3, [pc, #448]	@ (80013ac <main+0x23c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	b25b      	sxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	da04      	bge.n	80011fe <main+0x8e>
 80011f4:	4b6d      	ldr	r3, [pc, #436]	@ (80013ac <main+0x23c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011fc:	e001      	b.n	8001202 <main+0x92>
 80011fe:	4b6b      	ldr	r3, [pc, #428]	@ (80013ac <main+0x23c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	4a6f      	ldr	r2, [pc, #444]	@ (80013c0 <main+0x250>)
 8001204:	6013      	str	r3, [r2, #0]
		  	  	 	 	   ly = (rxbuff[1] & 0x80) ? (int32_t)rxbuff[1] - 256 : (int32_t)rxbuff[1];
 8001206:	4b69      	ldr	r3, [pc, #420]	@ (80013ac <main+0x23c>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	b25b      	sxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	da04      	bge.n	800121a <main+0xaa>
 8001210:	4b66      	ldr	r3, [pc, #408]	@ (80013ac <main+0x23c>)
 8001212:	785b      	ldrb	r3, [r3, #1]
 8001214:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001218:	e001      	b.n	800121e <main+0xae>
 800121a:	4b64      	ldr	r3, [pc, #400]	@ (80013ac <main+0x23c>)
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	4a69      	ldr	r2, [pc, #420]	@ (80013c4 <main+0x254>)
 8001220:	6013      	str	r3, [r2, #0]
		  	  	 	 	   rx = (rxbuff[2] & 0x80) ? (int32_t)rxbuff[2] - 256 : (int32_t)rxbuff[2];
 8001222:	4b62      	ldr	r3, [pc, #392]	@ (80013ac <main+0x23c>)
 8001224:	789b      	ldrb	r3, [r3, #2]
 8001226:	b25b      	sxtb	r3, r3
 8001228:	2b00      	cmp	r3, #0
 800122a:	da04      	bge.n	8001236 <main+0xc6>
 800122c:	4b5f      	ldr	r3, [pc, #380]	@ (80013ac <main+0x23c>)
 800122e:	789b      	ldrb	r3, [r3, #2]
 8001230:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001234:	e001      	b.n	800123a <main+0xca>
 8001236:	4b5d      	ldr	r3, [pc, #372]	@ (80013ac <main+0x23c>)
 8001238:	789b      	ldrb	r3, [r3, #2]
 800123a:	4a63      	ldr	r2, [pc, #396]	@ (80013c8 <main+0x258>)
 800123c:	6013      	str	r3, [r2, #0]
		  	  	 	 	   ry = (rxbuff[3] & 0x80) ? (int32_t)rxbuff[3] - 256 : (int32_t)rxbuff[3];
 800123e:	4b5b      	ldr	r3, [pc, #364]	@ (80013ac <main+0x23c>)
 8001240:	78db      	ldrb	r3, [r3, #3]
 8001242:	b25b      	sxtb	r3, r3
 8001244:	2b00      	cmp	r3, #0
 8001246:	da04      	bge.n	8001252 <main+0xe2>
 8001248:	4b58      	ldr	r3, [pc, #352]	@ (80013ac <main+0x23c>)
 800124a:	78db      	ldrb	r3, [r3, #3]
 800124c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001250:	e001      	b.n	8001256 <main+0xe6>
 8001252:	4b56      	ldr	r3, [pc, #344]	@ (80013ac <main+0x23c>)
 8001254:	78db      	ldrb	r3, [r3, #3]
 8001256:	4a5d      	ldr	r2, [pc, #372]	@ (80013cc <main+0x25c>)
 8001258:	6013      	str	r3, [r2, #0]
		  	  	 	 	   cro= (rxbuff[4] & 0x80) ? (int32_t)rxbuff[4] - 256 : (int32_t)rxbuff[4];
 800125a:	4b54      	ldr	r3, [pc, #336]	@ (80013ac <main+0x23c>)
 800125c:	791b      	ldrb	r3, [r3, #4]
 800125e:	b25b      	sxtb	r3, r3
 8001260:	2b00      	cmp	r3, #0
 8001262:	da04      	bge.n	800126e <main+0xfe>
 8001264:	4b51      	ldr	r3, [pc, #324]	@ (80013ac <main+0x23c>)
 8001266:	791b      	ldrb	r3, [r3, #4]
 8001268:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800126c:	e001      	b.n	8001272 <main+0x102>
 800126e:	4b4f      	ldr	r3, [pc, #316]	@ (80013ac <main+0x23c>)
 8001270:	791b      	ldrb	r3, [r3, #4]
 8001272:	4a57      	ldr	r2, [pc, #348]	@ (80013d0 <main+0x260>)
 8001274:	6013      	str	r3, [r2, #0]
		  	  	 	 	   squ= (rxbuff[5] & 0x80) ? (int32_t)rxbuff[5] - 256 : (int32_t)rxbuff[5];
 8001276:	4b4d      	ldr	r3, [pc, #308]	@ (80013ac <main+0x23c>)
 8001278:	795b      	ldrb	r3, [r3, #5]
 800127a:	b25b      	sxtb	r3, r3
 800127c:	2b00      	cmp	r3, #0
 800127e:	da04      	bge.n	800128a <main+0x11a>
 8001280:	4b4a      	ldr	r3, [pc, #296]	@ (80013ac <main+0x23c>)
 8001282:	795b      	ldrb	r3, [r3, #5]
 8001284:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001288:	e001      	b.n	800128e <main+0x11e>
 800128a:	4b48      	ldr	r3, [pc, #288]	@ (80013ac <main+0x23c>)
 800128c:	795b      	ldrb	r3, [r3, #5]
 800128e:	4a51      	ldr	r2, [pc, #324]	@ (80013d4 <main+0x264>)
 8001290:	6013      	str	r3, [r2, #0]
		  	  	 	 	   tri= (rxbuff[6] & 0x80) ? (int32_t)rxbuff[6] - 256 : (int32_t)rxbuff[6];
 8001292:	4b46      	ldr	r3, [pc, #280]	@ (80013ac <main+0x23c>)
 8001294:	799b      	ldrb	r3, [r3, #6]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	da04      	bge.n	80012a6 <main+0x136>
 800129c:	4b43      	ldr	r3, [pc, #268]	@ (80013ac <main+0x23c>)
 800129e:	799b      	ldrb	r3, [r3, #6]
 80012a0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012a4:	e001      	b.n	80012aa <main+0x13a>
 80012a6:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <main+0x23c>)
 80012a8:	799b      	ldrb	r3, [r3, #6]
 80012aa:	4a4b      	ldr	r2, [pc, #300]	@ (80013d8 <main+0x268>)
 80012ac:	6013      	str	r3, [r2, #0]
		  	  	 	 	   cir= (rxbuff[7] & 0x80) ? (int32_t)rxbuff[7] - 256 : (int32_t)rxbuff[7];
 80012ae:	4b3f      	ldr	r3, [pc, #252]	@ (80013ac <main+0x23c>)
 80012b0:	79db      	ldrb	r3, [r3, #7]
 80012b2:	b25b      	sxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	da04      	bge.n	80012c2 <main+0x152>
 80012b8:	4b3c      	ldr	r3, [pc, #240]	@ (80013ac <main+0x23c>)
 80012ba:	79db      	ldrb	r3, [r3, #7]
 80012bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012c0:	e001      	b.n	80012c6 <main+0x156>
 80012c2:	4b3a      	ldr	r3, [pc, #232]	@ (80013ac <main+0x23c>)
 80012c4:	79db      	ldrb	r3, [r3, #7]
 80012c6:	4a45      	ldr	r2, [pc, #276]	@ (80013dc <main+0x26c>)
 80012c8:	6013      	str	r3, [r2, #0]
		  	  	 	 	   up= (rxbuff[8] & 0x80) ? (int32_t)rxbuff[8] - 256 : (int32_t)rxbuff[8];
 80012ca:	4b38      	ldr	r3, [pc, #224]	@ (80013ac <main+0x23c>)
 80012cc:	7a1b      	ldrb	r3, [r3, #8]
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	da04      	bge.n	80012de <main+0x16e>
 80012d4:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <main+0x23c>)
 80012d6:	7a1b      	ldrb	r3, [r3, #8]
 80012d8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012dc:	e001      	b.n	80012e2 <main+0x172>
 80012de:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <main+0x23c>)
 80012e0:	7a1b      	ldrb	r3, [r3, #8]
 80012e2:	4a3f      	ldr	r2, [pc, #252]	@ (80013e0 <main+0x270>)
 80012e4:	6013      	str	r3, [r2, #0]
		  	  	 	 	   down= (rxbuff[9] & 0x80) ? (int32_t)rxbuff[9] - 256 : (int32_t)rxbuff[9];
 80012e6:	4b31      	ldr	r3, [pc, #196]	@ (80013ac <main+0x23c>)
 80012e8:	7a5b      	ldrb	r3, [r3, #9]
 80012ea:	b25b      	sxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da04      	bge.n	80012fa <main+0x18a>
 80012f0:	4b2e      	ldr	r3, [pc, #184]	@ (80013ac <main+0x23c>)
 80012f2:	7a5b      	ldrb	r3, [r3, #9]
 80012f4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012f8:	e001      	b.n	80012fe <main+0x18e>
 80012fa:	4b2c      	ldr	r3, [pc, #176]	@ (80013ac <main+0x23c>)
 80012fc:	7a5b      	ldrb	r3, [r3, #9]
 80012fe:	4a39      	ldr	r2, [pc, #228]	@ (80013e4 <main+0x274>)
 8001300:	6013      	str	r3, [r2, #0]
		  	  	 	 	   left= (rxbuff[10] & 0x80) ? (int32_t)rxbuff[10] - 256 : (int32_t)rxbuff[10];
 8001302:	4b2a      	ldr	r3, [pc, #168]	@ (80013ac <main+0x23c>)
 8001304:	7a9b      	ldrb	r3, [r3, #10]
 8001306:	b25b      	sxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	da04      	bge.n	8001316 <main+0x1a6>
 800130c:	4b27      	ldr	r3, [pc, #156]	@ (80013ac <main+0x23c>)
 800130e:	7a9b      	ldrb	r3, [r3, #10]
 8001310:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001314:	e001      	b.n	800131a <main+0x1aa>
 8001316:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <main+0x23c>)
 8001318:	7a9b      	ldrb	r3, [r3, #10]
 800131a:	4a33      	ldr	r2, [pc, #204]	@ (80013e8 <main+0x278>)
 800131c:	6013      	str	r3, [r2, #0]
		  	  	 	 	   right=(rxbuff[11] & 0x80) ? (int32_t)rxbuff[11] - 256 : (int32_t)rxbuff[11];
 800131e:	4b23      	ldr	r3, [pc, #140]	@ (80013ac <main+0x23c>)
 8001320:	7adb      	ldrb	r3, [r3, #11]
 8001322:	b25b      	sxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	da04      	bge.n	8001332 <main+0x1c2>
 8001328:	4b20      	ldr	r3, [pc, #128]	@ (80013ac <main+0x23c>)
 800132a:	7adb      	ldrb	r3, [r3, #11]
 800132c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001330:	e001      	b.n	8001336 <main+0x1c6>
 8001332:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <main+0x23c>)
 8001334:	7adb      	ldrb	r3, [r3, #11]
 8001336:	4a2d      	ldr	r2, [pc, #180]	@ (80013ec <main+0x27c>)
 8001338:	6013      	str	r3, [r2, #0]
		  	  	 	 	   ll1= (rxbuff[12] & 0x80) ? (int32_t)rxbuff[12] - 256 : (int32_t)rxbuff[12];
 800133a:	4b1c      	ldr	r3, [pc, #112]	@ (80013ac <main+0x23c>)
 800133c:	7b1b      	ldrb	r3, [r3, #12]
 800133e:	b25b      	sxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	da04      	bge.n	800134e <main+0x1de>
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <main+0x23c>)
 8001346:	7b1b      	ldrb	r3, [r3, #12]
 8001348:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800134c:	e001      	b.n	8001352 <main+0x1e2>
 800134e:	4b17      	ldr	r3, [pc, #92]	@ (80013ac <main+0x23c>)
 8001350:	7b1b      	ldrb	r3, [r3, #12]
 8001352:	4a27      	ldr	r2, [pc, #156]	@ (80013f0 <main+0x280>)
 8001354:	6013      	str	r3, [r2, #0]
		  	  	 	 	   ll2= (rxbuff[13] & 0x80) ? (int32_t)rxbuff[13] - 256 : (int32_t)rxbuff[13];
 8001356:	4b15      	ldr	r3, [pc, #84]	@ (80013ac <main+0x23c>)
 8001358:	7b5b      	ldrb	r3, [r3, #13]
 800135a:	b25b      	sxtb	r3, r3
 800135c:	2b00      	cmp	r3, #0
 800135e:	da04      	bge.n	800136a <main+0x1fa>
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <main+0x23c>)
 8001362:	7b5b      	ldrb	r3, [r3, #13]
 8001364:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001368:	e001      	b.n	800136e <main+0x1fe>
 800136a:	4b10      	ldr	r3, [pc, #64]	@ (80013ac <main+0x23c>)
 800136c:	7b5b      	ldrb	r3, [r3, #13]
 800136e:	4a21      	ldr	r2, [pc, #132]	@ (80013f4 <main+0x284>)
 8001370:	6013      	str	r3, [r2, #0]
		  	  	 	 	   rr1= (rxbuff[14] & 0x80) ? (int32_t)rxbuff[14] - 256 : (int32_t)rxbuff[14];
 8001372:	4b0e      	ldr	r3, [pc, #56]	@ (80013ac <main+0x23c>)
 8001374:	7b9b      	ldrb	r3, [r3, #14]
 8001376:	b25b      	sxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	da04      	bge.n	8001386 <main+0x216>
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <main+0x23c>)
 800137e:	7b9b      	ldrb	r3, [r3, #14]
 8001380:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001384:	e001      	b.n	800138a <main+0x21a>
 8001386:	4b09      	ldr	r3, [pc, #36]	@ (80013ac <main+0x23c>)
 8001388:	7b9b      	ldrb	r3, [r3, #14]
 800138a:	4a1b      	ldr	r2, [pc, #108]	@ (80013f8 <main+0x288>)
 800138c:	6013      	str	r3, [r2, #0]
		  	  	 	 	   rr2= (rxbuff[15] & 0x80) ? (int32_t)rxbuff[15] - 256 : (int32_t)rxbuff[15];
 800138e:	4b07      	ldr	r3, [pc, #28]	@ (80013ac <main+0x23c>)
 8001390:	7bdb      	ldrb	r3, [r3, #15]
 8001392:	b25b      	sxtb	r3, r3
 8001394:	2b00      	cmp	r3, #0
 8001396:	da04      	bge.n	80013a2 <main+0x232>
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <main+0x23c>)
 800139a:	7bdb      	ldrb	r3, [r3, #15]
 800139c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80013a0:	e001      	b.n	80013a6 <main+0x236>
 80013a2:	4b02      	ldr	r3, [pc, #8]	@ (80013ac <main+0x23c>)
 80013a4:	7bdb      	ldrb	r3, [r3, #15]
 80013a6:	4a15      	ldr	r2, [pc, #84]	@ (80013fc <main+0x28c>)
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	e059      	b.n	8001460 <main+0x2f0>
 80013ac:	2000009c 	.word	0x2000009c
 80013b0:	2000026c 	.word	0x2000026c
 80013b4:	2000014c 	.word	0x2000014c
 80013b8:	20000194 	.word	0x20000194
 80013bc:	200001dc 	.word	0x200001dc
 80013c0:	200000bc 	.word	0x200000bc
 80013c4:	200000c0 	.word	0x200000c0
 80013c8:	200000c4 	.word	0x200000c4
 80013cc:	200000c8 	.word	0x200000c8
 80013d0:	200000cc 	.word	0x200000cc
 80013d4:	200000d0 	.word	0x200000d0
 80013d8:	200000d4 	.word	0x200000d4
 80013dc:	200000d8 	.word	0x200000d8
 80013e0:	200000dc 	.word	0x200000dc
 80013e4:	200000e0 	.word	0x200000e0
 80013e8:	200000e4 	.word	0x200000e4
 80013ec:	200000e8 	.word	0x200000e8
 80013f0:	200000ec 	.word	0x200000ec
 80013f4:	200000f4 	.word	0x200000f4
 80013f8:	200000f0 	.word	0x200000f0
 80013fc:	200000f8 	.word	0x200000f8
		  	  	 	 	   // Print the received values

		  }
		  else
		  {
			  ry = 0;
 8001400:	4b30      	ldr	r3, [pc, #192]	@ (80014c4 <main+0x354>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
		  	  rx = 0;
 8001406:	4b30      	ldr	r3, [pc, #192]	@ (80014c8 <main+0x358>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
		  	  lx = 0;
 800140c:	4b2f      	ldr	r3, [pc, #188]	@ (80014cc <main+0x35c>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
		  	  ly = 0;
 8001412:	4b2f      	ldr	r3, [pc, #188]	@ (80014d0 <main+0x360>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
		  	  cro = 0;
 8001418:	4b2e      	ldr	r3, [pc, #184]	@ (80014d4 <main+0x364>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
		  	  squ = 0;
 800141e:	4b2e      	ldr	r3, [pc, #184]	@ (80014d8 <main+0x368>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
		  	  tri = 0;
 8001424:	4b2d      	ldr	r3, [pc, #180]	@ (80014dc <main+0x36c>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
		  	  cir = 0;
 800142a:	4b2d      	ldr	r3, [pc, #180]	@ (80014e0 <main+0x370>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
		  	  up = 0;
 8001430:	4b2c      	ldr	r3, [pc, #176]	@ (80014e4 <main+0x374>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
		  	  down = 0;
 8001436:	4b2c      	ldr	r3, [pc, #176]	@ (80014e8 <main+0x378>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
		  	  left = 0;
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <main+0x37c>)
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
		  	  right = 0;
 8001442:	4b2b      	ldr	r3, [pc, #172]	@ (80014f0 <main+0x380>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
		  	  ll1=0;
 8001448:	4b2a      	ldr	r3, [pc, #168]	@ (80014f4 <main+0x384>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
		  	  ll2=0;
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <main+0x388>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
		  	  rr1=0;
 8001454:	4b29      	ldr	r3, [pc, #164]	@ (80014fc <main+0x38c>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
		  	  rr2=0;
 800145a:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <main+0x390>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
		  }
		  if (abs(lx) < deadzone) lx = 0;
 8001460:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <main+0x35c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001468:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800146c:	4b25      	ldr	r3, [pc, #148]	@ (8001504 <main+0x394>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	429a      	cmp	r2, r3
 8001472:	da02      	bge.n	800147a <main+0x30a>
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <main+0x35c>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
		  if (abs(ly) < deadzone) ly = 0;
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <main+0x360>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001482:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001486:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <main+0x394>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	da02      	bge.n	8001494 <main+0x324>
 800148e:	4b10      	ldr	r3, [pc, #64]	@ (80014d0 <main+0x360>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
		  if (abs(rx) < deadzone) rx = 0;
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <main+0x358>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800149c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80014a0:	4b18      	ldr	r3, [pc, #96]	@ (8001504 <main+0x394>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	da03      	bge.n	80014b0 <main+0x340>
 80014a8:	4b07      	ldr	r3, [pc, #28]	@ (80014c8 <main+0x358>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	e032      	b.n	8001516 <main+0x3a6>
		  else rx = (rx>0)?rx-deadzone : rx+deadzone;
 80014b0:	4b05      	ldr	r3, [pc, #20]	@ (80014c8 <main+0x358>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	dd27      	ble.n	8001508 <main+0x398>
 80014b8:	4b03      	ldr	r3, [pc, #12]	@ (80014c8 <main+0x358>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b11      	ldr	r3, [pc, #68]	@ (8001504 <main+0x394>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	e026      	b.n	8001512 <main+0x3a2>
 80014c4:	200000c8 	.word	0x200000c8
 80014c8:	200000c4 	.word	0x200000c4
 80014cc:	200000bc 	.word	0x200000bc
 80014d0:	200000c0 	.word	0x200000c0
 80014d4:	200000cc 	.word	0x200000cc
 80014d8:	200000d0 	.word	0x200000d0
 80014dc:	200000d4 	.word	0x200000d4
 80014e0:	200000d8 	.word	0x200000d8
 80014e4:	200000dc 	.word	0x200000dc
 80014e8:	200000e0 	.word	0x200000e0
 80014ec:	200000e4 	.word	0x200000e4
 80014f0:	200000e8 	.word	0x200000e8
 80014f4:	200000ec 	.word	0x200000ec
 80014f8:	200000f4 	.word	0x200000f4
 80014fc:	200000f0 	.word	0x200000f0
 8001500:	200000f8 	.word	0x200000f8
 8001504:	20000000 	.word	0x20000000
 8001508:	4b9d      	ldr	r3, [pc, #628]	@ (8001780 <main+0x610>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b9d      	ldr	r3, [pc, #628]	@ (8001784 <main+0x614>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4413      	add	r3, r2
 8001512:	4a9b      	ldr	r2, [pc, #620]	@ (8001780 <main+0x610>)
 8001514:	6013      	str	r3, [r2, #0]
		  if (abs(ry) < deadzone) ry = 0;
 8001516:	4b9c      	ldr	r3, [pc, #624]	@ (8001788 <main+0x618>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800151e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001522:	4b98      	ldr	r3, [pc, #608]	@ (8001784 <main+0x614>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	429a      	cmp	r2, r3
 8001528:	da02      	bge.n	8001530 <main+0x3c0>
 800152a:	4b97      	ldr	r3, [pc, #604]	@ (8001788 <main+0x618>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
		  lx = (lx * 950) / 127;  // Assuming joystick range is -127 to +127
 8001530:	4b96      	ldr	r3, [pc, #600]	@ (800178c <main+0x61c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	4a94      	ldr	r2, [pc, #592]	@ (8001790 <main+0x620>)
 800153e:	fb82 1203 	smull	r1, r2, r2, r3
 8001542:	441a      	add	r2, r3
 8001544:	1192      	asrs	r2, r2, #6
 8001546:	17db      	asrs	r3, r3, #31
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4a90      	ldr	r2, [pc, #576]	@ (800178c <main+0x61c>)
 800154c:	6013      	str	r3, [r2, #0]
		  ly = (ly * 950) / 127;
 800154e:	4b91      	ldr	r3, [pc, #580]	@ (8001794 <main+0x624>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001556:	fb02 f303 	mul.w	r3, r2, r3
 800155a:	4a8d      	ldr	r2, [pc, #564]	@ (8001790 <main+0x620>)
 800155c:	fb82 1203 	smull	r1, r2, r2, r3
 8001560:	441a      	add	r2, r3
 8001562:	1192      	asrs	r2, r2, #6
 8001564:	17db      	asrs	r3, r3, #31
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	4a8a      	ldr	r2, [pc, #552]	@ (8001794 <main+0x624>)
 800156a:	6013      	str	r3, [r2, #0]
		  rx = (rx * 950) / 127;
 800156c:	4b84      	ldr	r3, [pc, #528]	@ (8001780 <main+0x610>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8001574:	fb02 f303 	mul.w	r3, r2, r3
 8001578:	4a85      	ldr	r2, [pc, #532]	@ (8001790 <main+0x620>)
 800157a:	fb82 1203 	smull	r1, r2, r2, r3
 800157e:	441a      	add	r2, r3
 8001580:	1192      	asrs	r2, r2, #6
 8001582:	17db      	asrs	r3, r3, #31
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	4a7e      	ldr	r2, [pc, #504]	@ (8001780 <main+0x610>)
 8001588:	6013      	str	r3, [r2, #0]
		  rL = sqrt(lx * lx + ly * ly);
 800158a:	4b80      	ldr	r3, [pc, #512]	@ (800178c <main+0x61c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a7f      	ldr	r2, [pc, #508]	@ (800178c <main+0x61c>)
 8001590:	6812      	ldr	r2, [r2, #0]
 8001592:	fb03 f202 	mul.w	r2, r3, r2
 8001596:	4b7f      	ldr	r3, [pc, #508]	@ (8001794 <main+0x624>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	497e      	ldr	r1, [pc, #504]	@ (8001794 <main+0x624>)
 800159c:	6809      	ldr	r1, [r1, #0]
 800159e:	fb01 f303 	mul.w	r3, r1, r3
 80015a2:	4413      	add	r3, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ffd5 	bl	8000554 <__aeabi_i2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	ec43 2b10 	vmov	d0, r2, r3
 80015b2:	f004 fc2d 	bl	8005e10 <sqrt>
 80015b6:	ec53 2b10 	vmov	r2, r3, d0
 80015ba:	4610      	mov	r0, r2
 80015bc:	4619      	mov	r1, r3
 80015be:	f7ff fae3 	bl	8000b88 <__aeabi_d2iz>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4a74      	ldr	r2, [pc, #464]	@ (8001798 <main+0x628>)
 80015c6:	6013      	str	r3, [r2, #0]
		  rR = sqrt(rx * rx + ry * ry);
 80015c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001780 <main+0x610>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a6c      	ldr	r2, [pc, #432]	@ (8001780 <main+0x610>)
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	fb03 f202 	mul.w	r2, r3, r2
 80015d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001788 <main+0x618>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	496b      	ldr	r1, [pc, #428]	@ (8001788 <main+0x618>)
 80015da:	6809      	ldr	r1, [r1, #0]
 80015dc:	fb01 f303 	mul.w	r3, r1, r3
 80015e0:	4413      	add	r3, r2
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7fe ffb6 	bl	8000554 <__aeabi_i2d>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	ec43 2b10 	vmov	d0, r2, r3
 80015f0:	f004 fc0e 	bl	8005e10 <sqrt>
 80015f4:	ec53 2b10 	vmov	r2, r3, d0
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fac4 	bl	8000b88 <__aeabi_d2iz>
 8001600:	4603      	mov	r3, r0
 8001602:	4a66      	ldr	r2, [pc, #408]	@ (800179c <main+0x62c>)
 8001604:	6013      	str	r3, [r2, #0]
		  printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly, rx, ry, cro, squ, tri, cir);
 8001606:	4b61      	ldr	r3, [pc, #388]	@ (800178c <main+0x61c>)
 8001608:	681d      	ldr	r5, [r3, #0]
 800160a:	4b62      	ldr	r3, [pc, #392]	@ (8001794 <main+0x624>)
 800160c:	681e      	ldr	r6, [r3, #0]
 800160e:	4b5c      	ldr	r3, [pc, #368]	@ (8001780 <main+0x610>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	4b5c      	ldr	r3, [pc, #368]	@ (8001788 <main+0x618>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a61      	ldr	r2, [pc, #388]	@ (80017a0 <main+0x630>)
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	4961      	ldr	r1, [pc, #388]	@ (80017a4 <main+0x634>)
 800161e:	6809      	ldr	r1, [r1, #0]
 8001620:	4861      	ldr	r0, [pc, #388]	@ (80017a8 <main+0x638>)
 8001622:	6800      	ldr	r0, [r0, #0]
 8001624:	4c61      	ldr	r4, [pc, #388]	@ (80017ac <main+0x63c>)
 8001626:	6824      	ldr	r4, [r4, #0]
 8001628:	9404      	str	r4, [sp, #16]
 800162a:	9003      	str	r0, [sp, #12]
 800162c:	9102      	str	r1, [sp, #8]
 800162e:	9201      	str	r2, [sp, #4]
 8001630:	9300      	str	r3, [sp, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4632      	mov	r2, r6
 8001636:	4629      	mov	r1, r5
 8001638:	485d      	ldr	r0, [pc, #372]	@ (80017b0 <main+0x640>)
 800163a:	f003 fd7b 	bl	8005134 <iprintf>
		  counterValue = TIM2->CNT;
 800163e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001644:	617b      	str	r3, [r7, #20]
		  counterValue1 = TIM3->CNT;
 8001646:	4b5b      	ldr	r3, [pc, #364]	@ (80017b4 <main+0x644>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	613b      	str	r3, [r7, #16]
		  counterValue2 = TIM4->CNT;
 800164c:	4b5a      	ldr	r3, [pc, #360]	@ (80017b8 <main+0x648>)
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	60fb      	str	r3, [r7, #12]
		  if (counterValue != pastCounterValue)
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001656:	429a      	cmp	r2, r3
 8001658:	d003      	beq.n	8001662 <main+0x4f2>
		  {


			  printf("count1 is: %d\n\r", counterValue);
 800165a:	6979      	ldr	r1, [r7, #20]
 800165c:	4857      	ldr	r0, [pc, #348]	@ (80017bc <main+0x64c>)
 800165e:	f003 fd69 	bl	8005134 <iprintf>

		  }
		  pastCounterValue = counterValue;
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
		  if (counterValue1 != pastCounterValue1)
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	6a3b      	ldr	r3, [r7, #32]
 800166a:	429a      	cmp	r2, r3
 800166c:	d003      	beq.n	8001676 <main+0x506>
		  {
			  printf("count2 is: %d\n\r", counterValue1);
 800166e:	6939      	ldr	r1, [r7, #16]
 8001670:	4853      	ldr	r0, [pc, #332]	@ (80017c0 <main+0x650>)
 8001672:	f003 fd5f 	bl	8005134 <iprintf>

		  }
		  pastCounterValue1 = counterValue1;
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	623b      	str	r3, [r7, #32]
		  if (counterValue2 != pastCounterValue2)
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	429a      	cmp	r2, r3
 8001680:	d003      	beq.n	800168a <main+0x51a>
		  {
			  printf("count3 is: %d\n\r", counterValue2);
 8001682:	68f9      	ldr	r1, [r7, #12]
 8001684:	484f      	ldr	r0, [pc, #316]	@ (80017c4 <main+0x654>)
 8001686:	f003 fd55 	bl	8005134 <iprintf>

		  }
		  pastCounterValue2 = counterValue2;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	61fb      	str	r3, [r7, #28]
		  if(squ == 1)
 800168e:	4b45      	ldr	r3, [pc, #276]	@ (80017a4 <main+0x634>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d10c      	bne.n	80016b0 <main+0x540>
		  {
		  		  TIM2->CNT=0;
 8001696:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800169a:	2200      	movs	r2, #0
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24
		  		  TIM3->CNT=0;
 800169e:	4b45      	ldr	r3, [pc, #276]	@ (80017b4 <main+0x644>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	@ 0x24
		  		  TIM4->CNT=0;
 80016a4:	4b44      	ldr	r3, [pc, #272]	@ (80017b8 <main+0x648>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	625a      	str	r2, [r3, #36]	@ 0x24
		  		  printf("reset");
 80016aa:	4847      	ldr	r0, [pc, #284]	@ (80017c8 <main+0x658>)
 80016ac:	f003 fd42 	bl	8005134 <iprintf>
		  }
		  compute3wheel();
 80016b0:	f7ff fc26 	bl	8000f00 <compute3wheel>
		  if(target_wf>=0)
 80016b4:	4b45      	ldr	r3, [pc, #276]	@ (80017cc <main+0x65c>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0d      	blt.n	80016d8 <main+0x568>
		  {
		  TIM1->CCR1 = target_wf;
 80016bc:	4b43      	ldr	r3, [pc, #268]	@ (80017cc <main+0x65c>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <main+0x660>)
 80016c2:	635a      	str	r2, [r3, #52]	@ 0x34
		  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80016c4:	2100      	movs	r1, #0
 80016c6:	4843      	ldr	r0, [pc, #268]	@ (80017d4 <main+0x664>)
 80016c8:	f002 f860 	bl	800378c <HAL_TIM_PWM_Start>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,0);
 80016cc:	2200      	movs	r2, #0
 80016ce:	2180      	movs	r1, #128	@ 0x80
 80016d0:	4841      	ldr	r0, [pc, #260]	@ (80017d8 <main+0x668>)
 80016d2:	f001 f9b1 	bl	8002a38 <HAL_GPIO_WritePin>
 80016d6:	e00d      	b.n	80016f4 <main+0x584>
		  }
		  else
		  {
			  TIM1->CCR1 = -target_wf;
 80016d8:	4b3c      	ldr	r3, [pc, #240]	@ (80017cc <main+0x65c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	425a      	negs	r2, r3
 80016de:	4b3c      	ldr	r3, [pc, #240]	@ (80017d0 <main+0x660>)
 80016e0:	635a      	str	r2, [r3, #52]	@ 0x34
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 80016e2:	2100      	movs	r1, #0
 80016e4:	483b      	ldr	r0, [pc, #236]	@ (80017d4 <main+0x664>)
 80016e6:	f002 f851 	bl	800378c <HAL_TIM_PWM_Start>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_7,1);
 80016ea:	2201      	movs	r2, #1
 80016ec:	2180      	movs	r1, #128	@ 0x80
 80016ee:	483a      	ldr	r0, [pc, #232]	@ (80017d8 <main+0x668>)
 80016f0:	f001 f9a2 	bl	8002a38 <HAL_GPIO_WritePin>
		  }
		  if(target_wrr>=0)
 80016f4:	4b39      	ldr	r3, [pc, #228]	@ (80017dc <main+0x66c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	db0e      	blt.n	800171a <main+0x5aa>
		  {
			  TIM1->CCR2 = target_wrr;
 80016fc:	4b37      	ldr	r3, [pc, #220]	@ (80017dc <main+0x66c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b33      	ldr	r3, [pc, #204]	@ (80017d0 <main+0x660>)
 8001702:	639a      	str	r2, [r3, #56]	@ 0x38
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001704:	2104      	movs	r1, #4
 8001706:	4833      	ldr	r0, [pc, #204]	@ (80017d4 <main+0x664>)
 8001708:	f002 f840 	bl	800378c <HAL_TIM_PWM_Start>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,0);
 800170c:	2200      	movs	r2, #0
 800170e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001712:	4831      	ldr	r0, [pc, #196]	@ (80017d8 <main+0x668>)
 8001714:	f001 f990 	bl	8002a38 <HAL_GPIO_WritePin>
 8001718:	e00e      	b.n	8001738 <main+0x5c8>
		  }
		  else
		  {
			  TIM1->CCR2 = -target_wrr;
 800171a:	4b30      	ldr	r3, [pc, #192]	@ (80017dc <main+0x66c>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	425a      	negs	r2, r3
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <main+0x660>)
 8001722:	639a      	str	r2, [r3, #56]	@ 0x38
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001724:	2104      	movs	r1, #4
 8001726:	482b      	ldr	r0, [pc, #172]	@ (80017d4 <main+0x664>)
 8001728:	f002 f830 	bl	800378c <HAL_TIM_PWM_Start>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_8,1);
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001732:	4829      	ldr	r0, [pc, #164]	@ (80017d8 <main+0x668>)
 8001734:	f001 f980 	bl	8002a38 <HAL_GPIO_WritePin>
		  }
		  if(target_wrl>=0)
 8001738:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <main+0x670>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	db0e      	blt.n	800175e <main+0x5ee>
		  {
			  TIM1->CCR3 = target_wrl;
 8001740:	4b27      	ldr	r3, [pc, #156]	@ (80017e0 <main+0x670>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <main+0x660>)
 8001746:	63da      	str	r2, [r3, #60]	@ 0x3c
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001748:	2108      	movs	r1, #8
 800174a:	4822      	ldr	r0, [pc, #136]	@ (80017d4 <main+0x664>)
 800174c:	f002 f81e 	bl	800378c <HAL_TIM_PWM_Start>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,0);
 8001750:	2200      	movs	r2, #0
 8001752:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001756:	4820      	ldr	r0, [pc, #128]	@ (80017d8 <main+0x668>)
 8001758:	f001 f96e 	bl	8002a38 <HAL_GPIO_WritePin>
 800175c:	e538      	b.n	80011d0 <main+0x60>
		  }
		  else
		  {
			  TIM1->CCR3 = -target_wrl;
 800175e:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <main+0x670>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	425a      	negs	r2, r3
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <main+0x660>)
 8001766:	63da      	str	r2, [r3, #60]	@ 0x3c
			  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_3);
 8001768:	2108      	movs	r1, #8
 800176a:	481a      	ldr	r0, [pc, #104]	@ (80017d4 <main+0x664>)
 800176c:	f002 f80e 	bl	800378c <HAL_TIM_PWM_Start>
			  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,1);
 8001770:	2201      	movs	r2, #1
 8001772:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001776:	4818      	ldr	r0, [pc, #96]	@ (80017d8 <main+0x668>)
 8001778:	f001 f95e 	bl	8002a38 <HAL_GPIO_WritePin>
  {
 800177c:	e528      	b.n	80011d0 <main+0x60>
 800177e:	bf00      	nop
 8001780:	200000c4 	.word	0x200000c4
 8001784:	20000000 	.word	0x20000000
 8001788:	200000c8 	.word	0x200000c8
 800178c:	200000bc 	.word	0x200000bc
 8001790:	81020409 	.word	0x81020409
 8001794:	200000c0 	.word	0x200000c0
 8001798:	200000fc 	.word	0x200000fc
 800179c:	20000100 	.word	0x20000100
 80017a0:	200000cc 	.word	0x200000cc
 80017a4:	200000d0 	.word	0x200000d0
 80017a8:	200000d4 	.word	0x200000d4
 80017ac:	200000d8 	.word	0x200000d8
 80017b0:	08007140 	.word	0x08007140
 80017b4:	40000400 	.word	0x40000400
 80017b8:	40000800 	.word	0x40000800
 80017bc:	08007178 	.word	0x08007178
 80017c0:	08007188 	.word	0x08007188
 80017c4:	08007198 	.word	0x08007198
 80017c8:	080071a8 	.word	0x080071a8
 80017cc:	200000ac 	.word	0x200000ac
 80017d0:	40010000 	.word	0x40010000
 80017d4:	20000104 	.word	0x20000104
 80017d8:	40020800 	.word	0x40020800
 80017dc:	200000b0 	.word	0x200000b0
 80017e0:	200000b4 	.word	0x200000b4

080017e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b094      	sub	sp, #80	@ 0x50
 80017e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	2234      	movs	r2, #52	@ 0x34
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f003 fcf3 	bl	80051de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f8:	f107 0308 	add.w	r3, r7, #8
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <SystemClock_Config+0xd4>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001810:	4a29      	ldr	r2, [pc, #164]	@ (80018b8 <SystemClock_Config+0xd4>)
 8001812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001816:	6413      	str	r3, [r2, #64]	@ 0x40
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <SystemClock_Config+0xd4>)
 800181a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001824:	2300      	movs	r3, #0
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <SystemClock_Config+0xd8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001830:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <SystemClock_Config+0xd8>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b20      	ldr	r3, [pc, #128]	@ (80018bc <SystemClock_Config+0xd8>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	2301      	movs	r3, #1
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184c:	2310      	movs	r3, #16
 800184e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001850:	2302      	movs	r3, #2
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001854:	2300      	movs	r3, #0
 8001856:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001858:	2310      	movs	r3, #16
 800185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800185c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001860:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001862:	2304      	movs	r3, #4
 8001864:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001866:	2302      	movs	r3, #2
 8001868:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800186a:	2302      	movs	r3, #2
 800186c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f107 031c 	add.w	r3, r7, #28
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fc44 	bl	8003100 <HAL_RCC_OscConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800187e:	f000 fb11 	bl	8001ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001882:	230f      	movs	r3, #15
 8001884:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001886:	2302      	movs	r3, #2
 8001888:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800188e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	2102      	movs	r1, #2
 800189e:	4618      	mov	r0, r3
 80018a0:	f001 f8e4 	bl	8002a6c <HAL_RCC_ClockConfig>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80018aa:	f000 fafb 	bl	8001ea4 <Error_Handler>
  }
}
 80018ae:	bf00      	nop
 80018b0:	3750      	adds	r7, #80	@ 0x50
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	40023800 	.word	0x40023800
 80018bc:	40007000 	.word	0x40007000

080018c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b096      	sub	sp, #88	@ 0x58
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018c6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]
 80018e8:	609a      	str	r2, [r3, #8]
 80018ea:	60da      	str	r2, [r3, #12]
 80018ec:	611a      	str	r2, [r3, #16]
 80018ee:	615a      	str	r2, [r3, #20]
 80018f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2220      	movs	r2, #32
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fc70 	bl	80051de <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001900:	4a4a      	ldr	r2, [pc, #296]	@ (8001a2c <MX_TIM1_Init+0x16c>)
 8001902:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180-1;
 8001904:	4b48      	ldr	r3, [pc, #288]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001906:	22b3      	movs	r2, #179	@ 0xb3
 8001908:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190a:	4b47      	ldr	r3, [pc, #284]	@ (8001a28 <MX_TIM1_Init+0x168>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001910:	4b45      	ldr	r3, [pc, #276]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001912:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001916:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b43      	ldr	r3, [pc, #268]	@ (8001a28 <MX_TIM1_Init+0x168>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800191e:	4b42      	ldr	r3, [pc, #264]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001920:	2200      	movs	r2, #0
 8001922:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b40      	ldr	r3, [pc, #256]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800192a:	483f      	ldr	r0, [pc, #252]	@ (8001a28 <MX_TIM1_Init+0x168>)
 800192c:	f001 fe86 	bl	800363c <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001936:	f000 fab5 	bl	8001ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800193e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001940:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001944:	4619      	mov	r1, r3
 8001946:	4838      	ldr	r0, [pc, #224]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001948:	f002 f9de 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001952:	f000 faa7 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001956:	4834      	ldr	r0, [pc, #208]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001958:	f001 febf 	bl	80036da <HAL_TIM_PWM_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001962:	f000 fa9f 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001966:	2300      	movs	r3, #0
 8001968:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800196e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001972:	4619      	mov	r1, r3
 8001974:	482c      	ldr	r0, [pc, #176]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001976:	f002 fdab 	bl	80044d0 <HAL_TIMEx_MasterConfigSynchronization>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001980:	f000 fa90 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001984:	2360      	movs	r3, #96	@ 0x60
 8001986:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800198c:	2300      	movs	r3, #0
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001990:	2300      	movs	r3, #0
 8001992:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001998:	2300      	movs	r3, #0
 800199a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800199c:	2300      	movs	r3, #0
 800199e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	481f      	ldr	r0, [pc, #124]	@ (8001a28 <MX_TIM1_Init+0x168>)
 80019aa:	f002 f8eb 	bl	8003b84 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80019b4:	f000 fa76 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019bc:	2204      	movs	r2, #4
 80019be:	4619      	mov	r1, r3
 80019c0:	4819      	ldr	r0, [pc, #100]	@ (8001a28 <MX_TIM1_Init+0x168>)
 80019c2:	f002 f8df 	bl	8003b84 <HAL_TIM_PWM_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80019cc:	f000 fa6a 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d4:	2208      	movs	r2, #8
 80019d6:	4619      	mov	r1, r3
 80019d8:	4813      	ldr	r0, [pc, #76]	@ (8001a28 <MX_TIM1_Init+0x168>)
 80019da:	f002 f8d3 	bl	8003b84 <HAL_TIM_PWM_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80019e4:	f000 fa5e 	bl	8001ea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a00:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a02:	2300      	movs	r3, #0
 8001a04:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a06:	1d3b      	adds	r3, r7, #4
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4807      	ldr	r0, [pc, #28]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001a0c:	f002 fddc 	bl	80045c8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001a16:	f000 fa45 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a1a:	4803      	ldr	r0, [pc, #12]	@ (8001a28 <MX_TIM1_Init+0x168>)
 8001a1c:	f000 fb78 	bl	8002110 <HAL_TIM_MspPostInit>

}
 8001a20:	bf00      	nop
 8001a22:	3758      	adds	r7, #88	@ 0x58
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000104 	.word	0x20000104
 8001a2c:	40010000 	.word	0x40010000

08001a30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08c      	sub	sp, #48	@ 0x30
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a36:	f107 030c 	add.w	r3, r7, #12
 8001a3a:	2224      	movs	r2, #36	@ 0x24
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f003 fbcd 	bl	80051de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	@ (8001ad4 <MX_TIM2_Init+0xa4>)
 8001a4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad4 <MX_TIM2_Init+0xa4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad4 <MX_TIM2_Init+0xa4>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad4 <MX_TIM2_Init+0xa4>)
 8001a62:	f04f 32ff 	mov.w	r2, #4294967295
 8001a66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <MX_TIM2_Init+0xa4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <MX_TIM2_Init+0xa4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a74:	2303      	movs	r3, #3
 8001a76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001a84:	2305      	movs	r3, #5
 8001a86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001a94:	2305      	movs	r3, #5
 8001a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	@ (8001ad4 <MX_TIM2_Init+0xa4>)
 8001aa0:	f001 ff3c 	bl	800391c <HAL_TIM_Encoder_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001aaa:	f000 f9fb 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <MX_TIM2_Init+0xa4>)
 8001abc:	f002 fd08 	bl	80044d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001ac6:	f000 f9ed 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3730      	adds	r7, #48	@ 0x30
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	2000014c 	.word	0x2000014c

08001ad8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	@ 0x30
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2224      	movs	r2, #36	@ 0x24
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f003 fb79 	bl	80051de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af4:	4b20      	ldr	r3, [pc, #128]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001af6:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <MX_TIM3_Init+0xa4>)
 8001af8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001afa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b22:	2301      	movs	r3, #1
 8001b24:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001b2a:	2305      	movs	r3, #5
 8001b2c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b3e:	f107 030c 	add.w	r3, r7, #12
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b46:	f001 fee9 	bl	800391c <HAL_TIM_Encoder_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001b50:	f000 f9a8 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	@ (8001b78 <MX_TIM3_Init+0xa0>)
 8001b62:	f002 fcb5 	bl	80044d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b6c:	f000 f99a 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3730      	adds	r7, #48	@ 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000194 	.word	0x20000194
 8001b7c:	40000400 	.word	0x40000400

08001b80 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	@ 0x30
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	2224      	movs	r2, #36	@ 0x24
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 fb25 	bl	80051de <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b9c:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001b9e:	4a21      	ldr	r2, [pc, #132]	@ (8001c24 <MX_TIM4_Init+0xa4>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 8001bd2:	2305      	movs	r3, #5
 8001bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 8001be2:	2305      	movs	r3, #5
 8001be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001bee:	f001 fe95 	bl	800391c <HAL_TIM_Encoder_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001bf8:	f000 f954 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	@ (8001c20 <MX_TIM4_Init+0xa0>)
 8001c0a:	f002 fc61 	bl	80044d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001c14:	f000 f946 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3730      	adds	r7, #48	@ 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	200001dc 	.word	0x200001dc
 8001c24:	40000800 	.word	0x40000800

08001c28 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2e:	f107 0308 	add.w	r3, r7, #8
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c46:	4a1f      	ldr	r2, [pc, #124]	@ (8001cc4 <MX_TIM8_Init+0x9c>)
 8001c48:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c4c:	22b3      	movs	r2, #179	@ 0xb3
 8001c4e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c5c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5e:	4b18      	ldr	r3, [pc, #96]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c64:	4b16      	ldr	r3, [pc, #88]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6a:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c70:	4813      	ldr	r0, [pc, #76]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c72:	f001 fce3 	bl	800363c <HAL_TIM_Base_Init>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001c7c:	f000 f912 	bl	8001ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c86:	f107 0308 	add.w	r3, r7, #8
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001c8e:	f002 f83b 	bl	8003d08 <HAL_TIM_ConfigClockSource>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001c98:	f000 f904 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ca4:	463b      	mov	r3, r7
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_TIM8_Init+0x98>)
 8001caa:	f002 fc11 	bl	80044d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001cb4:	f000 f8f6 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20000224 	.word	0x20000224
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <_write>:
int _write(int file, char *ptr, int len) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cdc:	68b9      	ldr	r1, [r7, #8]
 8001cde:	4804      	ldr	r0, [pc, #16]	@ (8001cf0 <_write+0x28>)
 8001ce0:	f002 fd14 	bl	800470c <HAL_UART_Transmit>
    return len;
 8001ce4:	687b      	ldr	r3, [r7, #4]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200002b4 	.word	0x200002b4

08001cf4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001cfa:	4a12      	ldr	r2, [pc, #72]	@ (8001d44 <MX_UART4_Init+0x50>)
 8001cfc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001cfe:	4b10      	ldr	r3, [pc, #64]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d04:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d06:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d12:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001d1a:	220c      	movs	r2, #12
 8001d1c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d24:	4b06      	ldr	r3, [pc, #24]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d2a:	4805      	ldr	r0, [pc, #20]	@ (8001d40 <MX_UART4_Init+0x4c>)
 8001d2c:	f002 fc9e 	bl	800466c <HAL_UART_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001d36:	f000 f8b5 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	2000026c 	.word	0x2000026c
 8001d44:	40004c00 	.word	0x40004c00

08001d48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	@ (8001d98 <MX_USART2_UART_Init+0x50>)
 8001d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d60:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d66:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d6c:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d6e:	220c      	movs	r2, #12
 8001d70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d72:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d78:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d7e:	4805      	ldr	r0, [pc, #20]	@ (8001d94 <MX_USART2_UART_Init+0x4c>)
 8001d80:	f002 fc74 	bl	800466c <HAL_UART_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d8a:	f000 f88b 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	200002b4 	.word	0x200002b4
 8001d98:	40004400 	.word	0x40004400

08001d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	605a      	str	r2, [r3, #4]
 8001dac:	609a      	str	r2, [r3, #8]
 8001dae:	60da      	str	r2, [r3, #12]
 8001db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	4a37      	ldr	r2, [pc, #220]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc2:	4b35      	ldr	r3, [pc, #212]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	f003 0304 	and.w	r3, r3, #4
 8001dca:	613b      	str	r3, [r7, #16]
 8001dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	4b31      	ldr	r3, [pc, #196]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4a30      	ldr	r2, [pc, #192]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dde:	4b2e      	ldr	r3, [pc, #184]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b2a      	ldr	r3, [pc, #168]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a29      	ldr	r2, [pc, #164]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b27      	ldr	r3, [pc, #156]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
 8001e0a:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	4a22      	ldr	r2, [pc, #136]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <MX_GPIO_Init+0xfc>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	607b      	str	r3, [r7, #4]
 8001e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2120      	movs	r1, #32
 8001e26:	481d      	ldr	r0, [pc, #116]	@ (8001e9c <MX_GPIO_Init+0x100>)
 8001e28:	f000 fe06 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, motor1_Pin|motor2_Pin|motor3_Pin, GPIO_PIN_RESET);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001e32:	481b      	ldr	r0, [pc, #108]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001e34:	f000 fe00 	bl	8002a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e3e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0314 	add.w	r3, r7, #20
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4814      	ldr	r0, [pc, #80]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001e50:	f000 fc5e 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e54:	2320      	movs	r3, #32
 8001e56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480c      	ldr	r0, [pc, #48]	@ (8001e9c <MX_GPIO_Init+0x100>)
 8001e6c:	f000 fc50 	bl	8002710 <HAL_GPIO_Init>

  /*Configure GPIO pins : motor1_Pin motor2_Pin motor3_Pin */
  GPIO_InitStruct.Pin = motor1_Pin|motor2_Pin|motor3_Pin;
 8001e70:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e82:	f107 0314 	add.w	r3, r7, #20
 8001e86:	4619      	mov	r1, r3
 8001e88:	4805      	ldr	r0, [pc, #20]	@ (8001ea0 <MX_GPIO_Init+0x104>)
 8001e8a:	f000 fc41 	bl	8002710 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e8e:	bf00      	nop
 8001e90:	3728      	adds	r7, #40	@ 0x28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40020800 	.word	0x40020800

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eac:	bf00      	nop
 8001eae:	e7fd      	b.n	8001eac <Error_Handler+0x8>

08001eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	4a0f      	ldr	r2, [pc, #60]	@ (8001efc <HAL_MspInit+0x4c>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <HAL_MspInit+0x4c>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	4a08      	ldr	r2, [pc, #32]	@ (8001efc <HAL_MspInit+0x4c>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <HAL_MspInit+0x4c>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001eee:	2007      	movs	r0, #7
 8001ef0:	f000 fbda 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800

08001f00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a15      	ldr	r2, [pc, #84]	@ (8001f64 <HAL_TIM_Base_MspInit+0x64>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <HAL_TIM_Base_MspInit+0x68>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	4a13      	ldr	r2, [pc, #76]	@ (8001f68 <HAL_TIM_Base_MspInit+0x68>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_TIM_Base_MspInit+0x68>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001f2e:	e012      	b.n	8001f56 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0d      	ldr	r2, [pc, #52]	@ (8001f6c <HAL_TIM_Base_MspInit+0x6c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d10d      	bne.n	8001f56 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_TIM_Base_MspInit+0x68>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <HAL_TIM_Base_MspInit+0x68>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f4a:	4b07      	ldr	r3, [pc, #28]	@ (8001f68 <HAL_TIM_Base_MspInit+0x68>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	68bb      	ldr	r3, [r7, #8]
}
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40010000 	.word	0x40010000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	40010400 	.word	0x40010400

08001f70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b08e      	sub	sp, #56	@ 0x38
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f90:	d14c      	bne.n	800202c <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	4b59      	ldr	r3, [pc, #356]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a58      	ldr	r2, [pc, #352]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b56      	ldr	r3, [pc, #344]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	4b52      	ldr	r3, [pc, #328]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a51      	ldr	r2, [pc, #324]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b4f      	ldr	r3, [pc, #316]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
 8001fc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	4b4b      	ldr	r3, [pc, #300]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a4a      	ldr	r2, [pc, #296]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b48      	ldr	r3, [pc, #288]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
 8001fe4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fe6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fec:	2302      	movs	r3, #2
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002000:	4619      	mov	r1, r3
 8002002:	483f      	ldr	r0, [pc, #252]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x190>)
 8002004:	f000 fb84 	bl	8002710 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002008:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200e:	2302      	movs	r3, #2
 8002010:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002012:	2301      	movs	r3, #1
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002016:	2300      	movs	r3, #0
 8002018:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800201a:	2301      	movs	r3, #1
 800201c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002022:	4619      	mov	r1, r3
 8002024:	4837      	ldr	r0, [pc, #220]	@ (8002104 <HAL_TIM_Encoder_MspInit+0x194>)
 8002026:	f000 fb73 	bl	8002710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800202a:	e062      	b.n	80020f2 <HAL_TIM_Encoder_MspInit+0x182>
  else if(htim_encoder->Instance==TIM3)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a35      	ldr	r2, [pc, #212]	@ (8002108 <HAL_TIM_Encoder_MspInit+0x198>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d12c      	bne.n	8002090 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	4b30      	ldr	r3, [pc, #192]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	4a2f      	ldr	r2, [pc, #188]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6413      	str	r3, [r2, #64]	@ 0x40
 8002046:	4b2d      	ldr	r3, [pc, #180]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b29      	ldr	r3, [pc, #164]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	4a28      	ldr	r2, [pc, #160]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	@ 0x30
 8002062:	4b26      	ldr	r3, [pc, #152]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800206e:	23c0      	movs	r3, #192	@ 0xc0
 8002070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002076:	2301      	movs	r3, #1
 8002078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800207e:	2302      	movs	r3, #2
 8002080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002086:	4619      	mov	r1, r3
 8002088:	481d      	ldr	r0, [pc, #116]	@ (8002100 <HAL_TIM_Encoder_MspInit+0x190>)
 800208a:	f000 fb41 	bl	8002710 <HAL_GPIO_Init>
}
 800208e:	e030      	b.n	80020f2 <HAL_TIM_Encoder_MspInit+0x182>
  else if(htim_encoder->Instance==TIM4)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1d      	ldr	r2, [pc, #116]	@ (800210c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d12b      	bne.n	80020f2 <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b17      	ldr	r3, [pc, #92]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a16      	ldr	r2, [pc, #88]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b14      	ldr	r3, [pc, #80]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	4a0f      	ldr	r2, [pc, #60]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c6:	4b0d      	ldr	r3, [pc, #52]	@ (80020fc <HAL_TIM_Encoder_MspInit+0x18c>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020d2:	23c0      	movs	r3, #192	@ 0xc0
 80020d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020da:	2301      	movs	r3, #1
 80020dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020e2:	2302      	movs	r3, #2
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020ea:	4619      	mov	r1, r3
 80020ec:	4805      	ldr	r0, [pc, #20]	@ (8002104 <HAL_TIM_Encoder_MspInit+0x194>)
 80020ee:	f000 fb0f 	bl	8002710 <HAL_GPIO_Init>
}
 80020f2:	bf00      	nop
 80020f4:	3738      	adds	r7, #56	@ 0x38
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400
 8002108:	40000400 	.word	0x40000400
 800210c:	40000800 	.word	0x40000800

08002110 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b088      	sub	sp, #32
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <HAL_TIM_MspPostInit+0x68>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d11e      	bne.n	8002170 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b11      	ldr	r3, [pc, #68]	@ (800217c <HAL_TIM_MspPostInit+0x6c>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	4a10      	ldr	r2, [pc, #64]	@ (800217c <HAL_TIM_MspPostInit+0x6c>)
 800213c:	f043 0301 	orr.w	r3, r3, #1
 8002140:	6313      	str	r3, [r2, #48]	@ 0x30
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <HAL_TIM_MspPostInit+0x6c>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800214e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002152:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002160:	2301      	movs	r3, #1
 8002162:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 030c 	add.w	r3, r7, #12
 8002168:	4619      	mov	r1, r3
 800216a:	4805      	ldr	r0, [pc, #20]	@ (8002180 <HAL_TIM_MspPostInit+0x70>)
 800216c:	f000 fad0 	bl	8002710 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002170:	bf00      	nop
 8002172:	3720      	adds	r7, #32
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40010000 	.word	0x40010000
 800217c:	40023800 	.word	0x40023800
 8002180:	40020000 	.word	0x40020000

08002184 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08c      	sub	sp, #48	@ 0x30
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
 8002196:	609a      	str	r2, [r3, #8]
 8002198:	60da      	str	r2, [r3, #12]
 800219a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a32      	ldr	r2, [pc, #200]	@ (800226c <HAL_UART_MspInit+0xe8>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d12c      	bne.n	8002200 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
 80021aa:	4b31      	ldr	r3, [pc, #196]	@ (8002270 <HAL_UART_MspInit+0xec>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ae:	4a30      	ldr	r2, [pc, #192]	@ (8002270 <HAL_UART_MspInit+0xec>)
 80021b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80021b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002270 <HAL_UART_MspInit+0xec>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021be:	61bb      	str	r3, [r7, #24]
 80021c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002270 <HAL_UART_MspInit+0xec>)
 80021c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ca:	4a29      	ldr	r2, [pc, #164]	@ (8002270 <HAL_UART_MspInit+0xec>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d2:	4b27      	ldr	r3, [pc, #156]	@ (8002270 <HAL_UART_MspInit+0xec>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021de:	2303      	movs	r3, #3
 80021e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ea:	2303      	movs	r3, #3
 80021ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80021ee:	2308      	movs	r3, #8
 80021f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	481e      	ldr	r0, [pc, #120]	@ (8002274 <HAL_UART_MspInit+0xf0>)
 80021fa:	f000 fa89 	bl	8002710 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80021fe:	e030      	b.n	8002262 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1c      	ldr	r2, [pc, #112]	@ (8002278 <HAL_UART_MspInit+0xf4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d12b      	bne.n	8002262 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART2_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	4b18      	ldr	r3, [pc, #96]	@ (8002270 <HAL_UART_MspInit+0xec>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_UART_MspInit+0xec>)
 8002214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002218:	6413      	str	r3, [r2, #64]	@ 0x40
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <HAL_UART_MspInit+0xec>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	4b11      	ldr	r3, [pc, #68]	@ (8002270 <HAL_UART_MspInit+0xec>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a10      	ldr	r2, [pc, #64]	@ (8002270 <HAL_UART_MspInit+0xec>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b0e      	ldr	r3, [pc, #56]	@ (8002270 <HAL_UART_MspInit+0xec>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0301 	and.w	r3, r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
 8002240:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002242:	230c      	movs	r3, #12
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002246:	2302      	movs	r3, #2
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002252:	2307      	movs	r3, #7
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	4805      	ldr	r0, [pc, #20]	@ (8002274 <HAL_UART_MspInit+0xf0>)
 800225e:	f000 fa57 	bl	8002710 <HAL_GPIO_Init>
}
 8002262:	bf00      	nop
 8002264:	3730      	adds	r7, #48	@ 0x30
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40004c00 	.word	0x40004c00
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000
 8002278:	40004400 	.word	0x40004400

0800227c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002280:	bf00      	nop
 8002282:	e7fd      	b.n	8002280 <NMI_Handler+0x4>

08002284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002288:	bf00      	nop
 800228a:	e7fd      	b.n	8002288 <HardFault_Handler+0x4>

0800228c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <MemManage_Handler+0x4>

08002294 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <BusFault_Handler+0x4>

0800229c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <UsageFault_Handler+0x4>

080022a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d2:	f000 f917 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}

080022da <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022da:	b580      	push	{r7, lr}
 80022dc:	b086      	sub	sp, #24
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	60b9      	str	r1, [r7, #8]
 80022e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	e00a      	b.n	8002302 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ec:	f3af 8000 	nop.w
 80022f0:	4601      	mov	r1, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1c5a      	adds	r2, r3, #1
 80022f6:	60ba      	str	r2, [r7, #8]
 80022f8:	b2ca      	uxtb	r2, r1
 80022fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	dbf0      	blt.n	80022ec <_read+0x12>
  }

  return len;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800233c:	605a      	str	r2, [r3, #4]
  return 0;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_isatty>:

int _isatty(int file)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002354:	2301      	movs	r3, #1
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f002 ff66 	bl	800527c <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20020000 	.word	0x20020000
 80023dc:	00000400 	.word	0x00000400
 80023e0:	200002fc 	.word	0x200002fc
 80023e4:	20000450 	.word	0x20000450

080023e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002444 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002410:	f7ff ffea 	bl	80023e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	@ (8002458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800243a:	f002 ff25 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7fe fe97 	bl	8001170 <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002450:	080073e8 	.word	0x080073e8
  ldr r2, =_sbss
 8002454:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002458:	20000450 	.word	0x20000450

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002464:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <HAL_Init+0x40>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800246e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <HAL_Init+0x40>)
 8002476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800247a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <HAL_Init+0x40>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 f90d 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f808 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7ff fd0c 	bl	8001eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_InitTick+0x54>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <HAL_InitTick+0x58>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f917 	bl	80026f6 <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f000 f8ed 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	@ (8002500 <HAL_InitTick+0x5c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000008 	.word	0x20000008
 80024fc:	20000010 	.word	0x20000010
 8002500:	2000000c 	.word	0x2000000c

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_IncTick+0x20>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_IncTick+0x24>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_IncTick+0x24>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000010 	.word	0x20000010
 8002528:	20000300 	.word	0x20000300

0800252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTick;
 8002530:	4b03      	ldr	r3, [pc, #12]	@ (8002540 <HAL_GetTick+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000300 	.word	0x20000300

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	@ (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	@ (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	@ 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	@ 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	@ (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	@ (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	@ (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff47 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff5c 	bl	800258c <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7ff ffb0 	bl	8002664 <SysTick_Config>
 8002704:	4603      	mov	r3, r0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
	...

08002710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002710:	b480      	push	{r7}
 8002712:	b089      	sub	sp, #36	@ 0x24
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800271a:	2300      	movs	r3, #0
 800271c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
 800272a:	e165      	b.n	80029f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800272c:	2201      	movs	r2, #1
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	429a      	cmp	r2, r3
 8002746:	f040 8154 	bne.w	80029f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d005      	beq.n	8002762 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275e:	2b02      	cmp	r3, #2
 8002760:	d130      	bne.n	80027c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002798:	2201      	movs	r2, #1
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	fa02 f303 	lsl.w	r3, r2, r3
 80027a0:	43db      	mvns	r3, r3
 80027a2:	69ba      	ldr	r2, [r7, #24]
 80027a4:	4013      	ands	r3, r2
 80027a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	091b      	lsrs	r3, r3, #4
 80027ae:	f003 0201 	and.w	r2, r3, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d017      	beq.n	8002800 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	2203      	movs	r2, #3
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	43db      	mvns	r3, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4013      	ands	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d123      	bne.n	8002854 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	08da      	lsrs	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3208      	adds	r2, #8
 8002814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002818:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	69b9      	ldr	r1, [r7, #24]
 8002850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002890:	2b00      	cmp	r3, #0
 8002892:	f000 80ae 	beq.w	80029f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	4b5d      	ldr	r3, [pc, #372]	@ (8002a10 <HAL_GPIO_Init+0x300>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	4a5c      	ldr	r2, [pc, #368]	@ (8002a10 <HAL_GPIO_Init+0x300>)
 80028a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002a10 <HAL_GPIO_Init+0x300>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028b2:	4a58      	ldr	r2, [pc, #352]	@ (8002a14 <HAL_GPIO_Init+0x304>)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	089b      	lsrs	r3, r3, #2
 80028b8:	3302      	adds	r3, #2
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f003 0303 	and.w	r3, r3, #3
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	220f      	movs	r2, #15
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43db      	mvns	r3, r3
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	4013      	ands	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002a18 <HAL_GPIO_Init+0x308>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d025      	beq.n	800292a <HAL_GPIO_Init+0x21a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4e      	ldr	r2, [pc, #312]	@ (8002a1c <HAL_GPIO_Init+0x30c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01f      	beq.n	8002926 <HAL_GPIO_Init+0x216>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002a20 <HAL_GPIO_Init+0x310>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x212>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002a24 <HAL_GPIO_Init+0x314>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x20e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002a28 <HAL_GPIO_Init+0x318>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x20a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4a      	ldr	r2, [pc, #296]	@ (8002a2c <HAL_GPIO_Init+0x31c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x206>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a49      	ldr	r2, [pc, #292]	@ (8002a30 <HAL_GPIO_Init+0x320>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x202>
 800290e:	2306      	movs	r3, #6
 8002910:	e00c      	b.n	800292c <HAL_GPIO_Init+0x21c>
 8002912:	2307      	movs	r3, #7
 8002914:	e00a      	b.n	800292c <HAL_GPIO_Init+0x21c>
 8002916:	2305      	movs	r3, #5
 8002918:	e008      	b.n	800292c <HAL_GPIO_Init+0x21c>
 800291a:	2304      	movs	r3, #4
 800291c:	e006      	b.n	800292c <HAL_GPIO_Init+0x21c>
 800291e:	2303      	movs	r3, #3
 8002920:	e004      	b.n	800292c <HAL_GPIO_Init+0x21c>
 8002922:	2302      	movs	r3, #2
 8002924:	e002      	b.n	800292c <HAL_GPIO_Init+0x21c>
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_GPIO_Init+0x21c>
 800292a:	2300      	movs	r3, #0
 800292c:	69fa      	ldr	r2, [r7, #28]
 800292e:	f002 0203 	and.w	r2, r2, #3
 8002932:	0092      	lsls	r2, r2, #2
 8002934:	4093      	lsls	r3, r2
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4313      	orrs	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800293c:	4935      	ldr	r1, [pc, #212]	@ (8002a14 <HAL_GPIO_Init+0x304>)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	089b      	lsrs	r3, r3, #2
 8002942:	3302      	adds	r3, #2
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800294a:	4b3a      	ldr	r3, [pc, #232]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800296e:	4a31      	ldr	r2, [pc, #196]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002974:	4b2f      	ldr	r3, [pc, #188]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	43db      	mvns	r3, r3
 800297e:	69ba      	ldr	r2, [r7, #24]
 8002980:	4013      	ands	r3, r2
 8002982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002998:	4a26      	ldr	r2, [pc, #152]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800299e:	4b25      	ldr	r3, [pc, #148]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	43db      	mvns	r3, r3
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	4013      	ands	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ec:	4a11      	ldr	r2, [pc, #68]	@ (8002a34 <HAL_GPIO_Init+0x324>)
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3301      	adds	r3, #1
 80029f6:	61fb      	str	r3, [r7, #28]
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	2b0f      	cmp	r3, #15
 80029fc:	f67f ae96 	bls.w	800272c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3724      	adds	r7, #36	@ 0x24
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40013800 	.word	0x40013800
 8002a18:	40020000 	.word	0x40020000
 8002a1c:	40020400 	.word	0x40020400
 8002a20:	40020800 	.word	0x40020800
 8002a24:	40020c00 	.word	0x40020c00
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	40021400 	.word	0x40021400
 8002a30:	40021800 	.word	0x40021800
 8002a34:	40013c00 	.word	0x40013c00

08002a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	460b      	mov	r3, r1
 8002a42:	807b      	strh	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a48:	787b      	ldrb	r3, [r7, #1]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a4e:	887a      	ldrh	r2, [r7, #2]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a54:	e003      	b.n	8002a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a56:	887b      	ldrh	r3, [r7, #2]
 8002a58:	041a      	lsls	r2, r3, #16
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	619a      	str	r2, [r3, #24]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
	...

08002a6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0cc      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a80:	4b68      	ldr	r3, [pc, #416]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d90c      	bls.n	8002aa8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a8e:	4b65      	ldr	r3, [pc, #404]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a96:	4b63      	ldr	r3, [pc, #396]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	683a      	ldr	r2, [r7, #0]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0b8      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac0:	4b59      	ldr	r3, [pc, #356]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a58      	ldr	r2, [pc, #352]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002aca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d005      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ad8:	4b53      	ldr	r3, [pc, #332]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	4a52      	ldr	r2, [pc, #328]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002ae2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae4:	4b50      	ldr	r3, [pc, #320]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	494d      	ldr	r1, [pc, #308]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d044      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b0a:	4b47      	ldr	r3, [pc, #284]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d119      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e07f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d003      	beq.n	8002b2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d107      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b2a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e06f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e067      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b4a:	4b37      	ldr	r3, [pc, #220]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f023 0203 	bic.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	4934      	ldr	r1, [pc, #208]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b5c:	f7ff fce6 	bl	800252c <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b62:	e00a      	b.n	8002b7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b64:	f7ff fce2 	bl	800252c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e04f      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 020c 	and.w	r2, r3, #12
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d1eb      	bne.n	8002b64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8c:	4b25      	ldr	r3, [pc, #148]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d20c      	bcs.n	8002bb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9a:	4b22      	ldr	r3, [pc, #136]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba2:	4b20      	ldr	r3, [pc, #128]	@ (8002c24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e032      	b.n	8002c1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0304 	and.w	r3, r3, #4
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bc0:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	4916      	ldr	r1, [pc, #88]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	490e      	ldr	r1, [pc, #56]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bf2:	f000 f855 	bl	8002ca0 <HAL_RCC_GetSysClockFreq>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c28 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	490a      	ldr	r1, [pc, #40]	@ (8002c2c <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	5ccb      	ldrb	r3, [r1, r3]
 8002c06:	fa22 f303 	lsr.w	r3, r2, r3
 8002c0a:	4a09      	ldr	r2, [pc, #36]	@ (8002c30 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002c0e:	4b09      	ldr	r3, [pc, #36]	@ (8002c34 <HAL_RCC_ClockConfig+0x1c8>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f7ff fc46 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023c00 	.word	0x40023c00
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	080071b0 	.word	0x080071b0
 8002c30:	20000008 	.word	0x20000008
 8002c34:	2000000c 	.word	0x2000000c

08002c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c3c:	4b03      	ldr	r3, [pc, #12]	@ (8002c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	20000008 	.word	0x20000008

08002c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c54:	f7ff fff0 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	4b05      	ldr	r3, [pc, #20]	@ (8002c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	0a9b      	lsrs	r3, r3, #10
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	4903      	ldr	r1, [pc, #12]	@ (8002c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c66:	5ccb      	ldrb	r3, [r1, r3]
 8002c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40023800 	.word	0x40023800
 8002c74:	080071c0 	.word	0x080071c0

08002c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c7c:	f7ff ffdc 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002c80:	4602      	mov	r2, r0
 8002c82:	4b05      	ldr	r3, [pc, #20]	@ (8002c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	0b5b      	lsrs	r3, r3, #13
 8002c88:	f003 0307 	and.w	r3, r3, #7
 8002c8c:	4903      	ldr	r1, [pc, #12]	@ (8002c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c8e:	5ccb      	ldrb	r3, [r1, r3]
 8002c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	080071c0 	.word	0x080071c0

08002ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ca4:	b0ae      	sub	sp, #184	@ 0xb8
 8002ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc6:	4bcb      	ldr	r3, [pc, #812]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	f200 8206 	bhi.w	80030e0 <HAL_RCC_GetSysClockFreq+0x440>
 8002cd4:	a201      	add	r2, pc, #4	@ (adr r2, 8002cdc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	080030e1 	.word	0x080030e1
 8002ce4:	080030e1 	.word	0x080030e1
 8002ce8:	080030e1 	.word	0x080030e1
 8002cec:	08002d19 	.word	0x08002d19
 8002cf0:	080030e1 	.word	0x080030e1
 8002cf4:	080030e1 	.word	0x080030e1
 8002cf8:	080030e1 	.word	0x080030e1
 8002cfc:	08002d21 	.word	0x08002d21
 8002d00:	080030e1 	.word	0x080030e1
 8002d04:	080030e1 	.word	0x080030e1
 8002d08:	080030e1 	.word	0x080030e1
 8002d0c:	08002f11 	.word	0x08002f11
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4bb9      	ldr	r3, [pc, #740]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d16:	e1e7      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d18:	4bb8      	ldr	r3, [pc, #736]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002d1e:	e1e3      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d20:	4bb4      	ldr	r3, [pc, #720]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d2c:	4bb1      	ldr	r3, [pc, #708]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d071      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d38:	4bae      	ldr	r3, [pc, #696]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002d44:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002d48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002d4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d50:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002d5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002d5e:	4622      	mov	r2, r4
 8002d60:	462b      	mov	r3, r5
 8002d62:	f04f 0000 	mov.w	r0, #0
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	0159      	lsls	r1, r3, #5
 8002d6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d70:	0150      	lsls	r0, r2, #5
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4621      	mov	r1, r4
 8002d78:	1a51      	subs	r1, r2, r1
 8002d7a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d84:	f04f 0200 	mov.w	r2, #0
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002d90:	4649      	mov	r1, r9
 8002d92:	018b      	lsls	r3, r1, #6
 8002d94:	4641      	mov	r1, r8
 8002d96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d9a:	4641      	mov	r1, r8
 8002d9c:	018a      	lsls	r2, r1, #6
 8002d9e:	4641      	mov	r1, r8
 8002da0:	1a51      	subs	r1, r2, r1
 8002da2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002da4:	4649      	mov	r1, r9
 8002da6:	eb63 0301 	sbc.w	r3, r3, r1
 8002daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dac:	f04f 0200 	mov.w	r2, #0
 8002db0:	f04f 0300 	mov.w	r3, #0
 8002db4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002db8:	4649      	mov	r1, r9
 8002dba:	00cb      	lsls	r3, r1, #3
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002dc2:	4641      	mov	r1, r8
 8002dc4:	00ca      	lsls	r2, r1, #3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	4619      	mov	r1, r3
 8002dca:	4603      	mov	r3, r0
 8002dcc:	4622      	mov	r2, r4
 8002dce:	189b      	adds	r3, r3, r2
 8002dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	460a      	mov	r2, r1
 8002dd6:	eb42 0303 	adc.w	r3, r2, r3
 8002dda:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002de8:	4629      	mov	r1, r5
 8002dea:	024b      	lsls	r3, r1, #9
 8002dec:	4621      	mov	r1, r4
 8002dee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002df2:	4621      	mov	r1, r4
 8002df4:	024a      	lsls	r2, r1, #9
 8002df6:	4610      	mov	r0, r2
 8002df8:	4619      	mov	r1, r3
 8002dfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002e04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002e08:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002e0c:	f7fd fee4 	bl	8000bd8 <__aeabi_uldivmod>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4613      	mov	r3, r2
 8002e16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e1a:	e067      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1c:	4b75      	ldr	r3, [pc, #468]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	2200      	movs	r2, #0
 8002e24:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002e28:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002e2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002e36:	2300      	movs	r3, #0
 8002e38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002e3a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002e3e:	4622      	mov	r2, r4
 8002e40:	462b      	mov	r3, r5
 8002e42:	f04f 0000 	mov.w	r0, #0
 8002e46:	f04f 0100 	mov.w	r1, #0
 8002e4a:	0159      	lsls	r1, r3, #5
 8002e4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e50:	0150      	lsls	r0, r2, #5
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4621      	mov	r1, r4
 8002e58:	1a51      	subs	r1, r2, r1
 8002e5a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002e5c:	4629      	mov	r1, r5
 8002e5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002e70:	4649      	mov	r1, r9
 8002e72:	018b      	lsls	r3, r1, #6
 8002e74:	4641      	mov	r1, r8
 8002e76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e7a:	4641      	mov	r1, r8
 8002e7c:	018a      	lsls	r2, r1, #6
 8002e7e:	4641      	mov	r1, r8
 8002e80:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e84:	4649      	mov	r1, r9
 8002e86:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e96:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e9a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e9e:	4692      	mov	sl, r2
 8002ea0:	469b      	mov	fp, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	eb1a 0303 	adds.w	r3, sl, r3
 8002ea8:	623b      	str	r3, [r7, #32]
 8002eaa:	462b      	mov	r3, r5
 8002eac:	eb4b 0303 	adc.w	r3, fp, r3
 8002eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	f04f 0300 	mov.w	r3, #0
 8002eba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002ebe:	4629      	mov	r1, r5
 8002ec0:	028b      	lsls	r3, r1, #10
 8002ec2:	4621      	mov	r1, r4
 8002ec4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ec8:	4621      	mov	r1, r4
 8002eca:	028a      	lsls	r2, r1, #10
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002ed8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002eda:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002ede:	f7fd fe7b 	bl	8000bd8 <__aeabi_uldivmod>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002eec:	4b41      	ldr	r3, [pc, #260]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002f0e:	e0eb      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f10:	4b38      	ldr	r3, [pc, #224]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1c:	4b35      	ldr	r3, [pc, #212]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d06b      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f28:	4b32      	ldr	r3, [pc, #200]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	099b      	lsrs	r3, r3, #6
 8002f2e:	2200      	movs	r2, #0
 8002f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002f32:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002f34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f40:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f44:	4622      	mov	r2, r4
 8002f46:	462b      	mov	r3, r5
 8002f48:	f04f 0000 	mov.w	r0, #0
 8002f4c:	f04f 0100 	mov.w	r1, #0
 8002f50:	0159      	lsls	r1, r3, #5
 8002f52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f56:	0150      	lsls	r0, r2, #5
 8002f58:	4602      	mov	r2, r0
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	4621      	mov	r1, r4
 8002f5e:	1a51      	subs	r1, r2, r1
 8002f60:	61b9      	str	r1, [r7, #24]
 8002f62:	4629      	mov	r1, r5
 8002f64:	eb63 0301 	sbc.w	r3, r3, r1
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002f76:	4659      	mov	r1, fp
 8002f78:	018b      	lsls	r3, r1, #6
 8002f7a:	4651      	mov	r1, sl
 8002f7c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f80:	4651      	mov	r1, sl
 8002f82:	018a      	lsls	r2, r1, #6
 8002f84:	4651      	mov	r1, sl
 8002f86:	ebb2 0801 	subs.w	r8, r2, r1
 8002f8a:	4659      	mov	r1, fp
 8002f8c:	eb63 0901 	sbc.w	r9, r3, r1
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	f04f 0300 	mov.w	r3, #0
 8002f98:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f9c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fa0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fa4:	4690      	mov	r8, r2
 8002fa6:	4699      	mov	r9, r3
 8002fa8:	4623      	mov	r3, r4
 8002faa:	eb18 0303 	adds.w	r3, r8, r3
 8002fae:	613b      	str	r3, [r7, #16]
 8002fb0:	462b      	mov	r3, r5
 8002fb2:	eb49 0303 	adc.w	r3, r9, r3
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002fc4:	4629      	mov	r1, r5
 8002fc6:	024b      	lsls	r3, r1, #9
 8002fc8:	4621      	mov	r1, r4
 8002fca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fce:	4621      	mov	r1, r4
 8002fd0:	024a      	lsls	r2, r1, #9
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002fda:	2200      	movs	r2, #0
 8002fdc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fde:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fe0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fe4:	f7fd fdf8 	bl	8000bd8 <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ff2:	e065      	b.n	80030c0 <HAL_RCC_GetSysClockFreq+0x420>
 8002ff4:	40023800 	.word	0x40023800
 8002ff8:	00f42400 	.word	0x00f42400
 8002ffc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003000:	4b3d      	ldr	r3, [pc, #244]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	099b      	lsrs	r3, r3, #6
 8003006:	2200      	movs	r2, #0
 8003008:	4618      	mov	r0, r3
 800300a:	4611      	mov	r1, r2
 800300c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003010:	653b      	str	r3, [r7, #80]	@ 0x50
 8003012:	2300      	movs	r3, #0
 8003014:	657b      	str	r3, [r7, #84]	@ 0x54
 8003016:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800301a:	4642      	mov	r2, r8
 800301c:	464b      	mov	r3, r9
 800301e:	f04f 0000 	mov.w	r0, #0
 8003022:	f04f 0100 	mov.w	r1, #0
 8003026:	0159      	lsls	r1, r3, #5
 8003028:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800302c:	0150      	lsls	r0, r2, #5
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4641      	mov	r1, r8
 8003034:	1a51      	subs	r1, r2, r1
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	4649      	mov	r1, r9
 800303a:	eb63 0301 	sbc.w	r3, r3, r1
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800304c:	4659      	mov	r1, fp
 800304e:	018b      	lsls	r3, r1, #6
 8003050:	4651      	mov	r1, sl
 8003052:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003056:	4651      	mov	r1, sl
 8003058:	018a      	lsls	r2, r1, #6
 800305a:	4651      	mov	r1, sl
 800305c:	1a54      	subs	r4, r2, r1
 800305e:	4659      	mov	r1, fp
 8003060:	eb63 0501 	sbc.w	r5, r3, r1
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	00eb      	lsls	r3, r5, #3
 800306e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003072:	00e2      	lsls	r2, r4, #3
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	4643      	mov	r3, r8
 800307a:	18e3      	adds	r3, r4, r3
 800307c:	603b      	str	r3, [r7, #0]
 800307e:	464b      	mov	r3, r9
 8003080:	eb45 0303 	adc.w	r3, r5, r3
 8003084:	607b      	str	r3, [r7, #4]
 8003086:	f04f 0200 	mov.w	r2, #0
 800308a:	f04f 0300 	mov.w	r3, #0
 800308e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003092:	4629      	mov	r1, r5
 8003094:	028b      	lsls	r3, r1, #10
 8003096:	4621      	mov	r1, r4
 8003098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800309c:	4621      	mov	r1, r4
 800309e:	028a      	lsls	r2, r1, #10
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80030a8:	2200      	movs	r2, #0
 80030aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80030ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80030b2:	f7fd fd91 	bl	8000bd8 <__aeabi_uldivmod>
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4613      	mov	r3, r2
 80030bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80030c0:	4b0d      	ldr	r3, [pc, #52]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	0f1b      	lsrs	r3, r3, #28
 80030c6:	f003 0307 	and.w	r3, r3, #7
 80030ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80030ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80030d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030de:	e003      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030e0:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80030e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80030e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	37b8      	adds	r7, #184	@ 0xb8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030f6:	bf00      	nop
 80030f8:	40023800 	.word	0x40023800
 80030fc:	00f42400 	.word	0x00f42400

08003100 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d101      	bne.n	8003112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e28d      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8083 	beq.w	8003226 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003120:	4b94      	ldr	r3, [pc, #592]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b04      	cmp	r3, #4
 800312a:	d019      	beq.n	8003160 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800312c:	4b91      	ldr	r3, [pc, #580]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f003 030c 	and.w	r3, r3, #12
        || \
 8003134:	2b08      	cmp	r3, #8
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003138:	4b8e      	ldr	r3, [pc, #568]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003140:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003144:	d00c      	beq.n	8003160 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003146:	4b8b      	ldr	r3, [pc, #556]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d112      	bne.n	8003178 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003152:	4b88      	ldr	r3, [pc, #544]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800315a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800315e:	d10b      	bne.n	8003178 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	4b84      	ldr	r3, [pc, #528]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d05b      	beq.n	8003224 <HAL_RCC_OscConfig+0x124>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d157      	bne.n	8003224 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e25a      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003180:	d106      	bne.n	8003190 <HAL_RCC_OscConfig+0x90>
 8003182:	4b7c      	ldr	r3, [pc, #496]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a7b      	ldr	r2, [pc, #492]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003188:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e01d      	b.n	80031cc <HAL_RCC_OscConfig+0xcc>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003198:	d10c      	bne.n	80031b4 <HAL_RCC_OscConfig+0xb4>
 800319a:	4b76      	ldr	r3, [pc, #472]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a75      	ldr	r2, [pc, #468]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80031a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031a4:	6013      	str	r3, [r2, #0]
 80031a6:	4b73      	ldr	r3, [pc, #460]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a72      	ldr	r2, [pc, #456]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e00b      	b.n	80031cc <HAL_RCC_OscConfig+0xcc>
 80031b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a6e      	ldr	r2, [pc, #440]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b6c      	ldr	r3, [pc, #432]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80031c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d013      	beq.n	80031fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031d4:	f7ff f9aa 	bl	800252c <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031da:	e008      	b.n	80031ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031dc:	f7ff f9a6 	bl	800252c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	2b64      	cmp	r3, #100	@ 0x64
 80031e8:	d901      	bls.n	80031ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80031ea:	2303      	movs	r3, #3
 80031ec:	e21f      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	4b61      	ldr	r3, [pc, #388]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d0f0      	beq.n	80031dc <HAL_RCC_OscConfig+0xdc>
 80031fa:	e014      	b.n	8003226 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7ff f996 	bl	800252c <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003204:	f7ff f992 	bl	800252c <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b64      	cmp	r3, #100	@ 0x64
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e20b      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	4b57      	ldr	r3, [pc, #348]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x104>
 8003222:	e000      	b.n	8003226 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b00      	cmp	r3, #0
 8003230:	d06f      	beq.n	8003312 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003232:	4b50      	ldr	r3, [pc, #320]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b00      	cmp	r3, #0
 800323c:	d017      	beq.n	800326e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800323e:	4b4d      	ldr	r3, [pc, #308]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 030c 	and.w	r3, r3, #12
        || \
 8003246:	2b08      	cmp	r3, #8
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800324a:	4b4a      	ldr	r3, [pc, #296]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003256:	4b47      	ldr	r3, [pc, #284]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d11c      	bne.n	800329c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003262:	4b44      	ldr	r3, [pc, #272]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326e:	4b41      	ldr	r3, [pc, #260]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <HAL_RCC_OscConfig+0x186>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d001      	beq.n	8003286 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e1d3      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003286:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4937      	ldr	r1, [pc, #220]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003296:	4313      	orrs	r3, r2
 8003298:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800329a:	e03a      	b.n	8003312 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d020      	beq.n	80032e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a4:	4b34      	ldr	r3, [pc, #208]	@ (8003378 <HAL_RCC_OscConfig+0x278>)
 80032a6:	2201      	movs	r2, #1
 80032a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032aa:	f7ff f93f 	bl	800252c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b2:	f7ff f93b 	bl	800252c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e1b4      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d0:	4b28      	ldr	r3, [pc, #160]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	4925      	ldr	r1, [pc, #148]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	600b      	str	r3, [r1, #0]
 80032e4:	e015      	b.n	8003312 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e6:	4b24      	ldr	r3, [pc, #144]	@ (8003378 <HAL_RCC_OscConfig+0x278>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7ff f91e 	bl	800252c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f4:	f7ff f91a 	bl	800252c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e193      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003306:	4b1b      	ldr	r3, [pc, #108]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f0      	bne.n	80032f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d036      	beq.n	800338c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d016      	beq.n	8003354 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003326:	4b15      	ldr	r3, [pc, #84]	@ (800337c <HAL_RCC_OscConfig+0x27c>)
 8003328:	2201      	movs	r2, #1
 800332a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7ff f8fe 	bl	800252c <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003334:	f7ff f8fa 	bl	800252c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e173      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4b0b      	ldr	r3, [pc, #44]	@ (8003374 <HAL_RCC_OscConfig+0x274>)
 8003348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800334a:	f003 0302 	and.w	r3, r3, #2
 800334e:	2b00      	cmp	r3, #0
 8003350:	d0f0      	beq.n	8003334 <HAL_RCC_OscConfig+0x234>
 8003352:	e01b      	b.n	800338c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003354:	4b09      	ldr	r3, [pc, #36]	@ (800337c <HAL_RCC_OscConfig+0x27c>)
 8003356:	2200      	movs	r2, #0
 8003358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800335a:	f7ff f8e7 	bl	800252c <HAL_GetTick>
 800335e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	e00e      	b.n	8003380 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003362:	f7ff f8e3 	bl	800252c <HAL_GetTick>
 8003366:	4602      	mov	r2, r0
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d907      	bls.n	8003380 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e15c      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
 8003374:	40023800 	.word	0x40023800
 8003378:	42470000 	.word	0x42470000
 800337c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003380:	4b8a      	ldr	r3, [pc, #552]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1ea      	bne.n	8003362 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8097 	beq.w	80034c8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339a:	2300      	movs	r3, #0
 800339c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800339e:	4b83      	ldr	r3, [pc, #524]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10f      	bne.n	80033ca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60bb      	str	r3, [r7, #8]
 80033ae:	4b7f      	ldr	r3, [pc, #508]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 80033b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b2:	4a7e      	ldr	r2, [pc, #504]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ba:	4b7c      	ldr	r3, [pc, #496]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b79      	ldr	r3, [pc, #484]	@ (80035b0 <HAL_RCC_OscConfig+0x4b0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b76      	ldr	r3, [pc, #472]	@ (80035b0 <HAL_RCC_OscConfig+0x4b0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a75      	ldr	r2, [pc, #468]	@ (80035b0 <HAL_RCC_OscConfig+0x4b0>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7ff f8a3 	bl	800252c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7ff f89f 	bl	800252c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e118      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b6c      	ldr	r3, [pc, #432]	@ (80035b0 <HAL_RCC_OscConfig+0x4b0>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x31e>
 8003410:	4b66      	ldr	r3, [pc, #408]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003414:	4a65      	ldr	r2, [pc, #404]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6713      	str	r3, [r2, #112]	@ 0x70
 800341c:	e01c      	b.n	8003458 <HAL_RCC_OscConfig+0x358>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x340>
 8003426:	4b61      	ldr	r3, [pc, #388]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342a:	4a60      	ldr	r2, [pc, #384]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 800342c:	f043 0304 	orr.w	r3, r3, #4
 8003430:	6713      	str	r3, [r2, #112]	@ 0x70
 8003432:	4b5e      	ldr	r3, [pc, #376]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003434:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003436:	4a5d      	ldr	r2, [pc, #372]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6713      	str	r3, [r2, #112]	@ 0x70
 800343e:	e00b      	b.n	8003458 <HAL_RCC_OscConfig+0x358>
 8003440:	4b5a      	ldr	r3, [pc, #360]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003444:	4a59      	ldr	r2, [pc, #356]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003446:	f023 0301 	bic.w	r3, r3, #1
 800344a:	6713      	str	r3, [r2, #112]	@ 0x70
 800344c:	4b57      	ldr	r3, [pc, #348]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 800344e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003450:	4a56      	ldr	r2, [pc, #344]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003452:	f023 0304 	bic.w	r3, r3, #4
 8003456:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d015      	beq.n	800348c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003460:	f7ff f864 	bl	800252c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003466:	e00a      	b.n	800347e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003468:	f7ff f860 	bl	800252c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003476:	4293      	cmp	r3, r2
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e0d7      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800347e:	4b4b      	ldr	r3, [pc, #300]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ee      	beq.n	8003468 <HAL_RCC_OscConfig+0x368>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7ff f84e 	bl	800252c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003492:	e00a      	b.n	80034aa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003494:	f7ff f84a 	bl	800252c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0c1      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034aa:	4b40      	ldr	r3, [pc, #256]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1ee      	bne.n	8003494 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034b6:	7dfb      	ldrb	r3, [r7, #23]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034bc:	4b3b      	ldr	r3, [pc, #236]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	4a3a      	ldr	r2, [pc, #232]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 80034c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80ad 	beq.w	800362c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034d2:	4b36      	ldr	r3, [pc, #216]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	2b08      	cmp	r3, #8
 80034dc:	d060      	beq.n	80035a0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d145      	bne.n	8003572 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b33      	ldr	r3, [pc, #204]	@ (80035b4 <HAL_RCC_OscConfig+0x4b4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7ff f81e 	bl	800252c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7ff f81a 	bl	800252c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e093      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b29      	ldr	r3, [pc, #164]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800353c:	071b      	lsls	r3, r3, #28
 800353e:	491b      	ldr	r1, [pc, #108]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003540:	4313      	orrs	r3, r2
 8003542:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <HAL_RCC_OscConfig+0x4b4>)
 8003546:	2201      	movs	r2, #1
 8003548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354a:	f7fe ffef 	bl	800252c <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003552:	f7fe ffeb 	bl	800252c <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e064      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003564:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d0f0      	beq.n	8003552 <HAL_RCC_OscConfig+0x452>
 8003570:	e05c      	b.n	800362c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003572:	4b10      	ldr	r3, [pc, #64]	@ (80035b4 <HAL_RCC_OscConfig+0x4b4>)
 8003574:	2200      	movs	r2, #0
 8003576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe ffd8 	bl	800252c <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003580:	f7fe ffd4 	bl	800252c <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e04d      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	4b06      	ldr	r3, [pc, #24]	@ (80035ac <HAL_RCC_OscConfig+0x4ac>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x480>
 800359e:	e045      	b.n	800362c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d107      	bne.n	80035b8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e040      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
 80035ac:	40023800 	.word	0x40023800
 80035b0:	40007000 	.word	0x40007000
 80035b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b8:	4b1f      	ldr	r3, [pc, #124]	@ (8003638 <HAL_RCC_OscConfig+0x538>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d030      	beq.n	8003628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d129      	bne.n	8003628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d122      	bne.n	8003628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80035e8:	4013      	ands	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80035ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d119      	bne.n	8003628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003604:	429a      	cmp	r2, r3
 8003606:	d10f      	bne.n	8003628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003614:	429a      	cmp	r2, r3
 8003616:	d107      	bne.n	8003628 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d001      	beq.n	800362c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e000      	b.n	800362e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800

0800363c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d101      	bne.n	800364e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e041      	b.n	80036d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d106      	bne.n	8003668 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fe fc4c 	bl	8001f00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2202      	movs	r2, #2
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f000 fc0c 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e041      	b.n	8003770 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f839 	bl	8003778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f000 fbbd 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <HAL_TIM_PWM_Start+0x24>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	e022      	b.n	80037f6 <HAL_TIM_PWM_Start+0x6a>
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	d109      	bne.n	80037ca <HAL_TIM_PWM_Start+0x3e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	bf14      	ite	ne
 80037c2:	2301      	movne	r3, #1
 80037c4:	2300      	moveq	r3, #0
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	e015      	b.n	80037f6 <HAL_TIM_PWM_Start+0x6a>
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d109      	bne.n	80037e4 <HAL_TIM_PWM_Start+0x58>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e008      	b.n	80037f6 <HAL_TIM_PWM_Start+0x6a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e07c      	b.n	80038f8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d104      	bne.n	800380e <HAL_TIM_PWM_Start+0x82>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800380c:	e013      	b.n	8003836 <HAL_TIM_PWM_Start+0xaa>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b04      	cmp	r3, #4
 8003812:	d104      	bne.n	800381e <HAL_TIM_PWM_Start+0x92>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800381c:	e00b      	b.n	8003836 <HAL_TIM_PWM_Start+0xaa>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	2b08      	cmp	r3, #8
 8003822:	d104      	bne.n	800382e <HAL_TIM_PWM_Start+0xa2>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2202      	movs	r2, #2
 8003828:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800382c:	e003      	b.n	8003836 <HAL_TIM_PWM_Start+0xaa>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2201      	movs	r2, #1
 800383c:	6839      	ldr	r1, [r7, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f000 fe20 	bl	8004484 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a2d      	ldr	r2, [pc, #180]	@ (8003900 <HAL_TIM_PWM_Start+0x174>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d004      	beq.n	8003858 <HAL_TIM_PWM_Start+0xcc>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2c      	ldr	r2, [pc, #176]	@ (8003904 <HAL_TIM_PWM_Start+0x178>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d101      	bne.n	800385c <HAL_TIM_PWM_Start+0xd0>
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_TIM_PWM_Start+0xd2>
 800385c:	2300      	movs	r3, #0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d007      	beq.n	8003872 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a22      	ldr	r2, [pc, #136]	@ (8003900 <HAL_TIM_PWM_Start+0x174>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d022      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x136>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003884:	d01d      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x136>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1f      	ldr	r2, [pc, #124]	@ (8003908 <HAL_TIM_PWM_Start+0x17c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d018      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x136>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1d      	ldr	r2, [pc, #116]	@ (800390c <HAL_TIM_PWM_Start+0x180>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d013      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x136>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a1c      	ldr	r2, [pc, #112]	@ (8003910 <HAL_TIM_PWM_Start+0x184>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00e      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x136>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a16      	ldr	r2, [pc, #88]	@ (8003904 <HAL_TIM_PWM_Start+0x178>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x136>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a18      	ldr	r2, [pc, #96]	@ (8003914 <HAL_TIM_PWM_Start+0x188>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d004      	beq.n	80038c2 <HAL_TIM_PWM_Start+0x136>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a16      	ldr	r2, [pc, #88]	@ (8003918 <HAL_TIM_PWM_Start+0x18c>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d111      	bne.n	80038e6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f003 0307 	and.w	r3, r3, #7
 80038cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b06      	cmp	r3, #6
 80038d2:	d010      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0201 	orr.w	r2, r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038e4:	e007      	b.n	80038f6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f6:	2300      	movs	r3, #0
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40010000 	.word	0x40010000
 8003904:	40010400 	.word	0x40010400
 8003908:	40000400 	.word	0x40000400
 800390c:	40000800 	.word	0x40000800
 8003910:	40000c00 	.word	0x40000c00
 8003914:	40014000 	.word	0x40014000
 8003918:	40001800 	.word	0x40001800

0800391c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b086      	sub	sp, #24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e097      	b.n	8003a60 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	d106      	bne.n	800394a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f7fe fb13 	bl	8001f70 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2202      	movs	r2, #2
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003960:	f023 0307 	bic.w	r3, r3, #7
 8003964:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f000 fa91 	bl	8003e98 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	699b      	ldr	r3, [r3, #24]
 8003984:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800399e:	f023 0303 	bic.w	r3, r3, #3
 80039a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	021b      	lsls	r3, r3, #8
 80039ae:	4313      	orrs	r3, r2
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80039bc:	f023 030c 	bic.w	r3, r3, #12
 80039c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80039c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	021b      	lsls	r3, r3, #8
 80039d8:	4313      	orrs	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	011a      	lsls	r2, r3, #4
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	031b      	lsls	r3, r3, #12
 80039ec:	4313      	orrs	r3, r2
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80039fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003a02:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3718      	adds	r7, #24
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003a78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003a80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003a90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d110      	bne.n	8003aba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d102      	bne.n	8003aa4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003a9e:	7b7b      	ldrb	r3, [r7, #13]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d001      	beq.n	8003aa8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e069      	b.n	8003b7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2202      	movs	r2, #2
 8003ab4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ab8:	e031      	b.n	8003b1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d110      	bne.n	8003ae2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ac0:	7bbb      	ldrb	r3, [r7, #14]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d102      	bne.n	8003acc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ac6:	7b3b      	ldrb	r3, [r7, #12]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e055      	b.n	8003b7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ae0:	e01d      	b.n	8003b1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d108      	bne.n	8003afa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ae8:	7bbb      	ldrb	r3, [r7, #14]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d105      	bne.n	8003afa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003aee:	7b7b      	ldrb	r3, [r7, #13]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d102      	bne.n	8003afa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003af4:	7b3b      	ldrb	r3, [r7, #12]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d001      	beq.n	8003afe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e03e      	b.n	8003b7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2202      	movs	r2, #2
 8003b0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_TIM_Encoder_Start+0xc4>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d008      	beq.n	8003b3c <HAL_TIM_Encoder_Start+0xd4>
 8003b2a:	e00f      	b.n	8003b4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2201      	movs	r2, #1
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fca5 	bl	8004484 <TIM_CCxChannelCmd>
      break;
 8003b3a:	e016      	b.n	8003b6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2201      	movs	r2, #1
 8003b42:	2104      	movs	r1, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f000 fc9d 	bl	8004484 <TIM_CCxChannelCmd>
      break;
 8003b4a:	e00e      	b.n	8003b6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2201      	movs	r2, #1
 8003b52:	2100      	movs	r1, #0
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 fc95 	bl	8004484 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	2104      	movs	r1, #4
 8003b62:	4618      	mov	r0, r3
 8003b64:	f000 fc8e 	bl	8004484 <TIM_CCxChannelCmd>
      break;
 8003b68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b90:	2300      	movs	r3, #0
 8003b92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d101      	bne.n	8003ba2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e0ae      	b.n	8003d00 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b0c      	cmp	r3, #12
 8003bae:	f200 809f 	bhi.w	8003cf0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bed 	.word	0x08003bed
 8003bbc:	08003cf1 	.word	0x08003cf1
 8003bc0:	08003cf1 	.word	0x08003cf1
 8003bc4:	08003cf1 	.word	0x08003cf1
 8003bc8:	08003c2d 	.word	0x08003c2d
 8003bcc:	08003cf1 	.word	0x08003cf1
 8003bd0:	08003cf1 	.word	0x08003cf1
 8003bd4:	08003cf1 	.word	0x08003cf1
 8003bd8:	08003c6f 	.word	0x08003c6f
 8003bdc:	08003cf1 	.word	0x08003cf1
 8003be0:	08003cf1 	.word	0x08003cf1
 8003be4:	08003cf1 	.word	0x08003cf1
 8003be8:	08003caf 	.word	0x08003caf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68b9      	ldr	r1, [r7, #8]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f9fc 	bl	8003ff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699a      	ldr	r2, [r3, #24]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0208 	orr.w	r2, r2, #8
 8003c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699a      	ldr	r2, [r3, #24]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0204 	bic.w	r2, r2, #4
 8003c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6999      	ldr	r1, [r3, #24]
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	619a      	str	r2, [r3, #24]
      break;
 8003c2a:	e064      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68b9      	ldr	r1, [r7, #8]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 fa4c 	bl	80040d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	699a      	ldr	r2, [r3, #24]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	6999      	ldr	r1, [r3, #24]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	021a      	lsls	r2, r3, #8
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	619a      	str	r2, [r3, #24]
      break;
 8003c6c:	e043      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68b9      	ldr	r1, [r7, #8]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 faa1 	bl	80041bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69da      	ldr	r2, [r3, #28]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f042 0208 	orr.w	r2, r2, #8
 8003c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	69da      	ldr	r2, [r3, #28]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0204 	bic.w	r2, r2, #4
 8003c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69d9      	ldr	r1, [r3, #28]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	61da      	str	r2, [r3, #28]
      break;
 8003cac:	e023      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 faf5 	bl	80042a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003cd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69d9      	ldr	r1, [r3, #28]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	021a      	lsls	r2, r3, #8
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	430a      	orrs	r2, r1
 8003cec:	61da      	str	r2, [r3, #28]
      break;
 8003cee:	e002      	b.n	8003cf6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8003cf4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIM_ConfigClockSource+0x1c>
 8003d20:	2302      	movs	r3, #2
 8003d22:	e0b4      	b.n	8003e8e <HAL_TIM_ConfigClockSource+0x186>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2202      	movs	r2, #2
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68ba      	ldr	r2, [r7, #8]
 8003d52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d5c:	d03e      	beq.n	8003ddc <HAL_TIM_ConfigClockSource+0xd4>
 8003d5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d62:	f200 8087 	bhi.w	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d6a:	f000 8086 	beq.w	8003e7a <HAL_TIM_ConfigClockSource+0x172>
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d72:	d87f      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b70      	cmp	r3, #112	@ 0x70
 8003d76:	d01a      	beq.n	8003dae <HAL_TIM_ConfigClockSource+0xa6>
 8003d78:	2b70      	cmp	r3, #112	@ 0x70
 8003d7a:	d87b      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b60      	cmp	r3, #96	@ 0x60
 8003d7e:	d050      	beq.n	8003e22 <HAL_TIM_ConfigClockSource+0x11a>
 8003d80:	2b60      	cmp	r3, #96	@ 0x60
 8003d82:	d877      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b50      	cmp	r3, #80	@ 0x50
 8003d86:	d03c      	beq.n	8003e02 <HAL_TIM_ConfigClockSource+0xfa>
 8003d88:	2b50      	cmp	r3, #80	@ 0x50
 8003d8a:	d873      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	d058      	beq.n	8003e42 <HAL_TIM_ConfigClockSource+0x13a>
 8003d90:	2b40      	cmp	r3, #64	@ 0x40
 8003d92:	d86f      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b30      	cmp	r3, #48	@ 0x30
 8003d96:	d064      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	2b30      	cmp	r3, #48	@ 0x30
 8003d9a:	d86b      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	d060      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003da0:	2b20      	cmp	r3, #32
 8003da2:	d867      	bhi.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d05c      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d05a      	beq.n	8003e62 <HAL_TIM_ConfigClockSource+0x15a>
 8003dac:	e062      	b.n	8003e74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dbe:	f000 fb41 	bl	8004444 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003dd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	609a      	str	r2, [r3, #8]
      break;
 8003dda:	e04f      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dec:	f000 fb2a 	bl	8004444 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	689a      	ldr	r2, [r3, #8]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003dfe:	609a      	str	r2, [r3, #8]
      break;
 8003e00:	e03c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0e:	461a      	mov	r2, r3
 8003e10:	f000 fa9e 	bl	8004350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2150      	movs	r1, #80	@ 0x50
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f000 faf7 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 8003e20:	e02c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f000 fabd 	bl	80043ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2160      	movs	r1, #96	@ 0x60
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fae7 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 8003e40:	e01c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f000 fa7e 	bl	8004350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2140      	movs	r1, #64	@ 0x40
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 fad7 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 8003e60:	e00c      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	f000 face 	bl	800440e <TIM_ITRx_SetConfig>
      break;
 8003e72:	e003      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e000      	b.n	8003e7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a46      	ldr	r2, [pc, #280]	@ (8003fc4 <TIM_Base_SetConfig+0x12c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d013      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb6:	d00f      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a43      	ldr	r2, [pc, #268]	@ (8003fc8 <TIM_Base_SetConfig+0x130>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a42      	ldr	r2, [pc, #264]	@ (8003fcc <TIM_Base_SetConfig+0x134>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d007      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a41      	ldr	r2, [pc, #260]	@ (8003fd0 <TIM_Base_SetConfig+0x138>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a40      	ldr	r2, [pc, #256]	@ (8003fd4 <TIM_Base_SetConfig+0x13c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d108      	bne.n	8003eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a35      	ldr	r2, [pc, #212]	@ (8003fc4 <TIM_Base_SetConfig+0x12c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d02b      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef8:	d027      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a32      	ldr	r2, [pc, #200]	@ (8003fc8 <TIM_Base_SetConfig+0x130>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d023      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a31      	ldr	r2, [pc, #196]	@ (8003fcc <TIM_Base_SetConfig+0x134>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01f      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a30      	ldr	r2, [pc, #192]	@ (8003fd0 <TIM_Base_SetConfig+0x138>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01b      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2f      	ldr	r2, [pc, #188]	@ (8003fd4 <TIM_Base_SetConfig+0x13c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d017      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2e      	ldr	r2, [pc, #184]	@ (8003fd8 <TIM_Base_SetConfig+0x140>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d013      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2d      	ldr	r2, [pc, #180]	@ (8003fdc <TIM_Base_SetConfig+0x144>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d00f      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe0 <TIM_Base_SetConfig+0x148>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d00b      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2b      	ldr	r2, [pc, #172]	@ (8003fe4 <TIM_Base_SetConfig+0x14c>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d007      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a2a      	ldr	r2, [pc, #168]	@ (8003fe8 <TIM_Base_SetConfig+0x150>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d003      	beq.n	8003f4a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a29      	ldr	r2, [pc, #164]	@ (8003fec <TIM_Base_SetConfig+0x154>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d108      	bne.n	8003f5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a10      	ldr	r2, [pc, #64]	@ (8003fc4 <TIM_Base_SetConfig+0x12c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0xf8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a12      	ldr	r2, [pc, #72]	@ (8003fd4 <TIM_Base_SetConfig+0x13c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d103      	bne.n	8003f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d105      	bne.n	8003fb6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f023 0201 	bic.w	r2, r3, #1
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	611a      	str	r2, [r3, #16]
  }
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40000400 	.word	0x40000400
 8003fcc:	40000800 	.word	0x40000800
 8003fd0:	40000c00 	.word	0x40000c00
 8003fd4:	40010400 	.word	0x40010400
 8003fd8:	40014000 	.word	0x40014000
 8003fdc:	40014400 	.word	0x40014400
 8003fe0:	40014800 	.word	0x40014800
 8003fe4:	40001800 	.word	0x40001800
 8003fe8:	40001c00 	.word	0x40001c00
 8003fec:	40002000 	.word	0x40002000

08003ff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	f023 0201 	bic.w	r2, r3, #1
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0303 	bic.w	r3, r3, #3
 8004026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68fa      	ldr	r2, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f023 0302 	bic.w	r3, r3, #2
 8004038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a20      	ldr	r2, [pc, #128]	@ (80040c8 <TIM_OC1_SetConfig+0xd8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d003      	beq.n	8004054 <TIM_OC1_SetConfig+0x64>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a1f      	ldr	r2, [pc, #124]	@ (80040cc <TIM_OC1_SetConfig+0xdc>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d10c      	bne.n	800406e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f023 0308 	bic.w	r3, r3, #8
 800405a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f023 0304 	bic.w	r3, r3, #4
 800406c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a15      	ldr	r2, [pc, #84]	@ (80040c8 <TIM_OC1_SetConfig+0xd8>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_OC1_SetConfig+0x8e>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a14      	ldr	r2, [pc, #80]	@ (80040cc <TIM_OC1_SetConfig+0xdc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d111      	bne.n	80040a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004084:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800408c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4313      	orrs	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	693a      	ldr	r2, [r7, #16]
 800409e:	4313      	orrs	r3, r2
 80040a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	621a      	str	r2, [r3, #32]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr
 80040c8:	40010000 	.word	0x40010000
 80040cc:	40010400 	.word	0x40010400

080040d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b087      	sub	sp, #28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f023 0210 	bic.w	r2, r3, #16
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004106:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	021b      	lsls	r3, r3, #8
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4313      	orrs	r3, r2
 8004112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0320 	bic.w	r3, r3, #32
 800411a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a22      	ldr	r2, [pc, #136]	@ (80041b4 <TIM_OC2_SetConfig+0xe4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d003      	beq.n	8004138 <TIM_OC2_SetConfig+0x68>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a21      	ldr	r2, [pc, #132]	@ (80041b8 <TIM_OC2_SetConfig+0xe8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10d      	bne.n	8004154 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800413e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	697a      	ldr	r2, [r7, #20]
 8004148:	4313      	orrs	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <TIM_OC2_SetConfig+0xe4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC2_SetConfig+0x94>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <TIM_OC2_SetConfig+0xe8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d113      	bne.n	800418c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800416a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40010400 	.word	0x40010400

080041bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041bc:	b480      	push	{r7}
 80041be:	b087      	sub	sp, #28
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	021b      	lsls	r3, r3, #8
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a21      	ldr	r2, [pc, #132]	@ (800429c <TIM_OC3_SetConfig+0xe0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d003      	beq.n	8004222 <TIM_OC3_SetConfig+0x66>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a20      	ldr	r2, [pc, #128]	@ (80042a0 <TIM_OC3_SetConfig+0xe4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d10d      	bne.n	800423e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004228:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	021b      	lsls	r3, r3, #8
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800423c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a16      	ldr	r2, [pc, #88]	@ (800429c <TIM_OC3_SetConfig+0xe0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d003      	beq.n	800424e <TIM_OC3_SetConfig+0x92>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a15      	ldr	r2, [pc, #84]	@ (80042a0 <TIM_OC3_SetConfig+0xe4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d113      	bne.n	8004276 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	011b      	lsls	r3, r3, #4
 8004270:	693a      	ldr	r2, [r7, #16]
 8004272:	4313      	orrs	r3, r2
 8004274:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	621a      	str	r2, [r3, #32]
}
 8004290:	bf00      	nop
 8004292:	371c      	adds	r7, #28
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr
 800429c:	40010000 	.word	0x40010000
 80042a0:	40010400 	.word	0x40010400

080042a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	69db      	ldr	r3, [r3, #28]
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80042ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	031b      	lsls	r3, r3, #12
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a12      	ldr	r2, [pc, #72]	@ (8004348 <TIM_OC4_SetConfig+0xa4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d003      	beq.n	800430c <TIM_OC4_SetConfig+0x68>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a11      	ldr	r2, [pc, #68]	@ (800434c <TIM_OC4_SetConfig+0xa8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d109      	bne.n	8004320 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004312:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	695b      	ldr	r3, [r3, #20]
 8004318:	019b      	lsls	r3, r3, #6
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40010000 	.word	0x40010000
 800434c:	40010400 	.word	0x40010400

08004350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	f023 0201 	bic.w	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800437a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f023 030a 	bic.w	r3, r3, #10
 800438c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800438e:	697a      	ldr	r2, [r7, #20]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4313      	orrs	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	621a      	str	r2, [r3, #32]
}
 80043a2:	bf00      	nop
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f023 0210 	bic.w	r2, r3, #16
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80043d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	031b      	lsls	r3, r3, #12
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80043ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	621a      	str	r2, [r3, #32]
}
 8004402:	bf00      	nop
 8004404:	371c      	adds	r7, #28
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800440e:	b480      	push	{r7}
 8004410:	b085      	sub	sp, #20
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
 8004416:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004424:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004426:	683a      	ldr	r2, [r7, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4313      	orrs	r3, r2
 800442c:	f043 0307 	orr.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	609a      	str	r2, [r3, #8]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800445e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	021a      	lsls	r2, r3, #8
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	431a      	orrs	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4313      	orrs	r3, r2
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	609a      	str	r2, [r3, #8]
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	f003 031f 	and.w	r3, r3, #31
 8004496:	2201      	movs	r2, #1
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6a1a      	ldr	r2, [r3, #32]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	43db      	mvns	r3, r3
 80044a6:	401a      	ands	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1a      	ldr	r2, [r3, #32]
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	f003 031f 	and.w	r3, r3, #31
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	431a      	orrs	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	621a      	str	r2, [r3, #32]
}
 80044c2:	bf00      	nop
 80044c4:	371c      	adds	r7, #28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044cc:	4770      	bx	lr
	...

080044d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d101      	bne.n	80044e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044e4:	2302      	movs	r3, #2
 80044e6:	e05a      	b.n	800459e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800450e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a21      	ldr	r2, [pc, #132]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d022      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004534:	d01d      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a1d      	ldr	r2, [pc, #116]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d018      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1b      	ldr	r2, [pc, #108]	@ (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d013      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1a      	ldr	r2, [pc, #104]	@ (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00e      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a18      	ldr	r2, [pc, #96]	@ (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d009      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a17      	ldr	r2, [pc, #92]	@ (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d004      	beq.n	8004572 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a15      	ldr	r2, [pc, #84]	@ (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d10c      	bne.n	800458c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004578:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	4313      	orrs	r3, r2
 8004582:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3714      	adds	r7, #20
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40010000 	.word	0x40010000
 80045b0:	40000400 	.word	0x40000400
 80045b4:	40000800 	.word	0x40000800
 80045b8:	40000c00 	.word	0x40000c00
 80045bc:	40010400 	.word	0x40010400
 80045c0:	40014000 	.word	0x40014000
 80045c4:	40001800 	.word	0x40001800

080045c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b085      	sub	sp, #20
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e03d      	b.n	8004660 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4313      	orrs	r3, r2
 8004606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4313      	orrs	r3, r2
 8004622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	4313      	orrs	r3, r2
 800463e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	69db      	ldr	r3, [r3, #28]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3714      	adds	r7, #20
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e042      	b.n	8004704 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7fd fd76 	bl	8002184 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2224      	movs	r2, #36	@ 0x24
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa09 	bl	8004ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	691a      	ldr	r2, [r3, #16]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	4618      	mov	r0, r3
 8004706:	3708      	adds	r7, #8
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	@ 0x28
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b20      	cmp	r3, #32
 800472a:	d175      	bne.n	8004818 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d002      	beq.n	8004738 <HAL_UART_Transmit+0x2c>
 8004732:	88fb      	ldrh	r3, [r7, #6]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e06e      	b.n	800481a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2221      	movs	r2, #33	@ 0x21
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800474a:	f7fd feef 	bl	800252c <HAL_GetTick>
 800474e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	88fa      	ldrh	r2, [r7, #6]
 8004754:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	88fa      	ldrh	r2, [r7, #6]
 800475a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004764:	d108      	bne.n	8004778 <HAL_UART_Transmit+0x6c>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d104      	bne.n	8004778 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	61bb      	str	r3, [r7, #24]
 8004776:	e003      	b.n	8004780 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800477c:	2300      	movs	r3, #0
 800477e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004780:	e02e      	b.n	80047e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2200      	movs	r2, #0
 800478a:	2180      	movs	r1, #128	@ 0x80
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f8df 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e03a      	b.n	800481a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d10b      	bne.n	80047c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	461a      	mov	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	3302      	adds	r3, #2
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	e007      	b.n	80047d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	781a      	ldrb	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	3301      	adds	r3, #1
 80047d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d1cb      	bne.n	8004782 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	2200      	movs	r2, #0
 80047f2:	2140      	movs	r1, #64	@ 0x40
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f000 f8ab 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d005      	beq.n	800480c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2220      	movs	r2, #32
 8004804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e006      	b.n	800481a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004814:	2300      	movs	r3, #0
 8004816:	e000      	b.n	800481a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004818:	2302      	movs	r3, #2
  }
}
 800481a:	4618      	mov	r0, r3
 800481c:	3720      	adds	r7, #32
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08a      	sub	sp, #40	@ 0x28
 8004826:	af02      	add	r7, sp, #8
 8004828:	60f8      	str	r0, [r7, #12]
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	603b      	str	r3, [r7, #0]
 800482e:	4613      	mov	r3, r2
 8004830:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	f040 8081 	bne.w	8004946 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <HAL_UART_Receive+0x2e>
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d101      	bne.n	8004854 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	e079      	b.n	8004948 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2222      	movs	r2, #34	@ 0x22
 800485e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004868:	f7fd fe60 	bl	800252c <HAL_GetTick>
 800486c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	88fa      	ldrh	r2, [r7, #6]
 8004872:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004882:	d108      	bne.n	8004896 <HAL_UART_Receive+0x74>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d104      	bne.n	8004896 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 800488c:	2300      	movs	r3, #0
 800488e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	61bb      	str	r3, [r7, #24]
 8004894:	e003      	b.n	800489e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800489e:	e047      	b.n	8004930 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	9300      	str	r3, [sp, #0]
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	2200      	movs	r2, #0
 80048a8:	2120      	movs	r1, #32
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f850 	bl	8004950 <UART_WaitOnFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d005      	beq.n	80048c2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2220      	movs	r2, #32
 80048ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e042      	b.n	8004948 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10c      	bne.n	80048e2 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d4:	b29a      	uxth	r2, r3
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	3302      	adds	r3, #2
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e01f      	b.n	8004922 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048ea:	d007      	beq.n	80048fc <HAL_UART_Receive+0xda>
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_UART_Receive+0xe8>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d106      	bne.n	800490a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	b2da      	uxtb	r2, r3
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	701a      	strb	r2, [r3, #0]
 8004908:	e008      	b.n	800491c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004916:	b2da      	uxtb	r2, r3
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	3301      	adds	r3, #1
 8004920:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1b2      	bne.n	80048a0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8004942:	2300      	movs	r3, #0
 8004944:	e000      	b.n	8004948 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004946:	2302      	movs	r3, #2
  }
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	4613      	mov	r3, r2
 800495e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004960:	e03b      	b.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d037      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800496a:	f7fd fddf 	bl	800252c <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	6a3a      	ldr	r2, [r7, #32]
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <UART_WaitOnFlagUntilTimeout+0x30>
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e03a      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0304 	and.w	r3, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	d023      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	2b80      	cmp	r3, #128	@ 0x80
 8004996:	d020      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b40      	cmp	r3, #64	@ 0x40
 800499c:	d01d      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0308 	and.w	r3, r3, #8
 80049a8:	2b08      	cmp	r3, #8
 80049aa:	d116      	bne.n	80049da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049ac:	2300      	movs	r3, #0
 80049ae:	617b      	str	r3, [r7, #20]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	617b      	str	r3, [r7, #20]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	617b      	str	r3, [r7, #20]
 80049c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f81d 	bl	8004a02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2208      	movs	r2, #8
 80049cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e00f      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	4013      	ands	r3, r2
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d0b4      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b095      	sub	sp, #84	@ 0x54
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	330c      	adds	r3, #12
 8004a10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	330c      	adds	r3, #12
 8004a28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1e5      	bne.n	8004a0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3314      	adds	r3, #20
 8004a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	e853 3f00 	ldrex	r3, [r3]
 8004a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	f023 0301 	bic.w	r3, r3, #1
 8004a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e5      	bne.n	8004a3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d119      	bne.n	8004aae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	330c      	adds	r3, #12
 8004a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	f023 0310 	bic.w	r3, r3, #16
 8004a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	330c      	adds	r3, #12
 8004a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a9a:	61ba      	str	r2, [r7, #24]
 8004a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9e:	6979      	ldr	r1, [r7, #20]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	e841 2300 	strex	r3, r2, [r1]
 8004aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1e5      	bne.n	8004a7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004abc:	bf00      	nop
 8004abe:	3754      	adds	r7, #84	@ 0x54
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004acc:	b0c0      	sub	sp, #256	@ 0x100
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae4:	68d9      	ldr	r1, [r3, #12]
 8004ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	ea40 0301 	orr.w	r3, r0, r1
 8004af0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004af6:	689a      	ldr	r2, [r3, #8]
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	431a      	orrs	r2, r3
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0c:	69db      	ldr	r3, [r3, #28]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b20:	f021 010c 	bic.w	r1, r1, #12
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b2e:	430b      	orrs	r3, r1
 8004b30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b42:	6999      	ldr	r1, [r3, #24]
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	ea40 0301 	orr.w	r3, r0, r1
 8004b4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	4b8f      	ldr	r3, [pc, #572]	@ (8004d94 <UART_SetConfig+0x2cc>)
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d005      	beq.n	8004b68 <UART_SetConfig+0xa0>
 8004b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4b8d      	ldr	r3, [pc, #564]	@ (8004d98 <UART_SetConfig+0x2d0>)
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d104      	bne.n	8004b72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b68:	f7fe f886 	bl	8002c78 <HAL_RCC_GetPCLK2Freq>
 8004b6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004b70:	e003      	b.n	8004b7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b72:	f7fe f86d 	bl	8002c50 <HAL_RCC_GetPCLK1Freq>
 8004b76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b84:	f040 810c 	bne.w	8004da0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004b92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004b96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	462b      	mov	r3, r5
 8004b9e:	1891      	adds	r1, r2, r2
 8004ba0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004ba2:	415b      	adcs	r3, r3
 8004ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ba6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004baa:	4621      	mov	r1, r4
 8004bac:	eb12 0801 	adds.w	r8, r2, r1
 8004bb0:	4629      	mov	r1, r5
 8004bb2:	eb43 0901 	adc.w	r9, r3, r1
 8004bb6:	f04f 0200 	mov.w	r2, #0
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bca:	4690      	mov	r8, r2
 8004bcc:	4699      	mov	r9, r3
 8004bce:	4623      	mov	r3, r4
 8004bd0:	eb18 0303 	adds.w	r3, r8, r3
 8004bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004bd8:	462b      	mov	r3, r5
 8004bda:	eb49 0303 	adc.w	r3, r9, r3
 8004bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004bee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004bf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004bf6:	460b      	mov	r3, r1
 8004bf8:	18db      	adds	r3, r3, r3
 8004bfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	eb42 0303 	adc.w	r3, r2, r3
 8004c02:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c04:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c08:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c0c:	f7fb ffe4 	bl	8000bd8 <__aeabi_uldivmod>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4b61      	ldr	r3, [pc, #388]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004c16:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1a:	095b      	lsrs	r3, r3, #5
 8004c1c:	011c      	lsls	r4, r3, #4
 8004c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c22:	2200      	movs	r2, #0
 8004c24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c28:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c2c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c30:	4642      	mov	r2, r8
 8004c32:	464b      	mov	r3, r9
 8004c34:	1891      	adds	r1, r2, r2
 8004c36:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004c38:	415b      	adcs	r3, r3
 8004c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c3c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004c40:	4641      	mov	r1, r8
 8004c42:	eb12 0a01 	adds.w	sl, r2, r1
 8004c46:	4649      	mov	r1, r9
 8004c48:	eb43 0b01 	adc.w	fp, r3, r1
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c58:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c60:	4692      	mov	sl, r2
 8004c62:	469b      	mov	fp, r3
 8004c64:	4643      	mov	r3, r8
 8004c66:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c6e:	464b      	mov	r3, r9
 8004c70:	eb4b 0303 	adc.w	r3, fp, r3
 8004c74:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c84:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004c88:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	18db      	adds	r3, r3, r3
 8004c90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c92:	4613      	mov	r3, r2
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004c9e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004ca2:	f7fb ff99 	bl	8000bd8 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b3b      	ldr	r3, [pc, #236]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	@ 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	00db      	lsls	r3, r3, #3
 8004cbe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004cc4:	fba3 2302 	umull	r2, r3, r3, r2
 8004cc8:	095b      	lsrs	r3, r3, #5
 8004cca:	005b      	lsls	r3, r3, #1
 8004ccc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004cd0:	441c      	add	r4, r3
 8004cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cdc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ce0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	464b      	mov	r3, r9
 8004ce8:	1891      	adds	r1, r2, r2
 8004cea:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004cec:	415b      	adcs	r3, r3
 8004cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cf0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004cf4:	4641      	mov	r1, r8
 8004cf6:	1851      	adds	r1, r2, r1
 8004cf8:	6339      	str	r1, [r7, #48]	@ 0x30
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	414b      	adcs	r3, r1
 8004cfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d00:	f04f 0200 	mov.w	r2, #0
 8004d04:	f04f 0300 	mov.w	r3, #0
 8004d08:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d0c:	4659      	mov	r1, fp
 8004d0e:	00cb      	lsls	r3, r1, #3
 8004d10:	4651      	mov	r1, sl
 8004d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d16:	4651      	mov	r1, sl
 8004d18:	00ca      	lsls	r2, r1, #3
 8004d1a:	4610      	mov	r0, r2
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4642      	mov	r2, r8
 8004d22:	189b      	adds	r3, r3, r2
 8004d24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d28:	464b      	mov	r3, r9
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	eb42 0303 	adc.w	r3, r2, r3
 8004d30:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004d40:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004d44:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004d48:	460b      	mov	r3, r1
 8004d4a:	18db      	adds	r3, r3, r3
 8004d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d4e:	4613      	mov	r3, r2
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004d5a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004d5e:	f7fb ff3b 	bl	8000bd8 <__aeabi_uldivmod>
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4b0d      	ldr	r3, [pc, #52]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004d68:	fba3 1302 	umull	r1, r3, r3, r2
 8004d6c:	095b      	lsrs	r3, r3, #5
 8004d6e:	2164      	movs	r1, #100	@ 0x64
 8004d70:	fb01 f303 	mul.w	r3, r1, r3
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	3332      	adds	r3, #50	@ 0x32
 8004d7a:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <UART_SetConfig+0x2d4>)
 8004d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	f003 0207 	and.w	r2, r3, #7
 8004d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4422      	add	r2, r4
 8004d8e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d90:	e106      	b.n	8004fa0 <UART_SetConfig+0x4d8>
 8004d92:	bf00      	nop
 8004d94:	40011000 	.word	0x40011000
 8004d98:	40011400 	.word	0x40011400
 8004d9c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004da4:	2200      	movs	r2, #0
 8004da6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004daa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004dae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004db2:	4642      	mov	r2, r8
 8004db4:	464b      	mov	r3, r9
 8004db6:	1891      	adds	r1, r2, r2
 8004db8:	6239      	str	r1, [r7, #32]
 8004dba:	415b      	adcs	r3, r3
 8004dbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dbe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc2:	4641      	mov	r1, r8
 8004dc4:	1854      	adds	r4, r2, r1
 8004dc6:	4649      	mov	r1, r9
 8004dc8:	eb43 0501 	adc.w	r5, r3, r1
 8004dcc:	f04f 0200 	mov.w	r2, #0
 8004dd0:	f04f 0300 	mov.w	r3, #0
 8004dd4:	00eb      	lsls	r3, r5, #3
 8004dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dda:	00e2      	lsls	r2, r4, #3
 8004ddc:	4614      	mov	r4, r2
 8004dde:	461d      	mov	r5, r3
 8004de0:	4643      	mov	r3, r8
 8004de2:	18e3      	adds	r3, r4, r3
 8004de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004de8:	464b      	mov	r3, r9
 8004dea:	eb45 0303 	adc.w	r3, r5, r3
 8004dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004dfe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e02:	f04f 0200 	mov.w	r2, #0
 8004e06:	f04f 0300 	mov.w	r3, #0
 8004e0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e0e:	4629      	mov	r1, r5
 8004e10:	008b      	lsls	r3, r1, #2
 8004e12:	4621      	mov	r1, r4
 8004e14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e18:	4621      	mov	r1, r4
 8004e1a:	008a      	lsls	r2, r1, #2
 8004e1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e20:	f7fb feda 	bl	8000bd8 <__aeabi_uldivmod>
 8004e24:	4602      	mov	r2, r0
 8004e26:	460b      	mov	r3, r1
 8004e28:	4b60      	ldr	r3, [pc, #384]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e2e:	095b      	lsrs	r3, r3, #5
 8004e30:	011c      	lsls	r4, r3, #4
 8004e32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e36:	2200      	movs	r2, #0
 8004e38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004e3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004e40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004e44:	4642      	mov	r2, r8
 8004e46:	464b      	mov	r3, r9
 8004e48:	1891      	adds	r1, r2, r2
 8004e4a:	61b9      	str	r1, [r7, #24]
 8004e4c:	415b      	adcs	r3, r3
 8004e4e:	61fb      	str	r3, [r7, #28]
 8004e50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e54:	4641      	mov	r1, r8
 8004e56:	1851      	adds	r1, r2, r1
 8004e58:	6139      	str	r1, [r7, #16]
 8004e5a:	4649      	mov	r1, r9
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	00cb      	lsls	r3, r1, #3
 8004e70:	4651      	mov	r1, sl
 8004e72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e76:	4651      	mov	r1, sl
 8004e78:	00ca      	lsls	r2, r1, #3
 8004e7a:	4610      	mov	r0, r2
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4603      	mov	r3, r0
 8004e80:	4642      	mov	r2, r8
 8004e82:	189b      	adds	r3, r3, r2
 8004e84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004e88:	464b      	mov	r3, r9
 8004e8a:	460a      	mov	r2, r1
 8004e8c:	eb42 0303 	adc.w	r3, r2, r3
 8004e90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004e9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	f04f 0300 	mov.w	r3, #0
 8004ea8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004eac:	4649      	mov	r1, r9
 8004eae:	008b      	lsls	r3, r1, #2
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	008a      	lsls	r2, r1, #2
 8004eba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ebe:	f7fb fe8b 	bl	8000bd8 <__aeabi_uldivmod>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4b38      	ldr	r3, [pc, #224]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004eca:	fba3 2301 	umull	r2, r3, r3, r1
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	2264      	movs	r2, #100	@ 0x64
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
 8004ed6:	1acb      	subs	r3, r1, r3
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	3332      	adds	r3, #50	@ 0x32
 8004edc:	4a33      	ldr	r2, [pc, #204]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004ede:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee2:	095b      	lsrs	r3, r3, #5
 8004ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ee8:	441c      	add	r4, r3
 8004eea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eee:	2200      	movs	r2, #0
 8004ef0:	673b      	str	r3, [r7, #112]	@ 0x70
 8004ef2:	677a      	str	r2, [r7, #116]	@ 0x74
 8004ef4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ef8:	4642      	mov	r2, r8
 8004efa:	464b      	mov	r3, r9
 8004efc:	1891      	adds	r1, r2, r2
 8004efe:	60b9      	str	r1, [r7, #8]
 8004f00:	415b      	adcs	r3, r3
 8004f02:	60fb      	str	r3, [r7, #12]
 8004f04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f08:	4641      	mov	r1, r8
 8004f0a:	1851      	adds	r1, r2, r1
 8004f0c:	6039      	str	r1, [r7, #0]
 8004f0e:	4649      	mov	r1, r9
 8004f10:	414b      	adcs	r3, r1
 8004f12:	607b      	str	r3, [r7, #4]
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f20:	4659      	mov	r1, fp
 8004f22:	00cb      	lsls	r3, r1, #3
 8004f24:	4651      	mov	r1, sl
 8004f26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2a:	4651      	mov	r1, sl
 8004f2c:	00ca      	lsls	r2, r1, #3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	4619      	mov	r1, r3
 8004f32:	4603      	mov	r3, r0
 8004f34:	4642      	mov	r2, r8
 8004f36:	189b      	adds	r3, r3, r2
 8004f38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	460a      	mov	r2, r1
 8004f3e:	eb42 0303 	adc.w	r3, r2, r3
 8004f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004f4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	008b      	lsls	r3, r1, #2
 8004f60:	4641      	mov	r1, r8
 8004f62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f66:	4641      	mov	r1, r8
 8004f68:	008a      	lsls	r2, r1, #2
 8004f6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004f6e:	f7fb fe33 	bl	8000bd8 <__aeabi_uldivmod>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4b0d      	ldr	r3, [pc, #52]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	2164      	movs	r1, #100	@ 0x64
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	3332      	adds	r3, #50	@ 0x32
 8004f8a:	4a08      	ldr	r2, [pc, #32]	@ (8004fac <UART_SetConfig+0x4e4>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	f003 020f 	and.w	r2, r3, #15
 8004f96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4422      	add	r2, r4
 8004f9e:	609a      	str	r2, [r3, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fac:	51eb851f 	.word	0x51eb851f

08004fb0 <std>:
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	b510      	push	{r4, lr}
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	e9c0 3300 	strd	r3, r3, [r0]
 8004fba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fbe:	6083      	str	r3, [r0, #8]
 8004fc0:	8181      	strh	r1, [r0, #12]
 8004fc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fc4:	81c2      	strh	r2, [r0, #14]
 8004fc6:	6183      	str	r3, [r0, #24]
 8004fc8:	4619      	mov	r1, r3
 8004fca:	2208      	movs	r2, #8
 8004fcc:	305c      	adds	r0, #92	@ 0x5c
 8004fce:	f000 f906 	bl	80051de <memset>
 8004fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005008 <std+0x58>)
 8004fd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800500c <std+0x5c>)
 8004fd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fda:	4b0d      	ldr	r3, [pc, #52]	@ (8005010 <std+0x60>)
 8004fdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fde:	4b0d      	ldr	r3, [pc, #52]	@ (8005014 <std+0x64>)
 8004fe0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <std+0x68>)
 8004fe4:	6224      	str	r4, [r4, #32]
 8004fe6:	429c      	cmp	r4, r3
 8004fe8:	d006      	beq.n	8004ff8 <std+0x48>
 8004fea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004fee:	4294      	cmp	r4, r2
 8004ff0:	d002      	beq.n	8004ff8 <std+0x48>
 8004ff2:	33d0      	adds	r3, #208	@ 0xd0
 8004ff4:	429c      	cmp	r4, r3
 8004ff6:	d105      	bne.n	8005004 <std+0x54>
 8004ff8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005000:	f000 b966 	b.w	80052d0 <__retarget_lock_init_recursive>
 8005004:	bd10      	pop	{r4, pc}
 8005006:	bf00      	nop
 8005008:	08005159 	.word	0x08005159
 800500c:	0800517b 	.word	0x0800517b
 8005010:	080051b3 	.word	0x080051b3
 8005014:	080051d7 	.word	0x080051d7
 8005018:	20000304 	.word	0x20000304

0800501c <stdio_exit_handler>:
 800501c:	4a02      	ldr	r2, [pc, #8]	@ (8005028 <stdio_exit_handler+0xc>)
 800501e:	4903      	ldr	r1, [pc, #12]	@ (800502c <stdio_exit_handler+0x10>)
 8005020:	4803      	ldr	r0, [pc, #12]	@ (8005030 <stdio_exit_handler+0x14>)
 8005022:	f000 b869 	b.w	80050f8 <_fwalk_sglue>
 8005026:	bf00      	nop
 8005028:	20000014 	.word	0x20000014
 800502c:	08005b71 	.word	0x08005b71
 8005030:	20000024 	.word	0x20000024

08005034 <cleanup_stdio>:
 8005034:	6841      	ldr	r1, [r0, #4]
 8005036:	4b0c      	ldr	r3, [pc, #48]	@ (8005068 <cleanup_stdio+0x34>)
 8005038:	4299      	cmp	r1, r3
 800503a:	b510      	push	{r4, lr}
 800503c:	4604      	mov	r4, r0
 800503e:	d001      	beq.n	8005044 <cleanup_stdio+0x10>
 8005040:	f000 fd96 	bl	8005b70 <_fflush_r>
 8005044:	68a1      	ldr	r1, [r4, #8]
 8005046:	4b09      	ldr	r3, [pc, #36]	@ (800506c <cleanup_stdio+0x38>)
 8005048:	4299      	cmp	r1, r3
 800504a:	d002      	beq.n	8005052 <cleanup_stdio+0x1e>
 800504c:	4620      	mov	r0, r4
 800504e:	f000 fd8f 	bl	8005b70 <_fflush_r>
 8005052:	68e1      	ldr	r1, [r4, #12]
 8005054:	4b06      	ldr	r3, [pc, #24]	@ (8005070 <cleanup_stdio+0x3c>)
 8005056:	4299      	cmp	r1, r3
 8005058:	d004      	beq.n	8005064 <cleanup_stdio+0x30>
 800505a:	4620      	mov	r0, r4
 800505c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005060:	f000 bd86 	b.w	8005b70 <_fflush_r>
 8005064:	bd10      	pop	{r4, pc}
 8005066:	bf00      	nop
 8005068:	20000304 	.word	0x20000304
 800506c:	2000036c 	.word	0x2000036c
 8005070:	200003d4 	.word	0x200003d4

08005074 <global_stdio_init.part.0>:
 8005074:	b510      	push	{r4, lr}
 8005076:	4b0b      	ldr	r3, [pc, #44]	@ (80050a4 <global_stdio_init.part.0+0x30>)
 8005078:	4c0b      	ldr	r4, [pc, #44]	@ (80050a8 <global_stdio_init.part.0+0x34>)
 800507a:	4a0c      	ldr	r2, [pc, #48]	@ (80050ac <global_stdio_init.part.0+0x38>)
 800507c:	601a      	str	r2, [r3, #0]
 800507e:	4620      	mov	r0, r4
 8005080:	2200      	movs	r2, #0
 8005082:	2104      	movs	r1, #4
 8005084:	f7ff ff94 	bl	8004fb0 <std>
 8005088:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800508c:	2201      	movs	r2, #1
 800508e:	2109      	movs	r1, #9
 8005090:	f7ff ff8e 	bl	8004fb0 <std>
 8005094:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005098:	2202      	movs	r2, #2
 800509a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800509e:	2112      	movs	r1, #18
 80050a0:	f7ff bf86 	b.w	8004fb0 <std>
 80050a4:	2000043c 	.word	0x2000043c
 80050a8:	20000304 	.word	0x20000304
 80050ac:	0800501d 	.word	0x0800501d

080050b0 <__sfp_lock_acquire>:
 80050b0:	4801      	ldr	r0, [pc, #4]	@ (80050b8 <__sfp_lock_acquire+0x8>)
 80050b2:	f000 b90e 	b.w	80052d2 <__retarget_lock_acquire_recursive>
 80050b6:	bf00      	nop
 80050b8:	20000445 	.word	0x20000445

080050bc <__sfp_lock_release>:
 80050bc:	4801      	ldr	r0, [pc, #4]	@ (80050c4 <__sfp_lock_release+0x8>)
 80050be:	f000 b909 	b.w	80052d4 <__retarget_lock_release_recursive>
 80050c2:	bf00      	nop
 80050c4:	20000445 	.word	0x20000445

080050c8 <__sinit>:
 80050c8:	b510      	push	{r4, lr}
 80050ca:	4604      	mov	r4, r0
 80050cc:	f7ff fff0 	bl	80050b0 <__sfp_lock_acquire>
 80050d0:	6a23      	ldr	r3, [r4, #32]
 80050d2:	b11b      	cbz	r3, 80050dc <__sinit+0x14>
 80050d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d8:	f7ff bff0 	b.w	80050bc <__sfp_lock_release>
 80050dc:	4b04      	ldr	r3, [pc, #16]	@ (80050f0 <__sinit+0x28>)
 80050de:	6223      	str	r3, [r4, #32]
 80050e0:	4b04      	ldr	r3, [pc, #16]	@ (80050f4 <__sinit+0x2c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f5      	bne.n	80050d4 <__sinit+0xc>
 80050e8:	f7ff ffc4 	bl	8005074 <global_stdio_init.part.0>
 80050ec:	e7f2      	b.n	80050d4 <__sinit+0xc>
 80050ee:	bf00      	nop
 80050f0:	08005035 	.word	0x08005035
 80050f4:	2000043c 	.word	0x2000043c

080050f8 <_fwalk_sglue>:
 80050f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050fc:	4607      	mov	r7, r0
 80050fe:	4688      	mov	r8, r1
 8005100:	4614      	mov	r4, r2
 8005102:	2600      	movs	r6, #0
 8005104:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005108:	f1b9 0901 	subs.w	r9, r9, #1
 800510c:	d505      	bpl.n	800511a <_fwalk_sglue+0x22>
 800510e:	6824      	ldr	r4, [r4, #0]
 8005110:	2c00      	cmp	r4, #0
 8005112:	d1f7      	bne.n	8005104 <_fwalk_sglue+0xc>
 8005114:	4630      	mov	r0, r6
 8005116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800511a:	89ab      	ldrh	r3, [r5, #12]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d907      	bls.n	8005130 <_fwalk_sglue+0x38>
 8005120:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005124:	3301      	adds	r3, #1
 8005126:	d003      	beq.n	8005130 <_fwalk_sglue+0x38>
 8005128:	4629      	mov	r1, r5
 800512a:	4638      	mov	r0, r7
 800512c:	47c0      	blx	r8
 800512e:	4306      	orrs	r6, r0
 8005130:	3568      	adds	r5, #104	@ 0x68
 8005132:	e7e9      	b.n	8005108 <_fwalk_sglue+0x10>

08005134 <iprintf>:
 8005134:	b40f      	push	{r0, r1, r2, r3}
 8005136:	b507      	push	{r0, r1, r2, lr}
 8005138:	4906      	ldr	r1, [pc, #24]	@ (8005154 <iprintf+0x20>)
 800513a:	ab04      	add	r3, sp, #16
 800513c:	6808      	ldr	r0, [r1, #0]
 800513e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005142:	6881      	ldr	r1, [r0, #8]
 8005144:	9301      	str	r3, [sp, #4]
 8005146:	f000 f9e9 	bl	800551c <_vfiprintf_r>
 800514a:	b003      	add	sp, #12
 800514c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005150:	b004      	add	sp, #16
 8005152:	4770      	bx	lr
 8005154:	20000020 	.word	0x20000020

08005158 <__sread>:
 8005158:	b510      	push	{r4, lr}
 800515a:	460c      	mov	r4, r1
 800515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005160:	f000 f868 	bl	8005234 <_read_r>
 8005164:	2800      	cmp	r0, #0
 8005166:	bfab      	itete	ge
 8005168:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800516a:	89a3      	ldrhlt	r3, [r4, #12]
 800516c:	181b      	addge	r3, r3, r0
 800516e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005172:	bfac      	ite	ge
 8005174:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005176:	81a3      	strhlt	r3, [r4, #12]
 8005178:	bd10      	pop	{r4, pc}

0800517a <__swrite>:
 800517a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800517e:	461f      	mov	r7, r3
 8005180:	898b      	ldrh	r3, [r1, #12]
 8005182:	05db      	lsls	r3, r3, #23
 8005184:	4605      	mov	r5, r0
 8005186:	460c      	mov	r4, r1
 8005188:	4616      	mov	r6, r2
 800518a:	d505      	bpl.n	8005198 <__swrite+0x1e>
 800518c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005190:	2302      	movs	r3, #2
 8005192:	2200      	movs	r2, #0
 8005194:	f000 f83c 	bl	8005210 <_lseek_r>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800519e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051a2:	81a3      	strh	r3, [r4, #12]
 80051a4:	4632      	mov	r2, r6
 80051a6:	463b      	mov	r3, r7
 80051a8:	4628      	mov	r0, r5
 80051aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051ae:	f000 b853 	b.w	8005258 <_write_r>

080051b2 <__sseek>:
 80051b2:	b510      	push	{r4, lr}
 80051b4:	460c      	mov	r4, r1
 80051b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051ba:	f000 f829 	bl	8005210 <_lseek_r>
 80051be:	1c43      	adds	r3, r0, #1
 80051c0:	89a3      	ldrh	r3, [r4, #12]
 80051c2:	bf15      	itete	ne
 80051c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051ce:	81a3      	strheq	r3, [r4, #12]
 80051d0:	bf18      	it	ne
 80051d2:	81a3      	strhne	r3, [r4, #12]
 80051d4:	bd10      	pop	{r4, pc}

080051d6 <__sclose>:
 80051d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051da:	f000 b809 	b.w	80051f0 <_close_r>

080051de <memset>:
 80051de:	4402      	add	r2, r0
 80051e0:	4603      	mov	r3, r0
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d100      	bne.n	80051e8 <memset+0xa>
 80051e6:	4770      	bx	lr
 80051e8:	f803 1b01 	strb.w	r1, [r3], #1
 80051ec:	e7f9      	b.n	80051e2 <memset+0x4>
	...

080051f0 <_close_r>:
 80051f0:	b538      	push	{r3, r4, r5, lr}
 80051f2:	4d06      	ldr	r5, [pc, #24]	@ (800520c <_close_r+0x1c>)
 80051f4:	2300      	movs	r3, #0
 80051f6:	4604      	mov	r4, r0
 80051f8:	4608      	mov	r0, r1
 80051fa:	602b      	str	r3, [r5, #0]
 80051fc:	f7fd f88a 	bl	8002314 <_close>
 8005200:	1c43      	adds	r3, r0, #1
 8005202:	d102      	bne.n	800520a <_close_r+0x1a>
 8005204:	682b      	ldr	r3, [r5, #0]
 8005206:	b103      	cbz	r3, 800520a <_close_r+0x1a>
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	bd38      	pop	{r3, r4, r5, pc}
 800520c:	20000440 	.word	0x20000440

08005210 <_lseek_r>:
 8005210:	b538      	push	{r3, r4, r5, lr}
 8005212:	4d07      	ldr	r5, [pc, #28]	@ (8005230 <_lseek_r+0x20>)
 8005214:	4604      	mov	r4, r0
 8005216:	4608      	mov	r0, r1
 8005218:	4611      	mov	r1, r2
 800521a:	2200      	movs	r2, #0
 800521c:	602a      	str	r2, [r5, #0]
 800521e:	461a      	mov	r2, r3
 8005220:	f7fd f89f 	bl	8002362 <_lseek>
 8005224:	1c43      	adds	r3, r0, #1
 8005226:	d102      	bne.n	800522e <_lseek_r+0x1e>
 8005228:	682b      	ldr	r3, [r5, #0]
 800522a:	b103      	cbz	r3, 800522e <_lseek_r+0x1e>
 800522c:	6023      	str	r3, [r4, #0]
 800522e:	bd38      	pop	{r3, r4, r5, pc}
 8005230:	20000440 	.word	0x20000440

08005234 <_read_r>:
 8005234:	b538      	push	{r3, r4, r5, lr}
 8005236:	4d07      	ldr	r5, [pc, #28]	@ (8005254 <_read_r+0x20>)
 8005238:	4604      	mov	r4, r0
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	2200      	movs	r2, #0
 8005240:	602a      	str	r2, [r5, #0]
 8005242:	461a      	mov	r2, r3
 8005244:	f7fd f849 	bl	80022da <_read>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_read_r+0x1e>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_read_r+0x1e>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	20000440 	.word	0x20000440

08005258 <_write_r>:
 8005258:	b538      	push	{r3, r4, r5, lr}
 800525a:	4d07      	ldr	r5, [pc, #28]	@ (8005278 <_write_r+0x20>)
 800525c:	4604      	mov	r4, r0
 800525e:	4608      	mov	r0, r1
 8005260:	4611      	mov	r1, r2
 8005262:	2200      	movs	r2, #0
 8005264:	602a      	str	r2, [r5, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	f7fc fd2e 	bl	8001cc8 <_write>
 800526c:	1c43      	adds	r3, r0, #1
 800526e:	d102      	bne.n	8005276 <_write_r+0x1e>
 8005270:	682b      	ldr	r3, [r5, #0]
 8005272:	b103      	cbz	r3, 8005276 <_write_r+0x1e>
 8005274:	6023      	str	r3, [r4, #0]
 8005276:	bd38      	pop	{r3, r4, r5, pc}
 8005278:	20000440 	.word	0x20000440

0800527c <__errno>:
 800527c:	4b01      	ldr	r3, [pc, #4]	@ (8005284 <__errno+0x8>)
 800527e:	6818      	ldr	r0, [r3, #0]
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000020 	.word	0x20000020

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4d0d      	ldr	r5, [pc, #52]	@ (80052c0 <__libc_init_array+0x38>)
 800528c:	4c0d      	ldr	r4, [pc, #52]	@ (80052c4 <__libc_init_array+0x3c>)
 800528e:	1b64      	subs	r4, r4, r5
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	2600      	movs	r6, #0
 8005294:	42a6      	cmp	r6, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	4d0b      	ldr	r5, [pc, #44]	@ (80052c8 <__libc_init_array+0x40>)
 800529a:	4c0c      	ldr	r4, [pc, #48]	@ (80052cc <__libc_init_array+0x44>)
 800529c:	f001 ff44 	bl	8007128 <_init>
 80052a0:	1b64      	subs	r4, r4, r5
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	2600      	movs	r6, #0
 80052a6:	42a6      	cmp	r6, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b0:	4798      	blx	r3
 80052b2:	3601      	adds	r6, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ba:	4798      	blx	r3
 80052bc:	3601      	adds	r6, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	080073e0 	.word	0x080073e0
 80052c4:	080073e0 	.word	0x080073e0
 80052c8:	080073e0 	.word	0x080073e0
 80052cc:	080073e4 	.word	0x080073e4

080052d0 <__retarget_lock_init_recursive>:
 80052d0:	4770      	bx	lr

080052d2 <__retarget_lock_acquire_recursive>:
 80052d2:	4770      	bx	lr

080052d4 <__retarget_lock_release_recursive>:
 80052d4:	4770      	bx	lr
	...

080052d8 <_free_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4605      	mov	r5, r0
 80052dc:	2900      	cmp	r1, #0
 80052de:	d041      	beq.n	8005364 <_free_r+0x8c>
 80052e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e4:	1f0c      	subs	r4, r1, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfb8      	it	lt
 80052ea:	18e4      	addlt	r4, r4, r3
 80052ec:	f000 f8e0 	bl	80054b0 <__malloc_lock>
 80052f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005368 <_free_r+0x90>)
 80052f2:	6813      	ldr	r3, [r2, #0]
 80052f4:	b933      	cbnz	r3, 8005304 <_free_r+0x2c>
 80052f6:	6063      	str	r3, [r4, #4]
 80052f8:	6014      	str	r4, [r2, #0]
 80052fa:	4628      	mov	r0, r5
 80052fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005300:	f000 b8dc 	b.w	80054bc <__malloc_unlock>
 8005304:	42a3      	cmp	r3, r4
 8005306:	d908      	bls.n	800531a <_free_r+0x42>
 8005308:	6820      	ldr	r0, [r4, #0]
 800530a:	1821      	adds	r1, r4, r0
 800530c:	428b      	cmp	r3, r1
 800530e:	bf01      	itttt	eq
 8005310:	6819      	ldreq	r1, [r3, #0]
 8005312:	685b      	ldreq	r3, [r3, #4]
 8005314:	1809      	addeq	r1, r1, r0
 8005316:	6021      	streq	r1, [r4, #0]
 8005318:	e7ed      	b.n	80052f6 <_free_r+0x1e>
 800531a:	461a      	mov	r2, r3
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	b10b      	cbz	r3, 8005324 <_free_r+0x4c>
 8005320:	42a3      	cmp	r3, r4
 8005322:	d9fa      	bls.n	800531a <_free_r+0x42>
 8005324:	6811      	ldr	r1, [r2, #0]
 8005326:	1850      	adds	r0, r2, r1
 8005328:	42a0      	cmp	r0, r4
 800532a:	d10b      	bne.n	8005344 <_free_r+0x6c>
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	4401      	add	r1, r0
 8005330:	1850      	adds	r0, r2, r1
 8005332:	4283      	cmp	r3, r0
 8005334:	6011      	str	r1, [r2, #0]
 8005336:	d1e0      	bne.n	80052fa <_free_r+0x22>
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	6053      	str	r3, [r2, #4]
 800533e:	4408      	add	r0, r1
 8005340:	6010      	str	r0, [r2, #0]
 8005342:	e7da      	b.n	80052fa <_free_r+0x22>
 8005344:	d902      	bls.n	800534c <_free_r+0x74>
 8005346:	230c      	movs	r3, #12
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	e7d6      	b.n	80052fa <_free_r+0x22>
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	1821      	adds	r1, r4, r0
 8005350:	428b      	cmp	r3, r1
 8005352:	bf04      	itt	eq
 8005354:	6819      	ldreq	r1, [r3, #0]
 8005356:	685b      	ldreq	r3, [r3, #4]
 8005358:	6063      	str	r3, [r4, #4]
 800535a:	bf04      	itt	eq
 800535c:	1809      	addeq	r1, r1, r0
 800535e:	6021      	streq	r1, [r4, #0]
 8005360:	6054      	str	r4, [r2, #4]
 8005362:	e7ca      	b.n	80052fa <_free_r+0x22>
 8005364:	bd38      	pop	{r3, r4, r5, pc}
 8005366:	bf00      	nop
 8005368:	2000044c 	.word	0x2000044c

0800536c <sbrk_aligned>:
 800536c:	b570      	push	{r4, r5, r6, lr}
 800536e:	4e0f      	ldr	r6, [pc, #60]	@ (80053ac <sbrk_aligned+0x40>)
 8005370:	460c      	mov	r4, r1
 8005372:	6831      	ldr	r1, [r6, #0]
 8005374:	4605      	mov	r5, r0
 8005376:	b911      	cbnz	r1, 800537e <sbrk_aligned+0x12>
 8005378:	f000 fcb6 	bl	8005ce8 <_sbrk_r>
 800537c:	6030      	str	r0, [r6, #0]
 800537e:	4621      	mov	r1, r4
 8005380:	4628      	mov	r0, r5
 8005382:	f000 fcb1 	bl	8005ce8 <_sbrk_r>
 8005386:	1c43      	adds	r3, r0, #1
 8005388:	d103      	bne.n	8005392 <sbrk_aligned+0x26>
 800538a:	f04f 34ff 	mov.w	r4, #4294967295
 800538e:	4620      	mov	r0, r4
 8005390:	bd70      	pop	{r4, r5, r6, pc}
 8005392:	1cc4      	adds	r4, r0, #3
 8005394:	f024 0403 	bic.w	r4, r4, #3
 8005398:	42a0      	cmp	r0, r4
 800539a:	d0f8      	beq.n	800538e <sbrk_aligned+0x22>
 800539c:	1a21      	subs	r1, r4, r0
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 fca2 	bl	8005ce8 <_sbrk_r>
 80053a4:	3001      	adds	r0, #1
 80053a6:	d1f2      	bne.n	800538e <sbrk_aligned+0x22>
 80053a8:	e7ef      	b.n	800538a <sbrk_aligned+0x1e>
 80053aa:	bf00      	nop
 80053ac:	20000448 	.word	0x20000448

080053b0 <_malloc_r>:
 80053b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053b4:	1ccd      	adds	r5, r1, #3
 80053b6:	f025 0503 	bic.w	r5, r5, #3
 80053ba:	3508      	adds	r5, #8
 80053bc:	2d0c      	cmp	r5, #12
 80053be:	bf38      	it	cc
 80053c0:	250c      	movcc	r5, #12
 80053c2:	2d00      	cmp	r5, #0
 80053c4:	4606      	mov	r6, r0
 80053c6:	db01      	blt.n	80053cc <_malloc_r+0x1c>
 80053c8:	42a9      	cmp	r1, r5
 80053ca:	d904      	bls.n	80053d6 <_malloc_r+0x26>
 80053cc:	230c      	movs	r3, #12
 80053ce:	6033      	str	r3, [r6, #0]
 80053d0:	2000      	movs	r0, #0
 80053d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054ac <_malloc_r+0xfc>
 80053da:	f000 f869 	bl	80054b0 <__malloc_lock>
 80053de:	f8d8 3000 	ldr.w	r3, [r8]
 80053e2:	461c      	mov	r4, r3
 80053e4:	bb44      	cbnz	r4, 8005438 <_malloc_r+0x88>
 80053e6:	4629      	mov	r1, r5
 80053e8:	4630      	mov	r0, r6
 80053ea:	f7ff ffbf 	bl	800536c <sbrk_aligned>
 80053ee:	1c43      	adds	r3, r0, #1
 80053f0:	4604      	mov	r4, r0
 80053f2:	d158      	bne.n	80054a6 <_malloc_r+0xf6>
 80053f4:	f8d8 4000 	ldr.w	r4, [r8]
 80053f8:	4627      	mov	r7, r4
 80053fa:	2f00      	cmp	r7, #0
 80053fc:	d143      	bne.n	8005486 <_malloc_r+0xd6>
 80053fe:	2c00      	cmp	r4, #0
 8005400:	d04b      	beq.n	800549a <_malloc_r+0xea>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	4639      	mov	r1, r7
 8005406:	4630      	mov	r0, r6
 8005408:	eb04 0903 	add.w	r9, r4, r3
 800540c:	f000 fc6c 	bl	8005ce8 <_sbrk_r>
 8005410:	4581      	cmp	r9, r0
 8005412:	d142      	bne.n	800549a <_malloc_r+0xea>
 8005414:	6821      	ldr	r1, [r4, #0]
 8005416:	1a6d      	subs	r5, r5, r1
 8005418:	4629      	mov	r1, r5
 800541a:	4630      	mov	r0, r6
 800541c:	f7ff ffa6 	bl	800536c <sbrk_aligned>
 8005420:	3001      	adds	r0, #1
 8005422:	d03a      	beq.n	800549a <_malloc_r+0xea>
 8005424:	6823      	ldr	r3, [r4, #0]
 8005426:	442b      	add	r3, r5
 8005428:	6023      	str	r3, [r4, #0]
 800542a:	f8d8 3000 	ldr.w	r3, [r8]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	bb62      	cbnz	r2, 800548c <_malloc_r+0xdc>
 8005432:	f8c8 7000 	str.w	r7, [r8]
 8005436:	e00f      	b.n	8005458 <_malloc_r+0xa8>
 8005438:	6822      	ldr	r2, [r4, #0]
 800543a:	1b52      	subs	r2, r2, r5
 800543c:	d420      	bmi.n	8005480 <_malloc_r+0xd0>
 800543e:	2a0b      	cmp	r2, #11
 8005440:	d917      	bls.n	8005472 <_malloc_r+0xc2>
 8005442:	1961      	adds	r1, r4, r5
 8005444:	42a3      	cmp	r3, r4
 8005446:	6025      	str	r5, [r4, #0]
 8005448:	bf18      	it	ne
 800544a:	6059      	strne	r1, [r3, #4]
 800544c:	6863      	ldr	r3, [r4, #4]
 800544e:	bf08      	it	eq
 8005450:	f8c8 1000 	streq.w	r1, [r8]
 8005454:	5162      	str	r2, [r4, r5]
 8005456:	604b      	str	r3, [r1, #4]
 8005458:	4630      	mov	r0, r6
 800545a:	f000 f82f 	bl	80054bc <__malloc_unlock>
 800545e:	f104 000b 	add.w	r0, r4, #11
 8005462:	1d23      	adds	r3, r4, #4
 8005464:	f020 0007 	bic.w	r0, r0, #7
 8005468:	1ac2      	subs	r2, r0, r3
 800546a:	bf1c      	itt	ne
 800546c:	1a1b      	subne	r3, r3, r0
 800546e:	50a3      	strne	r3, [r4, r2]
 8005470:	e7af      	b.n	80053d2 <_malloc_r+0x22>
 8005472:	6862      	ldr	r2, [r4, #4]
 8005474:	42a3      	cmp	r3, r4
 8005476:	bf0c      	ite	eq
 8005478:	f8c8 2000 	streq.w	r2, [r8]
 800547c:	605a      	strne	r2, [r3, #4]
 800547e:	e7eb      	b.n	8005458 <_malloc_r+0xa8>
 8005480:	4623      	mov	r3, r4
 8005482:	6864      	ldr	r4, [r4, #4]
 8005484:	e7ae      	b.n	80053e4 <_malloc_r+0x34>
 8005486:	463c      	mov	r4, r7
 8005488:	687f      	ldr	r7, [r7, #4]
 800548a:	e7b6      	b.n	80053fa <_malloc_r+0x4a>
 800548c:	461a      	mov	r2, r3
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	42a3      	cmp	r3, r4
 8005492:	d1fb      	bne.n	800548c <_malloc_r+0xdc>
 8005494:	2300      	movs	r3, #0
 8005496:	6053      	str	r3, [r2, #4]
 8005498:	e7de      	b.n	8005458 <_malloc_r+0xa8>
 800549a:	230c      	movs	r3, #12
 800549c:	6033      	str	r3, [r6, #0]
 800549e:	4630      	mov	r0, r6
 80054a0:	f000 f80c 	bl	80054bc <__malloc_unlock>
 80054a4:	e794      	b.n	80053d0 <_malloc_r+0x20>
 80054a6:	6005      	str	r5, [r0, #0]
 80054a8:	e7d6      	b.n	8005458 <_malloc_r+0xa8>
 80054aa:	bf00      	nop
 80054ac:	2000044c 	.word	0x2000044c

080054b0 <__malloc_lock>:
 80054b0:	4801      	ldr	r0, [pc, #4]	@ (80054b8 <__malloc_lock+0x8>)
 80054b2:	f7ff bf0e 	b.w	80052d2 <__retarget_lock_acquire_recursive>
 80054b6:	bf00      	nop
 80054b8:	20000444 	.word	0x20000444

080054bc <__malloc_unlock>:
 80054bc:	4801      	ldr	r0, [pc, #4]	@ (80054c4 <__malloc_unlock+0x8>)
 80054be:	f7ff bf09 	b.w	80052d4 <__retarget_lock_release_recursive>
 80054c2:	bf00      	nop
 80054c4:	20000444 	.word	0x20000444

080054c8 <__sfputc_r>:
 80054c8:	6893      	ldr	r3, [r2, #8]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	b410      	push	{r4}
 80054d0:	6093      	str	r3, [r2, #8]
 80054d2:	da08      	bge.n	80054e6 <__sfputc_r+0x1e>
 80054d4:	6994      	ldr	r4, [r2, #24]
 80054d6:	42a3      	cmp	r3, r4
 80054d8:	db01      	blt.n	80054de <__sfputc_r+0x16>
 80054da:	290a      	cmp	r1, #10
 80054dc:	d103      	bne.n	80054e6 <__sfputc_r+0x1e>
 80054de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054e2:	f000 bb6d 	b.w	8005bc0 <__swbuf_r>
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	1c58      	adds	r0, r3, #1
 80054ea:	6010      	str	r0, [r2, #0]
 80054ec:	7019      	strb	r1, [r3, #0]
 80054ee:	4608      	mov	r0, r1
 80054f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <__sfputs_r>:
 80054f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f8:	4606      	mov	r6, r0
 80054fa:	460f      	mov	r7, r1
 80054fc:	4614      	mov	r4, r2
 80054fe:	18d5      	adds	r5, r2, r3
 8005500:	42ac      	cmp	r4, r5
 8005502:	d101      	bne.n	8005508 <__sfputs_r+0x12>
 8005504:	2000      	movs	r0, #0
 8005506:	e007      	b.n	8005518 <__sfputs_r+0x22>
 8005508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800550c:	463a      	mov	r2, r7
 800550e:	4630      	mov	r0, r6
 8005510:	f7ff ffda 	bl	80054c8 <__sfputc_r>
 8005514:	1c43      	adds	r3, r0, #1
 8005516:	d1f3      	bne.n	8005500 <__sfputs_r+0xa>
 8005518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800551c <_vfiprintf_r>:
 800551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005520:	460d      	mov	r5, r1
 8005522:	b09d      	sub	sp, #116	@ 0x74
 8005524:	4614      	mov	r4, r2
 8005526:	4698      	mov	r8, r3
 8005528:	4606      	mov	r6, r0
 800552a:	b118      	cbz	r0, 8005534 <_vfiprintf_r+0x18>
 800552c:	6a03      	ldr	r3, [r0, #32]
 800552e:	b90b      	cbnz	r3, 8005534 <_vfiprintf_r+0x18>
 8005530:	f7ff fdca 	bl	80050c8 <__sinit>
 8005534:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005536:	07d9      	lsls	r1, r3, #31
 8005538:	d405      	bmi.n	8005546 <_vfiprintf_r+0x2a>
 800553a:	89ab      	ldrh	r3, [r5, #12]
 800553c:	059a      	lsls	r2, r3, #22
 800553e:	d402      	bmi.n	8005546 <_vfiprintf_r+0x2a>
 8005540:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005542:	f7ff fec6 	bl	80052d2 <__retarget_lock_acquire_recursive>
 8005546:	89ab      	ldrh	r3, [r5, #12]
 8005548:	071b      	lsls	r3, r3, #28
 800554a:	d501      	bpl.n	8005550 <_vfiprintf_r+0x34>
 800554c:	692b      	ldr	r3, [r5, #16]
 800554e:	b99b      	cbnz	r3, 8005578 <_vfiprintf_r+0x5c>
 8005550:	4629      	mov	r1, r5
 8005552:	4630      	mov	r0, r6
 8005554:	f000 fb72 	bl	8005c3c <__swsetup_r>
 8005558:	b170      	cbz	r0, 8005578 <_vfiprintf_r+0x5c>
 800555a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800555c:	07dc      	lsls	r4, r3, #31
 800555e:	d504      	bpl.n	800556a <_vfiprintf_r+0x4e>
 8005560:	f04f 30ff 	mov.w	r0, #4294967295
 8005564:	b01d      	add	sp, #116	@ 0x74
 8005566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800556a:	89ab      	ldrh	r3, [r5, #12]
 800556c:	0598      	lsls	r0, r3, #22
 800556e:	d4f7      	bmi.n	8005560 <_vfiprintf_r+0x44>
 8005570:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005572:	f7ff feaf 	bl	80052d4 <__retarget_lock_release_recursive>
 8005576:	e7f3      	b.n	8005560 <_vfiprintf_r+0x44>
 8005578:	2300      	movs	r3, #0
 800557a:	9309      	str	r3, [sp, #36]	@ 0x24
 800557c:	2320      	movs	r3, #32
 800557e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005582:	f8cd 800c 	str.w	r8, [sp, #12]
 8005586:	2330      	movs	r3, #48	@ 0x30
 8005588:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005738 <_vfiprintf_r+0x21c>
 800558c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005590:	f04f 0901 	mov.w	r9, #1
 8005594:	4623      	mov	r3, r4
 8005596:	469a      	mov	sl, r3
 8005598:	f813 2b01 	ldrb.w	r2, [r3], #1
 800559c:	b10a      	cbz	r2, 80055a2 <_vfiprintf_r+0x86>
 800559e:	2a25      	cmp	r2, #37	@ 0x25
 80055a0:	d1f9      	bne.n	8005596 <_vfiprintf_r+0x7a>
 80055a2:	ebba 0b04 	subs.w	fp, sl, r4
 80055a6:	d00b      	beq.n	80055c0 <_vfiprintf_r+0xa4>
 80055a8:	465b      	mov	r3, fp
 80055aa:	4622      	mov	r2, r4
 80055ac:	4629      	mov	r1, r5
 80055ae:	4630      	mov	r0, r6
 80055b0:	f7ff ffa1 	bl	80054f6 <__sfputs_r>
 80055b4:	3001      	adds	r0, #1
 80055b6:	f000 80a7 	beq.w	8005708 <_vfiprintf_r+0x1ec>
 80055ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80055bc:	445a      	add	r2, fp
 80055be:	9209      	str	r2, [sp, #36]	@ 0x24
 80055c0:	f89a 3000 	ldrb.w	r3, [sl]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 809f 	beq.w	8005708 <_vfiprintf_r+0x1ec>
 80055ca:	2300      	movs	r3, #0
 80055cc:	f04f 32ff 	mov.w	r2, #4294967295
 80055d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80055d4:	f10a 0a01 	add.w	sl, sl, #1
 80055d8:	9304      	str	r3, [sp, #16]
 80055da:	9307      	str	r3, [sp, #28]
 80055dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80055e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80055e2:	4654      	mov	r4, sl
 80055e4:	2205      	movs	r2, #5
 80055e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055ea:	4853      	ldr	r0, [pc, #332]	@ (8005738 <_vfiprintf_r+0x21c>)
 80055ec:	f7fa fe10 	bl	8000210 <memchr>
 80055f0:	9a04      	ldr	r2, [sp, #16]
 80055f2:	b9d8      	cbnz	r0, 800562c <_vfiprintf_r+0x110>
 80055f4:	06d1      	lsls	r1, r2, #27
 80055f6:	bf44      	itt	mi
 80055f8:	2320      	movmi	r3, #32
 80055fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80055fe:	0713      	lsls	r3, r2, #28
 8005600:	bf44      	itt	mi
 8005602:	232b      	movmi	r3, #43	@ 0x2b
 8005604:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005608:	f89a 3000 	ldrb.w	r3, [sl]
 800560c:	2b2a      	cmp	r3, #42	@ 0x2a
 800560e:	d015      	beq.n	800563c <_vfiprintf_r+0x120>
 8005610:	9a07      	ldr	r2, [sp, #28]
 8005612:	4654      	mov	r4, sl
 8005614:	2000      	movs	r0, #0
 8005616:	f04f 0c0a 	mov.w	ip, #10
 800561a:	4621      	mov	r1, r4
 800561c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005620:	3b30      	subs	r3, #48	@ 0x30
 8005622:	2b09      	cmp	r3, #9
 8005624:	d94b      	bls.n	80056be <_vfiprintf_r+0x1a2>
 8005626:	b1b0      	cbz	r0, 8005656 <_vfiprintf_r+0x13a>
 8005628:	9207      	str	r2, [sp, #28]
 800562a:	e014      	b.n	8005656 <_vfiprintf_r+0x13a>
 800562c:	eba0 0308 	sub.w	r3, r0, r8
 8005630:	fa09 f303 	lsl.w	r3, r9, r3
 8005634:	4313      	orrs	r3, r2
 8005636:	9304      	str	r3, [sp, #16]
 8005638:	46a2      	mov	sl, r4
 800563a:	e7d2      	b.n	80055e2 <_vfiprintf_r+0xc6>
 800563c:	9b03      	ldr	r3, [sp, #12]
 800563e:	1d19      	adds	r1, r3, #4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	9103      	str	r1, [sp, #12]
 8005644:	2b00      	cmp	r3, #0
 8005646:	bfbb      	ittet	lt
 8005648:	425b      	neglt	r3, r3
 800564a:	f042 0202 	orrlt.w	r2, r2, #2
 800564e:	9307      	strge	r3, [sp, #28]
 8005650:	9307      	strlt	r3, [sp, #28]
 8005652:	bfb8      	it	lt
 8005654:	9204      	strlt	r2, [sp, #16]
 8005656:	7823      	ldrb	r3, [r4, #0]
 8005658:	2b2e      	cmp	r3, #46	@ 0x2e
 800565a:	d10a      	bne.n	8005672 <_vfiprintf_r+0x156>
 800565c:	7863      	ldrb	r3, [r4, #1]
 800565e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005660:	d132      	bne.n	80056c8 <_vfiprintf_r+0x1ac>
 8005662:	9b03      	ldr	r3, [sp, #12]
 8005664:	1d1a      	adds	r2, r3, #4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	9203      	str	r2, [sp, #12]
 800566a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800566e:	3402      	adds	r4, #2
 8005670:	9305      	str	r3, [sp, #20]
 8005672:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005748 <_vfiprintf_r+0x22c>
 8005676:	7821      	ldrb	r1, [r4, #0]
 8005678:	2203      	movs	r2, #3
 800567a:	4650      	mov	r0, sl
 800567c:	f7fa fdc8 	bl	8000210 <memchr>
 8005680:	b138      	cbz	r0, 8005692 <_vfiprintf_r+0x176>
 8005682:	9b04      	ldr	r3, [sp, #16]
 8005684:	eba0 000a 	sub.w	r0, r0, sl
 8005688:	2240      	movs	r2, #64	@ 0x40
 800568a:	4082      	lsls	r2, r0
 800568c:	4313      	orrs	r3, r2
 800568e:	3401      	adds	r4, #1
 8005690:	9304      	str	r3, [sp, #16]
 8005692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005696:	4829      	ldr	r0, [pc, #164]	@ (800573c <_vfiprintf_r+0x220>)
 8005698:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800569c:	2206      	movs	r2, #6
 800569e:	f7fa fdb7 	bl	8000210 <memchr>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d03f      	beq.n	8005726 <_vfiprintf_r+0x20a>
 80056a6:	4b26      	ldr	r3, [pc, #152]	@ (8005740 <_vfiprintf_r+0x224>)
 80056a8:	bb1b      	cbnz	r3, 80056f2 <_vfiprintf_r+0x1d6>
 80056aa:	9b03      	ldr	r3, [sp, #12]
 80056ac:	3307      	adds	r3, #7
 80056ae:	f023 0307 	bic.w	r3, r3, #7
 80056b2:	3308      	adds	r3, #8
 80056b4:	9303      	str	r3, [sp, #12]
 80056b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b8:	443b      	add	r3, r7
 80056ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80056bc:	e76a      	b.n	8005594 <_vfiprintf_r+0x78>
 80056be:	fb0c 3202 	mla	r2, ip, r2, r3
 80056c2:	460c      	mov	r4, r1
 80056c4:	2001      	movs	r0, #1
 80056c6:	e7a8      	b.n	800561a <_vfiprintf_r+0xfe>
 80056c8:	2300      	movs	r3, #0
 80056ca:	3401      	adds	r4, #1
 80056cc:	9305      	str	r3, [sp, #20]
 80056ce:	4619      	mov	r1, r3
 80056d0:	f04f 0c0a 	mov.w	ip, #10
 80056d4:	4620      	mov	r0, r4
 80056d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80056da:	3a30      	subs	r2, #48	@ 0x30
 80056dc:	2a09      	cmp	r2, #9
 80056de:	d903      	bls.n	80056e8 <_vfiprintf_r+0x1cc>
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0c6      	beq.n	8005672 <_vfiprintf_r+0x156>
 80056e4:	9105      	str	r1, [sp, #20]
 80056e6:	e7c4      	b.n	8005672 <_vfiprintf_r+0x156>
 80056e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80056ec:	4604      	mov	r4, r0
 80056ee:	2301      	movs	r3, #1
 80056f0:	e7f0      	b.n	80056d4 <_vfiprintf_r+0x1b8>
 80056f2:	ab03      	add	r3, sp, #12
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	462a      	mov	r2, r5
 80056f8:	4b12      	ldr	r3, [pc, #72]	@ (8005744 <_vfiprintf_r+0x228>)
 80056fa:	a904      	add	r1, sp, #16
 80056fc:	4630      	mov	r0, r6
 80056fe:	f3af 8000 	nop.w
 8005702:	4607      	mov	r7, r0
 8005704:	1c78      	adds	r0, r7, #1
 8005706:	d1d6      	bne.n	80056b6 <_vfiprintf_r+0x19a>
 8005708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800570a:	07d9      	lsls	r1, r3, #31
 800570c:	d405      	bmi.n	800571a <_vfiprintf_r+0x1fe>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	059a      	lsls	r2, r3, #22
 8005712:	d402      	bmi.n	800571a <_vfiprintf_r+0x1fe>
 8005714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005716:	f7ff fddd 	bl	80052d4 <__retarget_lock_release_recursive>
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	065b      	lsls	r3, r3, #25
 800571e:	f53f af1f 	bmi.w	8005560 <_vfiprintf_r+0x44>
 8005722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005724:	e71e      	b.n	8005564 <_vfiprintf_r+0x48>
 8005726:	ab03      	add	r3, sp, #12
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	462a      	mov	r2, r5
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <_vfiprintf_r+0x228>)
 800572e:	a904      	add	r1, sp, #16
 8005730:	4630      	mov	r0, r6
 8005732:	f000 f879 	bl	8005828 <_printf_i>
 8005736:	e7e4      	b.n	8005702 <_vfiprintf_r+0x1e6>
 8005738:	080071c8 	.word	0x080071c8
 800573c:	080071d2 	.word	0x080071d2
 8005740:	00000000 	.word	0x00000000
 8005744:	080054f7 	.word	0x080054f7
 8005748:	080071ce 	.word	0x080071ce

0800574c <_printf_common>:
 800574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	4616      	mov	r6, r2
 8005752:	4698      	mov	r8, r3
 8005754:	688a      	ldr	r2, [r1, #8]
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800575c:	4293      	cmp	r3, r2
 800575e:	bfb8      	it	lt
 8005760:	4613      	movlt	r3, r2
 8005762:	6033      	str	r3, [r6, #0]
 8005764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005768:	4607      	mov	r7, r0
 800576a:	460c      	mov	r4, r1
 800576c:	b10a      	cbz	r2, 8005772 <_printf_common+0x26>
 800576e:	3301      	adds	r3, #1
 8005770:	6033      	str	r3, [r6, #0]
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	0699      	lsls	r1, r3, #26
 8005776:	bf42      	ittt	mi
 8005778:	6833      	ldrmi	r3, [r6, #0]
 800577a:	3302      	addmi	r3, #2
 800577c:	6033      	strmi	r3, [r6, #0]
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	f015 0506 	ands.w	r5, r5, #6
 8005784:	d106      	bne.n	8005794 <_printf_common+0x48>
 8005786:	f104 0a19 	add.w	sl, r4, #25
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	6832      	ldr	r2, [r6, #0]
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	42ab      	cmp	r3, r5
 8005792:	dc26      	bgt.n	80057e2 <_printf_common+0x96>
 8005794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	3b00      	subs	r3, #0
 800579c:	bf18      	it	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	0692      	lsls	r2, r2, #26
 80057a2:	d42b      	bmi.n	80057fc <_printf_common+0xb0>
 80057a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057a8:	4641      	mov	r1, r8
 80057aa:	4638      	mov	r0, r7
 80057ac:	47c8      	blx	r9
 80057ae:	3001      	adds	r0, #1
 80057b0:	d01e      	beq.n	80057f0 <_printf_common+0xa4>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	6922      	ldr	r2, [r4, #16]
 80057b6:	f003 0306 	and.w	r3, r3, #6
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	bf02      	ittt	eq
 80057be:	68e5      	ldreq	r5, [r4, #12]
 80057c0:	6833      	ldreq	r3, [r6, #0]
 80057c2:	1aed      	subeq	r5, r5, r3
 80057c4:	68a3      	ldr	r3, [r4, #8]
 80057c6:	bf0c      	ite	eq
 80057c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057cc:	2500      	movne	r5, #0
 80057ce:	4293      	cmp	r3, r2
 80057d0:	bfc4      	itt	gt
 80057d2:	1a9b      	subgt	r3, r3, r2
 80057d4:	18ed      	addgt	r5, r5, r3
 80057d6:	2600      	movs	r6, #0
 80057d8:	341a      	adds	r4, #26
 80057da:	42b5      	cmp	r5, r6
 80057dc:	d11a      	bne.n	8005814 <_printf_common+0xc8>
 80057de:	2000      	movs	r0, #0
 80057e0:	e008      	b.n	80057f4 <_printf_common+0xa8>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4652      	mov	r2, sl
 80057e6:	4641      	mov	r1, r8
 80057e8:	4638      	mov	r0, r7
 80057ea:	47c8      	blx	r9
 80057ec:	3001      	adds	r0, #1
 80057ee:	d103      	bne.n	80057f8 <_printf_common+0xac>
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	3501      	adds	r5, #1
 80057fa:	e7c6      	b.n	800578a <_printf_common+0x3e>
 80057fc:	18e1      	adds	r1, r4, r3
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	2030      	movs	r0, #48	@ 0x30
 8005802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005806:	4422      	add	r2, r4
 8005808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800580c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005810:	3302      	adds	r3, #2
 8005812:	e7c7      	b.n	80057a4 <_printf_common+0x58>
 8005814:	2301      	movs	r3, #1
 8005816:	4622      	mov	r2, r4
 8005818:	4641      	mov	r1, r8
 800581a:	4638      	mov	r0, r7
 800581c:	47c8      	blx	r9
 800581e:	3001      	adds	r0, #1
 8005820:	d0e6      	beq.n	80057f0 <_printf_common+0xa4>
 8005822:	3601      	adds	r6, #1
 8005824:	e7d9      	b.n	80057da <_printf_common+0x8e>
	...

08005828 <_printf_i>:
 8005828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800582c:	7e0f      	ldrb	r7, [r1, #24]
 800582e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005830:	2f78      	cmp	r7, #120	@ 0x78
 8005832:	4691      	mov	r9, r2
 8005834:	4680      	mov	r8, r0
 8005836:	460c      	mov	r4, r1
 8005838:	469a      	mov	sl, r3
 800583a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800583e:	d807      	bhi.n	8005850 <_printf_i+0x28>
 8005840:	2f62      	cmp	r7, #98	@ 0x62
 8005842:	d80a      	bhi.n	800585a <_printf_i+0x32>
 8005844:	2f00      	cmp	r7, #0
 8005846:	f000 80d2 	beq.w	80059ee <_printf_i+0x1c6>
 800584a:	2f58      	cmp	r7, #88	@ 0x58
 800584c:	f000 80b9 	beq.w	80059c2 <_printf_i+0x19a>
 8005850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005858:	e03a      	b.n	80058d0 <_printf_i+0xa8>
 800585a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800585e:	2b15      	cmp	r3, #21
 8005860:	d8f6      	bhi.n	8005850 <_printf_i+0x28>
 8005862:	a101      	add	r1, pc, #4	@ (adr r1, 8005868 <_printf_i+0x40>)
 8005864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005868:	080058c1 	.word	0x080058c1
 800586c:	080058d5 	.word	0x080058d5
 8005870:	08005851 	.word	0x08005851
 8005874:	08005851 	.word	0x08005851
 8005878:	08005851 	.word	0x08005851
 800587c:	08005851 	.word	0x08005851
 8005880:	080058d5 	.word	0x080058d5
 8005884:	08005851 	.word	0x08005851
 8005888:	08005851 	.word	0x08005851
 800588c:	08005851 	.word	0x08005851
 8005890:	08005851 	.word	0x08005851
 8005894:	080059d5 	.word	0x080059d5
 8005898:	080058ff 	.word	0x080058ff
 800589c:	0800598f 	.word	0x0800598f
 80058a0:	08005851 	.word	0x08005851
 80058a4:	08005851 	.word	0x08005851
 80058a8:	080059f7 	.word	0x080059f7
 80058ac:	08005851 	.word	0x08005851
 80058b0:	080058ff 	.word	0x080058ff
 80058b4:	08005851 	.word	0x08005851
 80058b8:	08005851 	.word	0x08005851
 80058bc:	08005997 	.word	0x08005997
 80058c0:	6833      	ldr	r3, [r6, #0]
 80058c2:	1d1a      	adds	r2, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6032      	str	r2, [r6, #0]
 80058c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058d0:	2301      	movs	r3, #1
 80058d2:	e09d      	b.n	8005a10 <_printf_i+0x1e8>
 80058d4:	6833      	ldr	r3, [r6, #0]
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	1d19      	adds	r1, r3, #4
 80058da:	6031      	str	r1, [r6, #0]
 80058dc:	0606      	lsls	r6, r0, #24
 80058de:	d501      	bpl.n	80058e4 <_printf_i+0xbc>
 80058e0:	681d      	ldr	r5, [r3, #0]
 80058e2:	e003      	b.n	80058ec <_printf_i+0xc4>
 80058e4:	0645      	lsls	r5, r0, #25
 80058e6:	d5fb      	bpl.n	80058e0 <_printf_i+0xb8>
 80058e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	da03      	bge.n	80058f8 <_printf_i+0xd0>
 80058f0:	232d      	movs	r3, #45	@ 0x2d
 80058f2:	426d      	negs	r5, r5
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f8:	4859      	ldr	r0, [pc, #356]	@ (8005a60 <_printf_i+0x238>)
 80058fa:	230a      	movs	r3, #10
 80058fc:	e011      	b.n	8005922 <_printf_i+0xfa>
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	0608      	lsls	r0, r1, #24
 8005904:	f853 5b04 	ldr.w	r5, [r3], #4
 8005908:	d402      	bmi.n	8005910 <_printf_i+0xe8>
 800590a:	0649      	lsls	r1, r1, #25
 800590c:	bf48      	it	mi
 800590e:	b2ad      	uxthmi	r5, r5
 8005910:	2f6f      	cmp	r7, #111	@ 0x6f
 8005912:	4853      	ldr	r0, [pc, #332]	@ (8005a60 <_printf_i+0x238>)
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	bf14      	ite	ne
 8005918:	230a      	movne	r3, #10
 800591a:	2308      	moveq	r3, #8
 800591c:	2100      	movs	r1, #0
 800591e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005922:	6866      	ldr	r6, [r4, #4]
 8005924:	60a6      	str	r6, [r4, #8]
 8005926:	2e00      	cmp	r6, #0
 8005928:	bfa2      	ittt	ge
 800592a:	6821      	ldrge	r1, [r4, #0]
 800592c:	f021 0104 	bicge.w	r1, r1, #4
 8005930:	6021      	strge	r1, [r4, #0]
 8005932:	b90d      	cbnz	r5, 8005938 <_printf_i+0x110>
 8005934:	2e00      	cmp	r6, #0
 8005936:	d04b      	beq.n	80059d0 <_printf_i+0x1a8>
 8005938:	4616      	mov	r6, r2
 800593a:	fbb5 f1f3 	udiv	r1, r5, r3
 800593e:	fb03 5711 	mls	r7, r3, r1, r5
 8005942:	5dc7      	ldrb	r7, [r0, r7]
 8005944:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005948:	462f      	mov	r7, r5
 800594a:	42bb      	cmp	r3, r7
 800594c:	460d      	mov	r5, r1
 800594e:	d9f4      	bls.n	800593a <_printf_i+0x112>
 8005950:	2b08      	cmp	r3, #8
 8005952:	d10b      	bne.n	800596c <_printf_i+0x144>
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	07df      	lsls	r7, r3, #31
 8005958:	d508      	bpl.n	800596c <_printf_i+0x144>
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	6861      	ldr	r1, [r4, #4]
 800595e:	4299      	cmp	r1, r3
 8005960:	bfde      	ittt	le
 8005962:	2330      	movle	r3, #48	@ 0x30
 8005964:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005968:	f106 36ff 	addle.w	r6, r6, #4294967295
 800596c:	1b92      	subs	r2, r2, r6
 800596e:	6122      	str	r2, [r4, #16]
 8005970:	f8cd a000 	str.w	sl, [sp]
 8005974:	464b      	mov	r3, r9
 8005976:	aa03      	add	r2, sp, #12
 8005978:	4621      	mov	r1, r4
 800597a:	4640      	mov	r0, r8
 800597c:	f7ff fee6 	bl	800574c <_printf_common>
 8005980:	3001      	adds	r0, #1
 8005982:	d14a      	bne.n	8005a1a <_printf_i+0x1f2>
 8005984:	f04f 30ff 	mov.w	r0, #4294967295
 8005988:	b004      	add	sp, #16
 800598a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	4833      	ldr	r0, [pc, #204]	@ (8005a64 <_printf_i+0x23c>)
 8005998:	2778      	movs	r7, #120	@ 0x78
 800599a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	6831      	ldr	r1, [r6, #0]
 80059a2:	061f      	lsls	r7, r3, #24
 80059a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80059a8:	d402      	bmi.n	80059b0 <_printf_i+0x188>
 80059aa:	065f      	lsls	r7, r3, #25
 80059ac:	bf48      	it	mi
 80059ae:	b2ad      	uxthmi	r5, r5
 80059b0:	6031      	str	r1, [r6, #0]
 80059b2:	07d9      	lsls	r1, r3, #31
 80059b4:	bf44      	itt	mi
 80059b6:	f043 0320 	orrmi.w	r3, r3, #32
 80059ba:	6023      	strmi	r3, [r4, #0]
 80059bc:	b11d      	cbz	r5, 80059c6 <_printf_i+0x19e>
 80059be:	2310      	movs	r3, #16
 80059c0:	e7ac      	b.n	800591c <_printf_i+0xf4>
 80059c2:	4827      	ldr	r0, [pc, #156]	@ (8005a60 <_printf_i+0x238>)
 80059c4:	e7e9      	b.n	800599a <_printf_i+0x172>
 80059c6:	6823      	ldr	r3, [r4, #0]
 80059c8:	f023 0320 	bic.w	r3, r3, #32
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	e7f6      	b.n	80059be <_printf_i+0x196>
 80059d0:	4616      	mov	r6, r2
 80059d2:	e7bd      	b.n	8005950 <_printf_i+0x128>
 80059d4:	6833      	ldr	r3, [r6, #0]
 80059d6:	6825      	ldr	r5, [r4, #0]
 80059d8:	6961      	ldr	r1, [r4, #20]
 80059da:	1d18      	adds	r0, r3, #4
 80059dc:	6030      	str	r0, [r6, #0]
 80059de:	062e      	lsls	r6, r5, #24
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	d501      	bpl.n	80059e8 <_printf_i+0x1c0>
 80059e4:	6019      	str	r1, [r3, #0]
 80059e6:	e002      	b.n	80059ee <_printf_i+0x1c6>
 80059e8:	0668      	lsls	r0, r5, #25
 80059ea:	d5fb      	bpl.n	80059e4 <_printf_i+0x1bc>
 80059ec:	8019      	strh	r1, [r3, #0]
 80059ee:	2300      	movs	r3, #0
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	4616      	mov	r6, r2
 80059f4:	e7bc      	b.n	8005970 <_printf_i+0x148>
 80059f6:	6833      	ldr	r3, [r6, #0]
 80059f8:	1d1a      	adds	r2, r3, #4
 80059fa:	6032      	str	r2, [r6, #0]
 80059fc:	681e      	ldr	r6, [r3, #0]
 80059fe:	6862      	ldr	r2, [r4, #4]
 8005a00:	2100      	movs	r1, #0
 8005a02:	4630      	mov	r0, r6
 8005a04:	f7fa fc04 	bl	8000210 <memchr>
 8005a08:	b108      	cbz	r0, 8005a0e <_printf_i+0x1e6>
 8005a0a:	1b80      	subs	r0, r0, r6
 8005a0c:	6060      	str	r0, [r4, #4]
 8005a0e:	6863      	ldr	r3, [r4, #4]
 8005a10:	6123      	str	r3, [r4, #16]
 8005a12:	2300      	movs	r3, #0
 8005a14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a18:	e7aa      	b.n	8005970 <_printf_i+0x148>
 8005a1a:	6923      	ldr	r3, [r4, #16]
 8005a1c:	4632      	mov	r2, r6
 8005a1e:	4649      	mov	r1, r9
 8005a20:	4640      	mov	r0, r8
 8005a22:	47d0      	blx	sl
 8005a24:	3001      	adds	r0, #1
 8005a26:	d0ad      	beq.n	8005984 <_printf_i+0x15c>
 8005a28:	6823      	ldr	r3, [r4, #0]
 8005a2a:	079b      	lsls	r3, r3, #30
 8005a2c:	d413      	bmi.n	8005a56 <_printf_i+0x22e>
 8005a2e:	68e0      	ldr	r0, [r4, #12]
 8005a30:	9b03      	ldr	r3, [sp, #12]
 8005a32:	4298      	cmp	r0, r3
 8005a34:	bfb8      	it	lt
 8005a36:	4618      	movlt	r0, r3
 8005a38:	e7a6      	b.n	8005988 <_printf_i+0x160>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4632      	mov	r2, r6
 8005a3e:	4649      	mov	r1, r9
 8005a40:	4640      	mov	r0, r8
 8005a42:	47d0      	blx	sl
 8005a44:	3001      	adds	r0, #1
 8005a46:	d09d      	beq.n	8005984 <_printf_i+0x15c>
 8005a48:	3501      	adds	r5, #1
 8005a4a:	68e3      	ldr	r3, [r4, #12]
 8005a4c:	9903      	ldr	r1, [sp, #12]
 8005a4e:	1a5b      	subs	r3, r3, r1
 8005a50:	42ab      	cmp	r3, r5
 8005a52:	dcf2      	bgt.n	8005a3a <_printf_i+0x212>
 8005a54:	e7eb      	b.n	8005a2e <_printf_i+0x206>
 8005a56:	2500      	movs	r5, #0
 8005a58:	f104 0619 	add.w	r6, r4, #25
 8005a5c:	e7f5      	b.n	8005a4a <_printf_i+0x222>
 8005a5e:	bf00      	nop
 8005a60:	080071d9 	.word	0x080071d9
 8005a64:	080071ea 	.word	0x080071ea

08005a68 <__sflush_r>:
 8005a68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a70:	0716      	lsls	r6, r2, #28
 8005a72:	4605      	mov	r5, r0
 8005a74:	460c      	mov	r4, r1
 8005a76:	d454      	bmi.n	8005b22 <__sflush_r+0xba>
 8005a78:	684b      	ldr	r3, [r1, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dc02      	bgt.n	8005a84 <__sflush_r+0x1c>
 8005a7e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dd48      	ble.n	8005b16 <__sflush_r+0xae>
 8005a84:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005a86:	2e00      	cmp	r6, #0
 8005a88:	d045      	beq.n	8005b16 <__sflush_r+0xae>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005a90:	682f      	ldr	r7, [r5, #0]
 8005a92:	6a21      	ldr	r1, [r4, #32]
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	d030      	beq.n	8005afa <__sflush_r+0x92>
 8005a98:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	0759      	lsls	r1, r3, #29
 8005a9e:	d505      	bpl.n	8005aac <__sflush_r+0x44>
 8005aa0:	6863      	ldr	r3, [r4, #4]
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005aa6:	b10b      	cbz	r3, 8005aac <__sflush_r+0x44>
 8005aa8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005aaa:	1ad2      	subs	r2, r2, r3
 8005aac:	2300      	movs	r3, #0
 8005aae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ab0:	6a21      	ldr	r1, [r4, #32]
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	47b0      	blx	r6
 8005ab6:	1c43      	adds	r3, r0, #1
 8005ab8:	89a3      	ldrh	r3, [r4, #12]
 8005aba:	d106      	bne.n	8005aca <__sflush_r+0x62>
 8005abc:	6829      	ldr	r1, [r5, #0]
 8005abe:	291d      	cmp	r1, #29
 8005ac0:	d82b      	bhi.n	8005b1a <__sflush_r+0xb2>
 8005ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8005b6c <__sflush_r+0x104>)
 8005ac4:	410a      	asrs	r2, r1
 8005ac6:	07d6      	lsls	r6, r2, #31
 8005ac8:	d427      	bmi.n	8005b1a <__sflush_r+0xb2>
 8005aca:	2200      	movs	r2, #0
 8005acc:	6062      	str	r2, [r4, #4]
 8005ace:	04d9      	lsls	r1, r3, #19
 8005ad0:	6922      	ldr	r2, [r4, #16]
 8005ad2:	6022      	str	r2, [r4, #0]
 8005ad4:	d504      	bpl.n	8005ae0 <__sflush_r+0x78>
 8005ad6:	1c42      	adds	r2, r0, #1
 8005ad8:	d101      	bne.n	8005ade <__sflush_r+0x76>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	b903      	cbnz	r3, 8005ae0 <__sflush_r+0x78>
 8005ade:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ae0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ae2:	602f      	str	r7, [r5, #0]
 8005ae4:	b1b9      	cbz	r1, 8005b16 <__sflush_r+0xae>
 8005ae6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d002      	beq.n	8005af4 <__sflush_r+0x8c>
 8005aee:	4628      	mov	r0, r5
 8005af0:	f7ff fbf2 	bl	80052d8 <_free_r>
 8005af4:	2300      	movs	r3, #0
 8005af6:	6363      	str	r3, [r4, #52]	@ 0x34
 8005af8:	e00d      	b.n	8005b16 <__sflush_r+0xae>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4628      	mov	r0, r5
 8005afe:	47b0      	blx	r6
 8005b00:	4602      	mov	r2, r0
 8005b02:	1c50      	adds	r0, r2, #1
 8005b04:	d1c9      	bne.n	8005a9a <__sflush_r+0x32>
 8005b06:	682b      	ldr	r3, [r5, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d0c6      	beq.n	8005a9a <__sflush_r+0x32>
 8005b0c:	2b1d      	cmp	r3, #29
 8005b0e:	d001      	beq.n	8005b14 <__sflush_r+0xac>
 8005b10:	2b16      	cmp	r3, #22
 8005b12:	d11e      	bne.n	8005b52 <__sflush_r+0xea>
 8005b14:	602f      	str	r7, [r5, #0]
 8005b16:	2000      	movs	r0, #0
 8005b18:	e022      	b.n	8005b60 <__sflush_r+0xf8>
 8005b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b1e:	b21b      	sxth	r3, r3
 8005b20:	e01b      	b.n	8005b5a <__sflush_r+0xf2>
 8005b22:	690f      	ldr	r7, [r1, #16]
 8005b24:	2f00      	cmp	r7, #0
 8005b26:	d0f6      	beq.n	8005b16 <__sflush_r+0xae>
 8005b28:	0793      	lsls	r3, r2, #30
 8005b2a:	680e      	ldr	r6, [r1, #0]
 8005b2c:	bf08      	it	eq
 8005b2e:	694b      	ldreq	r3, [r1, #20]
 8005b30:	600f      	str	r7, [r1, #0]
 8005b32:	bf18      	it	ne
 8005b34:	2300      	movne	r3, #0
 8005b36:	eba6 0807 	sub.w	r8, r6, r7
 8005b3a:	608b      	str	r3, [r1, #8]
 8005b3c:	f1b8 0f00 	cmp.w	r8, #0
 8005b40:	dde9      	ble.n	8005b16 <__sflush_r+0xae>
 8005b42:	6a21      	ldr	r1, [r4, #32]
 8005b44:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005b46:	4643      	mov	r3, r8
 8005b48:	463a      	mov	r2, r7
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	47b0      	blx	r6
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	dc08      	bgt.n	8005b64 <__sflush_r+0xfc>
 8005b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b5a:	81a3      	strh	r3, [r4, #12]
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b64:	4407      	add	r7, r0
 8005b66:	eba8 0800 	sub.w	r8, r8, r0
 8005b6a:	e7e7      	b.n	8005b3c <__sflush_r+0xd4>
 8005b6c:	dfbffffe 	.word	0xdfbffffe

08005b70 <_fflush_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	690b      	ldr	r3, [r1, #16]
 8005b74:	4605      	mov	r5, r0
 8005b76:	460c      	mov	r4, r1
 8005b78:	b913      	cbnz	r3, 8005b80 <_fflush_r+0x10>
 8005b7a:	2500      	movs	r5, #0
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	b118      	cbz	r0, 8005b8a <_fflush_r+0x1a>
 8005b82:	6a03      	ldr	r3, [r0, #32]
 8005b84:	b90b      	cbnz	r3, 8005b8a <_fflush_r+0x1a>
 8005b86:	f7ff fa9f 	bl	80050c8 <__sinit>
 8005b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d0f3      	beq.n	8005b7a <_fflush_r+0xa>
 8005b92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005b94:	07d0      	lsls	r0, r2, #31
 8005b96:	d404      	bmi.n	8005ba2 <_fflush_r+0x32>
 8005b98:	0599      	lsls	r1, r3, #22
 8005b9a:	d402      	bmi.n	8005ba2 <_fflush_r+0x32>
 8005b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b9e:	f7ff fb98 	bl	80052d2 <__retarget_lock_acquire_recursive>
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	f7ff ff5f 	bl	8005a68 <__sflush_r>
 8005baa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005bac:	07da      	lsls	r2, r3, #31
 8005bae:	4605      	mov	r5, r0
 8005bb0:	d4e4      	bmi.n	8005b7c <_fflush_r+0xc>
 8005bb2:	89a3      	ldrh	r3, [r4, #12]
 8005bb4:	059b      	lsls	r3, r3, #22
 8005bb6:	d4e1      	bmi.n	8005b7c <_fflush_r+0xc>
 8005bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005bba:	f7ff fb8b 	bl	80052d4 <__retarget_lock_release_recursive>
 8005bbe:	e7dd      	b.n	8005b7c <_fflush_r+0xc>

08005bc0 <__swbuf_r>:
 8005bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc2:	460e      	mov	r6, r1
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	b118      	cbz	r0, 8005bd2 <__swbuf_r+0x12>
 8005bca:	6a03      	ldr	r3, [r0, #32]
 8005bcc:	b90b      	cbnz	r3, 8005bd2 <__swbuf_r+0x12>
 8005bce:	f7ff fa7b 	bl	80050c8 <__sinit>
 8005bd2:	69a3      	ldr	r3, [r4, #24]
 8005bd4:	60a3      	str	r3, [r4, #8]
 8005bd6:	89a3      	ldrh	r3, [r4, #12]
 8005bd8:	071a      	lsls	r2, r3, #28
 8005bda:	d501      	bpl.n	8005be0 <__swbuf_r+0x20>
 8005bdc:	6923      	ldr	r3, [r4, #16]
 8005bde:	b943      	cbnz	r3, 8005bf2 <__swbuf_r+0x32>
 8005be0:	4621      	mov	r1, r4
 8005be2:	4628      	mov	r0, r5
 8005be4:	f000 f82a 	bl	8005c3c <__swsetup_r>
 8005be8:	b118      	cbz	r0, 8005bf2 <__swbuf_r+0x32>
 8005bea:	f04f 37ff 	mov.w	r7, #4294967295
 8005bee:	4638      	mov	r0, r7
 8005bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	6922      	ldr	r2, [r4, #16]
 8005bf6:	1a98      	subs	r0, r3, r2
 8005bf8:	6963      	ldr	r3, [r4, #20]
 8005bfa:	b2f6      	uxtb	r6, r6
 8005bfc:	4283      	cmp	r3, r0
 8005bfe:	4637      	mov	r7, r6
 8005c00:	dc05      	bgt.n	8005c0e <__swbuf_r+0x4e>
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f7ff ffb3 	bl	8005b70 <_fflush_r>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d1ed      	bne.n	8005bea <__swbuf_r+0x2a>
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	60a3      	str	r3, [r4, #8]
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	1c5a      	adds	r2, r3, #1
 8005c18:	6022      	str	r2, [r4, #0]
 8005c1a:	701e      	strb	r6, [r3, #0]
 8005c1c:	6962      	ldr	r2, [r4, #20]
 8005c1e:	1c43      	adds	r3, r0, #1
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d004      	beq.n	8005c2e <__swbuf_r+0x6e>
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	07db      	lsls	r3, r3, #31
 8005c28:	d5e1      	bpl.n	8005bee <__swbuf_r+0x2e>
 8005c2a:	2e0a      	cmp	r6, #10
 8005c2c:	d1df      	bne.n	8005bee <__swbuf_r+0x2e>
 8005c2e:	4621      	mov	r1, r4
 8005c30:	4628      	mov	r0, r5
 8005c32:	f7ff ff9d 	bl	8005b70 <_fflush_r>
 8005c36:	2800      	cmp	r0, #0
 8005c38:	d0d9      	beq.n	8005bee <__swbuf_r+0x2e>
 8005c3a:	e7d6      	b.n	8005bea <__swbuf_r+0x2a>

08005c3c <__swsetup_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	4b29      	ldr	r3, [pc, #164]	@ (8005ce4 <__swsetup_r+0xa8>)
 8005c40:	4605      	mov	r5, r0
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	460c      	mov	r4, r1
 8005c46:	b118      	cbz	r0, 8005c50 <__swsetup_r+0x14>
 8005c48:	6a03      	ldr	r3, [r0, #32]
 8005c4a:	b90b      	cbnz	r3, 8005c50 <__swsetup_r+0x14>
 8005c4c:	f7ff fa3c 	bl	80050c8 <__sinit>
 8005c50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c54:	0719      	lsls	r1, r3, #28
 8005c56:	d422      	bmi.n	8005c9e <__swsetup_r+0x62>
 8005c58:	06da      	lsls	r2, r3, #27
 8005c5a:	d407      	bmi.n	8005c6c <__swsetup_r+0x30>
 8005c5c:	2209      	movs	r2, #9
 8005c5e:	602a      	str	r2, [r5, #0]
 8005c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c64:	81a3      	strh	r3, [r4, #12]
 8005c66:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6a:	e033      	b.n	8005cd4 <__swsetup_r+0x98>
 8005c6c:	0758      	lsls	r0, r3, #29
 8005c6e:	d512      	bpl.n	8005c96 <__swsetup_r+0x5a>
 8005c70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005c72:	b141      	cbz	r1, 8005c86 <__swsetup_r+0x4a>
 8005c74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005c78:	4299      	cmp	r1, r3
 8005c7a:	d002      	beq.n	8005c82 <__swsetup_r+0x46>
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7ff fb2b 	bl	80052d8 <_free_r>
 8005c82:	2300      	movs	r3, #0
 8005c84:	6363      	str	r3, [r4, #52]	@ 0x34
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005c8c:	81a3      	strh	r3, [r4, #12]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	6063      	str	r3, [r4, #4]
 8005c92:	6923      	ldr	r3, [r4, #16]
 8005c94:	6023      	str	r3, [r4, #0]
 8005c96:	89a3      	ldrh	r3, [r4, #12]
 8005c98:	f043 0308 	orr.w	r3, r3, #8
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	6923      	ldr	r3, [r4, #16]
 8005ca0:	b94b      	cbnz	r3, 8005cb6 <__swsetup_r+0x7a>
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005ca8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005cac:	d003      	beq.n	8005cb6 <__swsetup_r+0x7a>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	f000 f84f 	bl	8005d54 <__smakebuf_r>
 8005cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cba:	f013 0201 	ands.w	r2, r3, #1
 8005cbe:	d00a      	beq.n	8005cd6 <__swsetup_r+0x9a>
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	60a2      	str	r2, [r4, #8]
 8005cc4:	6962      	ldr	r2, [r4, #20]
 8005cc6:	4252      	negs	r2, r2
 8005cc8:	61a2      	str	r2, [r4, #24]
 8005cca:	6922      	ldr	r2, [r4, #16]
 8005ccc:	b942      	cbnz	r2, 8005ce0 <__swsetup_r+0xa4>
 8005cce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005cd2:	d1c5      	bne.n	8005c60 <__swsetup_r+0x24>
 8005cd4:	bd38      	pop	{r3, r4, r5, pc}
 8005cd6:	0799      	lsls	r1, r3, #30
 8005cd8:	bf58      	it	pl
 8005cda:	6962      	ldrpl	r2, [r4, #20]
 8005cdc:	60a2      	str	r2, [r4, #8]
 8005cde:	e7f4      	b.n	8005cca <__swsetup_r+0x8e>
 8005ce0:	2000      	movs	r0, #0
 8005ce2:	e7f7      	b.n	8005cd4 <__swsetup_r+0x98>
 8005ce4:	20000020 	.word	0x20000020

08005ce8 <_sbrk_r>:
 8005ce8:	b538      	push	{r3, r4, r5, lr}
 8005cea:	4d06      	ldr	r5, [pc, #24]	@ (8005d04 <_sbrk_r+0x1c>)
 8005cec:	2300      	movs	r3, #0
 8005cee:	4604      	mov	r4, r0
 8005cf0:	4608      	mov	r0, r1
 8005cf2:	602b      	str	r3, [r5, #0]
 8005cf4:	f7fc fb42 	bl	800237c <_sbrk>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d102      	bne.n	8005d02 <_sbrk_r+0x1a>
 8005cfc:	682b      	ldr	r3, [r5, #0]
 8005cfe:	b103      	cbz	r3, 8005d02 <_sbrk_r+0x1a>
 8005d00:	6023      	str	r3, [r4, #0]
 8005d02:	bd38      	pop	{r3, r4, r5, pc}
 8005d04:	20000440 	.word	0x20000440

08005d08 <__swhatbuf_r>:
 8005d08:	b570      	push	{r4, r5, r6, lr}
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d10:	2900      	cmp	r1, #0
 8005d12:	b096      	sub	sp, #88	@ 0x58
 8005d14:	4615      	mov	r5, r2
 8005d16:	461e      	mov	r6, r3
 8005d18:	da0d      	bge.n	8005d36 <__swhatbuf_r+0x2e>
 8005d1a:	89a3      	ldrh	r3, [r4, #12]
 8005d1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d20:	f04f 0100 	mov.w	r1, #0
 8005d24:	bf14      	ite	ne
 8005d26:	2340      	movne	r3, #64	@ 0x40
 8005d28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d2c:	2000      	movs	r0, #0
 8005d2e:	6031      	str	r1, [r6, #0]
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	b016      	add	sp, #88	@ 0x58
 8005d34:	bd70      	pop	{r4, r5, r6, pc}
 8005d36:	466a      	mov	r2, sp
 8005d38:	f000 f848 	bl	8005dcc <_fstat_r>
 8005d3c:	2800      	cmp	r0, #0
 8005d3e:	dbec      	blt.n	8005d1a <__swhatbuf_r+0x12>
 8005d40:	9901      	ldr	r1, [sp, #4]
 8005d42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d4a:	4259      	negs	r1, r3
 8005d4c:	4159      	adcs	r1, r3
 8005d4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d52:	e7eb      	b.n	8005d2c <__swhatbuf_r+0x24>

08005d54 <__smakebuf_r>:
 8005d54:	898b      	ldrh	r3, [r1, #12]
 8005d56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d58:	079d      	lsls	r5, r3, #30
 8005d5a:	4606      	mov	r6, r0
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	d507      	bpl.n	8005d70 <__smakebuf_r+0x1c>
 8005d60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d64:	6023      	str	r3, [r4, #0]
 8005d66:	6123      	str	r3, [r4, #16]
 8005d68:	2301      	movs	r3, #1
 8005d6a:	6163      	str	r3, [r4, #20]
 8005d6c:	b003      	add	sp, #12
 8005d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d70:	ab01      	add	r3, sp, #4
 8005d72:	466a      	mov	r2, sp
 8005d74:	f7ff ffc8 	bl	8005d08 <__swhatbuf_r>
 8005d78:	9f00      	ldr	r7, [sp, #0]
 8005d7a:	4605      	mov	r5, r0
 8005d7c:	4639      	mov	r1, r7
 8005d7e:	4630      	mov	r0, r6
 8005d80:	f7ff fb16 	bl	80053b0 <_malloc_r>
 8005d84:	b948      	cbnz	r0, 8005d9a <__smakebuf_r+0x46>
 8005d86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d8a:	059a      	lsls	r2, r3, #22
 8005d8c:	d4ee      	bmi.n	8005d6c <__smakebuf_r+0x18>
 8005d8e:	f023 0303 	bic.w	r3, r3, #3
 8005d92:	f043 0302 	orr.w	r3, r3, #2
 8005d96:	81a3      	strh	r3, [r4, #12]
 8005d98:	e7e2      	b.n	8005d60 <__smakebuf_r+0xc>
 8005d9a:	89a3      	ldrh	r3, [r4, #12]
 8005d9c:	6020      	str	r0, [r4, #0]
 8005d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da2:	81a3      	strh	r3, [r4, #12]
 8005da4:	9b01      	ldr	r3, [sp, #4]
 8005da6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005daa:	b15b      	cbz	r3, 8005dc4 <__smakebuf_r+0x70>
 8005dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005db0:	4630      	mov	r0, r6
 8005db2:	f000 f81d 	bl	8005df0 <_isatty_r>
 8005db6:	b128      	cbz	r0, 8005dc4 <__smakebuf_r+0x70>
 8005db8:	89a3      	ldrh	r3, [r4, #12]
 8005dba:	f023 0303 	bic.w	r3, r3, #3
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	81a3      	strh	r3, [r4, #12]
 8005dc4:	89a3      	ldrh	r3, [r4, #12]
 8005dc6:	431d      	orrs	r5, r3
 8005dc8:	81a5      	strh	r5, [r4, #12]
 8005dca:	e7cf      	b.n	8005d6c <__smakebuf_r+0x18>

08005dcc <_fstat_r>:
 8005dcc:	b538      	push	{r3, r4, r5, lr}
 8005dce:	4d07      	ldr	r5, [pc, #28]	@ (8005dec <_fstat_r+0x20>)
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	4608      	mov	r0, r1
 8005dd6:	4611      	mov	r1, r2
 8005dd8:	602b      	str	r3, [r5, #0]
 8005dda:	f7fc faa7 	bl	800232c <_fstat>
 8005dde:	1c43      	adds	r3, r0, #1
 8005de0:	d102      	bne.n	8005de8 <_fstat_r+0x1c>
 8005de2:	682b      	ldr	r3, [r5, #0]
 8005de4:	b103      	cbz	r3, 8005de8 <_fstat_r+0x1c>
 8005de6:	6023      	str	r3, [r4, #0]
 8005de8:	bd38      	pop	{r3, r4, r5, pc}
 8005dea:	bf00      	nop
 8005dec:	20000440 	.word	0x20000440

08005df0 <_isatty_r>:
 8005df0:	b538      	push	{r3, r4, r5, lr}
 8005df2:	4d06      	ldr	r5, [pc, #24]	@ (8005e0c <_isatty_r+0x1c>)
 8005df4:	2300      	movs	r3, #0
 8005df6:	4604      	mov	r4, r0
 8005df8:	4608      	mov	r0, r1
 8005dfa:	602b      	str	r3, [r5, #0]
 8005dfc:	f7fc faa6 	bl	800234c <_isatty>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d102      	bne.n	8005e0a <_isatty_r+0x1a>
 8005e04:	682b      	ldr	r3, [r5, #0]
 8005e06:	b103      	cbz	r3, 8005e0a <_isatty_r+0x1a>
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	bd38      	pop	{r3, r4, r5, pc}
 8005e0c:	20000440 	.word	0x20000440

08005e10 <sqrt>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	ed2d 8b02 	vpush	{d8}
 8005e16:	ec55 4b10 	vmov	r4, r5, d0
 8005e1a:	f000 f8cd 	bl	8005fb8 <__ieee754_sqrt>
 8005e1e:	4622      	mov	r2, r4
 8005e20:	462b      	mov	r3, r5
 8005e22:	4620      	mov	r0, r4
 8005e24:	4629      	mov	r1, r5
 8005e26:	eeb0 8a40 	vmov.f32	s16, s0
 8005e2a:	eef0 8a60 	vmov.f32	s17, s1
 8005e2e:	f7fa fe95 	bl	8000b5c <__aeabi_dcmpun>
 8005e32:	b990      	cbnz	r0, 8005e5a <sqrt+0x4a>
 8005e34:	2200      	movs	r2, #0
 8005e36:	2300      	movs	r3, #0
 8005e38:	4620      	mov	r0, r4
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	f7fa fe66 	bl	8000b0c <__aeabi_dcmplt>
 8005e40:	b158      	cbz	r0, 8005e5a <sqrt+0x4a>
 8005e42:	f7ff fa1b 	bl	800527c <__errno>
 8005e46:	2321      	movs	r3, #33	@ 0x21
 8005e48:	6003      	str	r3, [r0, #0]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	4610      	mov	r0, r2
 8005e50:	4619      	mov	r1, r3
 8005e52:	f7fa fd13 	bl	800087c <__aeabi_ddiv>
 8005e56:	ec41 0b18 	vmov	d8, r0, r1
 8005e5a:	eeb0 0a48 	vmov.f32	s0, s16
 8005e5e:	eef0 0a68 	vmov.f32	s1, s17
 8005e62:	ecbd 8b02 	vpop	{d8}
 8005e66:	bd38      	pop	{r3, r4, r5, pc}

08005e68 <cos>:
 8005e68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e6a:	ec53 2b10 	vmov	r2, r3, d0
 8005e6e:	4826      	ldr	r0, [pc, #152]	@ (8005f08 <cos+0xa0>)
 8005e70:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005e74:	4281      	cmp	r1, r0
 8005e76:	d806      	bhi.n	8005e86 <cos+0x1e>
 8005e78:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005f00 <cos+0x98>
 8005e7c:	b005      	add	sp, #20
 8005e7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e82:	f000 b975 	b.w	8006170 <__kernel_cos>
 8005e86:	4821      	ldr	r0, [pc, #132]	@ (8005f0c <cos+0xa4>)
 8005e88:	4281      	cmp	r1, r0
 8005e8a:	d908      	bls.n	8005e9e <cos+0x36>
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4619      	mov	r1, r3
 8005e90:	f7fa fa12 	bl	80002b8 <__aeabi_dsub>
 8005e94:	ec41 0b10 	vmov	d0, r0, r1
 8005e98:	b005      	add	sp, #20
 8005e9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e9e:	4668      	mov	r0, sp
 8005ea0:	f000 faea 	bl	8006478 <__ieee754_rem_pio2>
 8005ea4:	f000 0003 	and.w	r0, r0, #3
 8005ea8:	2801      	cmp	r0, #1
 8005eaa:	d00b      	beq.n	8005ec4 <cos+0x5c>
 8005eac:	2802      	cmp	r0, #2
 8005eae:	d015      	beq.n	8005edc <cos+0x74>
 8005eb0:	b9d8      	cbnz	r0, 8005eea <cos+0x82>
 8005eb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005eb6:	ed9d 0b00 	vldr	d0, [sp]
 8005eba:	f000 f959 	bl	8006170 <__kernel_cos>
 8005ebe:	ec51 0b10 	vmov	r0, r1, d0
 8005ec2:	e7e7      	b.n	8005e94 <cos+0x2c>
 8005ec4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ec8:	ed9d 0b00 	vldr	d0, [sp]
 8005ecc:	f000 fa18 	bl	8006300 <__kernel_sin>
 8005ed0:	ec53 2b10 	vmov	r2, r3, d0
 8005ed4:	4610      	mov	r0, r2
 8005ed6:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005eda:	e7db      	b.n	8005e94 <cos+0x2c>
 8005edc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005ee0:	ed9d 0b00 	vldr	d0, [sp]
 8005ee4:	f000 f944 	bl	8006170 <__kernel_cos>
 8005ee8:	e7f2      	b.n	8005ed0 <cos+0x68>
 8005eea:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005eee:	ed9d 0b00 	vldr	d0, [sp]
 8005ef2:	2001      	movs	r0, #1
 8005ef4:	f000 fa04 	bl	8006300 <__kernel_sin>
 8005ef8:	e7e1      	b.n	8005ebe <cos+0x56>
 8005efa:	bf00      	nop
 8005efc:	f3af 8000 	nop.w
	...
 8005f08:	3fe921fb 	.word	0x3fe921fb
 8005f0c:	7fefffff 	.word	0x7fefffff

08005f10 <sin>:
 8005f10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f12:	ec53 2b10 	vmov	r2, r3, d0
 8005f16:	4826      	ldr	r0, [pc, #152]	@ (8005fb0 <sin+0xa0>)
 8005f18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005f1c:	4281      	cmp	r1, r0
 8005f1e:	d807      	bhi.n	8005f30 <sin+0x20>
 8005f20:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8005fa8 <sin+0x98>
 8005f24:	2000      	movs	r0, #0
 8005f26:	b005      	add	sp, #20
 8005f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f2c:	f000 b9e8 	b.w	8006300 <__kernel_sin>
 8005f30:	4820      	ldr	r0, [pc, #128]	@ (8005fb4 <sin+0xa4>)
 8005f32:	4281      	cmp	r1, r0
 8005f34:	d908      	bls.n	8005f48 <sin+0x38>
 8005f36:	4610      	mov	r0, r2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	f7fa f9bd 	bl	80002b8 <__aeabi_dsub>
 8005f3e:	ec41 0b10 	vmov	d0, r0, r1
 8005f42:	b005      	add	sp, #20
 8005f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f48:	4668      	mov	r0, sp
 8005f4a:	f000 fa95 	bl	8006478 <__ieee754_rem_pio2>
 8005f4e:	f000 0003 	and.w	r0, r0, #3
 8005f52:	2801      	cmp	r0, #1
 8005f54:	d00c      	beq.n	8005f70 <sin+0x60>
 8005f56:	2802      	cmp	r0, #2
 8005f58:	d011      	beq.n	8005f7e <sin+0x6e>
 8005f5a:	b9e8      	cbnz	r0, 8005f98 <sin+0x88>
 8005f5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f60:	ed9d 0b00 	vldr	d0, [sp]
 8005f64:	2001      	movs	r0, #1
 8005f66:	f000 f9cb 	bl	8006300 <__kernel_sin>
 8005f6a:	ec51 0b10 	vmov	r0, r1, d0
 8005f6e:	e7e6      	b.n	8005f3e <sin+0x2e>
 8005f70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f74:	ed9d 0b00 	vldr	d0, [sp]
 8005f78:	f000 f8fa 	bl	8006170 <__kernel_cos>
 8005f7c:	e7f5      	b.n	8005f6a <sin+0x5a>
 8005f7e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f82:	ed9d 0b00 	vldr	d0, [sp]
 8005f86:	2001      	movs	r0, #1
 8005f88:	f000 f9ba 	bl	8006300 <__kernel_sin>
 8005f8c:	ec53 2b10 	vmov	r2, r3, d0
 8005f90:	4610      	mov	r0, r2
 8005f92:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8005f96:	e7d2      	b.n	8005f3e <sin+0x2e>
 8005f98:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005f9c:	ed9d 0b00 	vldr	d0, [sp]
 8005fa0:	f000 f8e6 	bl	8006170 <__kernel_cos>
 8005fa4:	e7f2      	b.n	8005f8c <sin+0x7c>
 8005fa6:	bf00      	nop
	...
 8005fb0:	3fe921fb 	.word	0x3fe921fb
 8005fb4:	7fefffff 	.word	0x7fefffff

08005fb8 <__ieee754_sqrt>:
 8005fb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fbc:	4a68      	ldr	r2, [pc, #416]	@ (8006160 <__ieee754_sqrt+0x1a8>)
 8005fbe:	ec55 4b10 	vmov	r4, r5, d0
 8005fc2:	43aa      	bics	r2, r5
 8005fc4:	462b      	mov	r3, r5
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	d110      	bne.n	8005fec <__ieee754_sqrt+0x34>
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4620      	mov	r0, r4
 8005fce:	4629      	mov	r1, r5
 8005fd0:	f7fa fb2a 	bl	8000628 <__aeabi_dmul>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4620      	mov	r0, r4
 8005fda:	4629      	mov	r1, r5
 8005fdc:	f7fa f96e 	bl	80002bc <__adddf3>
 8005fe0:	4604      	mov	r4, r0
 8005fe2:	460d      	mov	r5, r1
 8005fe4:	ec45 4b10 	vmov	d0, r4, r5
 8005fe8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fec:	2d00      	cmp	r5, #0
 8005fee:	dc0e      	bgt.n	800600e <__ieee754_sqrt+0x56>
 8005ff0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005ff4:	4322      	orrs	r2, r4
 8005ff6:	d0f5      	beq.n	8005fe4 <__ieee754_sqrt+0x2c>
 8005ff8:	b19d      	cbz	r5, 8006022 <__ieee754_sqrt+0x6a>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	4629      	mov	r1, r5
 8006000:	f7fa f95a 	bl	80002b8 <__aeabi_dsub>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	f7fa fc38 	bl	800087c <__aeabi_ddiv>
 800600c:	e7e8      	b.n	8005fe0 <__ieee754_sqrt+0x28>
 800600e:	152a      	asrs	r2, r5, #20
 8006010:	d115      	bne.n	800603e <__ieee754_sqrt+0x86>
 8006012:	2000      	movs	r0, #0
 8006014:	e009      	b.n	800602a <__ieee754_sqrt+0x72>
 8006016:	0acb      	lsrs	r3, r1, #11
 8006018:	3a15      	subs	r2, #21
 800601a:	0549      	lsls	r1, r1, #21
 800601c:	2b00      	cmp	r3, #0
 800601e:	d0fa      	beq.n	8006016 <__ieee754_sqrt+0x5e>
 8006020:	e7f7      	b.n	8006012 <__ieee754_sqrt+0x5a>
 8006022:	462a      	mov	r2, r5
 8006024:	e7fa      	b.n	800601c <__ieee754_sqrt+0x64>
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	3001      	adds	r0, #1
 800602a:	02dc      	lsls	r4, r3, #11
 800602c:	d5fb      	bpl.n	8006026 <__ieee754_sqrt+0x6e>
 800602e:	1e44      	subs	r4, r0, #1
 8006030:	1b12      	subs	r2, r2, r4
 8006032:	f1c0 0420 	rsb	r4, r0, #32
 8006036:	fa21 f404 	lsr.w	r4, r1, r4
 800603a:	4323      	orrs	r3, r4
 800603c:	4081      	lsls	r1, r0
 800603e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006042:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8006046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800604a:	07d2      	lsls	r2, r2, #31
 800604c:	bf5c      	itt	pl
 800604e:	005b      	lslpl	r3, r3, #1
 8006050:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8006054:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006058:	bf58      	it	pl
 800605a:	0049      	lslpl	r1, r1, #1
 800605c:	2600      	movs	r6, #0
 800605e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8006062:	106d      	asrs	r5, r5, #1
 8006064:	0049      	lsls	r1, r1, #1
 8006066:	2016      	movs	r0, #22
 8006068:	4632      	mov	r2, r6
 800606a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800606e:	1917      	adds	r7, r2, r4
 8006070:	429f      	cmp	r7, r3
 8006072:	bfde      	ittt	le
 8006074:	193a      	addle	r2, r7, r4
 8006076:	1bdb      	suble	r3, r3, r7
 8006078:	1936      	addle	r6, r6, r4
 800607a:	0fcf      	lsrs	r7, r1, #31
 800607c:	3801      	subs	r0, #1
 800607e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8006082:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8006086:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800608a:	d1f0      	bne.n	800606e <__ieee754_sqrt+0xb6>
 800608c:	4604      	mov	r4, r0
 800608e:	2720      	movs	r7, #32
 8006090:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006094:	429a      	cmp	r2, r3
 8006096:	eb00 0e0c 	add.w	lr, r0, ip
 800609a:	db02      	blt.n	80060a2 <__ieee754_sqrt+0xea>
 800609c:	d113      	bne.n	80060c6 <__ieee754_sqrt+0x10e>
 800609e:	458e      	cmp	lr, r1
 80060a0:	d811      	bhi.n	80060c6 <__ieee754_sqrt+0x10e>
 80060a2:	f1be 0f00 	cmp.w	lr, #0
 80060a6:	eb0e 000c 	add.w	r0, lr, ip
 80060aa:	da42      	bge.n	8006132 <__ieee754_sqrt+0x17a>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	db40      	blt.n	8006132 <__ieee754_sqrt+0x17a>
 80060b0:	f102 0801 	add.w	r8, r2, #1
 80060b4:	1a9b      	subs	r3, r3, r2
 80060b6:	458e      	cmp	lr, r1
 80060b8:	bf88      	it	hi
 80060ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80060be:	eba1 010e 	sub.w	r1, r1, lr
 80060c2:	4464      	add	r4, ip
 80060c4:	4642      	mov	r2, r8
 80060c6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80060ca:	3f01      	subs	r7, #1
 80060cc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80060d0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80060d4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80060d8:	d1dc      	bne.n	8006094 <__ieee754_sqrt+0xdc>
 80060da:	4319      	orrs	r1, r3
 80060dc:	d01b      	beq.n	8006116 <__ieee754_sqrt+0x15e>
 80060de:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8006164 <__ieee754_sqrt+0x1ac>
 80060e2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8006168 <__ieee754_sqrt+0x1b0>
 80060e6:	e9da 0100 	ldrd	r0, r1, [sl]
 80060ea:	e9db 2300 	ldrd	r2, r3, [fp]
 80060ee:	f7fa f8e3 	bl	80002b8 <__aeabi_dsub>
 80060f2:	e9da 8900 	ldrd	r8, r9, [sl]
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4640      	mov	r0, r8
 80060fc:	4649      	mov	r1, r9
 80060fe:	f7fa fd0f 	bl	8000b20 <__aeabi_dcmple>
 8006102:	b140      	cbz	r0, 8006116 <__ieee754_sqrt+0x15e>
 8006104:	f1b4 3fff 	cmp.w	r4, #4294967295
 8006108:	e9da 0100 	ldrd	r0, r1, [sl]
 800610c:	e9db 2300 	ldrd	r2, r3, [fp]
 8006110:	d111      	bne.n	8006136 <__ieee754_sqrt+0x17e>
 8006112:	3601      	adds	r6, #1
 8006114:	463c      	mov	r4, r7
 8006116:	1072      	asrs	r2, r6, #1
 8006118:	0863      	lsrs	r3, r4, #1
 800611a:	07f1      	lsls	r1, r6, #31
 800611c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8006120:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8006124:	bf48      	it	mi
 8006126:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800612a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800612e:	4618      	mov	r0, r3
 8006130:	e756      	b.n	8005fe0 <__ieee754_sqrt+0x28>
 8006132:	4690      	mov	r8, r2
 8006134:	e7be      	b.n	80060b4 <__ieee754_sqrt+0xfc>
 8006136:	f7fa f8c1 	bl	80002bc <__adddf3>
 800613a:	e9da 8900 	ldrd	r8, r9, [sl]
 800613e:	4602      	mov	r2, r0
 8006140:	460b      	mov	r3, r1
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa fce1 	bl	8000b0c <__aeabi_dcmplt>
 800614a:	b120      	cbz	r0, 8006156 <__ieee754_sqrt+0x19e>
 800614c:	1ca0      	adds	r0, r4, #2
 800614e:	bf08      	it	eq
 8006150:	3601      	addeq	r6, #1
 8006152:	3402      	adds	r4, #2
 8006154:	e7df      	b.n	8006116 <__ieee754_sqrt+0x15e>
 8006156:	1c63      	adds	r3, r4, #1
 8006158:	f023 0401 	bic.w	r4, r3, #1
 800615c:	e7db      	b.n	8006116 <__ieee754_sqrt+0x15e>
 800615e:	bf00      	nop
 8006160:	7ff00000 	.word	0x7ff00000
 8006164:	20000078 	.word	0x20000078
 8006168:	20000070 	.word	0x20000070
 800616c:	00000000 	.word	0x00000000

08006170 <__kernel_cos>:
 8006170:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006174:	ec57 6b10 	vmov	r6, r7, d0
 8006178:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800617c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8006180:	ed8d 1b00 	vstr	d1, [sp]
 8006184:	d206      	bcs.n	8006194 <__kernel_cos+0x24>
 8006186:	4630      	mov	r0, r6
 8006188:	4639      	mov	r1, r7
 800618a:	f7fa fcfd 	bl	8000b88 <__aeabi_d2iz>
 800618e:	2800      	cmp	r0, #0
 8006190:	f000 8088 	beq.w	80062a4 <__kernel_cos+0x134>
 8006194:	4632      	mov	r2, r6
 8006196:	463b      	mov	r3, r7
 8006198:	4630      	mov	r0, r6
 800619a:	4639      	mov	r1, r7
 800619c:	f7fa fa44 	bl	8000628 <__aeabi_dmul>
 80061a0:	4b51      	ldr	r3, [pc, #324]	@ (80062e8 <__kernel_cos+0x178>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	4604      	mov	r4, r0
 80061a6:	460d      	mov	r5, r1
 80061a8:	f7fa fa3e 	bl	8000628 <__aeabi_dmul>
 80061ac:	a340      	add	r3, pc, #256	@ (adr r3, 80062b0 <__kernel_cos+0x140>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	4682      	mov	sl, r0
 80061b4:	468b      	mov	fp, r1
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa fa35 	bl	8000628 <__aeabi_dmul>
 80061be:	a33e      	add	r3, pc, #248	@ (adr r3, 80062b8 <__kernel_cos+0x148>)
 80061c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c4:	f7fa f87a 	bl	80002bc <__adddf3>
 80061c8:	4622      	mov	r2, r4
 80061ca:	462b      	mov	r3, r5
 80061cc:	f7fa fa2c 	bl	8000628 <__aeabi_dmul>
 80061d0:	a33b      	add	r3, pc, #236	@ (adr r3, 80062c0 <__kernel_cos+0x150>)
 80061d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d6:	f7fa f86f 	bl	80002b8 <__aeabi_dsub>
 80061da:	4622      	mov	r2, r4
 80061dc:	462b      	mov	r3, r5
 80061de:	f7fa fa23 	bl	8000628 <__aeabi_dmul>
 80061e2:	a339      	add	r3, pc, #228	@ (adr r3, 80062c8 <__kernel_cos+0x158>)
 80061e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e8:	f7fa f868 	bl	80002bc <__adddf3>
 80061ec:	4622      	mov	r2, r4
 80061ee:	462b      	mov	r3, r5
 80061f0:	f7fa fa1a 	bl	8000628 <__aeabi_dmul>
 80061f4:	a336      	add	r3, pc, #216	@ (adr r3, 80062d0 <__kernel_cos+0x160>)
 80061f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061fa:	f7fa f85d 	bl	80002b8 <__aeabi_dsub>
 80061fe:	4622      	mov	r2, r4
 8006200:	462b      	mov	r3, r5
 8006202:	f7fa fa11 	bl	8000628 <__aeabi_dmul>
 8006206:	a334      	add	r3, pc, #208	@ (adr r3, 80062d8 <__kernel_cos+0x168>)
 8006208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620c:	f7fa f856 	bl	80002bc <__adddf3>
 8006210:	4622      	mov	r2, r4
 8006212:	462b      	mov	r3, r5
 8006214:	f7fa fa08 	bl	8000628 <__aeabi_dmul>
 8006218:	4622      	mov	r2, r4
 800621a:	462b      	mov	r3, r5
 800621c:	f7fa fa04 	bl	8000628 <__aeabi_dmul>
 8006220:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006224:	4604      	mov	r4, r0
 8006226:	460d      	mov	r5, r1
 8006228:	4630      	mov	r0, r6
 800622a:	4639      	mov	r1, r7
 800622c:	f7fa f9fc 	bl	8000628 <__aeabi_dmul>
 8006230:	460b      	mov	r3, r1
 8006232:	4602      	mov	r2, r0
 8006234:	4629      	mov	r1, r5
 8006236:	4620      	mov	r0, r4
 8006238:	f7fa f83e 	bl	80002b8 <__aeabi_dsub>
 800623c:	4b2b      	ldr	r3, [pc, #172]	@ (80062ec <__kernel_cos+0x17c>)
 800623e:	4598      	cmp	r8, r3
 8006240:	4606      	mov	r6, r0
 8006242:	460f      	mov	r7, r1
 8006244:	d810      	bhi.n	8006268 <__kernel_cos+0xf8>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4650      	mov	r0, sl
 800624c:	4659      	mov	r1, fp
 800624e:	f7fa f833 	bl	80002b8 <__aeabi_dsub>
 8006252:	460b      	mov	r3, r1
 8006254:	4926      	ldr	r1, [pc, #152]	@ (80062f0 <__kernel_cos+0x180>)
 8006256:	4602      	mov	r2, r0
 8006258:	2000      	movs	r0, #0
 800625a:	f7fa f82d 	bl	80002b8 <__aeabi_dsub>
 800625e:	ec41 0b10 	vmov	d0, r0, r1
 8006262:	b003      	add	sp, #12
 8006264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006268:	4b22      	ldr	r3, [pc, #136]	@ (80062f4 <__kernel_cos+0x184>)
 800626a:	4921      	ldr	r1, [pc, #132]	@ (80062f0 <__kernel_cos+0x180>)
 800626c:	4598      	cmp	r8, r3
 800626e:	bf8c      	ite	hi
 8006270:	4d21      	ldrhi	r5, [pc, #132]	@ (80062f8 <__kernel_cos+0x188>)
 8006272:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8006276:	2400      	movs	r4, #0
 8006278:	4622      	mov	r2, r4
 800627a:	462b      	mov	r3, r5
 800627c:	2000      	movs	r0, #0
 800627e:	f7fa f81b 	bl	80002b8 <__aeabi_dsub>
 8006282:	4622      	mov	r2, r4
 8006284:	4680      	mov	r8, r0
 8006286:	4689      	mov	r9, r1
 8006288:	462b      	mov	r3, r5
 800628a:	4650      	mov	r0, sl
 800628c:	4659      	mov	r1, fp
 800628e:	f7fa f813 	bl	80002b8 <__aeabi_dsub>
 8006292:	4632      	mov	r2, r6
 8006294:	463b      	mov	r3, r7
 8006296:	f7fa f80f 	bl	80002b8 <__aeabi_dsub>
 800629a:	4602      	mov	r2, r0
 800629c:	460b      	mov	r3, r1
 800629e:	4640      	mov	r0, r8
 80062a0:	4649      	mov	r1, r9
 80062a2:	e7da      	b.n	800625a <__kernel_cos+0xea>
 80062a4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 80062e0 <__kernel_cos+0x170>
 80062a8:	e7db      	b.n	8006262 <__kernel_cos+0xf2>
 80062aa:	bf00      	nop
 80062ac:	f3af 8000 	nop.w
 80062b0:	be8838d4 	.word	0xbe8838d4
 80062b4:	bda8fae9 	.word	0xbda8fae9
 80062b8:	bdb4b1c4 	.word	0xbdb4b1c4
 80062bc:	3e21ee9e 	.word	0x3e21ee9e
 80062c0:	809c52ad 	.word	0x809c52ad
 80062c4:	3e927e4f 	.word	0x3e927e4f
 80062c8:	19cb1590 	.word	0x19cb1590
 80062cc:	3efa01a0 	.word	0x3efa01a0
 80062d0:	16c15177 	.word	0x16c15177
 80062d4:	3f56c16c 	.word	0x3f56c16c
 80062d8:	5555554c 	.word	0x5555554c
 80062dc:	3fa55555 	.word	0x3fa55555
 80062e0:	00000000 	.word	0x00000000
 80062e4:	3ff00000 	.word	0x3ff00000
 80062e8:	3fe00000 	.word	0x3fe00000
 80062ec:	3fd33332 	.word	0x3fd33332
 80062f0:	3ff00000 	.word	0x3ff00000
 80062f4:	3fe90000 	.word	0x3fe90000
 80062f8:	3fd20000 	.word	0x3fd20000
 80062fc:	00000000 	.word	0x00000000

08006300 <__kernel_sin>:
 8006300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006304:	ec55 4b10 	vmov	r4, r5, d0
 8006308:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800630c:	b085      	sub	sp, #20
 800630e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006312:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006316:	4680      	mov	r8, r0
 8006318:	d205      	bcs.n	8006326 <__kernel_sin+0x26>
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fc33 	bl	8000b88 <__aeabi_d2iz>
 8006322:	2800      	cmp	r0, #0
 8006324:	d052      	beq.n	80063cc <__kernel_sin+0xcc>
 8006326:	4622      	mov	r2, r4
 8006328:	462b      	mov	r3, r5
 800632a:	4620      	mov	r0, r4
 800632c:	4629      	mov	r1, r5
 800632e:	f7fa f97b 	bl	8000628 <__aeabi_dmul>
 8006332:	4682      	mov	sl, r0
 8006334:	468b      	mov	fp, r1
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	4620      	mov	r0, r4
 800633c:	4629      	mov	r1, r5
 800633e:	f7fa f973 	bl	8000628 <__aeabi_dmul>
 8006342:	a342      	add	r3, pc, #264	@ (adr r3, 800644c <__kernel_sin+0x14c>)
 8006344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006348:	e9cd 0100 	strd	r0, r1, [sp]
 800634c:	4650      	mov	r0, sl
 800634e:	4659      	mov	r1, fp
 8006350:	f7fa f96a 	bl	8000628 <__aeabi_dmul>
 8006354:	a33f      	add	r3, pc, #252	@ (adr r3, 8006454 <__kernel_sin+0x154>)
 8006356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635a:	f7f9 ffad 	bl	80002b8 <__aeabi_dsub>
 800635e:	4652      	mov	r2, sl
 8006360:	465b      	mov	r3, fp
 8006362:	f7fa f961 	bl	8000628 <__aeabi_dmul>
 8006366:	a33d      	add	r3, pc, #244	@ (adr r3, 800645c <__kernel_sin+0x15c>)
 8006368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636c:	f7f9 ffa6 	bl	80002bc <__adddf3>
 8006370:	4652      	mov	r2, sl
 8006372:	465b      	mov	r3, fp
 8006374:	f7fa f958 	bl	8000628 <__aeabi_dmul>
 8006378:	a33a      	add	r3, pc, #232	@ (adr r3, 8006464 <__kernel_sin+0x164>)
 800637a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637e:	f7f9 ff9b 	bl	80002b8 <__aeabi_dsub>
 8006382:	4652      	mov	r2, sl
 8006384:	465b      	mov	r3, fp
 8006386:	f7fa f94f 	bl	8000628 <__aeabi_dmul>
 800638a:	a338      	add	r3, pc, #224	@ (adr r3, 800646c <__kernel_sin+0x16c>)
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f7f9 ff94 	bl	80002bc <__adddf3>
 8006394:	4606      	mov	r6, r0
 8006396:	460f      	mov	r7, r1
 8006398:	f1b8 0f00 	cmp.w	r8, #0
 800639c:	d11b      	bne.n	80063d6 <__kernel_sin+0xd6>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4650      	mov	r0, sl
 80063a4:	4659      	mov	r1, fp
 80063a6:	f7fa f93f 	bl	8000628 <__aeabi_dmul>
 80063aa:	a325      	add	r3, pc, #148	@ (adr r3, 8006440 <__kernel_sin+0x140>)
 80063ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b0:	f7f9 ff82 	bl	80002b8 <__aeabi_dsub>
 80063b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063b8:	f7fa f936 	bl	8000628 <__aeabi_dmul>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4620      	mov	r0, r4
 80063c2:	4629      	mov	r1, r5
 80063c4:	f7f9 ff7a 	bl	80002bc <__adddf3>
 80063c8:	4604      	mov	r4, r0
 80063ca:	460d      	mov	r5, r1
 80063cc:	ec45 4b10 	vmov	d0, r4, r5
 80063d0:	b005      	add	sp, #20
 80063d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063da:	4b1b      	ldr	r3, [pc, #108]	@ (8006448 <__kernel_sin+0x148>)
 80063dc:	2200      	movs	r2, #0
 80063de:	f7fa f923 	bl	8000628 <__aeabi_dmul>
 80063e2:	4632      	mov	r2, r6
 80063e4:	4680      	mov	r8, r0
 80063e6:	4689      	mov	r9, r1
 80063e8:	463b      	mov	r3, r7
 80063ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063ee:	f7fa f91b 	bl	8000628 <__aeabi_dmul>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4640      	mov	r0, r8
 80063f8:	4649      	mov	r1, r9
 80063fa:	f7f9 ff5d 	bl	80002b8 <__aeabi_dsub>
 80063fe:	4652      	mov	r2, sl
 8006400:	465b      	mov	r3, fp
 8006402:	f7fa f911 	bl	8000628 <__aeabi_dmul>
 8006406:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800640a:	f7f9 ff55 	bl	80002b8 <__aeabi_dsub>
 800640e:	a30c      	add	r3, pc, #48	@ (adr r3, 8006440 <__kernel_sin+0x140>)
 8006410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006414:	4606      	mov	r6, r0
 8006416:	460f      	mov	r7, r1
 8006418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800641c:	f7fa f904 	bl	8000628 <__aeabi_dmul>
 8006420:	4602      	mov	r2, r0
 8006422:	460b      	mov	r3, r1
 8006424:	4630      	mov	r0, r6
 8006426:	4639      	mov	r1, r7
 8006428:	f7f9 ff48 	bl	80002bc <__adddf3>
 800642c:	4602      	mov	r2, r0
 800642e:	460b      	mov	r3, r1
 8006430:	4620      	mov	r0, r4
 8006432:	4629      	mov	r1, r5
 8006434:	f7f9 ff40 	bl	80002b8 <__aeabi_dsub>
 8006438:	e7c6      	b.n	80063c8 <__kernel_sin+0xc8>
 800643a:	bf00      	nop
 800643c:	f3af 8000 	nop.w
 8006440:	55555549 	.word	0x55555549
 8006444:	3fc55555 	.word	0x3fc55555
 8006448:	3fe00000 	.word	0x3fe00000
 800644c:	5acfd57c 	.word	0x5acfd57c
 8006450:	3de5d93a 	.word	0x3de5d93a
 8006454:	8a2b9ceb 	.word	0x8a2b9ceb
 8006458:	3e5ae5e6 	.word	0x3e5ae5e6
 800645c:	57b1fe7d 	.word	0x57b1fe7d
 8006460:	3ec71de3 	.word	0x3ec71de3
 8006464:	19c161d5 	.word	0x19c161d5
 8006468:	3f2a01a0 	.word	0x3f2a01a0
 800646c:	1110f8a6 	.word	0x1110f8a6
 8006470:	3f811111 	.word	0x3f811111
 8006474:	00000000 	.word	0x00000000

08006478 <__ieee754_rem_pio2>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	ec57 6b10 	vmov	r6, r7, d0
 8006480:	4bc5      	ldr	r3, [pc, #788]	@ (8006798 <__ieee754_rem_pio2+0x320>)
 8006482:	b08d      	sub	sp, #52	@ 0x34
 8006484:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8006488:	4598      	cmp	r8, r3
 800648a:	4604      	mov	r4, r0
 800648c:	9704      	str	r7, [sp, #16]
 800648e:	d807      	bhi.n	80064a0 <__ieee754_rem_pio2+0x28>
 8006490:	2200      	movs	r2, #0
 8006492:	2300      	movs	r3, #0
 8006494:	ed80 0b00 	vstr	d0, [r0]
 8006498:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800649c:	2500      	movs	r5, #0
 800649e:	e028      	b.n	80064f2 <__ieee754_rem_pio2+0x7a>
 80064a0:	4bbe      	ldr	r3, [pc, #760]	@ (800679c <__ieee754_rem_pio2+0x324>)
 80064a2:	4598      	cmp	r8, r3
 80064a4:	d878      	bhi.n	8006598 <__ieee754_rem_pio2+0x120>
 80064a6:	9b04      	ldr	r3, [sp, #16]
 80064a8:	4dbd      	ldr	r5, [pc, #756]	@ (80067a0 <__ieee754_rem_pio2+0x328>)
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	4630      	mov	r0, r6
 80064ae:	a3ac      	add	r3, pc, #688	@ (adr r3, 8006760 <__ieee754_rem_pio2+0x2e8>)
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	4639      	mov	r1, r7
 80064b6:	dd38      	ble.n	800652a <__ieee754_rem_pio2+0xb2>
 80064b8:	f7f9 fefe 	bl	80002b8 <__aeabi_dsub>
 80064bc:	45a8      	cmp	r8, r5
 80064be:	4606      	mov	r6, r0
 80064c0:	460f      	mov	r7, r1
 80064c2:	d01a      	beq.n	80064fa <__ieee754_rem_pio2+0x82>
 80064c4:	a3a8      	add	r3, pc, #672	@ (adr r3, 8006768 <__ieee754_rem_pio2+0x2f0>)
 80064c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ca:	f7f9 fef5 	bl	80002b8 <__aeabi_dsub>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4680      	mov	r8, r0
 80064d4:	4689      	mov	r9, r1
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7f9 feed 	bl	80002b8 <__aeabi_dsub>
 80064de:	a3a2      	add	r3, pc, #648	@ (adr r3, 8006768 <__ieee754_rem_pio2+0x2f0>)
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f7f9 fee8 	bl	80002b8 <__aeabi_dsub>
 80064e8:	e9c4 8900 	strd	r8, r9, [r4]
 80064ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80064f0:	2501      	movs	r5, #1
 80064f2:	4628      	mov	r0, r5
 80064f4:	b00d      	add	sp, #52	@ 0x34
 80064f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fa:	a39d      	add	r3, pc, #628	@ (adr r3, 8006770 <__ieee754_rem_pio2+0x2f8>)
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	f7f9 feda 	bl	80002b8 <__aeabi_dsub>
 8006504:	a39c      	add	r3, pc, #624	@ (adr r3, 8006778 <__ieee754_rem_pio2+0x300>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	4606      	mov	r6, r0
 800650c:	460f      	mov	r7, r1
 800650e:	f7f9 fed3 	bl	80002b8 <__aeabi_dsub>
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	4680      	mov	r8, r0
 8006518:	4689      	mov	r9, r1
 800651a:	4630      	mov	r0, r6
 800651c:	4639      	mov	r1, r7
 800651e:	f7f9 fecb 	bl	80002b8 <__aeabi_dsub>
 8006522:	a395      	add	r3, pc, #596	@ (adr r3, 8006778 <__ieee754_rem_pio2+0x300>)
 8006524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006528:	e7dc      	b.n	80064e4 <__ieee754_rem_pio2+0x6c>
 800652a:	f7f9 fec7 	bl	80002bc <__adddf3>
 800652e:	45a8      	cmp	r8, r5
 8006530:	4606      	mov	r6, r0
 8006532:	460f      	mov	r7, r1
 8006534:	d018      	beq.n	8006568 <__ieee754_rem_pio2+0xf0>
 8006536:	a38c      	add	r3, pc, #560	@ (adr r3, 8006768 <__ieee754_rem_pio2+0x2f0>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	f7f9 febe 	bl	80002bc <__adddf3>
 8006540:	4602      	mov	r2, r0
 8006542:	460b      	mov	r3, r1
 8006544:	4680      	mov	r8, r0
 8006546:	4689      	mov	r9, r1
 8006548:	4630      	mov	r0, r6
 800654a:	4639      	mov	r1, r7
 800654c:	f7f9 feb4 	bl	80002b8 <__aeabi_dsub>
 8006550:	a385      	add	r3, pc, #532	@ (adr r3, 8006768 <__ieee754_rem_pio2+0x2f0>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f7f9 feb1 	bl	80002bc <__adddf3>
 800655a:	f04f 35ff 	mov.w	r5, #4294967295
 800655e:	e9c4 8900 	strd	r8, r9, [r4]
 8006562:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006566:	e7c4      	b.n	80064f2 <__ieee754_rem_pio2+0x7a>
 8006568:	a381      	add	r3, pc, #516	@ (adr r3, 8006770 <__ieee754_rem_pio2+0x2f8>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f7f9 fea5 	bl	80002bc <__adddf3>
 8006572:	a381      	add	r3, pc, #516	@ (adr r3, 8006778 <__ieee754_rem_pio2+0x300>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	4606      	mov	r6, r0
 800657a:	460f      	mov	r7, r1
 800657c:	f7f9 fe9e 	bl	80002bc <__adddf3>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	4680      	mov	r8, r0
 8006586:	4689      	mov	r9, r1
 8006588:	4630      	mov	r0, r6
 800658a:	4639      	mov	r1, r7
 800658c:	f7f9 fe94 	bl	80002b8 <__aeabi_dsub>
 8006590:	a379      	add	r3, pc, #484	@ (adr r3, 8006778 <__ieee754_rem_pio2+0x300>)
 8006592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006596:	e7de      	b.n	8006556 <__ieee754_rem_pio2+0xde>
 8006598:	4b82      	ldr	r3, [pc, #520]	@ (80067a4 <__ieee754_rem_pio2+0x32c>)
 800659a:	4598      	cmp	r8, r3
 800659c:	f200 80d1 	bhi.w	8006742 <__ieee754_rem_pio2+0x2ca>
 80065a0:	f000 f966 	bl	8006870 <fabs>
 80065a4:	ec57 6b10 	vmov	r6, r7, d0
 80065a8:	a375      	add	r3, pc, #468	@ (adr r3, 8006780 <__ieee754_rem_pio2+0x308>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	4630      	mov	r0, r6
 80065b0:	4639      	mov	r1, r7
 80065b2:	f7fa f839 	bl	8000628 <__aeabi_dmul>
 80065b6:	4b7c      	ldr	r3, [pc, #496]	@ (80067a8 <__ieee754_rem_pio2+0x330>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	f7f9 fe7f 	bl	80002bc <__adddf3>
 80065be:	f7fa fae3 	bl	8000b88 <__aeabi_d2iz>
 80065c2:	4605      	mov	r5, r0
 80065c4:	f7f9 ffc6 	bl	8000554 <__aeabi_i2d>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80065d0:	a363      	add	r3, pc, #396	@ (adr r3, 8006760 <__ieee754_rem_pio2+0x2e8>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f7fa f827 	bl	8000628 <__aeabi_dmul>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7f9 fe69 	bl	80002b8 <__aeabi_dsub>
 80065e6:	a360      	add	r3, pc, #384	@ (adr r3, 8006768 <__ieee754_rem_pio2+0x2f0>)
 80065e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ec:	4682      	mov	sl, r0
 80065ee:	468b      	mov	fp, r1
 80065f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065f4:	f7fa f818 	bl	8000628 <__aeabi_dmul>
 80065f8:	2d1f      	cmp	r5, #31
 80065fa:	4606      	mov	r6, r0
 80065fc:	460f      	mov	r7, r1
 80065fe:	dc0c      	bgt.n	800661a <__ieee754_rem_pio2+0x1a2>
 8006600:	4b6a      	ldr	r3, [pc, #424]	@ (80067ac <__ieee754_rem_pio2+0x334>)
 8006602:	1e6a      	subs	r2, r5, #1
 8006604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006608:	4543      	cmp	r3, r8
 800660a:	d006      	beq.n	800661a <__ieee754_rem_pio2+0x1a2>
 800660c:	4632      	mov	r2, r6
 800660e:	463b      	mov	r3, r7
 8006610:	4650      	mov	r0, sl
 8006612:	4659      	mov	r1, fp
 8006614:	f7f9 fe50 	bl	80002b8 <__aeabi_dsub>
 8006618:	e00e      	b.n	8006638 <__ieee754_rem_pio2+0x1c0>
 800661a:	463b      	mov	r3, r7
 800661c:	4632      	mov	r2, r6
 800661e:	4650      	mov	r0, sl
 8006620:	4659      	mov	r1, fp
 8006622:	f7f9 fe49 	bl	80002b8 <__aeabi_dsub>
 8006626:	ea4f 5328 	mov.w	r3, r8, asr #20
 800662a:	9305      	str	r3, [sp, #20]
 800662c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006630:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8006634:	2b10      	cmp	r3, #16
 8006636:	dc02      	bgt.n	800663e <__ieee754_rem_pio2+0x1c6>
 8006638:	e9c4 0100 	strd	r0, r1, [r4]
 800663c:	e039      	b.n	80066b2 <__ieee754_rem_pio2+0x23a>
 800663e:	a34c      	add	r3, pc, #304	@ (adr r3, 8006770 <__ieee754_rem_pio2+0x2f8>)
 8006640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006648:	f7f9 ffee 	bl	8000628 <__aeabi_dmul>
 800664c:	4606      	mov	r6, r0
 800664e:	460f      	mov	r7, r1
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4650      	mov	r0, sl
 8006656:	4659      	mov	r1, fp
 8006658:	f7f9 fe2e 	bl	80002b8 <__aeabi_dsub>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	4680      	mov	r8, r0
 8006662:	4689      	mov	r9, r1
 8006664:	4650      	mov	r0, sl
 8006666:	4659      	mov	r1, fp
 8006668:	f7f9 fe26 	bl	80002b8 <__aeabi_dsub>
 800666c:	4632      	mov	r2, r6
 800666e:	463b      	mov	r3, r7
 8006670:	f7f9 fe22 	bl	80002b8 <__aeabi_dsub>
 8006674:	a340      	add	r3, pc, #256	@ (adr r3, 8006778 <__ieee754_rem_pio2+0x300>)
 8006676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667a:	4606      	mov	r6, r0
 800667c:	460f      	mov	r7, r1
 800667e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006682:	f7f9 ffd1 	bl	8000628 <__aeabi_dmul>
 8006686:	4632      	mov	r2, r6
 8006688:	463b      	mov	r3, r7
 800668a:	f7f9 fe15 	bl	80002b8 <__aeabi_dsub>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4606      	mov	r6, r0
 8006694:	460f      	mov	r7, r1
 8006696:	4640      	mov	r0, r8
 8006698:	4649      	mov	r1, r9
 800669a:	f7f9 fe0d 	bl	80002b8 <__aeabi_dsub>
 800669e:	9a05      	ldr	r2, [sp, #20]
 80066a0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80066a4:	1ad3      	subs	r3, r2, r3
 80066a6:	2b31      	cmp	r3, #49	@ 0x31
 80066a8:	dc20      	bgt.n	80066ec <__ieee754_rem_pio2+0x274>
 80066aa:	e9c4 0100 	strd	r0, r1, [r4]
 80066ae:	46c2      	mov	sl, r8
 80066b0:	46cb      	mov	fp, r9
 80066b2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80066b6:	4650      	mov	r0, sl
 80066b8:	4642      	mov	r2, r8
 80066ba:	464b      	mov	r3, r9
 80066bc:	4659      	mov	r1, fp
 80066be:	f7f9 fdfb 	bl	80002b8 <__aeabi_dsub>
 80066c2:	463b      	mov	r3, r7
 80066c4:	4632      	mov	r2, r6
 80066c6:	f7f9 fdf7 	bl	80002b8 <__aeabi_dsub>
 80066ca:	9b04      	ldr	r3, [sp, #16]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066d2:	f6bf af0e 	bge.w	80064f2 <__ieee754_rem_pio2+0x7a>
 80066d6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80066da:	6063      	str	r3, [r4, #4]
 80066dc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80066e0:	f8c4 8000 	str.w	r8, [r4]
 80066e4:	60a0      	str	r0, [r4, #8]
 80066e6:	60e3      	str	r3, [r4, #12]
 80066e8:	426d      	negs	r5, r5
 80066ea:	e702      	b.n	80064f2 <__ieee754_rem_pio2+0x7a>
 80066ec:	a326      	add	r3, pc, #152	@ (adr r3, 8006788 <__ieee754_rem_pio2+0x310>)
 80066ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066f6:	f7f9 ff97 	bl	8000628 <__aeabi_dmul>
 80066fa:	4606      	mov	r6, r0
 80066fc:	460f      	mov	r7, r1
 80066fe:	4602      	mov	r2, r0
 8006700:	460b      	mov	r3, r1
 8006702:	4640      	mov	r0, r8
 8006704:	4649      	mov	r1, r9
 8006706:	f7f9 fdd7 	bl	80002b8 <__aeabi_dsub>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4682      	mov	sl, r0
 8006710:	468b      	mov	fp, r1
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 fdcf 	bl	80002b8 <__aeabi_dsub>
 800671a:	4632      	mov	r2, r6
 800671c:	463b      	mov	r3, r7
 800671e:	f7f9 fdcb 	bl	80002b8 <__aeabi_dsub>
 8006722:	a31b      	add	r3, pc, #108	@ (adr r3, 8006790 <__ieee754_rem_pio2+0x318>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	4606      	mov	r6, r0
 800672a:	460f      	mov	r7, r1
 800672c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006730:	f7f9 ff7a 	bl	8000628 <__aeabi_dmul>
 8006734:	4632      	mov	r2, r6
 8006736:	463b      	mov	r3, r7
 8006738:	f7f9 fdbe 	bl	80002b8 <__aeabi_dsub>
 800673c:	4606      	mov	r6, r0
 800673e:	460f      	mov	r7, r1
 8006740:	e764      	b.n	800660c <__ieee754_rem_pio2+0x194>
 8006742:	4b1b      	ldr	r3, [pc, #108]	@ (80067b0 <__ieee754_rem_pio2+0x338>)
 8006744:	4598      	cmp	r8, r3
 8006746:	d935      	bls.n	80067b4 <__ieee754_rem_pio2+0x33c>
 8006748:	4632      	mov	r2, r6
 800674a:	463b      	mov	r3, r7
 800674c:	4630      	mov	r0, r6
 800674e:	4639      	mov	r1, r7
 8006750:	f7f9 fdb2 	bl	80002b8 <__aeabi_dsub>
 8006754:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006758:	e9c4 0100 	strd	r0, r1, [r4]
 800675c:	e69e      	b.n	800649c <__ieee754_rem_pio2+0x24>
 800675e:	bf00      	nop
 8006760:	54400000 	.word	0x54400000
 8006764:	3ff921fb 	.word	0x3ff921fb
 8006768:	1a626331 	.word	0x1a626331
 800676c:	3dd0b461 	.word	0x3dd0b461
 8006770:	1a600000 	.word	0x1a600000
 8006774:	3dd0b461 	.word	0x3dd0b461
 8006778:	2e037073 	.word	0x2e037073
 800677c:	3ba3198a 	.word	0x3ba3198a
 8006780:	6dc9c883 	.word	0x6dc9c883
 8006784:	3fe45f30 	.word	0x3fe45f30
 8006788:	2e000000 	.word	0x2e000000
 800678c:	3ba3198a 	.word	0x3ba3198a
 8006790:	252049c1 	.word	0x252049c1
 8006794:	397b839a 	.word	0x397b839a
 8006798:	3fe921fb 	.word	0x3fe921fb
 800679c:	4002d97b 	.word	0x4002d97b
 80067a0:	3ff921fb 	.word	0x3ff921fb
 80067a4:	413921fb 	.word	0x413921fb
 80067a8:	3fe00000 	.word	0x3fe00000
 80067ac:	080071fc 	.word	0x080071fc
 80067b0:	7fefffff 	.word	0x7fefffff
 80067b4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80067b8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80067bc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80067c0:	4630      	mov	r0, r6
 80067c2:	460f      	mov	r7, r1
 80067c4:	f7fa f9e0 	bl	8000b88 <__aeabi_d2iz>
 80067c8:	f7f9 fec4 	bl	8000554 <__aeabi_i2d>
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	4630      	mov	r0, r6
 80067d2:	4639      	mov	r1, r7
 80067d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067d8:	f7f9 fd6e 	bl	80002b8 <__aeabi_dsub>
 80067dc:	4b22      	ldr	r3, [pc, #136]	@ (8006868 <__ieee754_rem_pio2+0x3f0>)
 80067de:	2200      	movs	r2, #0
 80067e0:	f7f9 ff22 	bl	8000628 <__aeabi_dmul>
 80067e4:	460f      	mov	r7, r1
 80067e6:	4606      	mov	r6, r0
 80067e8:	f7fa f9ce 	bl	8000b88 <__aeabi_d2iz>
 80067ec:	f7f9 feb2 	bl	8000554 <__aeabi_i2d>
 80067f0:	4602      	mov	r2, r0
 80067f2:	460b      	mov	r3, r1
 80067f4:	4630      	mov	r0, r6
 80067f6:	4639      	mov	r1, r7
 80067f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80067fc:	f7f9 fd5c 	bl	80002b8 <__aeabi_dsub>
 8006800:	4b19      	ldr	r3, [pc, #100]	@ (8006868 <__ieee754_rem_pio2+0x3f0>)
 8006802:	2200      	movs	r2, #0
 8006804:	f7f9 ff10 	bl	8000628 <__aeabi_dmul>
 8006808:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800680c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8006810:	f04f 0803 	mov.w	r8, #3
 8006814:	2600      	movs	r6, #0
 8006816:	2700      	movs	r7, #0
 8006818:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800681c:	4632      	mov	r2, r6
 800681e:	463b      	mov	r3, r7
 8006820:	46c2      	mov	sl, r8
 8006822:	f108 38ff 	add.w	r8, r8, #4294967295
 8006826:	f7fa f967 	bl	8000af8 <__aeabi_dcmpeq>
 800682a:	2800      	cmp	r0, #0
 800682c:	d1f4      	bne.n	8006818 <__ieee754_rem_pio2+0x3a0>
 800682e:	4b0f      	ldr	r3, [pc, #60]	@ (800686c <__ieee754_rem_pio2+0x3f4>)
 8006830:	9301      	str	r3, [sp, #4]
 8006832:	2302      	movs	r3, #2
 8006834:	9300      	str	r3, [sp, #0]
 8006836:	462a      	mov	r2, r5
 8006838:	4653      	mov	r3, sl
 800683a:	4621      	mov	r1, r4
 800683c:	a806      	add	r0, sp, #24
 800683e:	f000 f81f 	bl	8006880 <__kernel_rem_pio2>
 8006842:	9b04      	ldr	r3, [sp, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	4605      	mov	r5, r0
 8006848:	f6bf ae53 	bge.w	80064f2 <__ieee754_rem_pio2+0x7a>
 800684c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006850:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006854:	e9c4 2300 	strd	r2, r3, [r4]
 8006858:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800685c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006860:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006864:	e740      	b.n	80066e8 <__ieee754_rem_pio2+0x270>
 8006866:	bf00      	nop
 8006868:	41700000 	.word	0x41700000
 800686c:	0800727c 	.word	0x0800727c

08006870 <fabs>:
 8006870:	ec51 0b10 	vmov	r0, r1, d0
 8006874:	4602      	mov	r2, r0
 8006876:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800687a:	ec43 2b10 	vmov	d0, r2, r3
 800687e:	4770      	bx	lr

08006880 <__kernel_rem_pio2>:
 8006880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006884:	ed2d 8b02 	vpush	{d8}
 8006888:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800688c:	f112 0f14 	cmn.w	r2, #20
 8006890:	9306      	str	r3, [sp, #24]
 8006892:	9104      	str	r1, [sp, #16]
 8006894:	4bbe      	ldr	r3, [pc, #760]	@ (8006b90 <__kernel_rem_pio2+0x310>)
 8006896:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8006898:	9008      	str	r0, [sp, #32]
 800689a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	9b06      	ldr	r3, [sp, #24]
 80068a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80068a6:	bfa8      	it	ge
 80068a8:	1ed4      	subge	r4, r2, #3
 80068aa:	9305      	str	r3, [sp, #20]
 80068ac:	bfb2      	itee	lt
 80068ae:	2400      	movlt	r4, #0
 80068b0:	2318      	movge	r3, #24
 80068b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80068b6:	f06f 0317 	mvn.w	r3, #23
 80068ba:	fb04 3303 	mla	r3, r4, r3, r3
 80068be:	eb03 0b02 	add.w	fp, r3, r2
 80068c2:	9b00      	ldr	r3, [sp, #0]
 80068c4:	9a05      	ldr	r2, [sp, #20]
 80068c6:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8006b80 <__kernel_rem_pio2+0x300>
 80068ca:	eb03 0802 	add.w	r8, r3, r2
 80068ce:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80068d0:	1aa7      	subs	r7, r4, r2
 80068d2:	ae20      	add	r6, sp, #128	@ 0x80
 80068d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80068d8:	2500      	movs	r5, #0
 80068da:	4545      	cmp	r5, r8
 80068dc:	dd13      	ble.n	8006906 <__kernel_rem_pio2+0x86>
 80068de:	9b06      	ldr	r3, [sp, #24]
 80068e0:	aa20      	add	r2, sp, #128	@ 0x80
 80068e2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80068e6:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 80068ea:	f04f 0800 	mov.w	r8, #0
 80068ee:	9b00      	ldr	r3, [sp, #0]
 80068f0:	4598      	cmp	r8, r3
 80068f2:	dc31      	bgt.n	8006958 <__kernel_rem_pio2+0xd8>
 80068f4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8006b80 <__kernel_rem_pio2+0x300>
 80068f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006900:	462f      	mov	r7, r5
 8006902:	2600      	movs	r6, #0
 8006904:	e01b      	b.n	800693e <__kernel_rem_pio2+0xbe>
 8006906:	42ef      	cmn	r7, r5
 8006908:	d407      	bmi.n	800691a <__kernel_rem_pio2+0x9a>
 800690a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800690e:	f7f9 fe21 	bl	8000554 <__aeabi_i2d>
 8006912:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006916:	3501      	adds	r5, #1
 8006918:	e7df      	b.n	80068da <__kernel_rem_pio2+0x5a>
 800691a:	ec51 0b18 	vmov	r0, r1, d8
 800691e:	e7f8      	b.n	8006912 <__kernel_rem_pio2+0x92>
 8006920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006924:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006928:	f7f9 fe7e 	bl	8000628 <__aeabi_dmul>
 800692c:	4602      	mov	r2, r0
 800692e:	460b      	mov	r3, r1
 8006930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006934:	f7f9 fcc2 	bl	80002bc <__adddf3>
 8006938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800693c:	3601      	adds	r6, #1
 800693e:	9b05      	ldr	r3, [sp, #20]
 8006940:	429e      	cmp	r6, r3
 8006942:	f1a7 0708 	sub.w	r7, r7, #8
 8006946:	ddeb      	ble.n	8006920 <__kernel_rem_pio2+0xa0>
 8006948:	ed9d 7b02 	vldr	d7, [sp, #8]
 800694c:	f108 0801 	add.w	r8, r8, #1
 8006950:	ecaa 7b02 	vstmia	sl!, {d7}
 8006954:	3508      	adds	r5, #8
 8006956:	e7ca      	b.n	80068ee <__kernel_rem_pio2+0x6e>
 8006958:	9b00      	ldr	r3, [sp, #0]
 800695a:	f8dd 8000 	ldr.w	r8, [sp]
 800695e:	aa0c      	add	r2, sp, #48	@ 0x30
 8006960:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006964:	930a      	str	r3, [sp, #40]	@ 0x28
 8006966:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8006968:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800696c:	9309      	str	r3, [sp, #36]	@ 0x24
 800696e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8006972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006974:	ab98      	add	r3, sp, #608	@ 0x260
 8006976:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800697a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800697e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006982:	ac0c      	add	r4, sp, #48	@ 0x30
 8006984:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006986:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800698a:	46a1      	mov	r9, r4
 800698c:	46c2      	mov	sl, r8
 800698e:	f1ba 0f00 	cmp.w	sl, #0
 8006992:	f1a5 0508 	sub.w	r5, r5, #8
 8006996:	dc77      	bgt.n	8006a88 <__kernel_rem_pio2+0x208>
 8006998:	4658      	mov	r0, fp
 800699a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800699e:	f000 fac7 	bl	8006f30 <scalbn>
 80069a2:	ec57 6b10 	vmov	r6, r7, d0
 80069a6:	2200      	movs	r2, #0
 80069a8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80069ac:	4630      	mov	r0, r6
 80069ae:	4639      	mov	r1, r7
 80069b0:	f7f9 fe3a 	bl	8000628 <__aeabi_dmul>
 80069b4:	ec41 0b10 	vmov	d0, r0, r1
 80069b8:	f000 fb3a 	bl	8007030 <floor>
 80069bc:	4b75      	ldr	r3, [pc, #468]	@ (8006b94 <__kernel_rem_pio2+0x314>)
 80069be:	ec51 0b10 	vmov	r0, r1, d0
 80069c2:	2200      	movs	r2, #0
 80069c4:	f7f9 fe30 	bl	8000628 <__aeabi_dmul>
 80069c8:	4602      	mov	r2, r0
 80069ca:	460b      	mov	r3, r1
 80069cc:	4630      	mov	r0, r6
 80069ce:	4639      	mov	r1, r7
 80069d0:	f7f9 fc72 	bl	80002b8 <__aeabi_dsub>
 80069d4:	460f      	mov	r7, r1
 80069d6:	4606      	mov	r6, r0
 80069d8:	f7fa f8d6 	bl	8000b88 <__aeabi_d2iz>
 80069dc:	9002      	str	r0, [sp, #8]
 80069de:	f7f9 fdb9 	bl	8000554 <__aeabi_i2d>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4630      	mov	r0, r6
 80069e8:	4639      	mov	r1, r7
 80069ea:	f7f9 fc65 	bl	80002b8 <__aeabi_dsub>
 80069ee:	f1bb 0f00 	cmp.w	fp, #0
 80069f2:	4606      	mov	r6, r0
 80069f4:	460f      	mov	r7, r1
 80069f6:	dd6c      	ble.n	8006ad2 <__kernel_rem_pio2+0x252>
 80069f8:	f108 31ff 	add.w	r1, r8, #4294967295
 80069fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80069fe:	9d02      	ldr	r5, [sp, #8]
 8006a00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006a04:	f1cb 0018 	rsb	r0, fp, #24
 8006a08:	fa43 f200 	asr.w	r2, r3, r0
 8006a0c:	4415      	add	r5, r2
 8006a0e:	4082      	lsls	r2, r0
 8006a10:	1a9b      	subs	r3, r3, r2
 8006a12:	aa0c      	add	r2, sp, #48	@ 0x30
 8006a14:	9502      	str	r5, [sp, #8]
 8006a16:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8006a1a:	f1cb 0217 	rsb	r2, fp, #23
 8006a1e:	fa43 f902 	asr.w	r9, r3, r2
 8006a22:	f1b9 0f00 	cmp.w	r9, #0
 8006a26:	dd64      	ble.n	8006af2 <__kernel_rem_pio2+0x272>
 8006a28:	9b02      	ldr	r3, [sp, #8]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	9302      	str	r3, [sp, #8]
 8006a30:	4615      	mov	r5, r2
 8006a32:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8006a36:	4590      	cmp	r8, r2
 8006a38:	f300 80b8 	bgt.w	8006bac <__kernel_rem_pio2+0x32c>
 8006a3c:	f1bb 0f00 	cmp.w	fp, #0
 8006a40:	dd07      	ble.n	8006a52 <__kernel_rem_pio2+0x1d2>
 8006a42:	f1bb 0f01 	cmp.w	fp, #1
 8006a46:	f000 80bf 	beq.w	8006bc8 <__kernel_rem_pio2+0x348>
 8006a4a:	f1bb 0f02 	cmp.w	fp, #2
 8006a4e:	f000 80c6 	beq.w	8006bde <__kernel_rem_pio2+0x35e>
 8006a52:	f1b9 0f02 	cmp.w	r9, #2
 8006a56:	d14c      	bne.n	8006af2 <__kernel_rem_pio2+0x272>
 8006a58:	4632      	mov	r2, r6
 8006a5a:	463b      	mov	r3, r7
 8006a5c:	494e      	ldr	r1, [pc, #312]	@ (8006b98 <__kernel_rem_pio2+0x318>)
 8006a5e:	2000      	movs	r0, #0
 8006a60:	f7f9 fc2a 	bl	80002b8 <__aeabi_dsub>
 8006a64:	4606      	mov	r6, r0
 8006a66:	460f      	mov	r7, r1
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	d042      	beq.n	8006af2 <__kernel_rem_pio2+0x272>
 8006a6c:	4658      	mov	r0, fp
 8006a6e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8006b88 <__kernel_rem_pio2+0x308>
 8006a72:	f000 fa5d 	bl	8006f30 <scalbn>
 8006a76:	4630      	mov	r0, r6
 8006a78:	4639      	mov	r1, r7
 8006a7a:	ec53 2b10 	vmov	r2, r3, d0
 8006a7e:	f7f9 fc1b 	bl	80002b8 <__aeabi_dsub>
 8006a82:	4606      	mov	r6, r0
 8006a84:	460f      	mov	r7, r1
 8006a86:	e034      	b.n	8006af2 <__kernel_rem_pio2+0x272>
 8006a88:	4b44      	ldr	r3, [pc, #272]	@ (8006b9c <__kernel_rem_pio2+0x31c>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a90:	f7f9 fdca 	bl	8000628 <__aeabi_dmul>
 8006a94:	f7fa f878 	bl	8000b88 <__aeabi_d2iz>
 8006a98:	f7f9 fd5c 	bl	8000554 <__aeabi_i2d>
 8006a9c:	4b40      	ldr	r3, [pc, #256]	@ (8006ba0 <__kernel_rem_pio2+0x320>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	4606      	mov	r6, r0
 8006aa2:	460f      	mov	r7, r1
 8006aa4:	f7f9 fdc0 	bl	8000628 <__aeabi_dmul>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	460b      	mov	r3, r1
 8006aac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ab0:	f7f9 fc02 	bl	80002b8 <__aeabi_dsub>
 8006ab4:	f7fa f868 	bl	8000b88 <__aeabi_d2iz>
 8006ab8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006abc:	f849 0b04 	str.w	r0, [r9], #4
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7f9 fbfa 	bl	80002bc <__adddf3>
 8006ac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad0:	e75d      	b.n	800698e <__kernel_rem_pio2+0x10e>
 8006ad2:	d107      	bne.n	8006ae4 <__kernel_rem_pio2+0x264>
 8006ad4:	f108 33ff 	add.w	r3, r8, #4294967295
 8006ad8:	aa0c      	add	r2, sp, #48	@ 0x30
 8006ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ade:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8006ae2:	e79e      	b.n	8006a22 <__kernel_rem_pio2+0x1a2>
 8006ae4:	4b2f      	ldr	r3, [pc, #188]	@ (8006ba4 <__kernel_rem_pio2+0x324>)
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f7fa f824 	bl	8000b34 <__aeabi_dcmpge>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	d143      	bne.n	8006b78 <__kernel_rem_pio2+0x2f8>
 8006af0:	4681      	mov	r9, r0
 8006af2:	2200      	movs	r2, #0
 8006af4:	2300      	movs	r3, #0
 8006af6:	4630      	mov	r0, r6
 8006af8:	4639      	mov	r1, r7
 8006afa:	f7f9 fffd 	bl	8000af8 <__aeabi_dcmpeq>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	f000 80bf 	beq.w	8006c82 <__kernel_rem_pio2+0x402>
 8006b04:	f108 33ff 	add.w	r3, r8, #4294967295
 8006b08:	2200      	movs	r2, #0
 8006b0a:	9900      	ldr	r1, [sp, #0]
 8006b0c:	428b      	cmp	r3, r1
 8006b0e:	da6e      	bge.n	8006bee <__kernel_rem_pio2+0x36e>
 8006b10:	2a00      	cmp	r2, #0
 8006b12:	f000 8089 	beq.w	8006c28 <__kernel_rem_pio2+0x3a8>
 8006b16:	f108 38ff 	add.w	r8, r8, #4294967295
 8006b1a:	ab0c      	add	r3, sp, #48	@ 0x30
 8006b1c:	f1ab 0b18 	sub.w	fp, fp, #24
 8006b20:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d0f6      	beq.n	8006b16 <__kernel_rem_pio2+0x296>
 8006b28:	4658      	mov	r0, fp
 8006b2a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8006b88 <__kernel_rem_pio2+0x308>
 8006b2e:	f000 f9ff 	bl	8006f30 <scalbn>
 8006b32:	f108 0301 	add.w	r3, r8, #1
 8006b36:	00da      	lsls	r2, r3, #3
 8006b38:	9205      	str	r2, [sp, #20]
 8006b3a:	ec55 4b10 	vmov	r4, r5, d0
 8006b3e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8006b40:	f8df b058 	ldr.w	fp, [pc, #88]	@ 8006b9c <__kernel_rem_pio2+0x31c>
 8006b44:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8006b48:	4646      	mov	r6, r8
 8006b4a:	f04f 0a00 	mov.w	sl, #0
 8006b4e:	2e00      	cmp	r6, #0
 8006b50:	f280 80cf 	bge.w	8006cf2 <__kernel_rem_pio2+0x472>
 8006b54:	4644      	mov	r4, r8
 8006b56:	2c00      	cmp	r4, #0
 8006b58:	f2c0 80fd 	blt.w	8006d56 <__kernel_rem_pio2+0x4d6>
 8006b5c:	4b12      	ldr	r3, [pc, #72]	@ (8006ba8 <__kernel_rem_pio2+0x328>)
 8006b5e:	461f      	mov	r7, r3
 8006b60:	ab70      	add	r3, sp, #448	@ 0x1c0
 8006b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b66:	9306      	str	r3, [sp, #24]
 8006b68:	f04f 0a00 	mov.w	sl, #0
 8006b6c:	f04f 0b00 	mov.w	fp, #0
 8006b70:	2600      	movs	r6, #0
 8006b72:	eba8 0504 	sub.w	r5, r8, r4
 8006b76:	e0e2      	b.n	8006d3e <__kernel_rem_pio2+0x4be>
 8006b78:	f04f 0902 	mov.w	r9, #2
 8006b7c:	e754      	b.n	8006a28 <__kernel_rem_pio2+0x1a8>
 8006b7e:	bf00      	nop
	...
 8006b8c:	3ff00000 	.word	0x3ff00000
 8006b90:	080073c8 	.word	0x080073c8
 8006b94:	40200000 	.word	0x40200000
 8006b98:	3ff00000 	.word	0x3ff00000
 8006b9c:	3e700000 	.word	0x3e700000
 8006ba0:	41700000 	.word	0x41700000
 8006ba4:	3fe00000 	.word	0x3fe00000
 8006ba8:	08007388 	.word	0x08007388
 8006bac:	f854 3b04 	ldr.w	r3, [r4], #4
 8006bb0:	b945      	cbnz	r5, 8006bc4 <__kernel_rem_pio2+0x344>
 8006bb2:	b123      	cbz	r3, 8006bbe <__kernel_rem_pio2+0x33e>
 8006bb4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8006bb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	3201      	adds	r2, #1
 8006bc0:	461d      	mov	r5, r3
 8006bc2:	e738      	b.n	8006a36 <__kernel_rem_pio2+0x1b6>
 8006bc4:	1acb      	subs	r3, r1, r3
 8006bc6:	e7f7      	b.n	8006bb8 <__kernel_rem_pio2+0x338>
 8006bc8:	f108 32ff 	add.w	r2, r8, #4294967295
 8006bcc:	ab0c      	add	r3, sp, #48	@ 0x30
 8006bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8006bd6:	a90c      	add	r1, sp, #48	@ 0x30
 8006bd8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006bdc:	e739      	b.n	8006a52 <__kernel_rem_pio2+0x1d2>
 8006bde:	f108 32ff 	add.w	r2, r8, #4294967295
 8006be2:	ab0c      	add	r3, sp, #48	@ 0x30
 8006be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006be8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006bec:	e7f3      	b.n	8006bd6 <__kernel_rem_pio2+0x356>
 8006bee:	a90c      	add	r1, sp, #48	@ 0x30
 8006bf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	e787      	b.n	8006b0a <__kernel_rem_pio2+0x28a>
 8006bfa:	3401      	adds	r4, #1
 8006bfc:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	d0fa      	beq.n	8006bfa <__kernel_rem_pio2+0x37a>
 8006c04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c06:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006c0a:	eb0d 0503 	add.w	r5, sp, r3
 8006c0e:	9b06      	ldr	r3, [sp, #24]
 8006c10:	aa20      	add	r2, sp, #128	@ 0x80
 8006c12:	4443      	add	r3, r8
 8006c14:	f108 0701 	add.w	r7, r8, #1
 8006c18:	3d98      	subs	r5, #152	@ 0x98
 8006c1a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8006c1e:	4444      	add	r4, r8
 8006c20:	42bc      	cmp	r4, r7
 8006c22:	da04      	bge.n	8006c2e <__kernel_rem_pio2+0x3ae>
 8006c24:	46a0      	mov	r8, r4
 8006c26:	e6a2      	b.n	800696e <__kernel_rem_pio2+0xee>
 8006c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c2a:	2401      	movs	r4, #1
 8006c2c:	e7e6      	b.n	8006bfc <__kernel_rem_pio2+0x37c>
 8006c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c30:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8006c34:	f7f9 fc8e 	bl	8000554 <__aeabi_i2d>
 8006c38:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8006f00 <__kernel_rem_pio2+0x680>
 8006c3c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8006c40:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c48:	46b2      	mov	sl, r6
 8006c4a:	f04f 0800 	mov.w	r8, #0
 8006c4e:	9b05      	ldr	r3, [sp, #20]
 8006c50:	4598      	cmp	r8, r3
 8006c52:	dd05      	ble.n	8006c60 <__kernel_rem_pio2+0x3e0>
 8006c54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006c58:	3701      	adds	r7, #1
 8006c5a:	eca5 7b02 	vstmia	r5!, {d7}
 8006c5e:	e7df      	b.n	8006c20 <__kernel_rem_pio2+0x3a0>
 8006c60:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006c64:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006c68:	f7f9 fcde 	bl	8000628 <__aeabi_dmul>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	460b      	mov	r3, r1
 8006c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c74:	f7f9 fb22 	bl	80002bc <__adddf3>
 8006c78:	f108 0801 	add.w	r8, r8, #1
 8006c7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c80:	e7e5      	b.n	8006c4e <__kernel_rem_pio2+0x3ce>
 8006c82:	f1cb 0000 	rsb	r0, fp, #0
 8006c86:	ec47 6b10 	vmov	d0, r6, r7
 8006c8a:	f000 f951 	bl	8006f30 <scalbn>
 8006c8e:	ec55 4b10 	vmov	r4, r5, d0
 8006c92:	4b9d      	ldr	r3, [pc, #628]	@ (8006f08 <__kernel_rem_pio2+0x688>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	4620      	mov	r0, r4
 8006c98:	4629      	mov	r1, r5
 8006c9a:	f7f9 ff4b 	bl	8000b34 <__aeabi_dcmpge>
 8006c9e:	b300      	cbz	r0, 8006ce2 <__kernel_rem_pio2+0x462>
 8006ca0:	4b9a      	ldr	r3, [pc, #616]	@ (8006f0c <__kernel_rem_pio2+0x68c>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	4629      	mov	r1, r5
 8006ca8:	f7f9 fcbe 	bl	8000628 <__aeabi_dmul>
 8006cac:	f7f9 ff6c 	bl	8000b88 <__aeabi_d2iz>
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	f7f9 fc4f 	bl	8000554 <__aeabi_i2d>
 8006cb6:	4b94      	ldr	r3, [pc, #592]	@ (8006f08 <__kernel_rem_pio2+0x688>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f7f9 fcb5 	bl	8000628 <__aeabi_dmul>
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	4620      	mov	r0, r4
 8006cc6:	f7f9 faf7 	bl	80002b8 <__aeabi_dsub>
 8006cca:	f7f9 ff5d 	bl	8000b88 <__aeabi_d2iz>
 8006cce:	ab0c      	add	r3, sp, #48	@ 0x30
 8006cd0:	f10b 0b18 	add.w	fp, fp, #24
 8006cd4:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006cd8:	f108 0801 	add.w	r8, r8, #1
 8006cdc:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006ce0:	e722      	b.n	8006b28 <__kernel_rem_pio2+0x2a8>
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	4629      	mov	r1, r5
 8006ce6:	f7f9 ff4f 	bl	8000b88 <__aeabi_d2iz>
 8006cea:	ab0c      	add	r3, sp, #48	@ 0x30
 8006cec:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006cf0:	e71a      	b.n	8006b28 <__kernel_rem_pio2+0x2a8>
 8006cf2:	ab0c      	add	r3, sp, #48	@ 0x30
 8006cf4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006cf8:	f7f9 fc2c 	bl	8000554 <__aeabi_i2d>
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	462b      	mov	r3, r5
 8006d00:	f7f9 fc92 	bl	8000628 <__aeabi_dmul>
 8006d04:	4652      	mov	r2, sl
 8006d06:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006d0a:	465b      	mov	r3, fp
 8006d0c:	4620      	mov	r0, r4
 8006d0e:	4629      	mov	r1, r5
 8006d10:	f7f9 fc8a 	bl	8000628 <__aeabi_dmul>
 8006d14:	3e01      	subs	r6, #1
 8006d16:	4604      	mov	r4, r0
 8006d18:	460d      	mov	r5, r1
 8006d1a:	e718      	b.n	8006b4e <__kernel_rem_pio2+0x2ce>
 8006d1c:	9906      	ldr	r1, [sp, #24]
 8006d1e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006d22:	9106      	str	r1, [sp, #24]
 8006d24:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006d28:	f7f9 fc7e 	bl	8000628 <__aeabi_dmul>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4650      	mov	r0, sl
 8006d32:	4659      	mov	r1, fp
 8006d34:	f7f9 fac2 	bl	80002bc <__adddf3>
 8006d38:	3601      	adds	r6, #1
 8006d3a:	4682      	mov	sl, r0
 8006d3c:	468b      	mov	fp, r1
 8006d3e:	9b00      	ldr	r3, [sp, #0]
 8006d40:	429e      	cmp	r6, r3
 8006d42:	dc01      	bgt.n	8006d48 <__kernel_rem_pio2+0x4c8>
 8006d44:	42b5      	cmp	r5, r6
 8006d46:	dae9      	bge.n	8006d1c <__kernel_rem_pio2+0x49c>
 8006d48:	ab48      	add	r3, sp, #288	@ 0x120
 8006d4a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006d4e:	e9c5 ab00 	strd	sl, fp, [r5]
 8006d52:	3c01      	subs	r4, #1
 8006d54:	e6ff      	b.n	8006b56 <__kernel_rem_pio2+0x2d6>
 8006d56:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	dc0b      	bgt.n	8006d74 <__kernel_rem_pio2+0x4f4>
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	dc39      	bgt.n	8006dd4 <__kernel_rem_pio2+0x554>
 8006d60:	d05d      	beq.n	8006e1e <__kernel_rem_pio2+0x59e>
 8006d62:	9b02      	ldr	r3, [sp, #8]
 8006d64:	f003 0007 	and.w	r0, r3, #7
 8006d68:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8006d6c:	ecbd 8b02 	vpop	{d8}
 8006d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d74:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d1f3      	bne.n	8006d62 <__kernel_rem_pio2+0x4e2>
 8006d7a:	9b05      	ldr	r3, [sp, #20]
 8006d7c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d80:	eb0d 0403 	add.w	r4, sp, r3
 8006d84:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8006d88:	4625      	mov	r5, r4
 8006d8a:	46c2      	mov	sl, r8
 8006d8c:	f1ba 0f00 	cmp.w	sl, #0
 8006d90:	f1a5 0508 	sub.w	r5, r5, #8
 8006d94:	dc6b      	bgt.n	8006e6e <__kernel_rem_pio2+0x5ee>
 8006d96:	4645      	mov	r5, r8
 8006d98:	2d01      	cmp	r5, #1
 8006d9a:	f1a4 0408 	sub.w	r4, r4, #8
 8006d9e:	f300 8087 	bgt.w	8006eb0 <__kernel_rem_pio2+0x630>
 8006da2:	9c05      	ldr	r4, [sp, #20]
 8006da4:	ab48      	add	r3, sp, #288	@ 0x120
 8006da6:	441c      	add	r4, r3
 8006da8:	2000      	movs	r0, #0
 8006daa:	2100      	movs	r1, #0
 8006dac:	f1b8 0f01 	cmp.w	r8, #1
 8006db0:	f300 809c 	bgt.w	8006eec <__kernel_rem_pio2+0x66c>
 8006db4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8006db8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8006dbc:	f1b9 0f00 	cmp.w	r9, #0
 8006dc0:	f040 80a6 	bne.w	8006f10 <__kernel_rem_pio2+0x690>
 8006dc4:	9b04      	ldr	r3, [sp, #16]
 8006dc6:	e9c3 7800 	strd	r7, r8, [r3]
 8006dca:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8006dce:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8006dd2:	e7c6      	b.n	8006d62 <__kernel_rem_pio2+0x4e2>
 8006dd4:	9d05      	ldr	r5, [sp, #20]
 8006dd6:	ab48      	add	r3, sp, #288	@ 0x120
 8006dd8:	441d      	add	r5, r3
 8006dda:	4644      	mov	r4, r8
 8006ddc:	2000      	movs	r0, #0
 8006dde:	2100      	movs	r1, #0
 8006de0:	2c00      	cmp	r4, #0
 8006de2:	da35      	bge.n	8006e50 <__kernel_rem_pio2+0x5d0>
 8006de4:	f1b9 0f00 	cmp.w	r9, #0
 8006de8:	d038      	beq.n	8006e5c <__kernel_rem_pio2+0x5dc>
 8006dea:	4602      	mov	r2, r0
 8006dec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006df0:	9c04      	ldr	r4, [sp, #16]
 8006df2:	e9c4 2300 	strd	r2, r3, [r4]
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006dfe:	f7f9 fa5b 	bl	80002b8 <__aeabi_dsub>
 8006e02:	ad4a      	add	r5, sp, #296	@ 0x128
 8006e04:	2401      	movs	r4, #1
 8006e06:	45a0      	cmp	r8, r4
 8006e08:	da2b      	bge.n	8006e62 <__kernel_rem_pio2+0x5e2>
 8006e0a:	f1b9 0f00 	cmp.w	r9, #0
 8006e0e:	d002      	beq.n	8006e16 <__kernel_rem_pio2+0x596>
 8006e10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e14:	4619      	mov	r1, r3
 8006e16:	9b04      	ldr	r3, [sp, #16]
 8006e18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006e1c:	e7a1      	b.n	8006d62 <__kernel_rem_pio2+0x4e2>
 8006e1e:	9c05      	ldr	r4, [sp, #20]
 8006e20:	ab48      	add	r3, sp, #288	@ 0x120
 8006e22:	441c      	add	r4, r3
 8006e24:	2000      	movs	r0, #0
 8006e26:	2100      	movs	r1, #0
 8006e28:	f1b8 0f00 	cmp.w	r8, #0
 8006e2c:	da09      	bge.n	8006e42 <__kernel_rem_pio2+0x5c2>
 8006e2e:	f1b9 0f00 	cmp.w	r9, #0
 8006e32:	d002      	beq.n	8006e3a <__kernel_rem_pio2+0x5ba>
 8006e34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e38:	4619      	mov	r1, r3
 8006e3a:	9b04      	ldr	r3, [sp, #16]
 8006e3c:	e9c3 0100 	strd	r0, r1, [r3]
 8006e40:	e78f      	b.n	8006d62 <__kernel_rem_pio2+0x4e2>
 8006e42:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006e46:	f7f9 fa39 	bl	80002bc <__adddf3>
 8006e4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e4e:	e7eb      	b.n	8006e28 <__kernel_rem_pio2+0x5a8>
 8006e50:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006e54:	f7f9 fa32 	bl	80002bc <__adddf3>
 8006e58:	3c01      	subs	r4, #1
 8006e5a:	e7c1      	b.n	8006de0 <__kernel_rem_pio2+0x560>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	460b      	mov	r3, r1
 8006e60:	e7c6      	b.n	8006df0 <__kernel_rem_pio2+0x570>
 8006e62:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006e66:	f7f9 fa29 	bl	80002bc <__adddf3>
 8006e6a:	3401      	adds	r4, #1
 8006e6c:	e7cb      	b.n	8006e06 <__kernel_rem_pio2+0x586>
 8006e6e:	ed95 7b00 	vldr	d7, [r5]
 8006e72:	ed8d 7b00 	vstr	d7, [sp]
 8006e76:	ed95 7b02 	vldr	d7, [r5, #8]
 8006e7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e7e:	ec53 2b17 	vmov	r2, r3, d7
 8006e82:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006e86:	f7f9 fa19 	bl	80002bc <__adddf3>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4606      	mov	r6, r0
 8006e90:	460f      	mov	r7, r1
 8006e92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e96:	f7f9 fa0f 	bl	80002b8 <__aeabi_dsub>
 8006e9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006e9e:	f7f9 fa0d 	bl	80002bc <__adddf3>
 8006ea2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ea6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006eaa:	e9c5 6700 	strd	r6, r7, [r5]
 8006eae:	e76d      	b.n	8006d8c <__kernel_rem_pio2+0x50c>
 8006eb0:	ed94 7b00 	vldr	d7, [r4]
 8006eb4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006eb8:	ec51 0b17 	vmov	r0, r1, d7
 8006ebc:	4652      	mov	r2, sl
 8006ebe:	465b      	mov	r3, fp
 8006ec0:	ed8d 7b00 	vstr	d7, [sp]
 8006ec4:	f7f9 f9fa 	bl	80002bc <__adddf3>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4606      	mov	r6, r0
 8006ece:	460f      	mov	r7, r1
 8006ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ed4:	f7f9 f9f0 	bl	80002b8 <__aeabi_dsub>
 8006ed8:	4652      	mov	r2, sl
 8006eda:	465b      	mov	r3, fp
 8006edc:	f7f9 f9ee 	bl	80002bc <__adddf3>
 8006ee0:	3d01      	subs	r5, #1
 8006ee2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006ee6:	e9c4 6700 	strd	r6, r7, [r4]
 8006eea:	e755      	b.n	8006d98 <__kernel_rem_pio2+0x518>
 8006eec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006ef0:	f7f9 f9e4 	bl	80002bc <__adddf3>
 8006ef4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ef8:	e758      	b.n	8006dac <__kernel_rem_pio2+0x52c>
 8006efa:	bf00      	nop
 8006efc:	f3af 8000 	nop.w
	...
 8006f08:	41700000 	.word	0x41700000
 8006f0c:	3e700000 	.word	0x3e700000
 8006f10:	9b04      	ldr	r3, [sp, #16]
 8006f12:	9a04      	ldr	r2, [sp, #16]
 8006f14:	601f      	str	r7, [r3, #0]
 8006f16:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8006f1a:	605c      	str	r4, [r3, #4]
 8006f1c:	609d      	str	r5, [r3, #8]
 8006f1e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f22:	60d3      	str	r3, [r2, #12]
 8006f24:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006f28:	6110      	str	r0, [r2, #16]
 8006f2a:	6153      	str	r3, [r2, #20]
 8006f2c:	e719      	b.n	8006d62 <__kernel_rem_pio2+0x4e2>
 8006f2e:	bf00      	nop

08006f30 <scalbn>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	ec55 4b10 	vmov	r4, r5, d0
 8006f36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006f3a:	4606      	mov	r6, r0
 8006f3c:	462b      	mov	r3, r5
 8006f3e:	b991      	cbnz	r1, 8006f66 <scalbn+0x36>
 8006f40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8006f44:	4323      	orrs	r3, r4
 8006f46:	d03d      	beq.n	8006fc4 <scalbn+0x94>
 8006f48:	4b35      	ldr	r3, [pc, #212]	@ (8007020 <scalbn+0xf0>)
 8006f4a:	4620      	mov	r0, r4
 8006f4c:	4629      	mov	r1, r5
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f7f9 fb6a 	bl	8000628 <__aeabi_dmul>
 8006f54:	4b33      	ldr	r3, [pc, #204]	@ (8007024 <scalbn+0xf4>)
 8006f56:	429e      	cmp	r6, r3
 8006f58:	4604      	mov	r4, r0
 8006f5a:	460d      	mov	r5, r1
 8006f5c:	da0f      	bge.n	8006f7e <scalbn+0x4e>
 8006f5e:	a328      	add	r3, pc, #160	@ (adr r3, 8007000 <scalbn+0xd0>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	e01e      	b.n	8006fa4 <scalbn+0x74>
 8006f66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8006f6a:	4291      	cmp	r1, r2
 8006f6c:	d10b      	bne.n	8006f86 <scalbn+0x56>
 8006f6e:	4622      	mov	r2, r4
 8006f70:	4620      	mov	r0, r4
 8006f72:	4629      	mov	r1, r5
 8006f74:	f7f9 f9a2 	bl	80002bc <__adddf3>
 8006f78:	4604      	mov	r4, r0
 8006f7a:	460d      	mov	r5, r1
 8006f7c:	e022      	b.n	8006fc4 <scalbn+0x94>
 8006f7e:	460b      	mov	r3, r1
 8006f80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006f84:	3936      	subs	r1, #54	@ 0x36
 8006f86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8006f8a:	4296      	cmp	r6, r2
 8006f8c:	dd0d      	ble.n	8006faa <scalbn+0x7a>
 8006f8e:	2d00      	cmp	r5, #0
 8006f90:	a11d      	add	r1, pc, #116	@ (adr r1, 8007008 <scalbn+0xd8>)
 8006f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f96:	da02      	bge.n	8006f9e <scalbn+0x6e>
 8006f98:	a11d      	add	r1, pc, #116	@ (adr r1, 8007010 <scalbn+0xe0>)
 8006f9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f9e:	a31a      	add	r3, pc, #104	@ (adr r3, 8007008 <scalbn+0xd8>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	f7f9 fb40 	bl	8000628 <__aeabi_dmul>
 8006fa8:	e7e6      	b.n	8006f78 <scalbn+0x48>
 8006faa:	1872      	adds	r2, r6, r1
 8006fac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8006fb0:	428a      	cmp	r2, r1
 8006fb2:	dcec      	bgt.n	8006f8e <scalbn+0x5e>
 8006fb4:	2a00      	cmp	r2, #0
 8006fb6:	dd08      	ble.n	8006fca <scalbn+0x9a>
 8006fb8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006fbc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006fc0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fc4:	ec45 4b10 	vmov	d0, r4, r5
 8006fc8:	bd70      	pop	{r4, r5, r6, pc}
 8006fca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8006fce:	da08      	bge.n	8006fe2 <scalbn+0xb2>
 8006fd0:	2d00      	cmp	r5, #0
 8006fd2:	a10b      	add	r1, pc, #44	@ (adr r1, 8007000 <scalbn+0xd0>)
 8006fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd8:	dac1      	bge.n	8006f5e <scalbn+0x2e>
 8006fda:	a10f      	add	r1, pc, #60	@ (adr r1, 8007018 <scalbn+0xe8>)
 8006fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe0:	e7bd      	b.n	8006f5e <scalbn+0x2e>
 8006fe2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006fe6:	3236      	adds	r2, #54	@ 0x36
 8006fe8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8006fec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8007028 <scalbn+0xf8>)
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	e7d4      	b.n	8006fa4 <scalbn+0x74>
 8006ffa:	bf00      	nop
 8006ffc:	f3af 8000 	nop.w
 8007000:	c2f8f359 	.word	0xc2f8f359
 8007004:	01a56e1f 	.word	0x01a56e1f
 8007008:	8800759c 	.word	0x8800759c
 800700c:	7e37e43c 	.word	0x7e37e43c
 8007010:	8800759c 	.word	0x8800759c
 8007014:	fe37e43c 	.word	0xfe37e43c
 8007018:	c2f8f359 	.word	0xc2f8f359
 800701c:	81a56e1f 	.word	0x81a56e1f
 8007020:	43500000 	.word	0x43500000
 8007024:	ffff3cb0 	.word	0xffff3cb0
 8007028:	3c900000 	.word	0x3c900000
 800702c:	00000000 	.word	0x00000000

08007030 <floor>:
 8007030:	ec51 0b10 	vmov	r0, r1, d0
 8007034:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800703c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8007040:	2e13      	cmp	r6, #19
 8007042:	460c      	mov	r4, r1
 8007044:	4605      	mov	r5, r0
 8007046:	4680      	mov	r8, r0
 8007048:	dc34      	bgt.n	80070b4 <floor+0x84>
 800704a:	2e00      	cmp	r6, #0
 800704c:	da17      	bge.n	800707e <floor+0x4e>
 800704e:	a332      	add	r3, pc, #200	@ (adr r3, 8007118 <floor+0xe8>)
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f7f9 f932 	bl	80002bc <__adddf3>
 8007058:	2200      	movs	r2, #0
 800705a:	2300      	movs	r3, #0
 800705c:	f7f9 fd74 	bl	8000b48 <__aeabi_dcmpgt>
 8007060:	b150      	cbz	r0, 8007078 <floor+0x48>
 8007062:	2c00      	cmp	r4, #0
 8007064:	da55      	bge.n	8007112 <floor+0xe2>
 8007066:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800706a:	432c      	orrs	r4, r5
 800706c:	2500      	movs	r5, #0
 800706e:	42ac      	cmp	r4, r5
 8007070:	4c2b      	ldr	r4, [pc, #172]	@ (8007120 <floor+0xf0>)
 8007072:	bf08      	it	eq
 8007074:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007078:	4621      	mov	r1, r4
 800707a:	4628      	mov	r0, r5
 800707c:	e023      	b.n	80070c6 <floor+0x96>
 800707e:	4f29      	ldr	r7, [pc, #164]	@ (8007124 <floor+0xf4>)
 8007080:	4137      	asrs	r7, r6
 8007082:	ea01 0307 	and.w	r3, r1, r7
 8007086:	4303      	orrs	r3, r0
 8007088:	d01d      	beq.n	80070c6 <floor+0x96>
 800708a:	a323      	add	r3, pc, #140	@ (adr r3, 8007118 <floor+0xe8>)
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f7f9 f914 	bl	80002bc <__adddf3>
 8007094:	2200      	movs	r2, #0
 8007096:	2300      	movs	r3, #0
 8007098:	f7f9 fd56 	bl	8000b48 <__aeabi_dcmpgt>
 800709c:	2800      	cmp	r0, #0
 800709e:	d0eb      	beq.n	8007078 <floor+0x48>
 80070a0:	2c00      	cmp	r4, #0
 80070a2:	bfbe      	ittt	lt
 80070a4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80070a8:	4133      	asrlt	r3, r6
 80070aa:	18e4      	addlt	r4, r4, r3
 80070ac:	ea24 0407 	bic.w	r4, r4, r7
 80070b0:	2500      	movs	r5, #0
 80070b2:	e7e1      	b.n	8007078 <floor+0x48>
 80070b4:	2e33      	cmp	r6, #51	@ 0x33
 80070b6:	dd0a      	ble.n	80070ce <floor+0x9e>
 80070b8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80070bc:	d103      	bne.n	80070c6 <floor+0x96>
 80070be:	4602      	mov	r2, r0
 80070c0:	460b      	mov	r3, r1
 80070c2:	f7f9 f8fb 	bl	80002bc <__adddf3>
 80070c6:	ec41 0b10 	vmov	d0, r0, r1
 80070ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80070ce:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80070d2:	f04f 37ff 	mov.w	r7, #4294967295
 80070d6:	40df      	lsrs	r7, r3
 80070d8:	4207      	tst	r7, r0
 80070da:	d0f4      	beq.n	80070c6 <floor+0x96>
 80070dc:	a30e      	add	r3, pc, #56	@ (adr r3, 8007118 <floor+0xe8>)
 80070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e2:	f7f9 f8eb 	bl	80002bc <__adddf3>
 80070e6:	2200      	movs	r2, #0
 80070e8:	2300      	movs	r3, #0
 80070ea:	f7f9 fd2d 	bl	8000b48 <__aeabi_dcmpgt>
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d0c2      	beq.n	8007078 <floor+0x48>
 80070f2:	2c00      	cmp	r4, #0
 80070f4:	da0a      	bge.n	800710c <floor+0xdc>
 80070f6:	2e14      	cmp	r6, #20
 80070f8:	d101      	bne.n	80070fe <floor+0xce>
 80070fa:	3401      	adds	r4, #1
 80070fc:	e006      	b.n	800710c <floor+0xdc>
 80070fe:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007102:	2301      	movs	r3, #1
 8007104:	40b3      	lsls	r3, r6
 8007106:	441d      	add	r5, r3
 8007108:	4545      	cmp	r5, r8
 800710a:	d3f6      	bcc.n	80070fa <floor+0xca>
 800710c:	ea25 0507 	bic.w	r5, r5, r7
 8007110:	e7b2      	b.n	8007078 <floor+0x48>
 8007112:	2500      	movs	r5, #0
 8007114:	462c      	mov	r4, r5
 8007116:	e7af      	b.n	8007078 <floor+0x48>
 8007118:	8800759c 	.word	0x8800759c
 800711c:	7e37e43c 	.word	0x7e37e43c
 8007120:	bff00000 	.word	0xbff00000
 8007124:	000fffff 	.word	0x000fffff

08007128 <_init>:
 8007128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712a:	bf00      	nop
 800712c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800712e:	bc08      	pop	{r3}
 8007130:	469e      	mov	lr, r3
 8007132:	4770      	bx	lr

08007134 <_fini>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr
