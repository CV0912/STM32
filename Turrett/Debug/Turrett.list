
Turrett.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080070f0  080070f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800719c  0800719c  0000907c  2**0
                  CONTENTS
  4 .ARM          00000008  0800719c  0800719c  0000819c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071a4  080071a4  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071a4  080071a4  000081a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080071a8  080071a8  000081a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080071ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c4  20000080  08007228  00009080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08007228  00009444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebf0  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021b9  00000000  00000000  00017c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  00019e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abd  00000000  00000000  0001ac18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002325d  00000000  00000000  0001b6d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010730  00000000  00000000  0003e932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4825  00000000  00000000  0004f062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00123887  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  001238cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00127b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080070d8 	.word	0x080070d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	080070d8 	.word	0x080070d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b96a 	b.w	8000dd8 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9d08      	ldr	r5, [sp, #32]
 8000b22:	460c      	mov	r4, r1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d14e      	bne.n	8000bc6 <__udivmoddi4+0xaa>
 8000b28:	4694      	mov	ip, r2
 8000b2a:	458c      	cmp	ip, r1
 8000b2c:	4686      	mov	lr, r0
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	d962      	bls.n	8000bfa <__udivmoddi4+0xde>
 8000b34:	b14a      	cbz	r2, 8000b4a <__udivmoddi4+0x2e>
 8000b36:	f1c2 0320 	rsb	r3, r2, #32
 8000b3a:	4091      	lsls	r1, r2
 8000b3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b44:	4319      	orrs	r1, r3
 8000b46:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b4e:	fa1f f68c 	uxth.w	r6, ip
 8000b52:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b56:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b5a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb04 f106 	mul.w	r1, r4, r6
 8000b66:	4299      	cmp	r1, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x64>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b72:	f080 8112 	bcs.w	8000d9a <__udivmoddi4+0x27e>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 810f 	bls.w	8000d9a <__udivmoddi4+0x27e>
 8000b7c:	3c02      	subs	r4, #2
 8000b7e:	4463      	add	r3, ip
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	fa1f f38e 	uxth.w	r3, lr
 8000b86:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b8a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb00 f606 	mul.w	r6, r0, r6
 8000b96:	429e      	cmp	r6, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x94>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ba2:	f080 80fc 	bcs.w	8000d9e <__udivmoddi4+0x282>
 8000ba6:	429e      	cmp	r6, r3
 8000ba8:	f240 80f9 	bls.w	8000d9e <__udivmoddi4+0x282>
 8000bac:	4463      	add	r3, ip
 8000bae:	3802      	subs	r0, #2
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	b11d      	cbz	r5, 8000bc2 <__udivmoddi4+0xa6>
 8000bba:	40d3      	lsrs	r3, r2
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	e9c5 3200 	strd	r3, r2, [r5]
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d905      	bls.n	8000bd6 <__udivmoddi4+0xba>
 8000bca:	b10d      	cbz	r5, 8000bd0 <__udivmoddi4+0xb4>
 8000bcc:	e9c5 0100 	strd	r0, r1, [r5]
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e7f5      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bd6:	fab3 f183 	clz	r1, r3
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d146      	bne.n	8000c6c <__udivmoddi4+0x150>
 8000bde:	42a3      	cmp	r3, r4
 8000be0:	d302      	bcc.n	8000be8 <__udivmoddi4+0xcc>
 8000be2:	4290      	cmp	r0, r2
 8000be4:	f0c0 80f0 	bcc.w	8000dc8 <__udivmoddi4+0x2ac>
 8000be8:	1a86      	subs	r6, r0, r2
 8000bea:	eb64 0303 	sbc.w	r3, r4, r3
 8000bee:	2001      	movs	r0, #1
 8000bf0:	2d00      	cmp	r5, #0
 8000bf2:	d0e6      	beq.n	8000bc2 <__udivmoddi4+0xa6>
 8000bf4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bf8:	e7e3      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000bfa:	2a00      	cmp	r2, #0
 8000bfc:	f040 8090 	bne.w	8000d20 <__udivmoddi4+0x204>
 8000c00:	eba1 040c 	sub.w	r4, r1, ip
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa1f f78c 	uxth.w	r7, ip
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb08 4416 	mls	r4, r8, r6, r4
 8000c1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1e:	fb07 f006 	mul.w	r0, r7, r6
 8000c22:	4298      	cmp	r0, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x11c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x11a>
 8000c30:	4298      	cmp	r0, r3
 8000c32:	f200 80cd 	bhi.w	8000dd0 <__udivmoddi4+0x2b4>
 8000c36:	4626      	mov	r6, r4
 8000c38:	1a1c      	subs	r4, r3, r0
 8000c3a:	fa1f f38e 	uxth.w	r3, lr
 8000c3e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c42:	fb08 4410 	mls	r4, r8, r0, r4
 8000c46:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4a:	fb00 f707 	mul.w	r7, r0, r7
 8000c4e:	429f      	cmp	r7, r3
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0x148>
 8000c52:	eb1c 0303 	adds.w	r3, ip, r3
 8000c56:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c5a:	d202      	bcs.n	8000c62 <__udivmoddi4+0x146>
 8000c5c:	429f      	cmp	r7, r3
 8000c5e:	f200 80b0 	bhi.w	8000dc2 <__udivmoddi4+0x2a6>
 8000c62:	4620      	mov	r0, r4
 8000c64:	1bdb      	subs	r3, r3, r7
 8000c66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0x9c>
 8000c6c:	f1c1 0620 	rsb	r6, r1, #32
 8000c70:	408b      	lsls	r3, r1
 8000c72:	fa22 f706 	lsr.w	r7, r2, r6
 8000c76:	431f      	orrs	r7, r3
 8000c78:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c7c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c80:	ea43 030c 	orr.w	r3, r3, ip
 8000c84:	40f4      	lsrs	r4, r6
 8000c86:	fa00 f801 	lsl.w	r8, r0, r1
 8000c8a:	0c38      	lsrs	r0, r7, #16
 8000c8c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c90:	fbb4 fef0 	udiv	lr, r4, r0
 8000c94:	fa1f fc87 	uxth.w	ip, r7
 8000c98:	fb00 441e 	mls	r4, r0, lr, r4
 8000c9c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ca4:	45a1      	cmp	r9, r4
 8000ca6:	fa02 f201 	lsl.w	r2, r2, r1
 8000caa:	d90a      	bls.n	8000cc2 <__udivmoddi4+0x1a6>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000cb2:	f080 8084 	bcs.w	8000dbe <__udivmoddi4+0x2a2>
 8000cb6:	45a1      	cmp	r9, r4
 8000cb8:	f240 8081 	bls.w	8000dbe <__udivmoddi4+0x2a2>
 8000cbc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cc0:	443c      	add	r4, r7
 8000cc2:	eba4 0409 	sub.w	r4, r4, r9
 8000cc6:	fa1f f983 	uxth.w	r9, r3
 8000cca:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cce:	fb00 4413 	mls	r4, r0, r3, r4
 8000cd2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x1d2>
 8000cde:	193c      	adds	r4, r7, r4
 8000ce0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ce4:	d267      	bcs.n	8000db6 <__udivmoddi4+0x29a>
 8000ce6:	45a4      	cmp	ip, r4
 8000ce8:	d965      	bls.n	8000db6 <__udivmoddi4+0x29a>
 8000cea:	3b02      	subs	r3, #2
 8000cec:	443c      	add	r4, r7
 8000cee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cf2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cf6:	eba4 040c 	sub.w	r4, r4, ip
 8000cfa:	429c      	cmp	r4, r3
 8000cfc:	46ce      	mov	lr, r9
 8000cfe:	469c      	mov	ip, r3
 8000d00:	d351      	bcc.n	8000da6 <__udivmoddi4+0x28a>
 8000d02:	d04e      	beq.n	8000da2 <__udivmoddi4+0x286>
 8000d04:	b155      	cbz	r5, 8000d1c <__udivmoddi4+0x200>
 8000d06:	ebb8 030e 	subs.w	r3, r8, lr
 8000d0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d12:	40cb      	lsrs	r3, r1
 8000d14:	431e      	orrs	r6, r3
 8000d16:	40cc      	lsrs	r4, r1
 8000d18:	e9c5 6400 	strd	r6, r4, [r5]
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	e750      	b.n	8000bc2 <__udivmoddi4+0xa6>
 8000d20:	f1c2 0320 	rsb	r3, r2, #32
 8000d24:	fa20 f103 	lsr.w	r1, r0, r3
 8000d28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d30:	4094      	lsls	r4, r2
 8000d32:	430c      	orrs	r4, r1
 8000d34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d3c:	fa1f f78c 	uxth.w	r7, ip
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3110 	mls	r1, r8, r0, r3
 8000d48:	0c23      	lsrs	r3, r4, #16
 8000d4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4e:	fb00 f107 	mul.w	r1, r0, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d908      	bls.n	8000d68 <__udivmoddi4+0x24c>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d5e:	d22c      	bcs.n	8000dba <__udivmoddi4+0x29e>
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d92a      	bls.n	8000dba <__udivmoddi4+0x29e>
 8000d64:	3802      	subs	r0, #2
 8000d66:	4463      	add	r3, ip
 8000d68:	1a5b      	subs	r3, r3, r1
 8000d6a:	b2a4      	uxth	r4, r4
 8000d6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d70:	fb08 3311 	mls	r3, r8, r1, r3
 8000d74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d78:	fb01 f307 	mul.w	r3, r1, r7
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x276>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d88:	d213      	bcs.n	8000db2 <__udivmoddi4+0x296>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d911      	bls.n	8000db2 <__udivmoddi4+0x296>
 8000d8e:	3902      	subs	r1, #2
 8000d90:	4464      	add	r4, ip
 8000d92:	1ae4      	subs	r4, r4, r3
 8000d94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d98:	e739      	b.n	8000c0e <__udivmoddi4+0xf2>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	e6f0      	b.n	8000b80 <__udivmoddi4+0x64>
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e706      	b.n	8000bb0 <__udivmoddi4+0x94>
 8000da2:	45c8      	cmp	r8, r9
 8000da4:	d2ae      	bcs.n	8000d04 <__udivmoddi4+0x1e8>
 8000da6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000daa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dae:	3801      	subs	r0, #1
 8000db0:	e7a8      	b.n	8000d04 <__udivmoddi4+0x1e8>
 8000db2:	4631      	mov	r1, r6
 8000db4:	e7ed      	b.n	8000d92 <__udivmoddi4+0x276>
 8000db6:	4603      	mov	r3, r0
 8000db8:	e799      	b.n	8000cee <__udivmoddi4+0x1d2>
 8000dba:	4630      	mov	r0, r6
 8000dbc:	e7d4      	b.n	8000d68 <__udivmoddi4+0x24c>
 8000dbe:	46d6      	mov	lr, sl
 8000dc0:	e77f      	b.n	8000cc2 <__udivmoddi4+0x1a6>
 8000dc2:	4463      	add	r3, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	e74d      	b.n	8000c64 <__udivmoddi4+0x148>
 8000dc8:	4606      	mov	r6, r0
 8000dca:	4623      	mov	r3, r4
 8000dcc:	4608      	mov	r0, r1
 8000dce:	e70f      	b.n	8000bf0 <__udivmoddi4+0xd4>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	e730      	b.n	8000c38 <__udivmoddi4+0x11c>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <map>:
static int ebike_running = 0;  // Toggle flag
static int prev_cir = 0;
static int prev_tri = 0;
int Buff2 = -50;
static int prev_cro = 0;
long map(long x, long in_min, long in_max, long out_min, long out_max) {
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	603b      	str	r3, [r7, #0]

	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	69b9      	ldr	r1, [r7, #24]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	1a8a      	subs	r2, r1, r2
 8000df6:	fb03 f202 	mul.w	r2, r3, r2
 8000dfa:	6879      	ldr	r1, [r7, #4]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1acb      	subs	r3, r1, r3
 8000e00:	fb92 f2f3 	sdiv	r2, r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4413      	add	r3, r2

}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rxbuff[16];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 8000e1c:	2210      	movs	r2, #16
 8000e1e:	4904      	ldr	r1, [pc, #16]	@ (8000e30 <HAL_UART_RxCpltCallback+0x1c>)
 8000e20:	4804      	ldr	r0, [pc, #16]	@ (8000e34 <HAL_UART_RxCpltCallback+0x20>)
 8000e22:	f004 f91c 	bl	800505e <HAL_UART_Receive_DMA>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200002e0 	.word	0x200002e0
 8000e34:	200001ec 	.word	0x200001ec

08000e38 <constrain>:
//    H = time_constant;
//    K = Kp;
//    B = Kd;
//    L = Ki;
//}
int constrain(int value, int min_val, int max_val) {
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
	if (value < min_val)
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	da01      	bge.n	8000e50 <constrain+0x18>
		return min_val;
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	e006      	b.n	8000e5e <constrain+0x26>
	if (value > max_val)
 8000e50:	68fa      	ldr	r2, [r7, #12]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dd01      	ble.n	8000e5c <constrain+0x24>
		return max_val;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	e000      	b.n	8000e5e <constrain+0x26>
	return value;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
	...

08000e6c <compute>:
void compute()
{
 8000e6c:	b5b0      	push	{r4, r5, r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
	unsigned long now = HAL_GetTick();
 8000e72:	f001 fa15 	bl	80022a0 <HAL_GetTick>
 8000e76:	61f8      	str	r0, [r7, #28]
	double timeChange = (double)(now-lastTime);
 8000e78:	4b67      	ldr	r3, [pc, #412]	@ (8001018 <compute+0x1ac>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	69fa      	ldr	r2, [r7, #28]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fb57 	bl	8000534 <__aeabi_ui2d>
 8000e86:	4602      	mov	r2, r0
 8000e88:	460b      	mov	r3, r1
 8000e8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	error = setpoint - signed_counter;
 8000e8e:	4b63      	ldr	r3, [pc, #396]	@ (800101c <compute+0x1b0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a63      	ldr	r2, [pc, #396]	@ (8001020 <compute+0x1b4>)
 8000e94:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000e98:	1a9b      	subs	r3, r3, r2
 8000e9a:	4a62      	ldr	r2, [pc, #392]	@ (8001024 <compute+0x1b8>)
 8000e9c:	6013      	str	r3, [r2, #0]
	double derr = (error-lasterr)/timeChange;
 8000e9e:	4b61      	ldr	r3, [pc, #388]	@ (8001024 <compute+0x1b8>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b61      	ldr	r3, [pc, #388]	@ (8001028 <compute+0x1bc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	1ad3      	subs	r3, r2, r3
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff fb53 	bl	8000554 <__aeabi_i2d>
 8000eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000eb2:	f7ff fce3 	bl	800087c <__aeabi_ddiv>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	e9c7 2302 	strd	r2, r3, [r7, #8]
	errsum+=error;
 8000ebe:	4b59      	ldr	r3, [pc, #356]	@ (8001024 <compute+0x1b8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eca:	4b58      	ldr	r3, [pc, #352]	@ (800102c <compute+0x1c0>)
 8000ecc:	edd3 7a00 	vldr	s15, [r3]
 8000ed0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ed4:	4b55      	ldr	r3, [pc, #340]	@ (800102c <compute+0x1c0>)
 8000ed6:	edc3 7a00 	vstr	s15, [r3]
	float s = c * error+ derr;
 8000eda:	4b52      	ldr	r3, [pc, #328]	@ (8001024 <compute+0x1b8>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fb38 	bl	8000554 <__aeabi_i2d>
 8000ee4:	4b52      	ldr	r3, [pc, #328]	@ (8001030 <compute+0x1c4>)
 8000ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eea:	f7ff fb9d 	bl	8000628 <__aeabi_dmul>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000efa:	f7ff f9df 	bl	80002bc <__adddf3>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fda1 	bl	8000a4c <__aeabi_d2f>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	607b      	str	r3, [r7, #4]
	output = kp *error+ kd*derr + kt* (k * sign(s));
 8000f0e:	4b45      	ldr	r3, [pc, #276]	@ (8001024 <compute+0x1b8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fb1e 	bl	8000554 <__aeabi_i2d>
 8000f18:	4b46      	ldr	r3, [pc, #280]	@ (8001034 <compute+0x1c8>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb83 	bl	8000628 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4614      	mov	r4, r2
 8000f28:	461d      	mov	r5, r3
 8000f2a:	4b43      	ldr	r3, [pc, #268]	@ (8001038 <compute+0x1cc>)
 8000f2c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f34:	f7ff fb78 	bl	8000628 <__aeabi_dmul>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	4629      	mov	r1, r5
 8000f40:	f7ff f9bc 	bl	80002bc <__adddf3>
 8000f44:	4602      	mov	r2, r0
 8000f46:	460b      	mov	r3, r1
 8000f48:	4614      	mov	r4, r2
 8000f4a:	461d      	mov	r5, r3
 8000f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f58:	d503      	bpl.n	8000f62 <compute+0xf6>
 8000f5a:	f04f 0000 	mov.w	r0, #0
 8000f5e:	4937      	ldr	r1, [pc, #220]	@ (800103c <compute+0x1d0>)
 8000f60:	e00e      	b.n	8000f80 <compute+0x114>
 8000f62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f6e:	dd03      	ble.n	8000f78 <compute+0x10c>
 8000f70:	f04f 0000 	mov.w	r0, #0
 8000f74:	4932      	ldr	r1, [pc, #200]	@ (8001040 <compute+0x1d4>)
 8000f76:	e003      	b.n	8000f80 <compute+0x114>
 8000f78:	f04f 0000 	mov.w	r0, #0
 8000f7c:	f04f 0100 	mov.w	r1, #0
 8000f80:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <compute+0x1d8>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff fb4f 	bl	8000628 <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <compute+0x1dc>)
 8000f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f98:	f7ff fb46 	bl	8000628 <__aeabi_dmul>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	4629      	mov	r1, r5
 8000fa4:	f7ff f98a 	bl	80002bc <__adddf3>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd4c 	bl	8000a4c <__aeabi_d2f>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	4a25      	ldr	r2, [pc, #148]	@ (800104c <compute+0x1e0>)
 8000fb8:	6013      	str	r3, [r2, #0]
	output = constrain(output,-500,500);
 8000fba:	4b24      	ldr	r3, [pc, #144]	@ (800104c <compute+0x1e0>)
 8000fbc:	edd3 7a00 	vldr	s15, [r3]
 8000fc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000fc8:	4921      	ldr	r1, [pc, #132]	@ (8001050 <compute+0x1e4>)
 8000fca:	ee17 0a90 	vmov	r0, s15
 8000fce:	f7ff ff33 	bl	8000e38 <constrain>
 8000fd2:	ee07 0a90 	vmov	s15, r0
 8000fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <compute+0x1e0>)
 8000fdc:	edc3 7a00 	vstr	s15, [r3]
	output = abs(output);
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <compute+0x1e0>)
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fea:	ee17 3a90 	vmov	r3, s15
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bfb8      	it	lt
 8000ff2:	425b      	neglt	r3, r3
 8000ff4:	ee07 3a90 	vmov	s15, r3
 8000ff8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <compute+0x1e0>)
 8000ffe:	edc3 7a00 	vstr	s15, [r3]
	lasterr=error;
 8001002:	4b08      	ldr	r3, [pc, #32]	@ (8001024 <compute+0x1b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a08      	ldr	r2, [pc, #32]	@ (8001028 <compute+0x1bc>)
 8001008:	6013      	str	r3, [r2, #0]
	lastTime = now;
 800100a:	4a03      	ldr	r2, [pc, #12]	@ (8001018 <compute+0x1ac>)
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	6013      	str	r3, [r2, #0]
//	printf("error = %d \n\r",error);


}
 8001010:	bf00      	nop
 8001012:	3720      	adds	r7, #32
 8001014:	46bd      	mov	sp, r7
 8001016:	bdb0      	pop	{r4, r5, r7, pc}
 8001018:	200002dc 	.word	0x200002dc
 800101c:	200000a0 	.word	0x200000a0
 8001020:	2000009c 	.word	0x2000009c
 8001024:	200000a4 	.word	0x200000a4
 8001028:	200000a8 	.word	0x200000a8
 800102c:	20000134 	.word	0x20000134
 8001030:	20000100 	.word	0x20000100
 8001034:	200000f0 	.word	0x200000f0
 8001038:	200000f8 	.word	0x200000f8
 800103c:	bff00000 	.word	0xbff00000
 8001040:	3ff00000 	.word	0x3ff00000
 8001044:	20000110 	.word	0x20000110
 8001048:	20000108 	.word	0x20000108
 800104c:	20000120 	.word	0x20000120
 8001050:	fffffe0c 	.word	0xfffffe0c

08001054 <SetTunings>:
void SetTunings(double Kp,double Ki,double Kd,double Kt,double K)
{
 8001054:	b480      	push	{r7}
 8001056:	b08b      	sub	sp, #44	@ 0x2c
 8001058:	af00      	add	r7, sp, #0
 800105a:	ed87 0b08 	vstr	d0, [r7, #32]
 800105e:	ed87 1b06 	vstr	d1, [r7, #24]
 8001062:	ed87 2b04 	vstr	d2, [r7, #16]
 8001066:	ed87 3b02 	vstr	d3, [r7, #8]
 800106a:	ed87 4b00 	vstr	d4, [r7]
  kp=Kp;
 800106e:	490f      	ldr	r1, [pc, #60]	@ (80010ac <SetTunings+0x58>)
 8001070:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001074:	e9c1 2300 	strd	r2, r3, [r1]
  ki=Ki;
 8001078:	490d      	ldr	r1, [pc, #52]	@ (80010b0 <SetTunings+0x5c>)
 800107a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800107e:	e9c1 2300 	strd	r2, r3, [r1]
  kd=Kd;
 8001082:	490c      	ldr	r1, [pc, #48]	@ (80010b4 <SetTunings+0x60>)
 8001084:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001088:	e9c1 2300 	strd	r2, r3, [r1]
  kt=Kt;
 800108c:	490a      	ldr	r1, [pc, #40]	@ (80010b8 <SetTunings+0x64>)
 800108e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001092:	e9c1 2300 	strd	r2, r3, [r1]
  k=K;
 8001096:	4909      	ldr	r1, [pc, #36]	@ (80010bc <SetTunings+0x68>)
 8001098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800109c:	e9c1 2300 	strd	r2, r3, [r1]
}
 80010a0:	bf00      	nop
 80010a2:	372c      	adds	r7, #44	@ 0x2c
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	200000f0 	.word	0x200000f0
 80010b0:	20000118 	.word	0x20000118
 80010b4:	200000f8 	.word	0x200000f8
 80010b8:	20000108 	.word	0x20000108
 80010bc:	20000110 	.word	0x20000110

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010c2:	b093      	sub	sp, #76	@ 0x4c
 80010c4:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f001 f885 	bl	80021d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 fb4b 	bl	8001764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f000 fd2b 	bl	8001b28 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d2:	f000 fd09 	bl	8001ae8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010d6:	f000 fcdd 	bl	8001a94 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80010da:	f000 fbb1 	bl	8001840 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010de:	f000 fc5b 	bl	8001998 <MX_TIM2_Init>
  MX_UART4_Init();
 80010e2:	f000 fcad 	bl	8001a40 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart4, rxbuff, 16);
 80010e6:	2210      	movs	r2, #16
 80010e8:	4971      	ldr	r1, [pc, #452]	@ (80012b0 <main+0x1f0>)
 80010ea:	4872      	ldr	r0, [pc, #456]	@ (80012b4 <main+0x1f4>)
 80010ec:	f003 ffb7 	bl	800505e <HAL_UART_Receive_DMA>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80010f0:	213c      	movs	r1, #60	@ 0x3c
 80010f2:	4871      	ldr	r0, [pc, #452]	@ (80012b8 <main+0x1f8>)
 80010f4:	f002 ffa0 	bl	8004038 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  /* ps5 controller */
	  		lx = (rxbuff[0] & 0x80) ?
 80010f8:	4b6d      	ldr	r3, [pc, #436]	@ (80012b0 <main+0x1f0>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[0] - 256 : (int32_t) rxbuff[0];
 80010fe:	2b00      	cmp	r3, #0
 8001100:	da04      	bge.n	800110c <main+0x4c>
 8001102:	4b6b      	ldr	r3, [pc, #428]	@ (80012b0 <main+0x1f0>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800110a:	e001      	b.n	8001110 <main+0x50>
 800110c:	4b68      	ldr	r3, [pc, #416]	@ (80012b0 <main+0x1f0>)
 800110e:	781b      	ldrb	r3, [r3, #0]
	  		lx = (rxbuff[0] & 0x80) ?
 8001110:	4a6a      	ldr	r2, [pc, #424]	@ (80012bc <main+0x1fc>)
 8001112:	6013      	str	r3, [r2, #0]
	  		ly = (rxbuff[1] & 0x80) ?
 8001114:	4b66      	ldr	r3, [pc, #408]	@ (80012b0 <main+0x1f0>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[1] - 256 : (int32_t) rxbuff[1];
 800111a:	2b00      	cmp	r3, #0
 800111c:	da04      	bge.n	8001128 <main+0x68>
 800111e:	4b64      	ldr	r3, [pc, #400]	@ (80012b0 <main+0x1f0>)
 8001120:	785b      	ldrb	r3, [r3, #1]
 8001122:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001126:	e001      	b.n	800112c <main+0x6c>
 8001128:	4b61      	ldr	r3, [pc, #388]	@ (80012b0 <main+0x1f0>)
 800112a:	785b      	ldrb	r3, [r3, #1]
	  		ly = (rxbuff[1] & 0x80) ?
 800112c:	4a64      	ldr	r2, [pc, #400]	@ (80012c0 <main+0x200>)
 800112e:	6013      	str	r3, [r2, #0]
	  		rx = (rxbuff[2] & 0x80) ?
 8001130:	4b5f      	ldr	r3, [pc, #380]	@ (80012b0 <main+0x1f0>)
 8001132:	789b      	ldrb	r3, [r3, #2]
 8001134:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[2] - 256 : (int32_t) rxbuff[2];
 8001136:	2b00      	cmp	r3, #0
 8001138:	da04      	bge.n	8001144 <main+0x84>
 800113a:	4b5d      	ldr	r3, [pc, #372]	@ (80012b0 <main+0x1f0>)
 800113c:	789b      	ldrb	r3, [r3, #2]
 800113e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001142:	e001      	b.n	8001148 <main+0x88>
 8001144:	4b5a      	ldr	r3, [pc, #360]	@ (80012b0 <main+0x1f0>)
 8001146:	789b      	ldrb	r3, [r3, #2]
	  		rx = (rxbuff[2] & 0x80) ?
 8001148:	4a5e      	ldr	r2, [pc, #376]	@ (80012c4 <main+0x204>)
 800114a:	6013      	str	r3, [r2, #0]
	  		ry = (rxbuff[3] & 0x80) ?
 800114c:	4b58      	ldr	r3, [pc, #352]	@ (80012b0 <main+0x1f0>)
 800114e:	78db      	ldrb	r3, [r3, #3]
 8001150:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[3] - 256 : (int32_t) rxbuff[3];
 8001152:	2b00      	cmp	r3, #0
 8001154:	da04      	bge.n	8001160 <main+0xa0>
 8001156:	4b56      	ldr	r3, [pc, #344]	@ (80012b0 <main+0x1f0>)
 8001158:	78db      	ldrb	r3, [r3, #3]
 800115a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800115e:	e001      	b.n	8001164 <main+0xa4>
 8001160:	4b53      	ldr	r3, [pc, #332]	@ (80012b0 <main+0x1f0>)
 8001162:	78db      	ldrb	r3, [r3, #3]
	  		ry = (rxbuff[3] & 0x80) ?
 8001164:	4a58      	ldr	r2, [pc, #352]	@ (80012c8 <main+0x208>)
 8001166:	6013      	str	r3, [r2, #0]
	  		cro = (rxbuff[4] & 0x80) ?
 8001168:	4b51      	ldr	r3, [pc, #324]	@ (80012b0 <main+0x1f0>)
 800116a:	791b      	ldrb	r3, [r3, #4]
 800116c:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[4] - 256 : (int32_t) rxbuff[4];
 800116e:	2b00      	cmp	r3, #0
 8001170:	da04      	bge.n	800117c <main+0xbc>
 8001172:	4b4f      	ldr	r3, [pc, #316]	@ (80012b0 <main+0x1f0>)
 8001174:	791b      	ldrb	r3, [r3, #4]
 8001176:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800117a:	e001      	b.n	8001180 <main+0xc0>
 800117c:	4b4c      	ldr	r3, [pc, #304]	@ (80012b0 <main+0x1f0>)
 800117e:	791b      	ldrb	r3, [r3, #4]
	  		cro = (rxbuff[4] & 0x80) ?
 8001180:	4a52      	ldr	r2, [pc, #328]	@ (80012cc <main+0x20c>)
 8001182:	6013      	str	r3, [r2, #0]
	  		squ = (rxbuff[5] & 0x80) ?
 8001184:	4b4a      	ldr	r3, [pc, #296]	@ (80012b0 <main+0x1f0>)
 8001186:	795b      	ldrb	r3, [r3, #5]
 8001188:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[5] - 256 : (int32_t) rxbuff[5];
 800118a:	2b00      	cmp	r3, #0
 800118c:	da04      	bge.n	8001198 <main+0xd8>
 800118e:	4b48      	ldr	r3, [pc, #288]	@ (80012b0 <main+0x1f0>)
 8001190:	795b      	ldrb	r3, [r3, #5]
 8001192:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001196:	e001      	b.n	800119c <main+0xdc>
 8001198:	4b45      	ldr	r3, [pc, #276]	@ (80012b0 <main+0x1f0>)
 800119a:	795b      	ldrb	r3, [r3, #5]
	  		squ = (rxbuff[5] & 0x80) ?
 800119c:	4a4c      	ldr	r2, [pc, #304]	@ (80012d0 <main+0x210>)
 800119e:	6013      	str	r3, [r2, #0]
	  		tri = (rxbuff[6] & 0x80) ?
 80011a0:	4b43      	ldr	r3, [pc, #268]	@ (80012b0 <main+0x1f0>)
 80011a2:	799b      	ldrb	r3, [r3, #6]
 80011a4:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[6] - 256 : (int32_t) rxbuff[6];
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	da04      	bge.n	80011b4 <main+0xf4>
 80011aa:	4b41      	ldr	r3, [pc, #260]	@ (80012b0 <main+0x1f0>)
 80011ac:	799b      	ldrb	r3, [r3, #6]
 80011ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011b2:	e001      	b.n	80011b8 <main+0xf8>
 80011b4:	4b3e      	ldr	r3, [pc, #248]	@ (80012b0 <main+0x1f0>)
 80011b6:	799b      	ldrb	r3, [r3, #6]
	  		tri = (rxbuff[6] & 0x80) ?
 80011b8:	4a46      	ldr	r2, [pc, #280]	@ (80012d4 <main+0x214>)
 80011ba:	6013      	str	r3, [r2, #0]
	  		cir = (rxbuff[7] & 0x80) ?
 80011bc:	4b3c      	ldr	r3, [pc, #240]	@ (80012b0 <main+0x1f0>)
 80011be:	79db      	ldrb	r3, [r3, #7]
 80011c0:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[7] - 256 : (int32_t) rxbuff[7];
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	da04      	bge.n	80011d0 <main+0x110>
 80011c6:	4b3a      	ldr	r3, [pc, #232]	@ (80012b0 <main+0x1f0>)
 80011c8:	79db      	ldrb	r3, [r3, #7]
 80011ca:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011ce:	e001      	b.n	80011d4 <main+0x114>
 80011d0:	4b37      	ldr	r3, [pc, #220]	@ (80012b0 <main+0x1f0>)
 80011d2:	79db      	ldrb	r3, [r3, #7]
	  		cir = (rxbuff[7] & 0x80) ?
 80011d4:	4a40      	ldr	r2, [pc, #256]	@ (80012d8 <main+0x218>)
 80011d6:	6013      	str	r3, [r2, #0]
	  		up = (rxbuff[8] & 0x80) ?
 80011d8:	4b35      	ldr	r3, [pc, #212]	@ (80012b0 <main+0x1f0>)
 80011da:	7a1b      	ldrb	r3, [r3, #8]
 80011dc:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[8] - 256 : (int32_t) rxbuff[8];
 80011de:	2b00      	cmp	r3, #0
 80011e0:	da04      	bge.n	80011ec <main+0x12c>
 80011e2:	4b33      	ldr	r3, [pc, #204]	@ (80012b0 <main+0x1f0>)
 80011e4:	7a1b      	ldrb	r3, [r3, #8]
 80011e6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80011ea:	e001      	b.n	80011f0 <main+0x130>
 80011ec:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <main+0x1f0>)
 80011ee:	7a1b      	ldrb	r3, [r3, #8]
	  		up = (rxbuff[8] & 0x80) ?
 80011f0:	4a3a      	ldr	r2, [pc, #232]	@ (80012dc <main+0x21c>)
 80011f2:	6013      	str	r3, [r2, #0]
	  		down = (rxbuff[9] & 0x80) ?
 80011f4:	4b2e      	ldr	r3, [pc, #184]	@ (80012b0 <main+0x1f0>)
 80011f6:	7a5b      	ldrb	r3, [r3, #9]
 80011f8:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[9] - 256 : (int32_t) rxbuff[9];
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	da04      	bge.n	8001208 <main+0x148>
 80011fe:	4b2c      	ldr	r3, [pc, #176]	@ (80012b0 <main+0x1f0>)
 8001200:	7a5b      	ldrb	r3, [r3, #9]
 8001202:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001206:	e001      	b.n	800120c <main+0x14c>
 8001208:	4b29      	ldr	r3, [pc, #164]	@ (80012b0 <main+0x1f0>)
 800120a:	7a5b      	ldrb	r3, [r3, #9]
	  		down = (rxbuff[9] & 0x80) ?
 800120c:	4a34      	ldr	r2, [pc, #208]	@ (80012e0 <main+0x220>)
 800120e:	6013      	str	r3, [r2, #0]
	  		left = (rxbuff[10] & 0x80) ?
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <main+0x1f0>)
 8001212:	7a9b      	ldrb	r3, [r3, #10]
 8001214:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[10] - 256 : (int32_t) rxbuff[10];
 8001216:	2b00      	cmp	r3, #0
 8001218:	da04      	bge.n	8001224 <main+0x164>
 800121a:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <main+0x1f0>)
 800121c:	7a9b      	ldrb	r3, [r3, #10]
 800121e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001222:	e001      	b.n	8001228 <main+0x168>
 8001224:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <main+0x1f0>)
 8001226:	7a9b      	ldrb	r3, [r3, #10]
	  		left = (rxbuff[10] & 0x80) ?
 8001228:	4a2e      	ldr	r2, [pc, #184]	@ (80012e4 <main+0x224>)
 800122a:	6013      	str	r3, [r2, #0]
	  		right = (rxbuff[11] & 0x80) ?
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <main+0x1f0>)
 800122e:	7adb      	ldrb	r3, [r3, #11]
 8001230:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[11] - 256 : (int32_t) rxbuff[11];
 8001232:	2b00      	cmp	r3, #0
 8001234:	da04      	bge.n	8001240 <main+0x180>
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <main+0x1f0>)
 8001238:	7adb      	ldrb	r3, [r3, #11]
 800123a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800123e:	e001      	b.n	8001244 <main+0x184>
 8001240:	4b1b      	ldr	r3, [pc, #108]	@ (80012b0 <main+0x1f0>)
 8001242:	7adb      	ldrb	r3, [r3, #11]
	  		right = (rxbuff[11] & 0x80) ?
 8001244:	4a28      	ldr	r2, [pc, #160]	@ (80012e8 <main+0x228>)
 8001246:	6013      	str	r3, [r2, #0]
	  		ll1 = (rxbuff[12] & 0x80) ?
 8001248:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <main+0x1f0>)
 800124a:	7b1b      	ldrb	r3, [r3, #12]
 800124c:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[12] - 256 : (int32_t) rxbuff[12];
 800124e:	2b00      	cmp	r3, #0
 8001250:	da04      	bge.n	800125c <main+0x19c>
 8001252:	4b17      	ldr	r3, [pc, #92]	@ (80012b0 <main+0x1f0>)
 8001254:	7b1b      	ldrb	r3, [r3, #12]
 8001256:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800125a:	e001      	b.n	8001260 <main+0x1a0>
 800125c:	4b14      	ldr	r3, [pc, #80]	@ (80012b0 <main+0x1f0>)
 800125e:	7b1b      	ldrb	r3, [r3, #12]
	  		ll1 = (rxbuff[12] & 0x80) ?
 8001260:	4a22      	ldr	r2, [pc, #136]	@ (80012ec <main+0x22c>)
 8001262:	6013      	str	r3, [r2, #0]
	  		ll2 = (rxbuff[13] & 0x80) ?
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <main+0x1f0>)
 8001266:	7b5b      	ldrb	r3, [r3, #13]
 8001268:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[13] - 256 : (int32_t) rxbuff[13];
 800126a:	2b00      	cmp	r3, #0
 800126c:	da04      	bge.n	8001278 <main+0x1b8>
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <main+0x1f0>)
 8001270:	7b5b      	ldrb	r3, [r3, #13]
 8001272:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001276:	e001      	b.n	800127c <main+0x1bc>
 8001278:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <main+0x1f0>)
 800127a:	7b5b      	ldrb	r3, [r3, #13]
	  		ll2 = (rxbuff[13] & 0x80) ?
 800127c:	4a1c      	ldr	r2, [pc, #112]	@ (80012f0 <main+0x230>)
 800127e:	6013      	str	r3, [r2, #0]
	  		rr1 = (rxbuff[14] & 0x80) ?
 8001280:	4b0b      	ldr	r3, [pc, #44]	@ (80012b0 <main+0x1f0>)
 8001282:	7b9b      	ldrb	r3, [r3, #14]
 8001284:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[14] - 256 : (int32_t) rxbuff[14];
 8001286:	2b00      	cmp	r3, #0
 8001288:	da04      	bge.n	8001294 <main+0x1d4>
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <main+0x1f0>)
 800128c:	7b9b      	ldrb	r3, [r3, #14]
 800128e:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001292:	e001      	b.n	8001298 <main+0x1d8>
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <main+0x1f0>)
 8001296:	7b9b      	ldrb	r3, [r3, #14]
	  		rr1 = (rxbuff[14] & 0x80) ?
 8001298:	4a16      	ldr	r2, [pc, #88]	@ (80012f4 <main+0x234>)
 800129a:	6013      	str	r3, [r2, #0]
	  		rr2 = (rxbuff[15] & 0x80) ?
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <main+0x1f0>)
 800129e:	7bdb      	ldrb	r3, [r3, #15]
 80012a0:	b25b      	sxtb	r3, r3
	  				(int32_t) rxbuff[15] - 256 : (int32_t) rxbuff[15];
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da28      	bge.n	80012f8 <main+0x238>
 80012a6:	4b02      	ldr	r3, [pc, #8]	@ (80012b0 <main+0x1f0>)
 80012a8:	7bdb      	ldrb	r3, [r3, #15]
 80012aa:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012ae:	e025      	b.n	80012fc <main+0x23c>
 80012b0:	200002e0 	.word	0x200002e0
 80012b4:	200001ec 	.word	0x200001ec
 80012b8:	200001a4 	.word	0x200001a4
 80012bc:	200000ac 	.word	0x200000ac
 80012c0:	200000b0 	.word	0x200000b0
 80012c4:	200000b4 	.word	0x200000b4
 80012c8:	200000b8 	.word	0x200000b8
 80012cc:	200000bc 	.word	0x200000bc
 80012d0:	200000c0 	.word	0x200000c0
 80012d4:	200000c4 	.word	0x200000c4
 80012d8:	200000c8 	.word	0x200000c8
 80012dc:	200000cc 	.word	0x200000cc
 80012e0:	200000d0 	.word	0x200000d0
 80012e4:	200000d4 	.word	0x200000d4
 80012e8:	200000d8 	.word	0x200000d8
 80012ec:	200000dc 	.word	0x200000dc
 80012f0:	200000e4 	.word	0x200000e4
 80012f4:	200000e0 	.word	0x200000e0
 80012f8:	4b55      	ldr	r3, [pc, #340]	@ (8001450 <main+0x390>)
 80012fa:	7bdb      	ldrb	r3, [r3, #15]
	  		rr2 = (rxbuff[15] & 0x80) ?
 80012fc:	4a55      	ldr	r2, [pc, #340]	@ (8001454 <main+0x394>)
 80012fe:	6013      	str	r3, [r2, #0]

	  				printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld %ld\r\n",
 8001300:	4b55      	ldr	r3, [pc, #340]	@ (8001458 <main+0x398>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	4b55      	ldr	r3, [pc, #340]	@ (800145c <main+0x39c>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	613a      	str	r2, [r7, #16]
 800130c:	4b54      	ldr	r3, [pc, #336]	@ (8001460 <main+0x3a0>)
 800130e:	6818      	ldr	r0, [r3, #0]
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	4b54      	ldr	r3, [pc, #336]	@ (8001464 <main+0x3a4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a54      	ldr	r2, [pc, #336]	@ (8001468 <main+0x3a8>)
 8001318:	6812      	ldr	r2, [r2, #0]
 800131a:	4954      	ldr	r1, [pc, #336]	@ (800146c <main+0x3ac>)
 800131c:	6809      	ldr	r1, [r1, #0]
 800131e:	4854      	ldr	r0, [pc, #336]	@ (8001470 <main+0x3b0>)
 8001320:	6800      	ldr	r0, [r0, #0]
 8001322:	4c54      	ldr	r4, [pc, #336]	@ (8001474 <main+0x3b4>)
 8001324:	6824      	ldr	r4, [r4, #0]
 8001326:	60bc      	str	r4, [r7, #8]
 8001328:	4d53      	ldr	r5, [pc, #332]	@ (8001478 <main+0x3b8>)
 800132a:	682d      	ldr	r5, [r5, #0]
 800132c:	4e53      	ldr	r6, [pc, #332]	@ (800147c <main+0x3bc>)
 800132e:	6836      	ldr	r6, [r6, #0]
 8001330:	4c53      	ldr	r4, [pc, #332]	@ (8001480 <main+0x3c0>)
 8001332:	6824      	ldr	r4, [r4, #0]
 8001334:	607c      	str	r4, [r7, #4]
 8001336:	4c47      	ldr	r4, [pc, #284]	@ (8001454 <main+0x394>)
 8001338:	6824      	ldr	r4, [r4, #0]
 800133a:	9408      	str	r4, [sp, #32]
 800133c:	687c      	ldr	r4, [r7, #4]
 800133e:	9407      	str	r4, [sp, #28]
 8001340:	9606      	str	r6, [sp, #24]
 8001342:	9505      	str	r5, [sp, #20]
 8001344:	68bc      	ldr	r4, [r7, #8]
 8001346:	9404      	str	r4, [sp, #16]
 8001348:	9003      	str	r0, [sp, #12]
 800134a:	9102      	str	r1, [sp, #8]
 800134c:	9201      	str	r2, [sp, #4]
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	6979      	ldr	r1, [r7, #20]
 8001356:	484b      	ldr	r0, [pc, #300]	@ (8001484 <main+0x3c4>)
 8001358:	f005 f850 	bl	80063fc <iprintf>
	  						lx, ly, rx, ry, cro, squ, tri, cir, ll1, rr1,ll2,rr2);
//	  		printf("Received Integers: %ld %ld %ld %ld %ld %ld %ld %ld\r\n", lx, ly,
//	  				rx, ry, cro, squ, tri, cir);
	  uint16_t raw_counter = __HAL_TIM_GET_COUNTER(&htim2);
 800135c:	4b4a      	ldr	r3, [pc, #296]	@ (8001488 <main+0x3c8>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001362:	83fb      	strh	r3, [r7, #30]

	 	  		// Convert to signed values
	 	  signed_counter =(raw_counter < 32768) ?	(int16_t) raw_counter :(int16_t) (raw_counter - 65536);
 8001364:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001368:	4b48      	ldr	r3, [pc, #288]	@ (800148c <main+0x3cc>)
 800136a:	801a      	strh	r2, [r3, #0]
	 	 SetTunings(0.5,0.5, 0, 10.0, -0.005);  // Initial tuning for 50kg·cm motor
 800136c:	ed9f 4b30 	vldr	d4, [pc, #192]	@ 8001430 <main+0x370>
 8001370:	ed9f 3b31 	vldr	d3, [pc, #196]	@ 8001438 <main+0x378>
 8001374:	ed9f 2b32 	vldr	d2, [pc, #200]	@ 8001440 <main+0x380>
 8001378:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 8001448 <main+0x388>
 800137c:	ed9f 0b32 	vldr	d0, [pc, #200]	@ 8001448 <main+0x388>
 8001380:	f7ff fe68 	bl	8001054 <SetTunings>
	 	 c = 1.5;  // Sliding surface parameter
 8001384:	4942      	ldr	r1, [pc, #264]	@ (8001490 <main+0x3d0>)
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	4b42      	ldr	r3, [pc, #264]	@ (8001494 <main+0x3d4>)
 800138c:	e9c1 2300 	strd	r2, r3, [r1]
	 	 if(left==1)
 8001390:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <main+0x3d8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <main+0x2e4>
	 		 setpoint+=100;
 8001398:	4b40      	ldr	r3, [pc, #256]	@ (800149c <main+0x3dc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3364      	adds	r3, #100	@ 0x64
 800139e:	4a3f      	ldr	r2, [pc, #252]	@ (800149c <main+0x3dc>)
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	e008      	b.n	80013b6 <main+0x2f6>
	 	 else if(right==1)
 80013a4:	4b3e      	ldr	r3, [pc, #248]	@ (80014a0 <main+0x3e0>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d104      	bne.n	80013b6 <main+0x2f6>
	 		 setpoint-=100;
 80013ac:	4b3b      	ldr	r3, [pc, #236]	@ (800149c <main+0x3dc>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3b64      	subs	r3, #100	@ 0x64
 80013b2:	4a3a      	ldr	r2, [pc, #232]	@ (800149c <main+0x3dc>)
 80013b4:	6013      	str	r3, [r2, #0]
	 	  compute();
 80013b6:	f7ff fd59 	bl	8000e6c <compute>
//	 	  +
	 	  if(signed_counter<setpoint)
 80013ba:	4b34      	ldr	r3, [pc, #208]	@ (800148c <main+0x3cc>)
 80013bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b36      	ldr	r3, [pc, #216]	@ (800149c <main+0x3dc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	da13      	bge.n	80013f2 <main+0x332>
	 	  {
	 		 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 80013ca:	2201      	movs	r2, #1
 80013cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013d0:	4834      	ldr	r0, [pc, #208]	@ (80014a4 <main+0x3e4>)
 80013d2:	f001 fe19 	bl	8003008 <HAL_GPIO_WritePin>
	 		TIM1->CCR1 = output;
 80013d6:	4b34      	ldr	r3, [pc, #208]	@ (80014a8 <main+0x3e8>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	4b33      	ldr	r3, [pc, #204]	@ (80014ac <main+0x3ec>)
 80013de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e2:	ee17 2a90 	vmov	r2, s15
 80013e6:	635a      	str	r2, [r3, #52]	@ 0x34
	 		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013e8:	2100      	movs	r1, #0
 80013ea:	4831      	ldr	r0, [pc, #196]	@ (80014b0 <main+0x3f0>)
 80013ec:	f002 fcb6 	bl	8003d5c <HAL_TIM_PWM_Start>
 80013f0:	e067      	b.n	80014c2 <main+0x402>
	 	     }

	 	   else if(signed_counter>setpoint)
 80013f2:	4b26      	ldr	r3, [pc, #152]	@ (800148c <main+0x3cc>)
 80013f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b28      	ldr	r3, [pc, #160]	@ (800149c <main+0x3dc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	dd58      	ble.n	80014b4 <main+0x3f4>
	 	   {
		 		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001408:	4826      	ldr	r0, [pc, #152]	@ (80014a4 <main+0x3e4>)
 800140a:	f001 fdfd 	bl	8003008 <HAL_GPIO_WritePin>
		 		TIM1->CCR1 = output;
 800140e:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <main+0x3e8>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	4b25      	ldr	r3, [pc, #148]	@ (80014ac <main+0x3ec>)
 8001416:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800141a:	ee17 2a90 	vmov	r2, s15
 800141e:	635a      	str	r2, [r3, #52]	@ 0x34
		 		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001420:	2100      	movs	r1, #0
 8001422:	4823      	ldr	r0, [pc, #140]	@ (80014b0 <main+0x3f0>)
 8001424:	f002 fc9a 	bl	8003d5c <HAL_TIM_PWM_Start>
 8001428:	e04b      	b.n	80014c2 <main+0x402>
 800142a:	bf00      	nop
 800142c:	f3af 8000 	nop.w
 8001430:	47ae147b 	.word	0x47ae147b
 8001434:	bf747ae1 	.word	0xbf747ae1
 8001438:	00000000 	.word	0x00000000
 800143c:	40240000 	.word	0x40240000
	...
 800144c:	3fe00000 	.word	0x3fe00000
 8001450:	200002e0 	.word	0x200002e0
 8001454:	200000e8 	.word	0x200000e8
 8001458:	200000ac 	.word	0x200000ac
 800145c:	200000b0 	.word	0x200000b0
 8001460:	200000b4 	.word	0x200000b4
 8001464:	200000b8 	.word	0x200000b8
 8001468:	200000bc 	.word	0x200000bc
 800146c:	200000c0 	.word	0x200000c0
 8001470:	200000c4 	.word	0x200000c4
 8001474:	200000c8 	.word	0x200000c8
 8001478:	200000dc 	.word	0x200000dc
 800147c:	200000e0 	.word	0x200000e0
 8001480:	200000e4 	.word	0x200000e4
 8001484:	080070f0 	.word	0x080070f0
 8001488:	200001a4 	.word	0x200001a4
 800148c:	2000009c 	.word	0x2000009c
 8001490:	20000100 	.word	0x20000100
 8001494:	3ff80000 	.word	0x3ff80000
 8001498:	200000d4 	.word	0x200000d4
 800149c:	200000a0 	.word	0x200000a0
 80014a0:	200000d8 	.word	0x200000d8
 80014a4:	40020800 	.word	0x40020800
 80014a8:	20000120 	.word	0x20000120
 80014ac:	40010000 	.word	0x40010000
 80014b0:	2000015c 	.word	0x2000015c
	 	   }
	 	   else
	 	   {
		 		TIM1->CCR1 = 0;
 80014b4:	4b8f      	ldr	r3, [pc, #572]	@ (80016f4 <main+0x634>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	@ 0x34
		 		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014ba:	2100      	movs	r1, #0
 80014bc:	488e      	ldr	r0, [pc, #568]	@ (80016f8 <main+0x638>)
 80014be:	f002 fc4d 	bl	8003d5c <HAL_TIM_PWM_Start>
	 	   }
	 	  printf("Counts = %ld \r\n",signed_counter);
 80014c2:	4b8e      	ldr	r3, [pc, #568]	@ (80016fc <main+0x63c>)
 80014c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c8:	4619      	mov	r1, r3
 80014ca:	488d      	ldr	r0, [pc, #564]	@ (8001700 <main+0x640>)
 80014cc:	f004 ff96 	bl	80063fc <iprintf>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3,
 80014d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001704 <main+0x644>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf14      	ite	ne
 80014d8:	2301      	movne	r3, #1
 80014da:	2300      	moveq	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	2108      	movs	r1, #8
 80014e2:	4889      	ldr	r0, [pc, #548]	@ (8001708 <main+0x648>)
 80014e4:	f001 fd90 	bl	8003008 <HAL_GPIO_WritePin>
					direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6,
 80014e8:	4b86      	ldr	r3, [pc, #536]	@ (8001704 <main+0x644>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	461a      	mov	r2, r3
 80014f8:	2140      	movs	r1, #64	@ 0x40
 80014fa:	4883      	ldr	r0, [pc, #524]	@ (8001708 <main+0x648>)
 80014fc:	f001 fd84 	bl	8003008 <HAL_GPIO_WritePin>
					!direction1 ? GPIO_PIN_SET : GPIO_PIN_RESET);

			if (ll1 == 1 && !prev_ll1) {  // LL1 button pressed
 8001500:	4b82      	ldr	r3, [pc, #520]	@ (800170c <main+0x64c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d117      	bne.n	8001538 <main+0x478>
 8001508:	4b81      	ldr	r3, [pc, #516]	@ (8001710 <main+0x650>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d113      	bne.n	8001538 <main+0x478>
				direction1 = 1;  // Set to Anti-clockwise
 8001510:	4b7c      	ldr	r3, [pc, #496]	@ (8001704 <main+0x644>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
				stepper_running = 1;
 8001516:	4b7f      	ldr	r3, [pc, #508]	@ (8001714 <main+0x654>)
 8001518:	2201      	movs	r2, #1
 800151a:	601a      	str	r2, [r3, #0]
				stepper_running1 = 1;
 800151c:	4b7e      	ldr	r3, [pc, #504]	@ (8001718 <main+0x658>)
 800151e:	2201      	movs	r2, #1
 8001520:	601a      	str	r2, [r3, #0]
				target_steps = STEPS;
 8001522:	4b7e      	ldr	r3, [pc, #504]	@ (800171c <main+0x65c>)
 8001524:	22f0      	movs	r2, #240	@ 0xf0
 8001526:	601a      	str	r2, [r3, #0]
				target_steps1 = STEPS;
 8001528:	4b7d      	ldr	r3, [pc, #500]	@ (8001720 <main+0x660>)
 800152a:	22f0      	movs	r2, #240	@ 0xf0
 800152c:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 800152e:	2200      	movs	r2, #0
 8001530:	2180      	movs	r1, #128	@ 0x80
 8001532:	4875      	ldr	r0, [pc, #468]	@ (8001708 <main+0x648>)
 8001534:	f001 fd68 	bl	8003008 <HAL_GPIO_WritePin>
			}
			if (rr1 == 1 && !prev_rr1) {  // RR1 button pressed
 8001538:	4b7a      	ldr	r3, [pc, #488]	@ (8001724 <main+0x664>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d117      	bne.n	8001570 <main+0x4b0>
 8001540:	4b79      	ldr	r3, [pc, #484]	@ (8001728 <main+0x668>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d113      	bne.n	8001570 <main+0x4b0>
				direction1 = 0;  // Set to Clockwise
 8001548:	4b6e      	ldr	r3, [pc, #440]	@ (8001704 <main+0x644>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
				stepper_running = 1;
 800154e:	4b71      	ldr	r3, [pc, #452]	@ (8001714 <main+0x654>)
 8001550:	2201      	movs	r2, #1
 8001552:	601a      	str	r2, [r3, #0]
				stepper_running1 = 1;
 8001554:	4b70      	ldr	r3, [pc, #448]	@ (8001718 <main+0x658>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]
				target_steps = STEPS;
 800155a:	4b70      	ldr	r3, [pc, #448]	@ (800171c <main+0x65c>)
 800155c:	22f0      	movs	r2, #240	@ 0xf0
 800155e:	601a      	str	r2, [r3, #0]
				target_steps1 = STEPS;
 8001560:	4b6f      	ldr	r3, [pc, #444]	@ (8001720 <main+0x660>)
 8001562:	22f0      	movs	r2, #240	@ 0xf0
 8001564:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2180      	movs	r1, #128	@ 0x80
 800156a:	4867      	ldr	r0, [pc, #412]	@ (8001708 <main+0x648>)
 800156c:	f001 fd4c 	bl	8003008 <HAL_GPIO_WritePin>
			}
			if (cir == 1 && !prev_cir) {
 8001570:	4b6e      	ldr	r3, [pc, #440]	@ (800172c <main+0x66c>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d111      	bne.n	800159c <main+0x4dc>
 8001578:	4b6d      	ldr	r3, [pc, #436]	@ (8001730 <main+0x670>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d10d      	bne.n	800159c <main+0x4dc>
				stepper_running1 = 0;
 8001580:	4b65      	ldr	r3, [pc, #404]	@ (8001718 <main+0x658>)
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
				current_steps = 0;
 8001586:	4b6b      	ldr	r3, [pc, #428]	@ (8001734 <main+0x674>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
				current_steps1 = 0;
 800158c:	4b6a      	ldr	r3, [pc, #424]	@ (8001738 <main+0x678>)
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 8001592:	2201      	movs	r2, #1
 8001594:	2180      	movs	r1, #128	@ 0x80
 8001596:	485c      	ldr	r0, [pc, #368]	@ (8001708 <main+0x648>)
 8001598:	f001 fd36 	bl	8003008 <HAL_GPIO_WritePin>
			}
			prev_ll1 = ll1;
 800159c:	4b5b      	ldr	r3, [pc, #364]	@ (800170c <main+0x64c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a5b      	ldr	r2, [pc, #364]	@ (8001710 <main+0x650>)
 80015a2:	6013      	str	r3, [r2, #0]
			prev_rr1 = rr1;
 80015a4:	4b5f      	ldr	r3, [pc, #380]	@ (8001724 <main+0x664>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a5f      	ldr	r2, [pc, #380]	@ (8001728 <main+0x668>)
 80015aa:	6013      	str	r3, [r2, #0]
			prev_cir = cir;
 80015ac:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <main+0x66c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a5f      	ldr	r2, [pc, #380]	@ (8001730 <main+0x670>)
 80015b2:	6013      	str	r3, [r2, #0]
			if (stepper_running && (HAL_GetTick() - last_step_time) >= step_delay
 80015b4:	4b57      	ldr	r3, [pc, #348]	@ (8001714 <main+0x654>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d02e      	beq.n	800161a <main+0x55a>
 80015bc:	f000 fe70 	bl	80022a0 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b5e      	ldr	r3, [pc, #376]	@ (800173c <main+0x67c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	4a5d      	ldr	r2, [pc, #372]	@ (8001740 <main+0x680>)
 80015ca:	6812      	ldr	r2, [r2, #0]
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d324      	bcc.n	800161a <main+0x55a>
					&& current_steps < target_steps) {
 80015d0:	4b58      	ldr	r3, [pc, #352]	@ (8001734 <main+0x674>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b51      	ldr	r3, [pc, #324]	@ (800171c <main+0x65c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d21e      	bcs.n	800161a <main+0x55a>
				last_step_time = HAL_GetTick(); // Update last step time
 80015dc:	f000 fe60 	bl	80022a0 <HAL_GetTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a56      	ldr	r2, [pc, #344]	@ (800173c <main+0x67c>)
 80015e4:	6013      	str	r3, [r2, #0]

				if (step_state == 0) {
 80015e6:	4b57      	ldr	r3, [pc, #348]	@ (8001744 <main+0x684>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d10d      	bne.n	800160a <main+0x54a>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET); // Step HIGH
 80015ee:	2201      	movs	r2, #1
 80015f0:	2120      	movs	r1, #32
 80015f2:	4845      	ldr	r0, [pc, #276]	@ (8001708 <main+0x648>)
 80015f4:	f001 fd08 	bl	8003008 <HAL_GPIO_WritePin>
					step_state = 1;
 80015f8:	4b52      	ldr	r3, [pc, #328]	@ (8001744 <main+0x684>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
					current_steps++;
 80015fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001734 <main+0x674>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	3301      	adds	r3, #1
 8001604:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <main+0x674>)
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	e007      	b.n	800161a <main+0x55a>
				} else {
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET); // Step LOW
 800160a:	2200      	movs	r2, #0
 800160c:	2120      	movs	r1, #32
 800160e:	483e      	ldr	r0, [pc, #248]	@ (8001708 <main+0x648>)
 8001610:	f001 fcfa 	bl	8003008 <HAL_GPIO_WritePin>
					step_state = 0;
 8001614:	4b4b      	ldr	r3, [pc, #300]	@ (8001744 <main+0x684>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
				}
			}
			if (stepper_running1 && (HAL_GetTick() - last_step_time1) >= step_delay1
 800161a:	4b3f      	ldr	r3, [pc, #252]	@ (8001718 <main+0x658>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d030      	beq.n	8001684 <main+0x5c4>
 8001622:	f000 fe3d 	bl	80022a0 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	4b47      	ldr	r3, [pc, #284]	@ (8001748 <main+0x688>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	4a47      	ldr	r2, [pc, #284]	@ (800174c <main+0x68c>)
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	4293      	cmp	r3, r2
 8001634:	d326      	bcc.n	8001684 <main+0x5c4>
					&& current_steps1 < target_steps1) {
 8001636:	4b40      	ldr	r3, [pc, #256]	@ (8001738 <main+0x678>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b39      	ldr	r3, [pc, #228]	@ (8001720 <main+0x660>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d220      	bcs.n	8001684 <main+0x5c4>
				last_step_time1 = HAL_GetTick(); // Update last step time
 8001642:	f000 fe2d 	bl	80022a0 <HAL_GetTick>
 8001646:	4603      	mov	r3, r0
 8001648:	4a3f      	ldr	r2, [pc, #252]	@ (8001748 <main+0x688>)
 800164a:	6013      	str	r3, [r2, #0]

				if (step_state1 == 0) {
 800164c:	4b40      	ldr	r3, [pc, #256]	@ (8001750 <main+0x690>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d10e      	bne.n	8001672 <main+0x5b2>
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET); // Step HIGH
 8001654:	2201      	movs	r2, #1
 8001656:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800165a:	483e      	ldr	r0, [pc, #248]	@ (8001754 <main+0x694>)
 800165c:	f001 fcd4 	bl	8003008 <HAL_GPIO_WritePin>
					step_state1 = 1;
 8001660:	4b3b      	ldr	r3, [pc, #236]	@ (8001750 <main+0x690>)
 8001662:	2201      	movs	r2, #1
 8001664:	601a      	str	r2, [r3, #0]
					current_steps1++;
 8001666:	4b34      	ldr	r3, [pc, #208]	@ (8001738 <main+0x678>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a32      	ldr	r2, [pc, #200]	@ (8001738 <main+0x678>)
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e008      	b.n	8001684 <main+0x5c4>
				} else {
					HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET); // Step LOW
 8001672:	2200      	movs	r2, #0
 8001674:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001678:	4836      	ldr	r0, [pc, #216]	@ (8001754 <main+0x694>)
 800167a:	f001 fcc5 	bl	8003008 <HAL_GPIO_WritePin>
					step_state1 = 0;
 800167e:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <main+0x690>)
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
				}
			}
			// Stop when target steps are reached
			if (current_steps >= target_steps) {
 8001684:	4b2b      	ldr	r3, [pc, #172]	@ (8001734 <main+0x674>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b24      	ldr	r3, [pc, #144]	@ (800171c <main+0x65c>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d30a      	bcc.n	80016a6 <main+0x5e6>
				stepper_running = 0;
 8001690:	4b20      	ldr	r3, [pc, #128]	@ (8001714 <main+0x654>)
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
				current_steps = 0;
 8001696:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <main+0x674>)
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 800169c:	2201      	movs	r2, #1
 800169e:	2180      	movs	r1, #128	@ 0x80
 80016a0:	4819      	ldr	r0, [pc, #100]	@ (8001708 <main+0x648>)
 80016a2:	f001 fcb1 	bl	8003008 <HAL_GPIO_WritePin>
			}
			if (current_steps1 >= target_steps1) {
 80016a6:	4b24      	ldr	r3, [pc, #144]	@ (8001738 <main+0x678>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001720 <main+0x660>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d30a      	bcc.n	80016c8 <main+0x608>
				stepper_running1 = 0;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <main+0x658>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
				current_steps1 = 0;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <main+0x678>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2180      	movs	r1, #128	@ 0x80
 80016c2:	4811      	ldr	r0, [pc, #68]	@ (8001708 <main+0x648>)
 80016c4:	f001 fca0 	bl	8003008 <HAL_GPIO_WritePin>
			}
			int dutycycle = map(lx, -128, Buff2, fast, 0);
 80016c8:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <main+0x698>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	4b23      	ldr	r3, [pc, #140]	@ (800175c <main+0x69c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b23      	ldr	r3, [pc, #140]	@ (8001760 <main+0x6a0>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2100      	movs	r1, #0
 80016d6:	9100      	str	r1, [sp, #0]
 80016d8:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 80016dc:	f7ff fb7e 	bl	8000ddc <map>
 80016e0:	61b8      	str	r0, [r7, #24]
			TIM1->CCR2 = 900;
 80016e2:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <main+0x634>)
 80016e4:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80016e8:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016ea:	2104      	movs	r1, #4
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <main+0x638>)
 80016ee:	f002 fb35 	bl	8003d5c <HAL_TIM_PWM_Start>
  {
 80016f2:	e501      	b.n	80010f8 <main+0x38>
 80016f4:	40010000 	.word	0x40010000
 80016f8:	2000015c 	.word	0x2000015c
 80016fc:	2000009c 	.word	0x2000009c
 8001700:	08007138 	.word	0x08007138
 8001704:	20000004 	.word	0x20000004
 8001708:	40020800 	.word	0x40020800
 800170c:	200000dc 	.word	0x200000dc
 8001710:	20000144 	.word	0x20000144
 8001714:	20000138 	.word	0x20000138
 8001718:	2000013c 	.word	0x2000013c
 800171c:	2000014c 	.word	0x2000014c
 8001720:	20000154 	.word	0x20000154
 8001724:	200000e0 	.word	0x200000e0
 8001728:	20000148 	.word	0x20000148
 800172c:	200000c8 	.word	0x200000c8
 8001730:	20000140 	.word	0x20000140
 8001734:	20000150 	.word	0x20000150
 8001738:	20000158 	.word	0x20000158
 800173c:	20000124 	.word	0x20000124
 8001740:	20000008 	.word	0x20000008
 8001744:	2000012c 	.word	0x2000012c
 8001748:	20000128 	.word	0x20000128
 800174c:	2000000c 	.word	0x2000000c
 8001750:	20000130 	.word	0x20000130
 8001754:	40020400 	.word	0x40020400
 8001758:	200000ac 	.word	0x200000ac
 800175c:	20000010 	.word	0x20000010
 8001760:	20000000 	.word	0x20000000

08001764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b094      	sub	sp, #80	@ 0x50
 8001768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176a:	f107 031c 	add.w	r3, r7, #28
 800176e:	2234      	movs	r2, #52	@ 0x34
 8001770:	2100      	movs	r1, #0
 8001772:	4618      	mov	r0, r3
 8001774:	f004 fe97 	bl	80064a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001778:	f107 0308 	add.w	r3, r7, #8
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <SystemClock_Config+0xd4>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	4a29      	ldr	r2, [pc, #164]	@ (8001838 <SystemClock_Config+0xd4>)
 8001792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001796:	6413      	str	r3, [r2, #64]	@ 0x40
 8001798:	4b27      	ldr	r3, [pc, #156]	@ (8001838 <SystemClock_Config+0xd4>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
 80017a8:	4b24      	ldr	r3, [pc, #144]	@ (800183c <SystemClock_Config+0xd8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80017b0:	4a22      	ldr	r2, [pc, #136]	@ (800183c <SystemClock_Config+0xd8>)
 80017b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b20      	ldr	r3, [pc, #128]	@ (800183c <SystemClock_Config+0xd8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c8:	2301      	movs	r3, #1
 80017ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017cc:	2310      	movs	r3, #16
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d0:	2302      	movs	r3, #2
 80017d2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017d8:	2310      	movs	r3, #16
 80017da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017dc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017e2:	2304      	movs	r3, #4
 80017e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017ea:	2302      	movs	r3, #2
 80017ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 ff6c 	bl	80036d0 <HAL_RCC_OscConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017fe:	f000 fa45 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001802:	230f      	movs	r3, #15
 8001804:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001806:	2302      	movs	r3, #2
 8001808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800180e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001812:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001818:	f107 0308 	add.w	r3, r7, #8
 800181c:	2102      	movs	r1, #2
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fc0c 	bl	800303c <HAL_RCC_ClockConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800182a:	f000 fa2f 	bl	8001c8c <Error_Handler>
  }
}
 800182e:	bf00      	nop
 8001830:	3750      	adds	r7, #80	@ 0x50
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000

08001840 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b096      	sub	sp, #88	@ 0x58
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
 800186e:	615a      	str	r2, [r3, #20]
 8001870:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2220      	movs	r2, #32
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fe14 	bl	80064a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800187e:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <MX_TIM1_Init+0x150>)
 8001880:	4a44      	ldr	r2, [pc, #272]	@ (8001994 <MX_TIM1_Init+0x154>)
 8001882:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 179;
 8001884:	4b42      	ldr	r3, [pc, #264]	@ (8001990 <MX_TIM1_Init+0x150>)
 8001886:	22b3      	movs	r2, #179	@ 0xb3
 8001888:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <MX_TIM1_Init+0x150>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001890:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <MX_TIM1_Init+0x150>)
 8001892:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001896:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001898:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <MX_TIM1_Init+0x150>)
 800189a:	2200      	movs	r2, #0
 800189c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800189e:	4b3c      	ldr	r3, [pc, #240]	@ (8001990 <MX_TIM1_Init+0x150>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001990 <MX_TIM1_Init+0x150>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018aa:	4839      	ldr	r0, [pc, #228]	@ (8001990 <MX_TIM1_Init+0x150>)
 80018ac:	f002 f9ae 	bl	8003c0c <HAL_TIM_Base_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018b6:	f000 f9e9 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018be:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018c4:	4619      	mov	r1, r3
 80018c6:	4832      	ldr	r0, [pc, #200]	@ (8001990 <MX_TIM1_Init+0x150>)
 80018c8:	f002 fdf6 	bl	80044b8 <HAL_TIM_ConfigClockSource>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80018d2:	f000 f9db 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018d6:	482e      	ldr	r0, [pc, #184]	@ (8001990 <MX_TIM1_Init+0x150>)
 80018d8:	f002 f9e7 	bl	8003caa <HAL_TIM_PWM_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80018e2:	f000 f9d3 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018f2:	4619      	mov	r1, r3
 80018f4:	4826      	ldr	r0, [pc, #152]	@ (8001990 <MX_TIM1_Init+0x150>)
 80018f6:	f003 f9f5 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001900:	f000 f9c4 	bl	8001c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001904:	2360      	movs	r3, #96	@ 0x60
 8001906:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800191c:	2300      	movs	r3, #0
 800191e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	4819      	ldr	r0, [pc, #100]	@ (8001990 <MX_TIM1_Init+0x150>)
 800192a:	f002 fd03 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001934:	f000 f9aa 	bl	8001c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001938:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800193c:	2204      	movs	r2, #4
 800193e:	4619      	mov	r1, r3
 8001940:	4813      	ldr	r0, [pc, #76]	@ (8001990 <MX_TIM1_Init+0x150>)
 8001942:	f002 fcf7 	bl	8004334 <HAL_TIM_PWM_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800194c:	f000 f99e 	bl	8001c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001958:	2300      	movs	r3, #0
 800195a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001968:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	@ (8001990 <MX_TIM1_Init+0x150>)
 8001974:	f003 fa32 	bl	8004ddc <HAL_TIMEx_ConfigBreakDeadTime>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800197e:	f000 f985 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001982:	4803      	ldr	r0, [pc, #12]	@ (8001990 <MX_TIM1_Init+0x150>)
 8001984:	f000 fa20 	bl	8001dc8 <HAL_TIM_MspPostInit>

}
 8001988:	bf00      	nop
 800198a:	3758      	adds	r7, #88	@ 0x58
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2000015c 	.word	0x2000015c
 8001994:	40010000 	.word	0x40010000

08001998 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b08c      	sub	sp, #48	@ 0x30
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2224      	movs	r2, #36	@ 0x24
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f004 fd7d 	bl	80064a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2200      	movs	r2, #0
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019b4:	4b21      	ldr	r3, [pc, #132]	@ (8001a3c <MX_TIM2_Init+0xa4>)
 80019b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <MX_TIM2_Init+0xa4>)
 80019be:	2200      	movs	r2, #0
 80019c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a3c <MX_TIM2_Init+0xa4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019c8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a3c <MX_TIM2_Init+0xa4>)
 80019ca:	f04f 32ff 	mov.w	r2, #4294967295
 80019ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a3c <MX_TIM2_Init+0xa4>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019d6:	4b19      	ldr	r3, [pc, #100]	@ (8001a3c <MX_TIM2_Init+0xa4>)
 80019d8:	2200      	movs	r2, #0
 80019da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019dc:	2303      	movs	r3, #3
 80019de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80019e0:	2300      	movs	r3, #0
 80019e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019e4:	2301      	movs	r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 5;
 80019ec:	2305      	movs	r3, #5
 80019ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80019f0:	2300      	movs	r3, #0
 80019f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019f4:	2301      	movs	r3, #1
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 5;
 80019fc:	2305      	movs	r3, #5
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	4619      	mov	r1, r3
 8001a06:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <MX_TIM2_Init+0xa4>)
 8001a08:	f002 fa70 	bl	8003eec <HAL_TIM_Encoder_Init>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a12:	f000 f93b 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	4619      	mov	r1, r3
 8001a22:	4806      	ldr	r0, [pc, #24]	@ (8001a3c <MX_TIM2_Init+0xa4>)
 8001a24:	f003 f95e 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a2e:	f000 f92d 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a32:	bf00      	nop
 8001a34:	3730      	adds	r7, #48	@ 0x30
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200001a4 	.word	0x200001a4

08001a40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a44:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <MX_UART4_Init+0x50>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a4a:	4b10      	ldr	r3, [pc, #64]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b09      	ldr	r3, [pc, #36]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a76:	4805      	ldr	r0, [pc, #20]	@ (8001a8c <MX_UART4_Init+0x4c>)
 8001a78:	f003 fa16 	bl	8004ea8 <HAL_UART_Init>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d001      	beq.n	8001a86 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a82:	f000 f903 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200001ec 	.word	0x200001ec
 8001a90:	40004c00 	.word	0x40004c00

08001a94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a98:	4b11      	ldr	r3, [pc, #68]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	@ (8001ae4 <MX_USART2_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	@ (8001ae0 <MX_USART2_UART_Init+0x4c>)
 8001acc:	f003 f9ec 	bl	8004ea8 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f000 f8d9 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000234 	.word	0x20000234
 8001ae4:	40004400 	.word	0x40004400

08001ae8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b24 <MX_DMA_Init+0x3c>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a0b      	ldr	r2, [pc, #44]	@ (8001b24 <MX_DMA_Init+0x3c>)
 8001af8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b09      	ldr	r3, [pc, #36]	@ (8001b24 <MX_DMA_Init+0x3c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	200d      	movs	r0, #13
 8001b10:	f000 fcad 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b14:	200d      	movs	r0, #13
 8001b16:	f000 fcc6 	bl	80024a6 <HAL_NVIC_EnableIRQ>

}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800

08001b28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2e:	f107 0314 	add.w	r3, r7, #20
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
 8001b3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b43      	ldr	r3, [pc, #268]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a42      	ldr	r2, [pc, #264]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b48:	f043 0304 	orr.w	r3, r3, #4
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b40      	ldr	r3, [pc, #256]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a3b      	ldr	r2, [pc, #236]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b39      	ldr	r3, [pc, #228]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	4b35      	ldr	r3, [pc, #212]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a34      	ldr	r2, [pc, #208]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b32      	ldr	r3, [pc, #200]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
 8001b96:	4b2e      	ldr	r3, [pc, #184]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c50 <MX_GPIO_Init+0x128>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, stepperdirection1_Pin|ENA1_Pin|steppperpulse1_Pin|stepperdirection2_Pin
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8001bb4:	4827      	ldr	r0, [pc, #156]	@ (8001c54 <MX_GPIO_Init+0x12c>)
 8001bb6:	f001 fa27 	bl	8003008 <HAL_GPIO_WritePin>
                          |stepperpulse_Pin|turret_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|shootingflywheel_Pin, GPIO_PIN_RESET);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f44f 6102 	mov.w	r1, #2080	@ 0x820
 8001bc0:	4825      	ldr	r0, [pc, #148]	@ (8001c58 <MX_GPIO_Init+0x130>)
 8001bc2:	f001 fa21 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(stepperpulse2_GPIO_Port, stepperpulse2_Pin, GPIO_PIN_RESET);
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001bcc:	4823      	ldr	r0, [pc, #140]	@ (8001c5c <MX_GPIO_Init+0x134>)
 8001bce:	f001 fa1b 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bd2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001bd8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001be2:	f107 0314 	add.w	r3, r7, #20
 8001be6:	4619      	mov	r1, r3
 8001be8:	481a      	ldr	r0, [pc, #104]	@ (8001c54 <MX_GPIO_Init+0x12c>)
 8001bea:	f001 f879 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : stepperdirection1_Pin ENA1_Pin steppperpulse1_Pin stepperdirection2_Pin
                           stepperpulse_Pin turret_Pin */
  GPIO_InitStruct.Pin = stepperdirection1_Pin|ENA1_Pin|steppperpulse1_Pin|stepperdirection2_Pin
 8001bee:	f44f 733e 	mov.w	r3, #760	@ 0x2f8
 8001bf2:	617b      	str	r3, [r7, #20]
                          |stepperpulse_Pin|turret_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c00:	f107 0314 	add.w	r3, r7, #20
 8001c04:	4619      	mov	r1, r3
 8001c06:	4813      	ldr	r0, [pc, #76]	@ (8001c54 <MX_GPIO_Init+0x12c>)
 8001c08:	f001 f86a 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin shootingflywheel_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|shootingflywheel_Pin;
 8001c0c:	f44f 6302 	mov.w	r3, #2080	@ 0x820
 8001c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 0314 	add.w	r3, r7, #20
 8001c22:	4619      	mov	r1, r3
 8001c24:	480c      	ldr	r0, [pc, #48]	@ (8001c58 <MX_GPIO_Init+0x130>)
 8001c26:	f001 f85b 	bl	8002ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : stepperpulse2_Pin */
  GPIO_InitStruct.Pin = stepperpulse2_Pin;
 8001c2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c30:	2301      	movs	r3, #1
 8001c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(stepperpulse2_GPIO_Port, &GPIO_InitStruct);
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	4619      	mov	r1, r3
 8001c42:	4806      	ldr	r0, [pc, #24]	@ (8001c5c <MX_GPIO_Init+0x134>)
 8001c44:	f001 f84c 	bl	8002ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c48:	bf00      	nop
 8001c4a:	3728      	adds	r7, #40	@ 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40020400 	.word	0x40020400

08001c60 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f04f 33ff 	mov.w	r3, #4294967295
 8001c74:	68b9      	ldr	r1, [r7, #8]
 8001c76:	4804      	ldr	r0, [pc, #16]	@ (8001c88 <_write+0x28>)
 8001c78:	f003 f966 	bl	8004f48 <HAL_UART_Transmit>
	return len;
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000234 	.word	0x20000234

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <Error_Handler+0x8>

08001c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cd6:	2007      	movs	r0, #7
 8001cd8:	f000 fbbe 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d24 <HAL_TIM_Base_MspInit+0x3c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10d      	bne.n	8001d16 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8001d28 <HAL_TIM_Base_MspInit+0x40>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	4a09      	ldr	r2, [pc, #36]	@ (8001d28 <HAL_TIM_Base_MspInit+0x40>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d0a:	4b07      	ldr	r3, [pc, #28]	@ (8001d28 <HAL_TIM_Base_MspInit+0x40>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40023800 	.word	0x40023800

08001d2c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b08a      	sub	sp, #40	@ 0x28
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d34:	f107 0314 	add.w	r3, r7, #20
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
 8001d40:	60da      	str	r2, [r3, #12]
 8001d42:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4c:	d133      	bne.n	8001db6 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d56:	4a1a      	ldr	r2, [pc, #104]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d5e:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a13      	ldr	r2, [pc, #76]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <HAL_TIM_Encoder_MspInit+0x94>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d86:	2303      	movs	r3, #3
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d96:	2301      	movs	r3, #1
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	4808      	ldr	r0, [pc, #32]	@ (8001dc4 <HAL_TIM_Encoder_MspInit+0x98>)
 8001da2:	f000 ff9d 	bl	8002ce0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001da6:	2200      	movs	r2, #0
 8001da8:	2100      	movs	r1, #0
 8001daa:	201c      	movs	r0, #28
 8001dac:	f000 fb5f 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001db0:	201c      	movs	r0, #28
 8001db2:	f000 fb78 	bl	80024a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001db6:	bf00      	nop
 8001db8:	3728      	adds	r7, #40	@ 0x28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	40020000 	.word	0x40020000

08001dc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b088      	sub	sp, #32
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a12      	ldr	r2, [pc, #72]	@ (8001e30 <HAL_TIM_MspPostInit+0x68>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d11e      	bne.n	8001e28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	4a10      	ldr	r2, [pc, #64]	@ (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <HAL_TIM_MspPostInit+0x6c>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e06:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	4619      	mov	r1, r3
 8001e22:	4805      	ldr	r0, [pc, #20]	@ (8001e38 <HAL_TIM_MspPostInit+0x70>)
 8001e24:	f000 ff5c 	bl	8002ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e28:	bf00      	nop
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40010000 	.word	0x40010000
 8001e34:	40023800 	.word	0x40023800
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08c      	sub	sp, #48	@ 0x30
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a4e      	ldr	r2, [pc, #312]	@ (8001f94 <HAL_UART_MspInit+0x158>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d164      	bne.n	8001f28 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61bb      	str	r3, [r7, #24]
 8001e62:	4b4d      	ldr	r3, [pc, #308]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	4a4c      	ldr	r2, [pc, #304]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001e68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001e6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001e76:	61bb      	str	r3, [r7, #24]
 8001e78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	4b46      	ldr	r3, [pc, #280]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a45      	ldr	r2, [pc, #276]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b43      	ldr	r3, [pc, #268]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001ea8:	2308      	movs	r3, #8
 8001eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eac:	f107 031c 	add.w	r3, r7, #28
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	483a      	ldr	r0, [pc, #232]	@ (8001f9c <HAL_UART_MspInit+0x160>)
 8001eb4:	f000 ff14 	bl	8002ce0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8001eb8:	4b39      	ldr	r3, [pc, #228]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001eba:	4a3a      	ldr	r2, [pc, #232]	@ (8001fa4 <HAL_UART_MspInit+0x168>)
 8001ebc:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001ebe:	4b38      	ldr	r3, [pc, #224]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001ec0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ec4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ec6:	4b36      	ldr	r3, [pc, #216]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ecc:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ed2:	4b33      	ldr	r3, [pc, #204]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001ed4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eda:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ee0:	4b2f      	ldr	r3, [pc, #188]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001ee6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001ee8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eec:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001eee:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef4:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8001efa:	4829      	ldr	r0, [pc, #164]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001efc:	f000 faee 	bl	80024dc <HAL_DMA_Init>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001f06:	f7ff fec1 	bl	8001c8c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a24      	ldr	r2, [pc, #144]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001f10:	4a23      	ldr	r2, [pc, #140]	@ (8001fa0 <HAL_UART_MspInit+0x164>)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001f16:	2200      	movs	r2, #0
 8001f18:	2100      	movs	r1, #0
 8001f1a:	2034      	movs	r0, #52	@ 0x34
 8001f1c:	f000 faa7 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001f20:	2034      	movs	r0, #52	@ 0x34
 8001f22:	f000 fac0 	bl	80024a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f26:	e030      	b.n	8001f8a <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa8 <HAL_UART_MspInit+0x16c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d12b      	bne.n	8001f8a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b18      	ldr	r3, [pc, #96]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f42:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	4b11      	ldr	r3, [pc, #68]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	4a10      	ldr	r2, [pc, #64]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f98 <HAL_UART_MspInit+0x15c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f76:	2303      	movs	r3, #3
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	4809      	ldr	r0, [pc, #36]	@ (8001fac <HAL_UART_MspInit+0x170>)
 8001f86:	f000 feab 	bl	8002ce0 <HAL_GPIO_Init>
}
 8001f8a:	bf00      	nop
 8001f8c:	3730      	adds	r7, #48	@ 0x30
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40004c00 	.word	0x40004c00
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020800 	.word	0x40020800
 8001fa0:	2000027c 	.word	0x2000027c
 8001fa4:	40026040 	.word	0x40026040
 8001fa8:	40004400 	.word	0x40004400
 8001fac:	40020000 	.word	0x40020000

08001fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <NMI_Handler+0x4>

08001fb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <HardFault_Handler+0x4>

08001fc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <MemManage_Handler+0x4>

08001fc8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <BusFault_Handler+0x4>

08001fd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <UsageFault_Handler+0x4>

08001fd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002006:	f000 f937 	bl	8002278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <DMA1_Stream2_IRQHandler+0x10>)
 8002016:	f000 fbf9 	bl	800280c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	2000027c 	.word	0x2000027c

08002024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002028:	4802      	ldr	r0, [pc, #8]	@ (8002034 <TIM2_IRQHandler+0x10>)
 800202a:	f002 f893 	bl	8004154 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200001a4 	.word	0x200001a4

08002038 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <UART4_IRQHandler+0x10>)
 800203e:	f003 f833 	bl	80050a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200001ec 	.word	0x200001ec

0800204c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e00a      	b.n	8002074 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800205e:	f3af 8000 	nop.w
 8002062:	4601      	mov	r1, r0
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60ba      	str	r2, [r7, #8]
 800206a:	b2ca      	uxtb	r2, r1
 800206c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	3301      	adds	r3, #1
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	697a      	ldr	r2, [r7, #20]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	429a      	cmp	r2, r3
 800207a:	dbf0      	blt.n	800205e <_read+0x12>
  }

  return len;
 800207c:	687b      	ldr	r3, [r7, #4]
}
 800207e:	4618      	mov	r0, r3
 8002080:	3718      	adds	r7, #24
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002086:	b480      	push	{r7}
 8002088:	b083      	sub	sp, #12
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800208e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002092:	4618      	mov	r0, r3
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
 80020a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020ae:	605a      	str	r2, [r3, #4]
  return 0;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <_isatty>:

int _isatty(int file)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c6:	2301      	movs	r3, #1
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f8:	4a14      	ldr	r2, [pc, #80]	@ (800214c <_sbrk+0x5c>)
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <_sbrk+0x60>)
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002104:	4b13      	ldr	r3, [pc, #76]	@ (8002154 <_sbrk+0x64>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d102      	bne.n	8002112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <_sbrk+0x64>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <_sbrk+0x68>)
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	429a      	cmp	r2, r3
 800211e:	d207      	bcs.n	8002130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002120:	f004 fa10 	bl	8006544 <__errno>
 8002124:	4603      	mov	r3, r0
 8002126:	220c      	movs	r2, #12
 8002128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212a:	f04f 33ff 	mov.w	r3, #4294967295
 800212e:	e009      	b.n	8002144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <_sbrk+0x64>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <_sbrk+0x64>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a05      	ldr	r2, [pc, #20]	@ (8002154 <_sbrk+0x64>)
 8002140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20020000 	.word	0x20020000
 8002150:	00000400 	.word	0x00000400
 8002154:	200002f0 	.word	0x200002f0
 8002158:	20000448 	.word	0x20000448

0800215c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <SystemInit+0x20>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	4a05      	ldr	r2, [pc, #20]	@ (800217c <SystemInit+0x20>)
 8002168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800216c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002170:	bf00      	nop
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00

08002180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002180:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002184:	f7ff ffea 	bl	800215c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002188:	480c      	ldr	r0, [pc, #48]	@ (80021bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800218a:	490d      	ldr	r1, [pc, #52]	@ (80021c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800218c:	4a0d      	ldr	r2, [pc, #52]	@ (80021c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800218e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002190:	e002      	b.n	8002198 <LoopCopyDataInit>

08002192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002196:	3304      	adds	r3, #4

08002198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800219a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800219c:	d3f9      	bcc.n	8002192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800219e:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021a0:	4c0a      	ldr	r4, [pc, #40]	@ (80021cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021a4:	e001      	b.n	80021aa <LoopFillZerobss>

080021a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a8:	3204      	adds	r2, #4

080021aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021ac:	d3fb      	bcc.n	80021a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ae:	f004 f9cf 	bl	8006550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021b2:	f7fe ff85 	bl	80010c0 <main>
  bx  lr    
 80021b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021c0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80021c4:	080071ac 	.word	0x080071ac
  ldr r2, =_sbss
 80021c8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80021cc:	20000444 	.word	0x20000444

080021d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021d0:	e7fe      	b.n	80021d0 <ADC_IRQHandler>
	...

080021d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002214 <HAL_Init+0x40>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_Init+0x40>)
 80021de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_Init+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_Init+0x40>)
 80021ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <HAL_Init+0x40>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a07      	ldr	r2, [pc, #28]	@ (8002214 <HAL_Init+0x40>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021fc:	2003      	movs	r0, #3
 80021fe:	f000 f92b 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002202:	2000      	movs	r0, #0
 8002204:	f000 f808 	bl	8002218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002208:	f7ff fd46 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023c00 	.word	0x40023c00

08002218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002220:	4b12      	ldr	r3, [pc, #72]	@ (800226c <HAL_InitTick+0x54>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4b12      	ldr	r3, [pc, #72]	@ (8002270 <HAL_InitTick+0x58>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	4619      	mov	r1, r3
 800222a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800222e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002232:	fbb2 f3f3 	udiv	r3, r2, r3
 8002236:	4618      	mov	r0, r3
 8002238:	f000 f943 	bl	80024c2 <HAL_SYSTICK_Config>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e00e      	b.n	8002264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b0f      	cmp	r3, #15
 800224a:	d80a      	bhi.n	8002262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800224c:	2200      	movs	r2, #0
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f000 f90b 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002258:	4a06      	ldr	r2, [pc, #24]	@ (8002274 <HAL_InitTick+0x5c>)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
}
 8002264:	4618      	mov	r0, r3
 8002266:	3708      	adds	r7, #8
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	20000014 	.word	0x20000014
 8002270:	2000001c 	.word	0x2000001c
 8002274:	20000018 	.word	0x20000018

08002278 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800227c:	4b06      	ldr	r3, [pc, #24]	@ (8002298 <HAL_IncTick+0x20>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	461a      	mov	r2, r3
 8002282:	4b06      	ldr	r3, [pc, #24]	@ (800229c <HAL_IncTick+0x24>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4413      	add	r3, r2
 8002288:	4a04      	ldr	r2, [pc, #16]	@ (800229c <HAL_IncTick+0x24>)
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	2000001c 	.word	0x2000001c
 800229c:	200002f4 	.word	0x200002f4

080022a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return uwTick;
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_GetTick+0x14>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	200002f4 	.word	0x200002f4

080022b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c8:	4b0c      	ldr	r3, [pc, #48]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d4:	4013      	ands	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <__NVIC_SetPriorityGrouping+0x44>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002304:	4b04      	ldr	r3, [pc, #16]	@ (8002318 <__NVIC_GetPriorityGrouping+0x18>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	f003 0307 	and.w	r3, r3, #7
}
 800230e:	4618      	mov	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232a:	2b00      	cmp	r3, #0
 800232c:	db0b      	blt.n	8002346 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	f003 021f 	and.w	r2, r3, #31
 8002334:	4907      	ldr	r1, [pc, #28]	@ (8002354 <__NVIC_EnableIRQ+0x38>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	2001      	movs	r0, #1
 800233e:	fa00 f202 	lsl.w	r2, r0, r2
 8002342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000e100 	.word	0xe000e100

08002358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	6039      	str	r1, [r7, #0]
 8002362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002368:	2b00      	cmp	r3, #0
 800236a:	db0a      	blt.n	8002382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	b2da      	uxtb	r2, r3
 8002370:	490c      	ldr	r1, [pc, #48]	@ (80023a4 <__NVIC_SetPriority+0x4c>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	0112      	lsls	r2, r2, #4
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	440b      	add	r3, r1
 800237c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002380:	e00a      	b.n	8002398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4908      	ldr	r1, [pc, #32]	@ (80023a8 <__NVIC_SetPriority+0x50>)
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	3b04      	subs	r3, #4
 8002390:	0112      	lsls	r2, r2, #4
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	440b      	add	r3, r1
 8002396:	761a      	strb	r2, [r3, #24]
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000e100 	.word	0xe000e100
 80023a8:	e000ed00 	.word	0xe000ed00

080023ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b089      	sub	sp, #36	@ 0x24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f1c3 0307 	rsb	r3, r3, #7
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	bf28      	it	cs
 80023ca:	2304      	movcs	r3, #4
 80023cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2b06      	cmp	r3, #6
 80023d4:	d902      	bls.n	80023dc <NVIC_EncodePriority+0x30>
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b03      	subs	r3, #3
 80023da:	e000      	b.n	80023de <NVIC_EncodePriority+0x32>
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	f04f 32ff 	mov.w	r2, #4294967295
 80023e4:	69bb      	ldr	r3, [r7, #24]
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43da      	mvns	r2, r3
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	401a      	ands	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f4:	f04f 31ff 	mov.w	r1, #4294967295
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	43d9      	mvns	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002404:	4313      	orrs	r3, r2
         );
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	@ 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff8e 	bl	8002358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff29 	bl	80022b8 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff3e 	bl	8002300 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff8e 	bl	80023ac <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5d 	bl	8002358 <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff31 	bl	800231c <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa2 	bl	8002414 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff feda 	bl	80022a0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e099      	b.n	800262c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2202      	movs	r2, #2
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002518:	e00f      	b.n	800253a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800251a:	f7ff fec1 	bl	80022a0 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b05      	cmp	r3, #5
 8002526:	d908      	bls.n	800253a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2220      	movs	r2, #32
 800252c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2203      	movs	r2, #3
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e078      	b.n	800262c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e8      	bne.n	800251a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	4b38      	ldr	r3, [pc, #224]	@ (8002634 <HAL_DMA_Init+0x158>)
 8002554:	4013      	ands	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002566:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002572:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800257e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002590:	2b04      	cmp	r3, #4
 8002592:	d107      	bne.n	80025a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	4313      	orrs	r3, r2
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f023 0307 	bic.w	r3, r3, #7
 80025ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	697a      	ldr	r2, [r7, #20]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d117      	bne.n	80025fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00e      	beq.n	80025fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fb01 	bl	8002be8 <DMA_CheckFifoParam>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d008      	beq.n	80025fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2240      	movs	r2, #64	@ 0x40
 80025f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025fa:	2301      	movs	r3, #1
 80025fc:	e016      	b.n	800262c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fab8 	bl	8002b7c <DMA_CalcBaseAndBitshift>
 800260c:	4603      	mov	r3, r0
 800260e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002614:	223f      	movs	r2, #63	@ 0x3f
 8002616:	409a      	lsls	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	f010803f 	.word	0xf010803f

08002638 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002646:	2300      	movs	r3, #0
 8002648:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002656:	2b01      	cmp	r3, #1
 8002658:	d101      	bne.n	800265e <HAL_DMA_Start_IT+0x26>
 800265a:	2302      	movs	r3, #2
 800265c:	e040      	b.n	80026e0 <HAL_DMA_Start_IT+0xa8>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d12f      	bne.n	80026d2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2202      	movs	r2, #2
 8002676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fa4a 	bl	8002b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002690:	223f      	movs	r2, #63	@ 0x3f
 8002692:	409a      	lsls	r2, r3
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0216 	orr.w	r2, r2, #22
 80026a6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0208 	orr.w	r2, r2, #8
 80026be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0201 	orr.w	r2, r2, #1
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	e005      	b.n	80026de <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80026da:	2302      	movs	r3, #2
 80026dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80026de:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026f6:	f7ff fdd3 	bl	80022a0 <HAL_GetTick>
 80026fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d008      	beq.n	800271a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2280      	movs	r2, #128	@ 0x80
 800270c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e052      	b.n	80027c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0216 	bic.w	r2, r2, #22
 8002728:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002738:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d103      	bne.n	800274a <HAL_DMA_Abort+0x62>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0208 	bic.w	r2, r2, #8
 8002758:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800276a:	e013      	b.n	8002794 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276c:	f7ff fd98 	bl	80022a0 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b05      	cmp	r3, #5
 8002778:	d90c      	bls.n	8002794 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2203      	movs	r2, #3
 8002784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e015      	b.n	80027c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1e4      	bne.n	800276c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	223f      	movs	r2, #63	@ 0x3f
 80027a8:	409a      	lsls	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d004      	beq.n	80027e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2280      	movs	r2, #128	@ 0x80
 80027e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e00c      	b.n	8002800 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2205      	movs	r2, #5
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0201 	bic.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002814:	2300      	movs	r3, #0
 8002816:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002818:	4b8e      	ldr	r3, [pc, #568]	@ (8002a54 <HAL_DMA_IRQHandler+0x248>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8e      	ldr	r2, [pc, #568]	@ (8002a58 <HAL_DMA_IRQHandler+0x24c>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0a9b      	lsrs	r3, r3, #10
 8002824:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002836:	2208      	movs	r2, #8
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d01a      	beq.n	8002878 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	2b00      	cmp	r3, #0
 800284e:	d013      	beq.n	8002878 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f022 0204 	bic.w	r2, r2, #4
 800285e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	2208      	movs	r2, #8
 8002866:	409a      	lsls	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002870:	f043 0201 	orr.w	r2, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287c:	2201      	movs	r2, #1
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d012      	beq.n	80028ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00b      	beq.n	80028ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	2201      	movs	r2, #1
 800289c:	409a      	lsls	r2, r3
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028a6:	f043 0202 	orr.w	r2, r3, #2
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b2:	2204      	movs	r2, #4
 80028b4:	409a      	lsls	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d012      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00b      	beq.n	80028e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d0:	2204      	movs	r2, #4
 80028d2:	409a      	lsls	r2, r3
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028e8:	2210      	movs	r2, #16
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d043      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d03c      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002906:	2210      	movs	r2, #16
 8002908:	409a      	lsls	r2, r3
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d018      	beq.n	800294e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d108      	bne.n	800293c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d024      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e01f      	b.n	800297c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002940:	2b00      	cmp	r3, #0
 8002942:	d01b      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	4798      	blx	r3
 800294c:	e016      	b.n	800297c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002958:	2b00      	cmp	r3, #0
 800295a:	d107      	bne.n	800296c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0208 	bic.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002980:	2220      	movs	r2, #32
 8002982:	409a      	lsls	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 808f 	beq.w	8002aac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0310 	and.w	r3, r3, #16
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 8087 	beq.w	8002aac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a2:	2220      	movs	r2, #32
 80029a4:	409a      	lsls	r2, r3
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d136      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0216 	bic.w	r2, r2, #22
 80029c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80029d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d103      	bne.n	80029e6 <HAL_DMA_IRQHandler+0x1da>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0208 	bic.w	r2, r2, #8
 80029f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	223f      	movs	r2, #63	@ 0x3f
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d07e      	beq.n	8002b18 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	4798      	blx	r3
        }
        return;
 8002a22:	e079      	b.n	8002b18 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d01d      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d031      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
 8002a50:	e02c      	b.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
 8002a52:	bf00      	nop
 8002a54:	20000014 	.word	0x20000014
 8002a58:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d023      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
 8002a6c:	e01e      	b.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10f      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f022 0210 	bic.w	r2, r2, #16
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d032      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d022      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2205      	movs	r2, #5
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	3301      	adds	r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d307      	bcc.n	8002af4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f2      	bne.n	8002ad8 <HAL_DMA_IRQHandler+0x2cc>
 8002af2:	e000      	b.n	8002af6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002af4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
 8002b16:	e000      	b.n	8002b1a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b18:	bf00      	nop
    }
  }
}
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b40      	cmp	r3, #64	@ 0x40
 8002b4c:	d108      	bne.n	8002b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68ba      	ldr	r2, [r7, #8]
 8002b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b5e:	e007      	b.n	8002b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	60da      	str	r2, [r3, #12]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	3b10      	subs	r3, #16
 8002b8c:	4a14      	ldr	r2, [pc, #80]	@ (8002be0 <DMA_CalcBaseAndBitshift+0x64>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b96:	4a13      	ldr	r2, [pc, #76]	@ (8002be4 <DMA_CalcBaseAndBitshift+0x68>)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d909      	bls.n	8002bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bb2:	f023 0303 	bic.w	r3, r3, #3
 8002bb6:	1d1a      	adds	r2, r3, #4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	659a      	str	r2, [r3, #88]	@ 0x58
 8002bbc:	e007      	b.n	8002bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002bc6:	f023 0303 	bic.w	r3, r3, #3
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
 8002bde:	bf00      	nop
 8002be0:	aaaaaaab 	.word	0xaaaaaaab
 8002be4:	08007160 	.word	0x08007160

08002be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b085      	sub	sp, #20
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d11f      	bne.n	8002c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d856      	bhi.n	8002cb6 <DMA_CheckFifoParam+0xce>
 8002c08:	a201      	add	r2, pc, #4	@ (adr r2, 8002c10 <DMA_CheckFifoParam+0x28>)
 8002c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c0e:	bf00      	nop
 8002c10:	08002c21 	.word	0x08002c21
 8002c14:	08002c33 	.word	0x08002c33
 8002c18:	08002c21 	.word	0x08002c21
 8002c1c:	08002cb7 	.word	0x08002cb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d046      	beq.n	8002cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e043      	b.n	8002cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c3a:	d140      	bne.n	8002cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c40:	e03d      	b.n	8002cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c4a:	d121      	bne.n	8002c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d837      	bhi.n	8002cc2 <DMA_CheckFifoParam+0xda>
 8002c52:	a201      	add	r2, pc, #4	@ (adr r2, 8002c58 <DMA_CheckFifoParam+0x70>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c69 	.word	0x08002c69
 8002c5c:	08002c6f 	.word	0x08002c6f
 8002c60:	08002c69 	.word	0x08002c69
 8002c64:	08002c81 	.word	0x08002c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c6c:	e030      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d025      	beq.n	8002cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7e:	e022      	b.n	8002cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c88:	d11f      	bne.n	8002cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c8e:	e01c      	b.n	8002cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d903      	bls.n	8002c9e <DMA_CheckFifoParam+0xb6>
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b03      	cmp	r3, #3
 8002c9a:	d003      	beq.n	8002ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c9c:	e018      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca2:	e015      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00e      	beq.n	8002cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cb4:	e00b      	b.n	8002cce <DMA_CheckFifoParam+0xe6>
      break;
 8002cb6:	bf00      	nop
 8002cb8:	e00a      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cba:	bf00      	nop
 8002cbc:	e008      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cbe:	bf00      	nop
 8002cc0:	e006      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc2:	bf00      	nop
 8002cc4:	e004      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cc6:	bf00      	nop
 8002cc8:	e002      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cca:	bf00      	nop
 8002ccc:	e000      	b.n	8002cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8002cce:	bf00      	nop
    }
  } 
  
  return status; 
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b089      	sub	sp, #36	@ 0x24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e165      	b.n	8002fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	697a      	ldr	r2, [r7, #20]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	f040 8154 	bne.w	8002fc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d005      	beq.n	8002d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d130      	bne.n	8002d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2203      	movs	r2, #3
 8002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4013      	ands	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	43db      	mvns	r3, r3
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	4013      	ands	r3, r2
 8002d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	091b      	lsrs	r3, r3, #4
 8002d7e:	f003 0201 	and.w	r2, r3, #1
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	69ba      	ldr	r2, [r7, #24]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	69ba      	ldr	r2, [r7, #24]
 8002d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f003 0303 	and.w	r3, r3, #3
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d017      	beq.n	8002dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d123      	bne.n	8002e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	08da      	lsrs	r2, r3, #3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3208      	adds	r2, #8
 8002de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	220f      	movs	r2, #15
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	08da      	lsrs	r2, r3, #3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	3208      	adds	r2, #8
 8002e1e:	69b9      	ldr	r1, [r7, #24]
 8002e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	2203      	movs	r2, #3
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0203 	and.w	r2, r3, #3
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80ae 	beq.w	8002fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe0 <HAL_GPIO_Init+0x300>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	4a5c      	ldr	r2, [pc, #368]	@ (8002fe0 <HAL_GPIO_Init+0x300>)
 8002e70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e76:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe0 <HAL_GPIO_Init+0x300>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e82:	4a58      	ldr	r2, [pc, #352]	@ (8002fe4 <HAL_GPIO_Init+0x304>)
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	3302      	adds	r3, #2
 8002e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	220f      	movs	r2, #15
 8002e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9e:	43db      	mvns	r3, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8002fe8 <HAL_GPIO_Init+0x308>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d025      	beq.n	8002efa <HAL_GPIO_Init+0x21a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a4e      	ldr	r2, [pc, #312]	@ (8002fec <HAL_GPIO_Init+0x30c>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d01f      	beq.n	8002ef6 <HAL_GPIO_Init+0x216>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a4d      	ldr	r2, [pc, #308]	@ (8002ff0 <HAL_GPIO_Init+0x310>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d019      	beq.n	8002ef2 <HAL_GPIO_Init+0x212>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a4c      	ldr	r2, [pc, #304]	@ (8002ff4 <HAL_GPIO_Init+0x314>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d013      	beq.n	8002eee <HAL_GPIO_Init+0x20e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff8 <HAL_GPIO_Init+0x318>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00d      	beq.n	8002eea <HAL_GPIO_Init+0x20a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a4a      	ldr	r2, [pc, #296]	@ (8002ffc <HAL_GPIO_Init+0x31c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <HAL_GPIO_Init+0x206>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a49      	ldr	r2, [pc, #292]	@ (8003000 <HAL_GPIO_Init+0x320>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d101      	bne.n	8002ee2 <HAL_GPIO_Init+0x202>
 8002ede:	2306      	movs	r3, #6
 8002ee0:	e00c      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002ee2:	2307      	movs	r3, #7
 8002ee4:	e00a      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002ee6:	2305      	movs	r3, #5
 8002ee8:	e008      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002eea:	2304      	movs	r3, #4
 8002eec:	e006      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e004      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	e002      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <HAL_GPIO_Init+0x21c>
 8002efa:	2300      	movs	r3, #0
 8002efc:	69fa      	ldr	r2, [r7, #28]
 8002efe:	f002 0203 	and.w	r2, r2, #3
 8002f02:	0092      	lsls	r2, r2, #2
 8002f04:	4093      	lsls	r3, r2
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f0c:	4935      	ldr	r1, [pc, #212]	@ (8002fe4 <HAL_GPIO_Init+0x304>)
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	3302      	adds	r3, #2
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f1a:	4b3a      	ldr	r3, [pc, #232]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d003      	beq.n	8002f3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3e:	4a31      	ldr	r2, [pc, #196]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f44:	4b2f      	ldr	r3, [pc, #188]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	43db      	mvns	r3, r3
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	4013      	ands	r3, r2
 8002f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f68:	4a26      	ldr	r2, [pc, #152]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6e:	4b25      	ldr	r3, [pc, #148]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f92:	4a1c      	ldr	r2, [pc, #112]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f98:	4b1a      	ldr	r3, [pc, #104]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fbc:	4a11      	ldr	r2, [pc, #68]	@ (8003004 <HAL_GPIO_Init+0x324>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	61fb      	str	r3, [r7, #28]
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	2b0f      	cmp	r3, #15
 8002fcc:	f67f ae96 	bls.w	8002cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40013800 	.word	0x40013800
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40020400 	.word	0x40020400
 8002ff0:	40020800 	.word	0x40020800
 8002ff4:	40020c00 	.word	0x40020c00
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40021400 	.word	0x40021400
 8003000:	40021800 	.word	0x40021800
 8003004:	40013c00 	.word	0x40013c00

08003008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
 8003014:	4613      	mov	r3, r2
 8003016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003018:	787b      	ldrb	r3, [r7, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003024:	e003      	b.n	800302e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	041a      	lsls	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	619a      	str	r2, [r3, #24]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr
	...

0800303c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d101      	bne.n	8003050 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e0cc      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003050:	4b68      	ldr	r3, [pc, #416]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d90c      	bls.n	8003078 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b65      	ldr	r3, [pc, #404]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	b2d2      	uxtb	r2, r2
 8003064:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b63      	ldr	r3, [pc, #396]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 030f 	and.w	r3, r3, #15
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0b8      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d005      	beq.n	800309c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003090:	4b59      	ldr	r3, [pc, #356]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	4a58      	ldr	r2, [pc, #352]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800309a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0308 	and.w	r3, r3, #8
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d005      	beq.n	80030b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030a8:	4b53      	ldr	r3, [pc, #332]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4a52      	ldr	r2, [pc, #328]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80030b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b4:	4b50      	ldr	r3, [pc, #320]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	494d      	ldr	r1, [pc, #308]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d044      	beq.n	800315c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d107      	bne.n	80030ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030da:	4b47      	ldr	r3, [pc, #284]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d119      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d107      	bne.n	800310a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fa:	4b3f      	ldr	r3, [pc, #252]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e06f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800310a:	4b3b      	ldr	r3, [pc, #236]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e067      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800311a:	4b37      	ldr	r3, [pc, #220]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f023 0203 	bic.w	r2, r3, #3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4934      	ldr	r1, [pc, #208]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003128:	4313      	orrs	r3, r2
 800312a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800312c:	f7ff f8b8 	bl	80022a0 <HAL_GetTick>
 8003130:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	e00a      	b.n	800314a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003134:	f7ff f8b4 	bl	80022a0 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003142:	4293      	cmp	r3, r2
 8003144:	d901      	bls.n	800314a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e04f      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314a:	4b2b      	ldr	r3, [pc, #172]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 020c 	and.w	r2, r3, #12
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	429a      	cmp	r2, r3
 800315a:	d1eb      	bne.n	8003134 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800315c:	4b25      	ldr	r3, [pc, #148]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d20c      	bcs.n	8003184 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b22      	ldr	r3, [pc, #136]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003172:	4b20      	ldr	r3, [pc, #128]	@ (80031f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e032      	b.n	80031ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0304 	and.w	r3, r3, #4
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003190:	4b19      	ldr	r3, [pc, #100]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	4916      	ldr	r1, [pc, #88]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0308 	and.w	r3, r3, #8
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d009      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ae:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	490e      	ldr	r1, [pc, #56]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c2:	f000 f855 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 80031c6:	4602      	mov	r2, r0
 80031c8:	4b0b      	ldr	r3, [pc, #44]	@ (80031f8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 030f 	and.w	r3, r3, #15
 80031d2:	490a      	ldr	r1, [pc, #40]	@ (80031fc <HAL_RCC_ClockConfig+0x1c0>)
 80031d4:	5ccb      	ldrb	r3, [r1, r3]
 80031d6:	fa22 f303 	lsr.w	r3, r2, r3
 80031da:	4a09      	ldr	r2, [pc, #36]	@ (8003200 <HAL_RCC_ClockConfig+0x1c4>)
 80031dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80031de:	4b09      	ldr	r3, [pc, #36]	@ (8003204 <HAL_RCC_ClockConfig+0x1c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff f818 	bl	8002218 <HAL_InitTick>

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	40023c00 	.word	0x40023c00
 80031f8:	40023800 	.word	0x40023800
 80031fc:	08007148 	.word	0x08007148
 8003200:	20000014 	.word	0x20000014
 8003204:	20000018 	.word	0x20000018

08003208 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800320c:	4b03      	ldr	r3, [pc, #12]	@ (800321c <HAL_RCC_GetHCLKFreq+0x14>)
 800320e:	681b      	ldr	r3, [r3, #0]
}
 8003210:	4618      	mov	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr
 800321a:	bf00      	nop
 800321c:	20000014 	.word	0x20000014

08003220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003224:	f7ff fff0 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003228:	4602      	mov	r2, r0
 800322a:	4b05      	ldr	r3, [pc, #20]	@ (8003240 <HAL_RCC_GetPCLK1Freq+0x20>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	0a9b      	lsrs	r3, r3, #10
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	4903      	ldr	r1, [pc, #12]	@ (8003244 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003236:	5ccb      	ldrb	r3, [r1, r3]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800323c:	4618      	mov	r0, r3
 800323e:	bd80      	pop	{r7, pc}
 8003240:	40023800 	.word	0x40023800
 8003244:	08007158 	.word	0x08007158

08003248 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800324c:	f7ff ffdc 	bl	8003208 <HAL_RCC_GetHCLKFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	0b5b      	lsrs	r3, r3, #13
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	4903      	ldr	r1, [pc, #12]	@ (800326c <HAL_RCC_GetPCLK2Freq+0x24>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003264:	4618      	mov	r0, r3
 8003266:	bd80      	pop	{r7, pc}
 8003268:	40023800 	.word	0x40023800
 800326c:	08007158 	.word	0x08007158

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003274:	b0ae      	sub	sp, #184	@ 0xb8
 8003276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003296:	4bcb      	ldr	r3, [pc, #812]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f003 030c 	and.w	r3, r3, #12
 800329e:	2b0c      	cmp	r3, #12
 80032a0:	f200 8206 	bhi.w	80036b0 <HAL_RCC_GetSysClockFreq+0x440>
 80032a4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ac <HAL_RCC_GetSysClockFreq+0x3c>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032e1 	.word	0x080032e1
 80032b0:	080036b1 	.word	0x080036b1
 80032b4:	080036b1 	.word	0x080036b1
 80032b8:	080036b1 	.word	0x080036b1
 80032bc:	080032e9 	.word	0x080032e9
 80032c0:	080036b1 	.word	0x080036b1
 80032c4:	080036b1 	.word	0x080036b1
 80032c8:	080036b1 	.word	0x080036b1
 80032cc:	080032f1 	.word	0x080032f1
 80032d0:	080036b1 	.word	0x080036b1
 80032d4:	080036b1 	.word	0x080036b1
 80032d8:	080036b1 	.word	0x080036b1
 80032dc:	080034e1 	.word	0x080034e1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032e0:	4bb9      	ldr	r3, [pc, #740]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x358>)
 80032e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032e6:	e1e7      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e8:	4bb8      	ldr	r3, [pc, #736]	@ (80035cc <HAL_RCC_GetSysClockFreq+0x35c>)
 80032ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80032ee:	e1e3      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032f0:	4bb4      	ldr	r3, [pc, #720]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032fc:	4bb1      	ldr	r3, [pc, #708]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d071      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003308:	4bae      	ldr	r3, [pc, #696]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	099b      	lsrs	r3, r3, #6
 800330e:	2200      	movs	r2, #0
 8003310:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003314:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800331c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003320:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003324:	2300      	movs	r3, #0
 8003326:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800332a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800332e:	4622      	mov	r2, r4
 8003330:	462b      	mov	r3, r5
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f04f 0100 	mov.w	r1, #0
 800333a:	0159      	lsls	r1, r3, #5
 800333c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003340:	0150      	lsls	r0, r2, #5
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	4621      	mov	r1, r4
 8003348:	1a51      	subs	r1, r2, r1
 800334a:	6439      	str	r1, [r7, #64]	@ 0x40
 800334c:	4629      	mov	r1, r5
 800334e:	eb63 0301 	sbc.w	r3, r3, r1
 8003352:	647b      	str	r3, [r7, #68]	@ 0x44
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003360:	4649      	mov	r1, r9
 8003362:	018b      	lsls	r3, r1, #6
 8003364:	4641      	mov	r1, r8
 8003366:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800336a:	4641      	mov	r1, r8
 800336c:	018a      	lsls	r2, r1, #6
 800336e:	4641      	mov	r1, r8
 8003370:	1a51      	subs	r1, r2, r1
 8003372:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003374:	4649      	mov	r1, r9
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003388:	4649      	mov	r1, r9
 800338a:	00cb      	lsls	r3, r1, #3
 800338c:	4641      	mov	r1, r8
 800338e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003392:	4641      	mov	r1, r8
 8003394:	00ca      	lsls	r2, r1, #3
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	4603      	mov	r3, r0
 800339c:	4622      	mov	r2, r4
 800339e:	189b      	adds	r3, r3, r2
 80033a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033a2:	462b      	mov	r3, r5
 80033a4:	460a      	mov	r2, r1
 80033a6:	eb42 0303 	adc.w	r3, r2, r3
 80033aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033b8:	4629      	mov	r1, r5
 80033ba:	024b      	lsls	r3, r1, #9
 80033bc:	4621      	mov	r1, r4
 80033be:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80033c2:	4621      	mov	r1, r4
 80033c4:	024a      	lsls	r2, r1, #9
 80033c6:	4610      	mov	r0, r2
 80033c8:	4619      	mov	r1, r3
 80033ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80033ce:	2200      	movs	r2, #0
 80033d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80033d8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80033dc:	f7fd fb86 	bl	8000aec <__aeabi_uldivmod>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4613      	mov	r3, r2
 80033e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033ea:	e067      	b.n	80034bc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4b75      	ldr	r3, [pc, #468]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	2200      	movs	r2, #0
 80033f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80033fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003404:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003406:	2300      	movs	r3, #0
 8003408:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800340a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800340e:	4622      	mov	r2, r4
 8003410:	462b      	mov	r3, r5
 8003412:	f04f 0000 	mov.w	r0, #0
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	0159      	lsls	r1, r3, #5
 800341c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003420:	0150      	lsls	r0, r2, #5
 8003422:	4602      	mov	r2, r0
 8003424:	460b      	mov	r3, r1
 8003426:	4621      	mov	r1, r4
 8003428:	1a51      	subs	r1, r2, r1
 800342a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800342c:	4629      	mov	r1, r5
 800342e:	eb63 0301 	sbc.w	r3, r3, r1
 8003432:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003440:	4649      	mov	r1, r9
 8003442:	018b      	lsls	r3, r1, #6
 8003444:	4641      	mov	r1, r8
 8003446:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800344a:	4641      	mov	r1, r8
 800344c:	018a      	lsls	r2, r1, #6
 800344e:	4641      	mov	r1, r8
 8003450:	ebb2 0a01 	subs.w	sl, r2, r1
 8003454:	4649      	mov	r1, r9
 8003456:	eb63 0b01 	sbc.w	fp, r3, r1
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003466:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800346a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800346e:	4692      	mov	sl, r2
 8003470:	469b      	mov	fp, r3
 8003472:	4623      	mov	r3, r4
 8003474:	eb1a 0303 	adds.w	r3, sl, r3
 8003478:	623b      	str	r3, [r7, #32]
 800347a:	462b      	mov	r3, r5
 800347c:	eb4b 0303 	adc.w	r3, fp, r3
 8003480:	627b      	str	r3, [r7, #36]	@ 0x24
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800348e:	4629      	mov	r1, r5
 8003490:	028b      	lsls	r3, r1, #10
 8003492:	4621      	mov	r1, r4
 8003494:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003498:	4621      	mov	r1, r4
 800349a:	028a      	lsls	r2, r1, #10
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034a4:	2200      	movs	r2, #0
 80034a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80034a8:	677a      	str	r2, [r7, #116]	@ 0x74
 80034aa:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80034ae:	f7fd fb1d 	bl	8000aec <__aeabi_uldivmod>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4613      	mov	r3, r2
 80034b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034bc:	4b41      	ldr	r3, [pc, #260]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	3301      	adds	r3, #1
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80034ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80034d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80034de:	e0eb      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e0:	4b38      	ldr	r3, [pc, #224]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034ec:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d06b      	beq.n	80035d0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f8:	4b32      	ldr	r3, [pc, #200]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x354>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	099b      	lsrs	r3, r3, #6
 80034fe:	2200      	movs	r2, #0
 8003500:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003502:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800350a:	663b      	str	r3, [r7, #96]	@ 0x60
 800350c:	2300      	movs	r3, #0
 800350e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003510:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003514:	4622      	mov	r2, r4
 8003516:	462b      	mov	r3, r5
 8003518:	f04f 0000 	mov.w	r0, #0
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	0159      	lsls	r1, r3, #5
 8003522:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003526:	0150      	lsls	r0, r2, #5
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4621      	mov	r1, r4
 800352e:	1a51      	subs	r1, r2, r1
 8003530:	61b9      	str	r1, [r7, #24]
 8003532:	4629      	mov	r1, r5
 8003534:	eb63 0301 	sbc.w	r3, r3, r1
 8003538:	61fb      	str	r3, [r7, #28]
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003546:	4659      	mov	r1, fp
 8003548:	018b      	lsls	r3, r1, #6
 800354a:	4651      	mov	r1, sl
 800354c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003550:	4651      	mov	r1, sl
 8003552:	018a      	lsls	r2, r1, #6
 8003554:	4651      	mov	r1, sl
 8003556:	ebb2 0801 	subs.w	r8, r2, r1
 800355a:	4659      	mov	r1, fp
 800355c:	eb63 0901 	sbc.w	r9, r3, r1
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800356c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003570:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003574:	4690      	mov	r8, r2
 8003576:	4699      	mov	r9, r3
 8003578:	4623      	mov	r3, r4
 800357a:	eb18 0303 	adds.w	r3, r8, r3
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	462b      	mov	r3, r5
 8003582:	eb49 0303 	adc.w	r3, r9, r3
 8003586:	617b      	str	r3, [r7, #20]
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003594:	4629      	mov	r1, r5
 8003596:	024b      	lsls	r3, r1, #9
 8003598:	4621      	mov	r1, r4
 800359a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800359e:	4621      	mov	r1, r4
 80035a0:	024a      	lsls	r2, r1, #9
 80035a2:	4610      	mov	r0, r2
 80035a4:	4619      	mov	r1, r3
 80035a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80035aa:	2200      	movs	r2, #0
 80035ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80035ae:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80035b0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80035b4:	f7fd fa9a 	bl	8000aec <__aeabi_uldivmod>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4613      	mov	r3, r2
 80035be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035c2:	e065      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x420>
 80035c4:	40023800 	.word	0x40023800
 80035c8:	00f42400 	.word	0x00f42400
 80035cc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d0:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x458>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	099b      	lsrs	r3, r3, #6
 80035d6:	2200      	movs	r2, #0
 80035d8:	4618      	mov	r0, r3
 80035da:	4611      	mov	r1, r2
 80035dc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80035e2:	2300      	movs	r3, #0
 80035e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80035e6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80035ea:	4642      	mov	r2, r8
 80035ec:	464b      	mov	r3, r9
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	0159      	lsls	r1, r3, #5
 80035f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035fc:	0150      	lsls	r0, r2, #5
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	4641      	mov	r1, r8
 8003604:	1a51      	subs	r1, r2, r1
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	4649      	mov	r1, r9
 800360a:	eb63 0301 	sbc.w	r3, r3, r1
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800361c:	4659      	mov	r1, fp
 800361e:	018b      	lsls	r3, r1, #6
 8003620:	4651      	mov	r1, sl
 8003622:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003626:	4651      	mov	r1, sl
 8003628:	018a      	lsls	r2, r1, #6
 800362a:	4651      	mov	r1, sl
 800362c:	1a54      	subs	r4, r2, r1
 800362e:	4659      	mov	r1, fp
 8003630:	eb63 0501 	sbc.w	r5, r3, r1
 8003634:	f04f 0200 	mov.w	r2, #0
 8003638:	f04f 0300 	mov.w	r3, #0
 800363c:	00eb      	lsls	r3, r5, #3
 800363e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003642:	00e2      	lsls	r2, r4, #3
 8003644:	4614      	mov	r4, r2
 8003646:	461d      	mov	r5, r3
 8003648:	4643      	mov	r3, r8
 800364a:	18e3      	adds	r3, r4, r3
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	464b      	mov	r3, r9
 8003650:	eb45 0303 	adc.w	r3, r5, r3
 8003654:	607b      	str	r3, [r7, #4]
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 0300 	mov.w	r3, #0
 800365e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003662:	4629      	mov	r1, r5
 8003664:	028b      	lsls	r3, r1, #10
 8003666:	4621      	mov	r1, r4
 8003668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800366c:	4621      	mov	r1, r4
 800366e:	028a      	lsls	r2, r1, #10
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003678:	2200      	movs	r2, #0
 800367a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800367c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800367e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003682:	f7fd fa33 	bl	8000aec <__aeabi_uldivmod>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4613      	mov	r3, r2
 800368c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003690:	4b0d      	ldr	r3, [pc, #52]	@ (80036c8 <HAL_RCC_GetSysClockFreq+0x458>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	0f1b      	lsrs	r3, r3, #28
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800369e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80036a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036ae:	e003      	b.n	80036b8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036b0:	4b06      	ldr	r3, [pc, #24]	@ (80036cc <HAL_RCC_GetSysClockFreq+0x45c>)
 80036b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80036b6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	37b8      	adds	r7, #184	@ 0xb8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800
 80036cc:	00f42400 	.word	0x00f42400

080036d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e28d      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8083 	beq.w	80037f6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80036f0:	4b94      	ldr	r3, [pc, #592]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d019      	beq.n	8003730 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80036fc:	4b91      	ldr	r3, [pc, #580]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
        || \
 8003704:	2b08      	cmp	r3, #8
 8003706:	d106      	bne.n	8003716 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003708:	4b8e      	ldr	r3, [pc, #568]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003710:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003714:	d00c      	beq.n	8003730 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003716:	4b8b      	ldr	r3, [pc, #556]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d112      	bne.n	8003748 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003722:	4b88      	ldr	r3, [pc, #544]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800372a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800372e:	d10b      	bne.n	8003748 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003730:	4b84      	ldr	r3, [pc, #528]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d05b      	beq.n	80037f4 <HAL_RCC_OscConfig+0x124>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d157      	bne.n	80037f4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e25a      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003750:	d106      	bne.n	8003760 <HAL_RCC_OscConfig+0x90>
 8003752:	4b7c      	ldr	r3, [pc, #496]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7b      	ldr	r2, [pc, #492]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	e01d      	b.n	800379c <HAL_RCC_OscConfig+0xcc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003768:	d10c      	bne.n	8003784 <HAL_RCC_OscConfig+0xb4>
 800376a:	4b76      	ldr	r3, [pc, #472]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a75      	ldr	r2, [pc, #468]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003770:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	4b73      	ldr	r3, [pc, #460]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a72      	ldr	r2, [pc, #456]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 800377c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003780:	6013      	str	r3, [r2, #0]
 8003782:	e00b      	b.n	800379c <HAL_RCC_OscConfig+0xcc>
 8003784:	4b6f      	ldr	r3, [pc, #444]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a6e      	ldr	r2, [pc, #440]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 800378a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800378e:	6013      	str	r3, [r2, #0]
 8003790:	4b6c      	ldr	r3, [pc, #432]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a6b      	ldr	r2, [pc, #428]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003796:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800379a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d013      	beq.n	80037cc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a4:	f7fe fd7c 	bl	80022a0 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037ac:	f7fe fd78 	bl	80022a0 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b64      	cmp	r3, #100	@ 0x64
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e21f      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b61      	ldr	r3, [pc, #388]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0f0      	beq.n	80037ac <HAL_RCC_OscConfig+0xdc>
 80037ca:	e014      	b.n	80037f6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037cc:	f7fe fd68 	bl	80022a0 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037d4:	f7fe fd64 	bl	80022a0 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b64      	cmp	r3, #100	@ 0x64
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e20b      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e6:	4b57      	ldr	r3, [pc, #348]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x104>
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d06f      	beq.n	80038e2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003802:	4b50      	ldr	r3, [pc, #320]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b00      	cmp	r3, #0
 800380c:	d017      	beq.n	800383e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800380e:	4b4d      	ldr	r3, [pc, #308]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	f003 030c 	and.w	r3, r3, #12
        || \
 8003816:	2b08      	cmp	r3, #8
 8003818:	d105      	bne.n	8003826 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800381a:	4b4a      	ldr	r3, [pc, #296]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003826:	4b47      	ldr	r3, [pc, #284]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800382e:	2b0c      	cmp	r3, #12
 8003830:	d11c      	bne.n	800386c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b44      	ldr	r3, [pc, #272]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	4b41      	ldr	r3, [pc, #260]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x186>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1d3      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b3b      	ldr	r3, [pc, #236]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4937      	ldr	r1, [pc, #220]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	e03a      	b.n	80038e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003874:	4b34      	ldr	r3, [pc, #208]	@ (8003948 <HAL_RCC_OscConfig+0x278>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fe fd11 	bl	80022a0 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003882:	f7fe fd0d 	bl	80022a0 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e1b4      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b28      	ldr	r3, [pc, #160]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4925      	ldr	r1, [pc, #148]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
 80038b4:	e015      	b.n	80038e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <HAL_RCC_OscConfig+0x278>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe fcf0 	bl	80022a0 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fe fcec 	bl	80022a0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e193      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d036      	beq.n	800395c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b15      	ldr	r3, [pc, #84]	@ (800394c <HAL_RCC_OscConfig+0x27c>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe fcd0 	bl	80022a0 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003904:	f7fe fccc 	bl	80022a0 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e173      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	4b0b      	ldr	r3, [pc, #44]	@ (8003944 <HAL_RCC_OscConfig+0x274>)
 8003918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x234>
 8003922:	e01b      	b.n	800395c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003924:	4b09      	ldr	r3, [pc, #36]	@ (800394c <HAL_RCC_OscConfig+0x27c>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fe fcb9 	bl	80022a0 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	e00e      	b.n	8003950 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003932:	f7fe fcb5 	bl	80022a0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d907      	bls.n	8003950 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e15c      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
 8003944:	40023800 	.word	0x40023800
 8003948:	42470000 	.word	0x42470000
 800394c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b8a      	ldr	r3, [pc, #552]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ea      	bne.n	8003932 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8097 	beq.w	8003a98 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b83      	ldr	r3, [pc, #524]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003982:	4a7e      	ldr	r2, [pc, #504]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	@ 0x40
 800398a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b79      	ldr	r3, [pc, #484]	@ (8003b80 <HAL_RCC_OscConfig+0x4b0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d118      	bne.n	80039d8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a6:	4b76      	ldr	r3, [pc, #472]	@ (8003b80 <HAL_RCC_OscConfig+0x4b0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a75      	ldr	r2, [pc, #468]	@ (8003b80 <HAL_RCC_OscConfig+0x4b0>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b2:	f7fe fc75 	bl	80022a0 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7fe fc71 	bl	80022a0 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e118      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b80 <HAL_RCC_OscConfig+0x4b0>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x31e>
 80039e0:	4b66      	ldr	r3, [pc, #408]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e4:	4a65      	ldr	r2, [pc, #404]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x358>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x340>
 80039f6:	4b61      	ldr	r3, [pc, #388]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	4a60      	ldr	r2, [pc, #384]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a02:	4b5e      	ldr	r3, [pc, #376]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a06:	4a5d      	ldr	r2, [pc, #372]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0x358>
 8003a10:	4b5a      	ldr	r3, [pc, #360]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a14:	4a59      	ldr	r2, [pc, #356]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a1c:	4b57      	ldr	r3, [pc, #348]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a20:	4a56      	ldr	r2, [pc, #344]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fe fc36 	bl	80022a0 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fe fc32 	bl	80022a0 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0d7      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0ee      	beq.n	8003a38 <HAL_RCC_OscConfig+0x368>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fc20 	bl	80022a0 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fe fc1c 	bl	80022a0 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0c1      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7a:	4b40      	ldr	r3, [pc, #256]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ee      	bne.n	8003a64 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	4a3a      	ldr	r2, [pc, #232]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80ad 	beq.w	8003bfc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa2:	4b36      	ldr	r3, [pc, #216]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d060      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d145      	bne.n	8003b42 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b33      	ldr	r3, [pc, #204]	@ (8003b84 <HAL_RCC_OscConfig+0x4b4>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003abc:	f7fe fbf0 	bl	80022a0 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fe fbec 	bl	80022a0 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e093      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b0c:	071b      	lsls	r3, r3, #28
 8003b0e:	491b      	ldr	r1, [pc, #108]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	4b1b      	ldr	r3, [pc, #108]	@ (8003b84 <HAL_RCC_OscConfig+0x4b4>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fbc1 	bl	80022a0 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fe fbbd 	bl	80022a0 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e064      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b34:	4b11      	ldr	r3, [pc, #68]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x452>
 8003b40:	e05c      	b.n	8003bfc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b10      	ldr	r3, [pc, #64]	@ (8003b84 <HAL_RCC_OscConfig+0x4b4>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b48:	f7fe fbaa 	bl	80022a0 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe fba6 	bl	80022a0 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e04d      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCC_OscConfig+0x4ac>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x480>
 8003b6e:	e045      	b.n	8003bfc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e040      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b88:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <HAL_RCC_OscConfig+0x538>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d030      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d129      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d122      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003bb8:	4013      	ands	r3, r2
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003bbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d119      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bce:	085b      	lsrs	r3, r3, #1
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d10f      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d107      	bne.n	8003bf8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bf2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	40023800 	.word	0x40023800

08003c0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e041      	b.n	8003ca2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fe f858 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4619      	mov	r1, r3
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	f000 fd2e 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e041      	b.n	8003d40 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d106      	bne.n	8003cd6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f839 	bl	8003d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f000 fcdf 	bl	80046ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2201      	movs	r2, #1
 8003d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d109      	bne.n	8003d80 <HAL_TIM_PWM_Start+0x24>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	bf14      	ite	ne
 8003d78:	2301      	movne	r3, #1
 8003d7a:	2300      	moveq	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	e022      	b.n	8003dc6 <HAL_TIM_PWM_Start+0x6a>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d109      	bne.n	8003d9a <HAL_TIM_PWM_Start+0x3e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	bf14      	ite	ne
 8003d92:	2301      	movne	r3, #1
 8003d94:	2300      	moveq	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e015      	b.n	8003dc6 <HAL_TIM_PWM_Start+0x6a>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d109      	bne.n	8003db4 <HAL_TIM_PWM_Start+0x58>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	bf14      	ite	ne
 8003dac:	2301      	movne	r3, #1
 8003dae:	2300      	moveq	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	e008      	b.n	8003dc6 <HAL_TIM_PWM_Start+0x6a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	bf14      	ite	ne
 8003dc0:	2301      	movne	r3, #1
 8003dc2:	2300      	moveq	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07c      	b.n	8003ec8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d104      	bne.n	8003dde <HAL_TIM_PWM_Start+0x82>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ddc:	e013      	b.n	8003e06 <HAL_TIM_PWM_Start+0xaa>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d104      	bne.n	8003dee <HAL_TIM_PWM_Start+0x92>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dec:	e00b      	b.n	8003e06 <HAL_TIM_PWM_Start+0xaa>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	2b08      	cmp	r3, #8
 8003df2:	d104      	bne.n	8003dfe <HAL_TIM_PWM_Start+0xa2>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dfc:	e003      	b.n	8003e06 <HAL_TIM_PWM_Start+0xaa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2202      	movs	r2, #2
 8003e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	6839      	ldr	r1, [r7, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 ff42 	bl	8004c98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a2d      	ldr	r2, [pc, #180]	@ (8003ed0 <HAL_TIM_PWM_Start+0x174>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_TIM_PWM_Start+0xcc>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed4 <HAL_TIM_PWM_Start+0x178>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_TIM_PWM_Start+0xd0>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_TIM_PWM_Start+0xd2>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d007      	beq.n	8003e42 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e40:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a22      	ldr	r2, [pc, #136]	@ (8003ed0 <HAL_TIM_PWM_Start+0x174>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d022      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x136>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e54:	d01d      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x136>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ed8 <HAL_TIM_PWM_Start+0x17c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x136>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1d      	ldr	r2, [pc, #116]	@ (8003edc <HAL_TIM_PWM_Start+0x180>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x136>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee0 <HAL_TIM_PWM_Start+0x184>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x136>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a16      	ldr	r2, [pc, #88]	@ (8003ed4 <HAL_TIM_PWM_Start+0x178>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x136>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a18      	ldr	r2, [pc, #96]	@ (8003ee4 <HAL_TIM_PWM_Start+0x188>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <HAL_TIM_PWM_Start+0x136>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a16      	ldr	r2, [pc, #88]	@ (8003ee8 <HAL_TIM_PWM_Start+0x18c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d111      	bne.n	8003eb6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f003 0307 	and.w	r3, r3, #7
 8003e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2b06      	cmp	r3, #6
 8003ea2:	d010      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb4:	e007      	b.n	8003ec6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40010000 	.word	0x40010000
 8003ed4:	40010400 	.word	0x40010400
 8003ed8:	40000400 	.word	0x40000400
 8003edc:	40000800 	.word	0x40000800
 8003ee0:	40000c00 	.word	0x40000c00
 8003ee4:	40014000 	.word	0x40014000
 8003ee8:	40001800 	.word	0x40001800

08003eec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e097      	b.n	8004030 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fd ff09 	bl	8001d2c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f30:	f023 0307 	bic.w	r3, r3, #7
 8003f34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f000 fbb3 	bl	80046ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003f8c:	f023 030c 	bic.w	r3, r3, #12
 8003f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f98:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	011a      	lsls	r2, r3, #4
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b084      	sub	sp, #16
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004048:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004050:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004058:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004060:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d110      	bne.n	800408a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d102      	bne.n	8004074 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800406e:	7b7b      	ldrb	r3, [r7, #13]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e069      	b.n	800414c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004088:	e031      	b.n	80040ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	2b04      	cmp	r3, #4
 800408e:	d110      	bne.n	80040b2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004090:	7bbb      	ldrb	r3, [r7, #14]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d102      	bne.n	800409c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004096:	7b3b      	ldrb	r3, [r7, #12]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d001      	beq.n	80040a0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e055      	b.n	800414c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2202      	movs	r2, #2
 80040a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2202      	movs	r2, #2
 80040ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040b0:	e01d      	b.n	80040ee <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040b2:	7bfb      	ldrb	r3, [r7, #15]
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d108      	bne.n	80040ca <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80040b8:	7bbb      	ldrb	r3, [r7, #14]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d105      	bne.n	80040ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80040be:	7b7b      	ldrb	r3, [r7, #13]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d102      	bne.n	80040ca <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80040c4:	7b3b      	ldrb	r3, [r7, #12]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d001      	beq.n	80040ce <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e03e      	b.n	800414c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2202      	movs	r2, #2
 80040d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2202      	movs	r2, #2
 80040da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2202      	movs	r2, #2
 80040e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_TIM_Encoder_Start+0xc4>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b04      	cmp	r3, #4
 80040f8:	d008      	beq.n	800410c <HAL_TIM_Encoder_Start+0xd4>
 80040fa:	e00f      	b.n	800411c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2201      	movs	r2, #1
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fdc7 	bl	8004c98 <TIM_CCxChannelCmd>
      break;
 800410a:	e016      	b.n	800413a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2201      	movs	r2, #1
 8004112:	2104      	movs	r1, #4
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fdbf 	bl	8004c98 <TIM_CCxChannelCmd>
      break;
 800411a:	e00e      	b.n	800413a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	2100      	movs	r1, #0
 8004124:	4618      	mov	r0, r3
 8004126:	f000 fdb7 	bl	8004c98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2201      	movs	r2, #1
 8004130:	2104      	movs	r1, #4
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fdb0 	bl	8004c98 <TIM_CCxChannelCmd>
      break;
 8004138:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0302 	and.w	r3, r3, #2
 8004172:	2b00      	cmp	r3, #0
 8004174:	d020      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01b      	beq.n	80041b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0202 	mvn.w	r2, #2
 8004188:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699b      	ldr	r3, [r3, #24]
 8004196:	f003 0303 	and.w	r3, r3, #3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 fa65 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 80041a4:	e005      	b.n	80041b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa57 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 fa68 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	f003 0304 	and.w	r3, r3, #4
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d020      	beq.n	8004204 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f06f 0204 	mvn.w	r2, #4
 80041d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fa3f 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 80041f0:	e005      	b.n	80041fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fa31 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fa42 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d020      	beq.n	8004250 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b00      	cmp	r3, #0
 8004216:	d01b      	beq.n	8004250 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0208 	mvn.w	r2, #8
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2204      	movs	r2, #4
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f003 0303 	and.w	r3, r3, #3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fa19 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fa0b 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fa1c 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	f003 0310 	and.w	r3, r3, #16
 8004256:	2b00      	cmp	r3, #0
 8004258:	d020      	beq.n	800429c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 0310 	and.w	r3, r3, #16
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01b      	beq.n	800429c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0210 	mvn.w	r2, #16
 800426c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2208      	movs	r2, #8
 8004272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800427e:	2b00      	cmp	r3, #0
 8004280:	d003      	beq.n	800428a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f9f3 	bl	800466e <HAL_TIM_IC_CaptureCallback>
 8004288:	e005      	b.n	8004296 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f9e5 	bl	800465a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f9f6 	bl	8004682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00c      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d007      	beq.n	80042c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f06f 0201 	mvn.w	r2, #1
 80042b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f9c3 	bl	8004646 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80042dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fdd8 	bl	8004e94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d007      	beq.n	8004308 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004300:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9c7 	bl	8004696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d007      	beq.n	800432c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f06f 0220 	mvn.w	r2, #32
 8004324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 fdaa 	bl	8004e80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800432c:	bf00      	nop
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800434a:	2b01      	cmp	r3, #1
 800434c:	d101      	bne.n	8004352 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800434e:	2302      	movs	r3, #2
 8004350:	e0ae      	b.n	80044b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b0c      	cmp	r3, #12
 800435e:	f200 809f 	bhi.w	80044a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004362:	a201      	add	r2, pc, #4	@ (adr r2, 8004368 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800439d 	.word	0x0800439d
 800436c:	080044a1 	.word	0x080044a1
 8004370:	080044a1 	.word	0x080044a1
 8004374:	080044a1 	.word	0x080044a1
 8004378:	080043dd 	.word	0x080043dd
 800437c:	080044a1 	.word	0x080044a1
 8004380:	080044a1 	.word	0x080044a1
 8004384:	080044a1 	.word	0x080044a1
 8004388:	0800441f 	.word	0x0800441f
 800438c:	080044a1 	.word	0x080044a1
 8004390:	080044a1 	.word	0x080044a1
 8004394:	080044a1 	.word	0x080044a1
 8004398:	0800445f 	.word	0x0800445f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fa2e 	bl	8004804 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699a      	ldr	r2, [r3, #24]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f042 0208 	orr.w	r2, r2, #8
 80043b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699a      	ldr	r2, [r3, #24]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0204 	bic.w	r2, r2, #4
 80043c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6999      	ldr	r1, [r3, #24]
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	619a      	str	r2, [r3, #24]
      break;
 80043da:	e064      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fa7e 	bl	80048e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699a      	ldr	r2, [r3, #24]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004406:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6999      	ldr	r1, [r3, #24]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	021a      	lsls	r2, r3, #8
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	619a      	str	r2, [r3, #24]
      break;
 800441c:	e043      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68b9      	ldr	r1, [r7, #8]
 8004424:	4618      	mov	r0, r3
 8004426:	f000 fad3 	bl	80049d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69da      	ldr	r2, [r3, #28]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0208 	orr.w	r2, r2, #8
 8004438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69da      	ldr	r2, [r3, #28]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0204 	bic.w	r2, r2, #4
 8004448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69d9      	ldr	r1, [r3, #28]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	61da      	str	r2, [r3, #28]
      break;
 800445c:	e023      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	4618      	mov	r0, r3
 8004466:	f000 fb27 	bl	8004ab8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004478:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004488:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	69d9      	ldr	r1, [r3, #28]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	021a      	lsls	r2, r3, #8
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	61da      	str	r2, [r3, #28]
      break;
 800449e:	e002      	b.n	80044a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	75fb      	strb	r3, [r7, #23]
      break;
 80044a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044c2:	2300      	movs	r3, #0
 80044c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d101      	bne.n	80044d4 <HAL_TIM_ConfigClockSource+0x1c>
 80044d0:	2302      	movs	r3, #2
 80044d2:	e0b4      	b.n	800463e <HAL_TIM_ConfigClockSource+0x186>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80044f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800450c:	d03e      	beq.n	800458c <HAL_TIM_ConfigClockSource+0xd4>
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004512:	f200 8087 	bhi.w	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800451a:	f000 8086 	beq.w	800462a <HAL_TIM_ConfigClockSource+0x172>
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004522:	d87f      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004524:	2b70      	cmp	r3, #112	@ 0x70
 8004526:	d01a      	beq.n	800455e <HAL_TIM_ConfigClockSource+0xa6>
 8004528:	2b70      	cmp	r3, #112	@ 0x70
 800452a:	d87b      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 800452c:	2b60      	cmp	r3, #96	@ 0x60
 800452e:	d050      	beq.n	80045d2 <HAL_TIM_ConfigClockSource+0x11a>
 8004530:	2b60      	cmp	r3, #96	@ 0x60
 8004532:	d877      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004534:	2b50      	cmp	r3, #80	@ 0x50
 8004536:	d03c      	beq.n	80045b2 <HAL_TIM_ConfigClockSource+0xfa>
 8004538:	2b50      	cmp	r3, #80	@ 0x50
 800453a:	d873      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 800453c:	2b40      	cmp	r3, #64	@ 0x40
 800453e:	d058      	beq.n	80045f2 <HAL_TIM_ConfigClockSource+0x13a>
 8004540:	2b40      	cmp	r3, #64	@ 0x40
 8004542:	d86f      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004544:	2b30      	cmp	r3, #48	@ 0x30
 8004546:	d064      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x15a>
 8004548:	2b30      	cmp	r3, #48	@ 0x30
 800454a:	d86b      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 800454c:	2b20      	cmp	r3, #32
 800454e:	d060      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x15a>
 8004550:	2b20      	cmp	r3, #32
 8004552:	d867      	bhi.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
 8004554:	2b00      	cmp	r3, #0
 8004556:	d05c      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x15a>
 8004558:	2b10      	cmp	r3, #16
 800455a:	d05a      	beq.n	8004612 <HAL_TIM_ConfigClockSource+0x15a>
 800455c:	e062      	b.n	8004624 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800456e:	f000 fb73 	bl	8004c58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004580:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	609a      	str	r2, [r3, #8]
      break;
 800458a:	e04f      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800459c:	f000 fb5c 	bl	8004c58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045ae:	609a      	str	r2, [r3, #8]
      break;
 80045b0:	e03c      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045be:	461a      	mov	r2, r3
 80045c0:	f000 fad0 	bl	8004b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2150      	movs	r1, #80	@ 0x50
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 fb29 	bl	8004c22 <TIM_ITRx_SetConfig>
      break;
 80045d0:	e02c      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80045de:	461a      	mov	r2, r3
 80045e0:	f000 faef 	bl	8004bc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2160      	movs	r1, #96	@ 0x60
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fb19 	bl	8004c22 <TIM_ITRx_SetConfig>
      break;
 80045f0:	e01c      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045fe:	461a      	mov	r2, r3
 8004600:	f000 fab0 	bl	8004b64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2140      	movs	r1, #64	@ 0x40
 800460a:	4618      	mov	r0, r3
 800460c:	f000 fb09 	bl	8004c22 <TIM_ITRx_SetConfig>
      break;
 8004610:	e00c      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4619      	mov	r1, r3
 800461c:	4610      	mov	r0, r2
 800461e:	f000 fb00 	bl	8004c22 <TIM_ITRx_SetConfig>
      break;
 8004622:	e003      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	73fb      	strb	r3, [r7, #15]
      break;
 8004628:	e000      	b.n	800462c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800462a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800463c:	7bfb      	ldrb	r3, [r7, #15]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800464e:	bf00      	nop
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800465a:	b480      	push	{r7}
 800465c:	b083      	sub	sp, #12
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004662:	bf00      	nop
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr

0800466e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr

08004682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004682:	b480      	push	{r7}
 8004684:	b083      	sub	sp, #12
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800468a:	bf00      	nop
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
	...

080046ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a46      	ldr	r2, [pc, #280]	@ (80047d8 <TIM_Base_SetConfig+0x12c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ca:	d00f      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a43      	ldr	r2, [pc, #268]	@ (80047dc <TIM_Base_SetConfig+0x130>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00b      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a42      	ldr	r2, [pc, #264]	@ (80047e0 <TIM_Base_SetConfig+0x134>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a41      	ldr	r2, [pc, #260]	@ (80047e4 <TIM_Base_SetConfig+0x138>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_Base_SetConfig+0x40>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a40      	ldr	r2, [pc, #256]	@ (80047e8 <TIM_Base_SetConfig+0x13c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d108      	bne.n	80046fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a35      	ldr	r2, [pc, #212]	@ (80047d8 <TIM_Base_SetConfig+0x12c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d02b      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800470c:	d027      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a32      	ldr	r2, [pc, #200]	@ (80047dc <TIM_Base_SetConfig+0x130>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d023      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a31      	ldr	r2, [pc, #196]	@ (80047e0 <TIM_Base_SetConfig+0x134>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01f      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a30      	ldr	r2, [pc, #192]	@ (80047e4 <TIM_Base_SetConfig+0x138>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d01b      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a2f      	ldr	r2, [pc, #188]	@ (80047e8 <TIM_Base_SetConfig+0x13c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d017      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a2e      	ldr	r2, [pc, #184]	@ (80047ec <TIM_Base_SetConfig+0x140>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a2d      	ldr	r2, [pc, #180]	@ (80047f0 <TIM_Base_SetConfig+0x144>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2c      	ldr	r2, [pc, #176]	@ (80047f4 <TIM_Base_SetConfig+0x148>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2b      	ldr	r2, [pc, #172]	@ (80047f8 <TIM_Base_SetConfig+0x14c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2a      	ldr	r2, [pc, #168]	@ (80047fc <TIM_Base_SetConfig+0x150>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_Base_SetConfig+0xb2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a29      	ldr	r2, [pc, #164]	@ (8004800 <TIM_Base_SetConfig+0x154>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d108      	bne.n	8004770 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004764:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a10      	ldr	r2, [pc, #64]	@ (80047d8 <TIM_Base_SetConfig+0x12c>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0xf8>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a12      	ldr	r2, [pc, #72]	@ (80047e8 <TIM_Base_SetConfig+0x13c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d103      	bne.n	80047ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d105      	bne.n	80047ca <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	f023 0201 	bic.w	r2, r3, #1
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]
  }
}
 80047ca:	bf00      	nop
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	40010000 	.word	0x40010000
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40010400 	.word	0x40010400
 80047ec:	40014000 	.word	0x40014000
 80047f0:	40014400 	.word	0x40014400
 80047f4:	40014800 	.word	0x40014800
 80047f8:	40001800 	.word	0x40001800
 80047fc:	40001c00 	.word	0x40001c00
 8004800:	40002000 	.word	0x40002000

08004804 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f023 0201 	bic.w	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f023 0302 	bic.w	r3, r3, #2
 800484c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a20      	ldr	r2, [pc, #128]	@ (80048dc <TIM_OC1_SetConfig+0xd8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d003      	beq.n	8004868 <TIM_OC1_SetConfig+0x64>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a1f      	ldr	r2, [pc, #124]	@ (80048e0 <TIM_OC1_SetConfig+0xdc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d10c      	bne.n	8004882 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f023 0308 	bic.w	r3, r3, #8
 800486e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a15      	ldr	r2, [pc, #84]	@ (80048dc <TIM_OC1_SetConfig+0xd8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d003      	beq.n	8004892 <TIM_OC1_SetConfig+0x8e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a14      	ldr	r2, [pc, #80]	@ (80048e0 <TIM_OC1_SetConfig+0xdc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d111      	bne.n	80048b6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004898:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	693a      	ldr	r2, [r7, #16]
 80048ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	621a      	str	r2, [r3, #32]
}
 80048d0:	bf00      	nop
 80048d2:	371c      	adds	r7, #28
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	40010000 	.word	0x40010000
 80048e0:	40010400 	.word	0x40010400

080048e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a1b      	ldr	r3, [r3, #32]
 80048f8:	f023 0210 	bic.w	r2, r3, #16
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004912:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800491a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	021b      	lsls	r3, r3, #8
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	4313      	orrs	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f023 0320 	bic.w	r3, r3, #32
 800492e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	011b      	lsls	r3, r3, #4
 8004936:	697a      	ldr	r2, [r7, #20]
 8004938:	4313      	orrs	r3, r2
 800493a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a22      	ldr	r2, [pc, #136]	@ (80049c8 <TIM_OC2_SetConfig+0xe4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d003      	beq.n	800494c <TIM_OC2_SetConfig+0x68>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	4a21      	ldr	r2, [pc, #132]	@ (80049cc <TIM_OC2_SetConfig+0xe8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d10d      	bne.n	8004968 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004952:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004966:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a17      	ldr	r2, [pc, #92]	@ (80049c8 <TIM_OC2_SetConfig+0xe4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d003      	beq.n	8004978 <TIM_OC2_SetConfig+0x94>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a16      	ldr	r2, [pc, #88]	@ (80049cc <TIM_OC2_SetConfig+0xe8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d113      	bne.n	80049a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800497e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004986:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	621a      	str	r2, [r3, #32]
}
 80049ba:	bf00      	nop
 80049bc:	371c      	adds	r7, #28
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40010400 	.word	0x40010400

080049d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f023 0303 	bic.w	r3, r3, #3
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	021b      	lsls	r3, r3, #8
 8004a20:	697a      	ldr	r2, [r7, #20]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a21      	ldr	r2, [pc, #132]	@ (8004ab0 <TIM_OC3_SetConfig+0xe0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_OC3_SetConfig+0x66>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a20      	ldr	r2, [pc, #128]	@ (8004ab4 <TIM_OC3_SetConfig+0xe4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d10d      	bne.n	8004a52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	697a      	ldr	r2, [r7, #20]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a16      	ldr	r2, [pc, #88]	@ (8004ab0 <TIM_OC3_SetConfig+0xe0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d003      	beq.n	8004a62 <TIM_OC3_SetConfig+0x92>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	4a15      	ldr	r2, [pc, #84]	@ (8004ab4 <TIM_OC3_SetConfig+0xe4>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d113      	bne.n	8004a8a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	011b      	lsls	r3, r3, #4
 8004a78:	693a      	ldr	r2, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	621a      	str	r2, [r3, #32]
}
 8004aa4:	bf00      	nop
 8004aa6:	371c      	adds	r7, #28
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40010400 	.word	0x40010400

08004ab8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6a1b      	ldr	r3, [r3, #32]
 8004acc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	021b      	lsls	r3, r3, #8
 8004af6:	68fa      	ldr	r2, [r7, #12]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	031b      	lsls	r3, r3, #12
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a12      	ldr	r2, [pc, #72]	@ (8004b5c <TIM_OC4_SetConfig+0xa4>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <TIM_OC4_SetConfig+0x68>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a11      	ldr	r2, [pc, #68]	@ (8004b60 <TIM_OC4_SetConfig+0xa8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d109      	bne.n	8004b34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	019b      	lsls	r3, r3, #6
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68fa      	ldr	r2, [r7, #12]
 8004b3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	621a      	str	r2, [r3, #32]
}
 8004b4e:	bf00      	nop
 8004b50:	371c      	adds	r7, #28
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40010000 	.word	0x40010000
 8004b60:	40010400 	.word	0x40010400

08004b64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	f023 0201 	bic.w	r2, r3, #1
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f023 030a 	bic.w	r3, r3, #10
 8004ba0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	621a      	str	r2, [r3, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	371c      	adds	r7, #28
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b087      	sub	sp, #28
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	60f8      	str	r0, [r7, #12]
 8004bca:	60b9      	str	r1, [r7, #8]
 8004bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	f023 0210 	bic.w	r2, r3, #16
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	697a      	ldr	r2, [r7, #20]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b085      	sub	sp, #20
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
 8004c2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f043 0307 	orr.w	r3, r3, #7
 8004c44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	609a      	str	r2, [r3, #8]
}
 8004c4c:	bf00      	nop
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	021a      	lsls	r2, r3, #8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	609a      	str	r2, [r3, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b087      	sub	sp, #28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	2201      	movs	r2, #1
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6a1a      	ldr	r2, [r3, #32]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	43db      	mvns	r3, r3
 8004cba:	401a      	ands	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a1a      	ldr	r2, [r3, #32]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 031f 	and.w	r3, r3, #31
 8004cca:	6879      	ldr	r1, [r7, #4]
 8004ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e05a      	b.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a21      	ldr	r2, [pc, #132]	@ (8004dc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d022      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d48:	d01d      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d018      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1a      	ldr	r2, [pc, #104]	@ (8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a18      	ldr	r2, [pc, #96]	@ (8004dd0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a17      	ldr	r2, [pc, #92]	@ (8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a15      	ldr	r2, [pc, #84]	@ (8004dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d10c      	bne.n	8004da0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40010000 	.word	0x40010000
 8004dc4:	40000400 	.word	0x40000400
 8004dc8:	40000800 	.word	0x40000800
 8004dcc:	40000c00 	.word	0x40000c00
 8004dd0:	40010400 	.word	0x40010400
 8004dd4:	40014000 	.word	0x40014000
 8004dd8:	40001800 	.word	0x40001800

08004ddc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004de6:	2300      	movs	r3, #0
 8004de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d101      	bne.n	8004df8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004df4:	2302      	movs	r3, #2
 8004df6:	e03d      	b.n	8004e74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3714      	adds	r7, #20
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e88:	bf00      	nop
 8004e8a:	370c      	adds	r7, #12
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e042      	b.n	8004f40 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d106      	bne.n	8004ed4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fc ffb4 	bl	8001e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2224      	movs	r2, #36	@ 0x24
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004eea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 ff4f 	bl	8005d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691a      	ldr	r2, [r3, #16]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695a      	ldr	r2, [r3, #20]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68da      	ldr	r2, [r3, #12]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2200      	movs	r2, #0
 8004f26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3708      	adds	r7, #8
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08a      	sub	sp, #40	@ 0x28
 8004f4c:	af02      	add	r7, sp, #8
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	4613      	mov	r3, r2
 8004f56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d175      	bne.n	8005054 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <HAL_UART_Transmit+0x2c>
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e06e      	b.n	8005056 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2221      	movs	r2, #33	@ 0x21
 8004f82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f86:	f7fd f98b 	bl	80022a0 <HAL_GetTick>
 8004f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	88fa      	ldrh	r2, [r7, #6]
 8004f90:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	88fa      	ldrh	r2, [r7, #6]
 8004f96:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fa0:	d108      	bne.n	8004fb4 <HAL_UART_Transmit+0x6c>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d104      	bne.n	8004fb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	61bb      	str	r3, [r7, #24]
 8004fb2:	e003      	b.n	8004fbc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004fbc:	e02e      	b.n	800501c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2180      	movs	r1, #128	@ 0x80
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fc27 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e03a      	b.n	8005056 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d10b      	bne.n	8004ffe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	881b      	ldrh	r3, [r3, #0]
 8004fea:	461a      	mov	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3302      	adds	r3, #2
 8004ffa:	61bb      	str	r3, [r7, #24]
 8004ffc:	e007      	b.n	800500e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	3301      	adds	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005012:	b29b      	uxth	r3, r3
 8005014:	3b01      	subs	r3, #1
 8005016:	b29a      	uxth	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005020:	b29b      	uxth	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1cb      	bne.n	8004fbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	2140      	movs	r1, #64	@ 0x40
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 fbf3 	bl	800581c <UART_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e006      	b.n	8005056 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005050:	2300      	movs	r3, #0
 8005052:	e000      	b.n	8005056 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005054:	2302      	movs	r3, #2
  }
}
 8005056:	4618      	mov	r0, r3
 8005058:	3720      	adds	r7, #32
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	60f8      	str	r0, [r7, #12]
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	4613      	mov	r3, r2
 800506a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b20      	cmp	r3, #32
 8005076:	d112      	bne.n	800509e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_UART_Receive_DMA+0x26>
 800507e:	88fb      	ldrh	r3, [r7, #6]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e00b      	b.n	80050a0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800508e:	88fb      	ldrh	r3, [r7, #6]
 8005090:	461a      	mov	r2, r3
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fc1b 	bl	80058d0 <UART_Start_Receive_DMA>
 800509a:	4603      	mov	r3, r0
 800509c:	e000      	b.n	80050a0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800509e:	2302      	movs	r3, #2
  }
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3710      	adds	r7, #16
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b0ba      	sub	sp, #232	@ 0xe8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	695b      	ldr	r3, [r3, #20]
 80050ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80050ce:	2300      	movs	r3, #0
 80050d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80050e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d10f      	bne.n	800510e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <HAL_UART_IRQHandler+0x66>
 80050fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050fe:	f003 0320 	and.w	r3, r3, #32
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fd83 	bl	8005c12 <UART_Receive_IT>
      return;
 800510c:	e25b      	b.n	80055c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800510e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80de 	beq.w	80052d4 <HAL_UART_IRQHandler+0x22c>
 8005118:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	d106      	bne.n	8005132 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005128:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800512c:	2b00      	cmp	r3, #0
 800512e:	f000 80d1 	beq.w	80052d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <HAL_UART_IRQHandler+0xae>
 800513e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d005      	beq.n	8005156 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800514e:	f043 0201 	orr.w	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d00b      	beq.n	800517a <HAL_UART_IRQHandler+0xd2>
 8005162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d005      	beq.n	800517a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005172:	f043 0202 	orr.w	r2, r3, #2
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d00b      	beq.n	800519e <HAL_UART_IRQHandler+0xf6>
 8005186:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005196:	f043 0204 	orr.w	r2, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a2:	f003 0308 	and.w	r3, r3, #8
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d011      	beq.n	80051ce <HAL_UART_IRQHandler+0x126>
 80051aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ae:	f003 0320 	and.w	r3, r3, #32
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d105      	bne.n	80051c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80051b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051c6:	f043 0208 	orr.w	r2, r3, #8
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 81f2 	beq.w	80055bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051dc:	f003 0320 	and.w	r3, r3, #32
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_UART_IRQHandler+0x14e>
 80051e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051e8:	f003 0320 	and.w	r3, r3, #32
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 fd0e 	bl	8005c12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005200:	2b40      	cmp	r3, #64	@ 0x40
 8005202:	bf0c      	ite	eq
 8005204:	2301      	moveq	r3, #1
 8005206:	2300      	movne	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d103      	bne.n	8005222 <HAL_UART_IRQHandler+0x17a>
 800521a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d04f      	beq.n	80052c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fc16 	bl	8005a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005232:	2b40      	cmp	r3, #64	@ 0x40
 8005234:	d141      	bne.n	80052ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3314      	adds	r3, #20
 800523c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800524c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005254:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3314      	adds	r3, #20
 800525e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005262:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005266:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800526e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800527a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1d9      	bne.n	8005236 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005286:	2b00      	cmp	r3, #0
 8005288:	d013      	beq.n	80052b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800528e:	4a7e      	ldr	r2, [pc, #504]	@ (8005488 <HAL_UART_IRQHandler+0x3e0>)
 8005290:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005296:	4618      	mov	r0, r3
 8005298:	f7fd fa96 	bl	80027c8 <HAL_DMA_Abort_IT>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a8:	687a      	ldr	r2, [r7, #4]
 80052aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80052ac:	4610      	mov	r0, r2
 80052ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b0:	e00e      	b.n	80052d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f99e 	bl	80055f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	e00a      	b.n	80052d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f99a 	bl	80055f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052c0:	e006      	b.n	80052d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f996 	bl	80055f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80052ce:	e175      	b.n	80055bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052d0:	bf00      	nop
    return;
 80052d2:	e173      	b.n	80055bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052d8:	2b01      	cmp	r3, #1
 80052da:	f040 814f 	bne.w	800557c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80052de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8148 	beq.w	800557c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80052ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8141 	beq.w	800557c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052fa:	2300      	movs	r3, #0
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60bb      	str	r3, [r7, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	60bb      	str	r3, [r7, #8]
 800530e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531a:	2b40      	cmp	r3, #64	@ 0x40
 800531c:	f040 80b6 	bne.w	800548c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800532c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8145 	beq.w	80055c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800533a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800533e:	429a      	cmp	r2, r3
 8005340:	f080 813e 	bcs.w	80055c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800534a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005356:	f000 8088 	beq.w	800546a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	330c      	adds	r3, #12
 8005360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005370:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005374:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005378:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	330c      	adds	r3, #12
 8005382:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005386:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800538a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005392:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800539e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d1d9      	bne.n	800535a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	3314      	adds	r3, #20
 80053ac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053b8:	f023 0301 	bic.w	r3, r3, #1
 80053bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3314      	adds	r3, #20
 80053c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053ca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e1      	bne.n	80053a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	3314      	adds	r3, #20
 80053e8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	3314      	adds	r3, #20
 8005402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005406:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005408:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800540c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800540e:	e841 2300 	strex	r3, r2, [r1]
 8005412:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005414:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1e3      	bne.n	80053e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800543a:	f023 0310 	bic.w	r3, r3, #16
 800543e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800544c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800544e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005452:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005454:	e841 2300 	strex	r3, r2, [r1]
 8005458:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800545a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1e3      	bne.n	8005428 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005464:	4618      	mov	r0, r3
 8005466:	f7fd f93f 	bl	80026e8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005478:	b29b      	uxth	r3, r3
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	b29b      	uxth	r3, r3
 800547e:	4619      	mov	r1, r3
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f8c1 	bl	8005608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005486:	e09b      	b.n	80055c0 <HAL_UART_IRQHandler+0x518>
 8005488:	08005b1b 	.word	0x08005b1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005494:	b29b      	uxth	r3, r3
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 808e 	beq.w	80055c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80054a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 8089 	beq.w	80055c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	330c      	adds	r3, #12
 80054b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054c8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80054d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80054d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e3      	bne.n	80054b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3314      	adds	r3, #20
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	623b      	str	r3, [r7, #32]
   return(result);
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3314      	adds	r3, #20
 800550a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800550e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005512:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005514:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005516:	e841 2300 	strex	r3, r2, [r1]
 800551a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551e:	2b00      	cmp	r3, #0
 8005520:	d1e3      	bne.n	80054ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2220      	movs	r2, #32
 8005526:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	330c      	adds	r3, #12
 8005536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0310 	bic.w	r3, r3, #16
 8005546:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	330c      	adds	r3, #12
 8005550:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005554:	61fa      	str	r2, [r7, #28]
 8005556:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005558:	69b9      	ldr	r1, [r7, #24]
 800555a:	69fa      	ldr	r2, [r7, #28]
 800555c:	e841 2300 	strex	r3, r2, [r1]
 8005560:	617b      	str	r3, [r7, #20]
   return(result);
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1e3      	bne.n	8005530 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800556e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f847 	bl	8005608 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800557a:	e023      	b.n	80055c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800557c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005584:	2b00      	cmp	r3, #0
 8005586:	d009      	beq.n	800559c <HAL_UART_IRQHandler+0x4f4>
 8005588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800558c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fad4 	bl	8005b42 <UART_Transmit_IT>
    return;
 800559a:	e014      	b.n	80055c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800559c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00e      	beq.n	80055c6 <HAL_UART_IRQHandler+0x51e>
 80055a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 fb14 	bl	8005be2 <UART_EndTransmit_IT>
    return;
 80055ba:	e004      	b.n	80055c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80055bc:	bf00      	nop
 80055be:	e002      	b.n	80055c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80055c0:	bf00      	nop
 80055c2:	e000      	b.n	80055c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80055c4:	bf00      	nop
  }
}
 80055c6:	37e8      	adds	r7, #232	@ 0xe8
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	460b      	mov	r3, r1
 8005612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005614:	bf00      	nop
 8005616:	370c      	adds	r7, #12
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b09c      	sub	sp, #112	@ 0x70
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d172      	bne.n	8005722 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800563c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800563e:	2200      	movs	r2, #0
 8005640:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005642:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	330c      	adds	r3, #12
 8005648:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005654:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005658:	66bb      	str	r3, [r7, #104]	@ 0x68
 800565a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005662:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005664:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005668:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e5      	bne.n	8005642 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005676:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005688:	f023 0301 	bic.w	r3, r3, #1
 800568c:	667b      	str	r3, [r7, #100]	@ 0x64
 800568e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3314      	adds	r3, #20
 8005694:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005696:	647a      	str	r2, [r7, #68]	@ 0x44
 8005698:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800569c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e5      	bne.n	8005676 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3314      	adds	r3, #20
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b4:	e853 3f00 	ldrex	r3, [r3]
 80056b8:	623b      	str	r3, [r7, #32]
   return(result);
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80056c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3314      	adds	r3, #20
 80056c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80056cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e5      	bne.n	80056aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	d119      	bne.n	8005722 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	330c      	adds	r3, #12
 80056f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f023 0310 	bic.w	r3, r3, #16
 8005704:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005706:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800570e:	61fa      	str	r2, [r7, #28]
 8005710:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	69b9      	ldr	r1, [r7, #24]
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	617b      	str	r3, [r7, #20]
   return(result);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005724:	2200      	movs	r2, #0
 8005726:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800572a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800572c:	2b01      	cmp	r3, #1
 800572e:	d106      	bne.n	800573e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005732:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005734:	4619      	mov	r1, r3
 8005736:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005738:	f7ff ff66 	bl	8005608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800573c:	e002      	b.n	8005744 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800573e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005740:	f7fb fb68 	bl	8000e14 <HAL_UART_RxCpltCallback>
}
 8005744:	bf00      	nop
 8005746:	3770      	adds	r7, #112	@ 0x70
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005758:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005764:	2b01      	cmp	r3, #1
 8005766:	d108      	bne.n	800577a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800576c:	085b      	lsrs	r3, r3, #1
 800576e:	b29b      	uxth	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff ff48 	bl	8005608 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005778:	e002      	b.n	8005780 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff ff30 	bl	80055e0 <HAL_UART_RxHalfCpltCallback>
}
 8005780:	bf00      	nop
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005790:	2300      	movs	r3, #0
 8005792:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005798:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	695b      	ldr	r3, [r3, #20]
 80057a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a4:	2b80      	cmp	r3, #128	@ 0x80
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b21      	cmp	r3, #33	@ 0x21
 80057ba:	d108      	bne.n	80057ce <UART_DMAError+0x46>
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2200      	movs	r2, #0
 80057c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80057c8:	68b8      	ldr	r0, [r7, #8]
 80057ca:	f000 f91b 	bl	8005a04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695b      	ldr	r3, [r3, #20]
 80057d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d8:	2b40      	cmp	r3, #64	@ 0x40
 80057da:	bf0c      	ite	eq
 80057dc:	2301      	moveq	r3, #1
 80057de:	2300      	movne	r3, #0
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	2b22      	cmp	r3, #34	@ 0x22
 80057ee:	d108      	bne.n	8005802 <UART_DMAError+0x7a>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d005      	beq.n	8005802 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	2200      	movs	r2, #0
 80057fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80057fc:	68b8      	ldr	r0, [r7, #8]
 80057fe:	f000 f929 	bl	8005a54 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005806:	f043 0210 	orr.w	r2, r3, #16
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800580e:	68b8      	ldr	r0, [r7, #8]
 8005810:	f7ff fef0 	bl	80055f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005814:	bf00      	nop
 8005816:	3710      	adds	r7, #16
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800582c:	e03b      	b.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005834:	d037      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005836:	f7fc fd33 	bl	80022a0 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	6a3a      	ldr	r2, [r7, #32]
 8005842:	429a      	cmp	r2, r3
 8005844:	d302      	bcc.n	800584c <UART_WaitOnFlagUntilTimeout+0x30>
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e03a      	b.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0304 	and.w	r3, r3, #4
 800585a:	2b00      	cmp	r3, #0
 800585c:	d023      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	2b80      	cmp	r3, #128	@ 0x80
 8005862:	d020      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b40      	cmp	r3, #64	@ 0x40
 8005868:	d01d      	beq.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d116      	bne.n	80058a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800588e:	68f8      	ldr	r0, [r7, #12]
 8005890:	f000 f8e0 	bl	8005a54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2208      	movs	r2, #8
 8005898:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e00f      	b.n	80058c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4013      	ands	r3, r2
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	bf0c      	ite	eq
 80058b6:	2301      	moveq	r3, #1
 80058b8:	2300      	movne	r3, #0
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	79fb      	ldrb	r3, [r7, #7]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d0b4      	beq.n	800582e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b098      	sub	sp, #96	@ 0x60
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2222      	movs	r2, #34	@ 0x22
 80058f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	4a3e      	ldr	r2, [pc, #248]	@ (80059f8 <UART_Start_Receive_DMA+0x128>)
 80058fe:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005904:	4a3d      	ldr	r2, [pc, #244]	@ (80059fc <UART_Start_Receive_DMA+0x12c>)
 8005906:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800590c:	4a3c      	ldr	r2, [pc, #240]	@ (8005a00 <UART_Start_Receive_DMA+0x130>)
 800590e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005914:	2200      	movs	r2, #0
 8005916:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005918:	f107 0308 	add.w	r3, r7, #8
 800591c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	f7fc fe82 	bl	8002638 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005934:	2300      	movs	r3, #0
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	613b      	str	r3, [r7, #16]
 8005948:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d019      	beq.n	8005986 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	330c      	adds	r3, #12
 8005958:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800595a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800595c:	e853 3f00 	ldrex	r3, [r3]
 8005960:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005962:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005968:	65bb      	str	r3, [r7, #88]	@ 0x58
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	330c      	adds	r3, #12
 8005970:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005972:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005974:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005978:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800597a:	e841 2300 	strex	r3, r2, [r1]
 800597e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005980:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e5      	bne.n	8005952 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	3314      	adds	r3, #20
 800598c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	e853 3f00 	ldrex	r3, [r3]
 8005994:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	f043 0301 	orr.w	r3, r3, #1
 800599c:	657b      	str	r3, [r7, #84]	@ 0x54
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	3314      	adds	r3, #20
 80059a4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80059a6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80059a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059aa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80059ac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059ae:	e841 2300 	strex	r3, r2, [r1]
 80059b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d1e5      	bne.n	8005986 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3314      	adds	r3, #20
 80059c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	e853 3f00 	ldrex	r3, [r3]
 80059c8:	617b      	str	r3, [r7, #20]
   return(result);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059d0:	653b      	str	r3, [r7, #80]	@ 0x50
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3314      	adds	r3, #20
 80059d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80059da:	627a      	str	r2, [r7, #36]	@ 0x24
 80059dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059de:	6a39      	ldr	r1, [r7, #32]
 80059e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e2:	e841 2300 	strex	r3, r2, [r1]
 80059e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1e5      	bne.n	80059ba <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3760      	adds	r7, #96	@ 0x60
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	08005621 	.word	0x08005621
 80059fc:	0800574d 	.word	0x0800574d
 8005a00:	08005789 	.word	0x08005789

08005a04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b089      	sub	sp, #36	@ 0x24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	330c      	adds	r3, #12
 8005a12:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	e853 3f00 	ldrex	r3, [r3]
 8005a1a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005a22:	61fb      	str	r3, [r7, #28]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	330c      	adds	r3, #12
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	61ba      	str	r2, [r7, #24]
 8005a2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a30:	6979      	ldr	r1, [r7, #20]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	e841 2300 	strex	r3, r2, [r1]
 8005a38:	613b      	str	r3, [r7, #16]
   return(result);
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1e5      	bne.n	8005a0c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005a48:	bf00      	nop
 8005a4a:	3724      	adds	r7, #36	@ 0x24
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b095      	sub	sp, #84	@ 0x54
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a7c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e5      	bne.n	8005a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3314      	adds	r3, #20
 8005a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e5      	bne.n	8005a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d119      	bne.n	8005b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aec:	61ba      	str	r2, [r7, #24]
 8005aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	613b      	str	r3, [r7, #16]
   return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b0e:	bf00      	nop
 8005b10:	3754      	adds	r7, #84	@ 0x54
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff fd5d 	bl	80055f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b21      	cmp	r3, #33	@ 0x21
 8005b54:	d13e      	bne.n	8005bd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b5e:	d114      	bne.n	8005b8a <UART_Transmit_IT+0x48>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d110      	bne.n	8005b8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]
 8005b88:	e008      	b.n	8005b9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	1c59      	adds	r1, r3, #1
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6211      	str	r1, [r2, #32]
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10f      	bne.n	8005bd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e000      	b.n	8005bd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bd4:	2302      	movs	r3, #2
  }
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff fce2 	bl	80055cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b08c      	sub	sp, #48	@ 0x30
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b22      	cmp	r3, #34	@ 0x22
 8005c24:	f040 80ae 	bne.w	8005d84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c30:	d117      	bne.n	8005c62 <UART_Receive_IT+0x50>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d113      	bne.n	8005c62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c42:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c60:	e026      	b.n	8005cb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c74:	d007      	beq.n	8005c86 <UART_Receive_IT+0x74>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <UART_Receive_IT+0x82>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e008      	b.n	8005ca6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d15d      	bne.n	8005d80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0220 	bic.w	r2, r2, #32
 8005cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d135      	bne.n	8005d76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	330c      	adds	r3, #12
 8005d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	e853 3f00 	ldrex	r3, [r3]
 8005d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f023 0310 	bic.w	r3, r3, #16
 8005d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	330c      	adds	r3, #12
 8005d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d30:	623a      	str	r2, [r7, #32]
 8005d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d34:	69f9      	ldr	r1, [r7, #28]
 8005d36:	6a3a      	ldr	r2, [r7, #32]
 8005d38:	e841 2300 	strex	r3, r2, [r1]
 8005d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1e5      	bne.n	8005d10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0310 	and.w	r3, r3, #16
 8005d4e:	2b10      	cmp	r3, #16
 8005d50:	d10a      	bne.n	8005d68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d52:	2300      	movs	r3, #0
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff fc4a 	bl	8005608 <HAL_UARTEx_RxEventCallback>
 8005d74:	e002      	b.n	8005d7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fb f84c 	bl	8000e14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	e002      	b.n	8005d86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d80:	2300      	movs	r3, #0
 8005d82:	e000      	b.n	8005d86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d84:	2302      	movs	r3, #2
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3730      	adds	r7, #48	@ 0x30
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
	...

08005d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d94:	b0c0      	sub	sp, #256	@ 0x100
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	68d9      	ldr	r1, [r3, #12]
 8005dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	ea40 0301 	orr.w	r3, r0, r1
 8005db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	695b      	ldr	r3, [r3, #20]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005de8:	f021 010c 	bic.w	r1, r1, #12
 8005dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005df6:	430b      	orrs	r3, r1
 8005df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0a:	6999      	ldr	r1, [r3, #24]
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	ea40 0301 	orr.w	r3, r0, r1
 8005e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800605c <UART_SetConfig+0x2cc>)
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d005      	beq.n	8005e30 <UART_SetConfig+0xa0>
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006060 <UART_SetConfig+0x2d0>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d104      	bne.n	8005e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e30:	f7fd fa0a 	bl	8003248 <HAL_RCC_GetPCLK2Freq>
 8005e34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e38:	e003      	b.n	8005e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e3a:	f7fd f9f1 	bl	8003220 <HAL_RCC_GetPCLK1Freq>
 8005e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e4c:	f040 810c 	bne.w	8006068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e54:	2200      	movs	r2, #0
 8005e56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e62:	4622      	mov	r2, r4
 8005e64:	462b      	mov	r3, r5
 8005e66:	1891      	adds	r1, r2, r2
 8005e68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e6a:	415b      	adcs	r3, r3
 8005e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e72:	4621      	mov	r1, r4
 8005e74:	eb12 0801 	adds.w	r8, r2, r1
 8005e78:	4629      	mov	r1, r5
 8005e7a:	eb43 0901 	adc.w	r9, r3, r1
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e92:	4690      	mov	r8, r2
 8005e94:	4699      	mov	r9, r3
 8005e96:	4623      	mov	r3, r4
 8005e98:	eb18 0303 	adds.w	r3, r8, r3
 8005e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	eb49 0303 	adc.w	r3, r9, r3
 8005ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	18db      	adds	r3, r3, r3
 8005ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	eb42 0303 	adc.w	r3, r2, r3
 8005eca:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ed4:	f7fa fe0a 	bl	8000aec <__aeabi_uldivmod>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	460b      	mov	r3, r1
 8005edc:	4b61      	ldr	r3, [pc, #388]	@ (8006064 <UART_SetConfig+0x2d4>)
 8005ede:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee2:	095b      	lsrs	r3, r3, #5
 8005ee4:	011c      	lsls	r4, r3, #4
 8005ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eea:	2200      	movs	r2, #0
 8005eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ef8:	4642      	mov	r2, r8
 8005efa:	464b      	mov	r3, r9
 8005efc:	1891      	adds	r1, r2, r2
 8005efe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f00:	415b      	adcs	r3, r3
 8005f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f08:	4641      	mov	r1, r8
 8005f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005f0e:	4649      	mov	r1, r9
 8005f10:	eb43 0b01 	adc.w	fp, r3, r1
 8005f14:	f04f 0200 	mov.w	r2, #0
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f28:	4692      	mov	sl, r2
 8005f2a:	469b      	mov	fp, r3
 8005f2c:	4643      	mov	r3, r8
 8005f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f36:	464b      	mov	r3, r9
 8005f38:	eb4b 0303 	adc.w	r3, fp, r3
 8005f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f54:	460b      	mov	r3, r1
 8005f56:	18db      	adds	r3, r3, r3
 8005f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	eb42 0303 	adc.w	r3, r2, r3
 8005f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f6a:	f7fa fdbf 	bl	8000aec <__aeabi_uldivmod>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4611      	mov	r1, r2
 8005f74:	4b3b      	ldr	r3, [pc, #236]	@ (8006064 <UART_SetConfig+0x2d4>)
 8005f76:	fba3 2301 	umull	r2, r3, r3, r1
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	2264      	movs	r2, #100	@ 0x64
 8005f7e:	fb02 f303 	mul.w	r3, r2, r3
 8005f82:	1acb      	subs	r3, r1, r3
 8005f84:	00db      	lsls	r3, r3, #3
 8005f86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f8a:	4b36      	ldr	r3, [pc, #216]	@ (8006064 <UART_SetConfig+0x2d4>)
 8005f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f90:	095b      	lsrs	r3, r3, #5
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f98:	441c      	add	r4, r3
 8005f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	1891      	adds	r1, r2, r2
 8005fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fb4:	415b      	adcs	r3, r3
 8005fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fbc:	4641      	mov	r1, r8
 8005fbe:	1851      	adds	r1, r2, r1
 8005fc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	414b      	adcs	r3, r1
 8005fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fc8:	f04f 0200 	mov.w	r2, #0
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	00cb      	lsls	r3, r1, #3
 8005fd8:	4651      	mov	r1, sl
 8005fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fde:	4651      	mov	r1, sl
 8005fe0:	00ca      	lsls	r2, r1, #3
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	4642      	mov	r2, r8
 8005fea:	189b      	adds	r3, r3, r2
 8005fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	460a      	mov	r2, r1
 8005ff4:	eb42 0303 	adc.w	r3, r2, r3
 8005ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006008:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800600c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006010:	460b      	mov	r3, r1
 8006012:	18db      	adds	r3, r3, r3
 8006014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006016:	4613      	mov	r3, r2
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800601e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006026:	f7fa fd61 	bl	8000aec <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4b0d      	ldr	r3, [pc, #52]	@ (8006064 <UART_SetConfig+0x2d4>)
 8006030:	fba3 1302 	umull	r1, r3, r3, r2
 8006034:	095b      	lsrs	r3, r3, #5
 8006036:	2164      	movs	r1, #100	@ 0x64
 8006038:	fb01 f303 	mul.w	r3, r1, r3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	00db      	lsls	r3, r3, #3
 8006040:	3332      	adds	r3, #50	@ 0x32
 8006042:	4a08      	ldr	r2, [pc, #32]	@ (8006064 <UART_SetConfig+0x2d4>)
 8006044:	fba2 2303 	umull	r2, r3, r2, r3
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	f003 0207 	and.w	r2, r3, #7
 800604e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4422      	add	r2, r4
 8006056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006058:	e106      	b.n	8006268 <UART_SetConfig+0x4d8>
 800605a:	bf00      	nop
 800605c:	40011000 	.word	0x40011000
 8006060:	40011400 	.word	0x40011400
 8006064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800607a:	4642      	mov	r2, r8
 800607c:	464b      	mov	r3, r9
 800607e:	1891      	adds	r1, r2, r2
 8006080:	6239      	str	r1, [r7, #32]
 8006082:	415b      	adcs	r3, r3
 8006084:	627b      	str	r3, [r7, #36]	@ 0x24
 8006086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800608a:	4641      	mov	r1, r8
 800608c:	1854      	adds	r4, r2, r1
 800608e:	4649      	mov	r1, r9
 8006090:	eb43 0501 	adc.w	r5, r3, r1
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	00eb      	lsls	r3, r5, #3
 800609e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060a2:	00e2      	lsls	r2, r4, #3
 80060a4:	4614      	mov	r4, r2
 80060a6:	461d      	mov	r5, r3
 80060a8:	4643      	mov	r3, r8
 80060aa:	18e3      	adds	r3, r4, r3
 80060ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060b0:	464b      	mov	r3, r9
 80060b2:	eb45 0303 	adc.w	r3, r5, r3
 80060b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060ca:	f04f 0200 	mov.w	r2, #0
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060d6:	4629      	mov	r1, r5
 80060d8:	008b      	lsls	r3, r1, #2
 80060da:	4621      	mov	r1, r4
 80060dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e0:	4621      	mov	r1, r4
 80060e2:	008a      	lsls	r2, r1, #2
 80060e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060e8:	f7fa fd00 	bl	8000aec <__aeabi_uldivmod>
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4b60      	ldr	r3, [pc, #384]	@ (8006274 <UART_SetConfig+0x4e4>)
 80060f2:	fba3 2302 	umull	r2, r3, r3, r2
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	011c      	lsls	r4, r3, #4
 80060fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060fe:	2200      	movs	r2, #0
 8006100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800610c:	4642      	mov	r2, r8
 800610e:	464b      	mov	r3, r9
 8006110:	1891      	adds	r1, r2, r2
 8006112:	61b9      	str	r1, [r7, #24]
 8006114:	415b      	adcs	r3, r3
 8006116:	61fb      	str	r3, [r7, #28]
 8006118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800611c:	4641      	mov	r1, r8
 800611e:	1851      	adds	r1, r2, r1
 8006120:	6139      	str	r1, [r7, #16]
 8006122:	4649      	mov	r1, r9
 8006124:	414b      	adcs	r3, r1
 8006126:	617b      	str	r3, [r7, #20]
 8006128:	f04f 0200 	mov.w	r2, #0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006134:	4659      	mov	r1, fp
 8006136:	00cb      	lsls	r3, r1, #3
 8006138:	4651      	mov	r1, sl
 800613a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800613e:	4651      	mov	r1, sl
 8006140:	00ca      	lsls	r2, r1, #3
 8006142:	4610      	mov	r0, r2
 8006144:	4619      	mov	r1, r3
 8006146:	4603      	mov	r3, r0
 8006148:	4642      	mov	r2, r8
 800614a:	189b      	adds	r3, r3, r2
 800614c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006150:	464b      	mov	r3, r9
 8006152:	460a      	mov	r2, r1
 8006154:	eb42 0303 	adc.w	r3, r2, r3
 8006158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800615c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006166:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006168:	f04f 0200 	mov.w	r2, #0
 800616c:	f04f 0300 	mov.w	r3, #0
 8006170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006174:	4649      	mov	r1, r9
 8006176:	008b      	lsls	r3, r1, #2
 8006178:	4641      	mov	r1, r8
 800617a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617e:	4641      	mov	r1, r8
 8006180:	008a      	lsls	r2, r1, #2
 8006182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006186:	f7fa fcb1 	bl	8000aec <__aeabi_uldivmod>
 800618a:	4602      	mov	r2, r0
 800618c:	460b      	mov	r3, r1
 800618e:	4611      	mov	r1, r2
 8006190:	4b38      	ldr	r3, [pc, #224]	@ (8006274 <UART_SetConfig+0x4e4>)
 8006192:	fba3 2301 	umull	r2, r3, r3, r1
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2264      	movs	r2, #100	@ 0x64
 800619a:	fb02 f303 	mul.w	r3, r2, r3
 800619e:	1acb      	subs	r3, r1, r3
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	3332      	adds	r3, #50	@ 0x32
 80061a4:	4a33      	ldr	r2, [pc, #204]	@ (8006274 <UART_SetConfig+0x4e4>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061b0:	441c      	add	r4, r3
 80061b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061b6:	2200      	movs	r2, #0
 80061b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80061ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80061bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061c0:	4642      	mov	r2, r8
 80061c2:	464b      	mov	r3, r9
 80061c4:	1891      	adds	r1, r2, r2
 80061c6:	60b9      	str	r1, [r7, #8]
 80061c8:	415b      	adcs	r3, r3
 80061ca:	60fb      	str	r3, [r7, #12]
 80061cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061d0:	4641      	mov	r1, r8
 80061d2:	1851      	adds	r1, r2, r1
 80061d4:	6039      	str	r1, [r7, #0]
 80061d6:	4649      	mov	r1, r9
 80061d8:	414b      	adcs	r3, r1
 80061da:	607b      	str	r3, [r7, #4]
 80061dc:	f04f 0200 	mov.w	r2, #0
 80061e0:	f04f 0300 	mov.w	r3, #0
 80061e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061e8:	4659      	mov	r1, fp
 80061ea:	00cb      	lsls	r3, r1, #3
 80061ec:	4651      	mov	r1, sl
 80061ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061f2:	4651      	mov	r1, sl
 80061f4:	00ca      	lsls	r2, r1, #3
 80061f6:	4610      	mov	r0, r2
 80061f8:	4619      	mov	r1, r3
 80061fa:	4603      	mov	r3, r0
 80061fc:	4642      	mov	r2, r8
 80061fe:	189b      	adds	r3, r3, r2
 8006200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006202:	464b      	mov	r3, r9
 8006204:	460a      	mov	r2, r1
 8006206:	eb42 0303 	adc.w	r3, r2, r3
 800620a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800620c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	663b      	str	r3, [r7, #96]	@ 0x60
 8006216:	667a      	str	r2, [r7, #100]	@ 0x64
 8006218:	f04f 0200 	mov.w	r2, #0
 800621c:	f04f 0300 	mov.w	r3, #0
 8006220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006224:	4649      	mov	r1, r9
 8006226:	008b      	lsls	r3, r1, #2
 8006228:	4641      	mov	r1, r8
 800622a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800622e:	4641      	mov	r1, r8
 8006230:	008a      	lsls	r2, r1, #2
 8006232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006236:	f7fa fc59 	bl	8000aec <__aeabi_uldivmod>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4b0d      	ldr	r3, [pc, #52]	@ (8006274 <UART_SetConfig+0x4e4>)
 8006240:	fba3 1302 	umull	r1, r3, r3, r2
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	2164      	movs	r1, #100	@ 0x64
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	3332      	adds	r3, #50	@ 0x32
 8006252:	4a08      	ldr	r2, [pc, #32]	@ (8006274 <UART_SetConfig+0x4e4>)
 8006254:	fba2 2303 	umull	r2, r3, r2, r3
 8006258:	095b      	lsrs	r3, r3, #5
 800625a:	f003 020f 	and.w	r2, r3, #15
 800625e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4422      	add	r2, r4
 8006266:	609a      	str	r2, [r3, #8]
}
 8006268:	bf00      	nop
 800626a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800626e:	46bd      	mov	sp, r7
 8006270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006274:	51eb851f 	.word	0x51eb851f

08006278 <std>:
 8006278:	2300      	movs	r3, #0
 800627a:	b510      	push	{r4, lr}
 800627c:	4604      	mov	r4, r0
 800627e:	e9c0 3300 	strd	r3, r3, [r0]
 8006282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006286:	6083      	str	r3, [r0, #8]
 8006288:	8181      	strh	r1, [r0, #12]
 800628a:	6643      	str	r3, [r0, #100]	@ 0x64
 800628c:	81c2      	strh	r2, [r0, #14]
 800628e:	6183      	str	r3, [r0, #24]
 8006290:	4619      	mov	r1, r3
 8006292:	2208      	movs	r2, #8
 8006294:	305c      	adds	r0, #92	@ 0x5c
 8006296:	f000 f906 	bl	80064a6 <memset>
 800629a:	4b0d      	ldr	r3, [pc, #52]	@ (80062d0 <std+0x58>)
 800629c:	6263      	str	r3, [r4, #36]	@ 0x24
 800629e:	4b0d      	ldr	r3, [pc, #52]	@ (80062d4 <std+0x5c>)
 80062a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <std+0x60>)
 80062a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80062a6:	4b0d      	ldr	r3, [pc, #52]	@ (80062dc <std+0x64>)
 80062a8:	6323      	str	r3, [r4, #48]	@ 0x30
 80062aa:	4b0d      	ldr	r3, [pc, #52]	@ (80062e0 <std+0x68>)
 80062ac:	6224      	str	r4, [r4, #32]
 80062ae:	429c      	cmp	r4, r3
 80062b0:	d006      	beq.n	80062c0 <std+0x48>
 80062b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80062b6:	4294      	cmp	r4, r2
 80062b8:	d002      	beq.n	80062c0 <std+0x48>
 80062ba:	33d0      	adds	r3, #208	@ 0xd0
 80062bc:	429c      	cmp	r4, r3
 80062be:	d105      	bne.n	80062cc <std+0x54>
 80062c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80062c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c8:	f000 b966 	b.w	8006598 <__retarget_lock_init_recursive>
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	bf00      	nop
 80062d0:	08006421 	.word	0x08006421
 80062d4:	08006443 	.word	0x08006443
 80062d8:	0800647b 	.word	0x0800647b
 80062dc:	0800649f 	.word	0x0800649f
 80062e0:	200002f8 	.word	0x200002f8

080062e4 <stdio_exit_handler>:
 80062e4:	4a02      	ldr	r2, [pc, #8]	@ (80062f0 <stdio_exit_handler+0xc>)
 80062e6:	4903      	ldr	r1, [pc, #12]	@ (80062f4 <stdio_exit_handler+0x10>)
 80062e8:	4803      	ldr	r0, [pc, #12]	@ (80062f8 <stdio_exit_handler+0x14>)
 80062ea:	f000 b869 	b.w	80063c0 <_fwalk_sglue>
 80062ee:	bf00      	nop
 80062f0:	20000020 	.word	0x20000020
 80062f4:	08006e39 	.word	0x08006e39
 80062f8:	20000030 	.word	0x20000030

080062fc <cleanup_stdio>:
 80062fc:	6841      	ldr	r1, [r0, #4]
 80062fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006330 <cleanup_stdio+0x34>)
 8006300:	4299      	cmp	r1, r3
 8006302:	b510      	push	{r4, lr}
 8006304:	4604      	mov	r4, r0
 8006306:	d001      	beq.n	800630c <cleanup_stdio+0x10>
 8006308:	f000 fd96 	bl	8006e38 <_fflush_r>
 800630c:	68a1      	ldr	r1, [r4, #8]
 800630e:	4b09      	ldr	r3, [pc, #36]	@ (8006334 <cleanup_stdio+0x38>)
 8006310:	4299      	cmp	r1, r3
 8006312:	d002      	beq.n	800631a <cleanup_stdio+0x1e>
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fd8f 	bl	8006e38 <_fflush_r>
 800631a:	68e1      	ldr	r1, [r4, #12]
 800631c:	4b06      	ldr	r3, [pc, #24]	@ (8006338 <cleanup_stdio+0x3c>)
 800631e:	4299      	cmp	r1, r3
 8006320:	d004      	beq.n	800632c <cleanup_stdio+0x30>
 8006322:	4620      	mov	r0, r4
 8006324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006328:	f000 bd86 	b.w	8006e38 <_fflush_r>
 800632c:	bd10      	pop	{r4, pc}
 800632e:	bf00      	nop
 8006330:	200002f8 	.word	0x200002f8
 8006334:	20000360 	.word	0x20000360
 8006338:	200003c8 	.word	0x200003c8

0800633c <global_stdio_init.part.0>:
 800633c:	b510      	push	{r4, lr}
 800633e:	4b0b      	ldr	r3, [pc, #44]	@ (800636c <global_stdio_init.part.0+0x30>)
 8006340:	4c0b      	ldr	r4, [pc, #44]	@ (8006370 <global_stdio_init.part.0+0x34>)
 8006342:	4a0c      	ldr	r2, [pc, #48]	@ (8006374 <global_stdio_init.part.0+0x38>)
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	4620      	mov	r0, r4
 8006348:	2200      	movs	r2, #0
 800634a:	2104      	movs	r1, #4
 800634c:	f7ff ff94 	bl	8006278 <std>
 8006350:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006354:	2201      	movs	r2, #1
 8006356:	2109      	movs	r1, #9
 8006358:	f7ff ff8e 	bl	8006278 <std>
 800635c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006360:	2202      	movs	r2, #2
 8006362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006366:	2112      	movs	r1, #18
 8006368:	f7ff bf86 	b.w	8006278 <std>
 800636c:	20000430 	.word	0x20000430
 8006370:	200002f8 	.word	0x200002f8
 8006374:	080062e5 	.word	0x080062e5

08006378 <__sfp_lock_acquire>:
 8006378:	4801      	ldr	r0, [pc, #4]	@ (8006380 <__sfp_lock_acquire+0x8>)
 800637a:	f000 b90e 	b.w	800659a <__retarget_lock_acquire_recursive>
 800637e:	bf00      	nop
 8006380:	20000439 	.word	0x20000439

08006384 <__sfp_lock_release>:
 8006384:	4801      	ldr	r0, [pc, #4]	@ (800638c <__sfp_lock_release+0x8>)
 8006386:	f000 b909 	b.w	800659c <__retarget_lock_release_recursive>
 800638a:	bf00      	nop
 800638c:	20000439 	.word	0x20000439

08006390 <__sinit>:
 8006390:	b510      	push	{r4, lr}
 8006392:	4604      	mov	r4, r0
 8006394:	f7ff fff0 	bl	8006378 <__sfp_lock_acquire>
 8006398:	6a23      	ldr	r3, [r4, #32]
 800639a:	b11b      	cbz	r3, 80063a4 <__sinit+0x14>
 800639c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063a0:	f7ff bff0 	b.w	8006384 <__sfp_lock_release>
 80063a4:	4b04      	ldr	r3, [pc, #16]	@ (80063b8 <__sinit+0x28>)
 80063a6:	6223      	str	r3, [r4, #32]
 80063a8:	4b04      	ldr	r3, [pc, #16]	@ (80063bc <__sinit+0x2c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1f5      	bne.n	800639c <__sinit+0xc>
 80063b0:	f7ff ffc4 	bl	800633c <global_stdio_init.part.0>
 80063b4:	e7f2      	b.n	800639c <__sinit+0xc>
 80063b6:	bf00      	nop
 80063b8:	080062fd 	.word	0x080062fd
 80063bc:	20000430 	.word	0x20000430

080063c0 <_fwalk_sglue>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	4607      	mov	r7, r0
 80063c6:	4688      	mov	r8, r1
 80063c8:	4614      	mov	r4, r2
 80063ca:	2600      	movs	r6, #0
 80063cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80063d0:	f1b9 0901 	subs.w	r9, r9, #1
 80063d4:	d505      	bpl.n	80063e2 <_fwalk_sglue+0x22>
 80063d6:	6824      	ldr	r4, [r4, #0]
 80063d8:	2c00      	cmp	r4, #0
 80063da:	d1f7      	bne.n	80063cc <_fwalk_sglue+0xc>
 80063dc:	4630      	mov	r0, r6
 80063de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e2:	89ab      	ldrh	r3, [r5, #12]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d907      	bls.n	80063f8 <_fwalk_sglue+0x38>
 80063e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063ec:	3301      	adds	r3, #1
 80063ee:	d003      	beq.n	80063f8 <_fwalk_sglue+0x38>
 80063f0:	4629      	mov	r1, r5
 80063f2:	4638      	mov	r0, r7
 80063f4:	47c0      	blx	r8
 80063f6:	4306      	orrs	r6, r0
 80063f8:	3568      	adds	r5, #104	@ 0x68
 80063fa:	e7e9      	b.n	80063d0 <_fwalk_sglue+0x10>

080063fc <iprintf>:
 80063fc:	b40f      	push	{r0, r1, r2, r3}
 80063fe:	b507      	push	{r0, r1, r2, lr}
 8006400:	4906      	ldr	r1, [pc, #24]	@ (800641c <iprintf+0x20>)
 8006402:	ab04      	add	r3, sp, #16
 8006404:	6808      	ldr	r0, [r1, #0]
 8006406:	f853 2b04 	ldr.w	r2, [r3], #4
 800640a:	6881      	ldr	r1, [r0, #8]
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	f000 f9e9 	bl	80067e4 <_vfiprintf_r>
 8006412:	b003      	add	sp, #12
 8006414:	f85d eb04 	ldr.w	lr, [sp], #4
 8006418:	b004      	add	sp, #16
 800641a:	4770      	bx	lr
 800641c:	2000002c 	.word	0x2000002c

08006420 <__sread>:
 8006420:	b510      	push	{r4, lr}
 8006422:	460c      	mov	r4, r1
 8006424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006428:	f000 f868 	bl	80064fc <_read_r>
 800642c:	2800      	cmp	r0, #0
 800642e:	bfab      	itete	ge
 8006430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006432:	89a3      	ldrhlt	r3, [r4, #12]
 8006434:	181b      	addge	r3, r3, r0
 8006436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800643a:	bfac      	ite	ge
 800643c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800643e:	81a3      	strhlt	r3, [r4, #12]
 8006440:	bd10      	pop	{r4, pc}

08006442 <__swrite>:
 8006442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006446:	461f      	mov	r7, r3
 8006448:	898b      	ldrh	r3, [r1, #12]
 800644a:	05db      	lsls	r3, r3, #23
 800644c:	4605      	mov	r5, r0
 800644e:	460c      	mov	r4, r1
 8006450:	4616      	mov	r6, r2
 8006452:	d505      	bpl.n	8006460 <__swrite+0x1e>
 8006454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006458:	2302      	movs	r3, #2
 800645a:	2200      	movs	r2, #0
 800645c:	f000 f83c 	bl	80064d8 <_lseek_r>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800646a:	81a3      	strh	r3, [r4, #12]
 800646c:	4632      	mov	r2, r6
 800646e:	463b      	mov	r3, r7
 8006470:	4628      	mov	r0, r5
 8006472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006476:	f000 b853 	b.w	8006520 <_write_r>

0800647a <__sseek>:
 800647a:	b510      	push	{r4, lr}
 800647c:	460c      	mov	r4, r1
 800647e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006482:	f000 f829 	bl	80064d8 <_lseek_r>
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	bf15      	itete	ne
 800648c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800648e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006496:	81a3      	strheq	r3, [r4, #12]
 8006498:	bf18      	it	ne
 800649a:	81a3      	strhne	r3, [r4, #12]
 800649c:	bd10      	pop	{r4, pc}

0800649e <__sclose>:
 800649e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064a2:	f000 b809 	b.w	80064b8 <_close_r>

080064a6 <memset>:
 80064a6:	4402      	add	r2, r0
 80064a8:	4603      	mov	r3, r0
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d100      	bne.n	80064b0 <memset+0xa>
 80064ae:	4770      	bx	lr
 80064b0:	f803 1b01 	strb.w	r1, [r3], #1
 80064b4:	e7f9      	b.n	80064aa <memset+0x4>
	...

080064b8 <_close_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4d06      	ldr	r5, [pc, #24]	@ (80064d4 <_close_r+0x1c>)
 80064bc:	2300      	movs	r3, #0
 80064be:	4604      	mov	r4, r0
 80064c0:	4608      	mov	r0, r1
 80064c2:	602b      	str	r3, [r5, #0]
 80064c4:	f7fb fddf 	bl	8002086 <_close>
 80064c8:	1c43      	adds	r3, r0, #1
 80064ca:	d102      	bne.n	80064d2 <_close_r+0x1a>
 80064cc:	682b      	ldr	r3, [r5, #0]
 80064ce:	b103      	cbz	r3, 80064d2 <_close_r+0x1a>
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	bd38      	pop	{r3, r4, r5, pc}
 80064d4:	20000434 	.word	0x20000434

080064d8 <_lseek_r>:
 80064d8:	b538      	push	{r3, r4, r5, lr}
 80064da:	4d07      	ldr	r5, [pc, #28]	@ (80064f8 <_lseek_r+0x20>)
 80064dc:	4604      	mov	r4, r0
 80064de:	4608      	mov	r0, r1
 80064e0:	4611      	mov	r1, r2
 80064e2:	2200      	movs	r2, #0
 80064e4:	602a      	str	r2, [r5, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	f7fb fdf4 	bl	80020d4 <_lseek>
 80064ec:	1c43      	adds	r3, r0, #1
 80064ee:	d102      	bne.n	80064f6 <_lseek_r+0x1e>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	b103      	cbz	r3, 80064f6 <_lseek_r+0x1e>
 80064f4:	6023      	str	r3, [r4, #0]
 80064f6:	bd38      	pop	{r3, r4, r5, pc}
 80064f8:	20000434 	.word	0x20000434

080064fc <_read_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4d07      	ldr	r5, [pc, #28]	@ (800651c <_read_r+0x20>)
 8006500:	4604      	mov	r4, r0
 8006502:	4608      	mov	r0, r1
 8006504:	4611      	mov	r1, r2
 8006506:	2200      	movs	r2, #0
 8006508:	602a      	str	r2, [r5, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	f7fb fd9e 	bl	800204c <_read>
 8006510:	1c43      	adds	r3, r0, #1
 8006512:	d102      	bne.n	800651a <_read_r+0x1e>
 8006514:	682b      	ldr	r3, [r5, #0]
 8006516:	b103      	cbz	r3, 800651a <_read_r+0x1e>
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	bd38      	pop	{r3, r4, r5, pc}
 800651c:	20000434 	.word	0x20000434

08006520 <_write_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4d07      	ldr	r5, [pc, #28]	@ (8006540 <_write_r+0x20>)
 8006524:	4604      	mov	r4, r0
 8006526:	4608      	mov	r0, r1
 8006528:	4611      	mov	r1, r2
 800652a:	2200      	movs	r2, #0
 800652c:	602a      	str	r2, [r5, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	f7fb fb96 	bl	8001c60 <_write>
 8006534:	1c43      	adds	r3, r0, #1
 8006536:	d102      	bne.n	800653e <_write_r+0x1e>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	b103      	cbz	r3, 800653e <_write_r+0x1e>
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bd38      	pop	{r3, r4, r5, pc}
 8006540:	20000434 	.word	0x20000434

08006544 <__errno>:
 8006544:	4b01      	ldr	r3, [pc, #4]	@ (800654c <__errno+0x8>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	2000002c 	.word	0x2000002c

08006550 <__libc_init_array>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4d0d      	ldr	r5, [pc, #52]	@ (8006588 <__libc_init_array+0x38>)
 8006554:	4c0d      	ldr	r4, [pc, #52]	@ (800658c <__libc_init_array+0x3c>)
 8006556:	1b64      	subs	r4, r4, r5
 8006558:	10a4      	asrs	r4, r4, #2
 800655a:	2600      	movs	r6, #0
 800655c:	42a6      	cmp	r6, r4
 800655e:	d109      	bne.n	8006574 <__libc_init_array+0x24>
 8006560:	4d0b      	ldr	r5, [pc, #44]	@ (8006590 <__libc_init_array+0x40>)
 8006562:	4c0c      	ldr	r4, [pc, #48]	@ (8006594 <__libc_init_array+0x44>)
 8006564:	f000 fdb8 	bl	80070d8 <_init>
 8006568:	1b64      	subs	r4, r4, r5
 800656a:	10a4      	asrs	r4, r4, #2
 800656c:	2600      	movs	r6, #0
 800656e:	42a6      	cmp	r6, r4
 8006570:	d105      	bne.n	800657e <__libc_init_array+0x2e>
 8006572:	bd70      	pop	{r4, r5, r6, pc}
 8006574:	f855 3b04 	ldr.w	r3, [r5], #4
 8006578:	4798      	blx	r3
 800657a:	3601      	adds	r6, #1
 800657c:	e7ee      	b.n	800655c <__libc_init_array+0xc>
 800657e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006582:	4798      	blx	r3
 8006584:	3601      	adds	r6, #1
 8006586:	e7f2      	b.n	800656e <__libc_init_array+0x1e>
 8006588:	080071a4 	.word	0x080071a4
 800658c:	080071a4 	.word	0x080071a4
 8006590:	080071a4 	.word	0x080071a4
 8006594:	080071a8 	.word	0x080071a8

08006598 <__retarget_lock_init_recursive>:
 8006598:	4770      	bx	lr

0800659a <__retarget_lock_acquire_recursive>:
 800659a:	4770      	bx	lr

0800659c <__retarget_lock_release_recursive>:
 800659c:	4770      	bx	lr
	...

080065a0 <_free_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4605      	mov	r5, r0
 80065a4:	2900      	cmp	r1, #0
 80065a6:	d041      	beq.n	800662c <_free_r+0x8c>
 80065a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ac:	1f0c      	subs	r4, r1, #4
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	bfb8      	it	lt
 80065b2:	18e4      	addlt	r4, r4, r3
 80065b4:	f000 f8e0 	bl	8006778 <__malloc_lock>
 80065b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006630 <_free_r+0x90>)
 80065ba:	6813      	ldr	r3, [r2, #0]
 80065bc:	b933      	cbnz	r3, 80065cc <_free_r+0x2c>
 80065be:	6063      	str	r3, [r4, #4]
 80065c0:	6014      	str	r4, [r2, #0]
 80065c2:	4628      	mov	r0, r5
 80065c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065c8:	f000 b8dc 	b.w	8006784 <__malloc_unlock>
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	d908      	bls.n	80065e2 <_free_r+0x42>
 80065d0:	6820      	ldr	r0, [r4, #0]
 80065d2:	1821      	adds	r1, r4, r0
 80065d4:	428b      	cmp	r3, r1
 80065d6:	bf01      	itttt	eq
 80065d8:	6819      	ldreq	r1, [r3, #0]
 80065da:	685b      	ldreq	r3, [r3, #4]
 80065dc:	1809      	addeq	r1, r1, r0
 80065de:	6021      	streq	r1, [r4, #0]
 80065e0:	e7ed      	b.n	80065be <_free_r+0x1e>
 80065e2:	461a      	mov	r2, r3
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	b10b      	cbz	r3, 80065ec <_free_r+0x4c>
 80065e8:	42a3      	cmp	r3, r4
 80065ea:	d9fa      	bls.n	80065e2 <_free_r+0x42>
 80065ec:	6811      	ldr	r1, [r2, #0]
 80065ee:	1850      	adds	r0, r2, r1
 80065f0:	42a0      	cmp	r0, r4
 80065f2:	d10b      	bne.n	800660c <_free_r+0x6c>
 80065f4:	6820      	ldr	r0, [r4, #0]
 80065f6:	4401      	add	r1, r0
 80065f8:	1850      	adds	r0, r2, r1
 80065fa:	4283      	cmp	r3, r0
 80065fc:	6011      	str	r1, [r2, #0]
 80065fe:	d1e0      	bne.n	80065c2 <_free_r+0x22>
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	6053      	str	r3, [r2, #4]
 8006606:	4408      	add	r0, r1
 8006608:	6010      	str	r0, [r2, #0]
 800660a:	e7da      	b.n	80065c2 <_free_r+0x22>
 800660c:	d902      	bls.n	8006614 <_free_r+0x74>
 800660e:	230c      	movs	r3, #12
 8006610:	602b      	str	r3, [r5, #0]
 8006612:	e7d6      	b.n	80065c2 <_free_r+0x22>
 8006614:	6820      	ldr	r0, [r4, #0]
 8006616:	1821      	adds	r1, r4, r0
 8006618:	428b      	cmp	r3, r1
 800661a:	bf04      	itt	eq
 800661c:	6819      	ldreq	r1, [r3, #0]
 800661e:	685b      	ldreq	r3, [r3, #4]
 8006620:	6063      	str	r3, [r4, #4]
 8006622:	bf04      	itt	eq
 8006624:	1809      	addeq	r1, r1, r0
 8006626:	6021      	streq	r1, [r4, #0]
 8006628:	6054      	str	r4, [r2, #4]
 800662a:	e7ca      	b.n	80065c2 <_free_r+0x22>
 800662c:	bd38      	pop	{r3, r4, r5, pc}
 800662e:	bf00      	nop
 8006630:	20000440 	.word	0x20000440

08006634 <sbrk_aligned>:
 8006634:	b570      	push	{r4, r5, r6, lr}
 8006636:	4e0f      	ldr	r6, [pc, #60]	@ (8006674 <sbrk_aligned+0x40>)
 8006638:	460c      	mov	r4, r1
 800663a:	6831      	ldr	r1, [r6, #0]
 800663c:	4605      	mov	r5, r0
 800663e:	b911      	cbnz	r1, 8006646 <sbrk_aligned+0x12>
 8006640:	f000 fcb6 	bl	8006fb0 <_sbrk_r>
 8006644:	6030      	str	r0, [r6, #0]
 8006646:	4621      	mov	r1, r4
 8006648:	4628      	mov	r0, r5
 800664a:	f000 fcb1 	bl	8006fb0 <_sbrk_r>
 800664e:	1c43      	adds	r3, r0, #1
 8006650:	d103      	bne.n	800665a <sbrk_aligned+0x26>
 8006652:	f04f 34ff 	mov.w	r4, #4294967295
 8006656:	4620      	mov	r0, r4
 8006658:	bd70      	pop	{r4, r5, r6, pc}
 800665a:	1cc4      	adds	r4, r0, #3
 800665c:	f024 0403 	bic.w	r4, r4, #3
 8006660:	42a0      	cmp	r0, r4
 8006662:	d0f8      	beq.n	8006656 <sbrk_aligned+0x22>
 8006664:	1a21      	subs	r1, r4, r0
 8006666:	4628      	mov	r0, r5
 8006668:	f000 fca2 	bl	8006fb0 <_sbrk_r>
 800666c:	3001      	adds	r0, #1
 800666e:	d1f2      	bne.n	8006656 <sbrk_aligned+0x22>
 8006670:	e7ef      	b.n	8006652 <sbrk_aligned+0x1e>
 8006672:	bf00      	nop
 8006674:	2000043c 	.word	0x2000043c

08006678 <_malloc_r>:
 8006678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800667c:	1ccd      	adds	r5, r1, #3
 800667e:	f025 0503 	bic.w	r5, r5, #3
 8006682:	3508      	adds	r5, #8
 8006684:	2d0c      	cmp	r5, #12
 8006686:	bf38      	it	cc
 8006688:	250c      	movcc	r5, #12
 800668a:	2d00      	cmp	r5, #0
 800668c:	4606      	mov	r6, r0
 800668e:	db01      	blt.n	8006694 <_malloc_r+0x1c>
 8006690:	42a9      	cmp	r1, r5
 8006692:	d904      	bls.n	800669e <_malloc_r+0x26>
 8006694:	230c      	movs	r3, #12
 8006696:	6033      	str	r3, [r6, #0]
 8006698:	2000      	movs	r0, #0
 800669a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800669e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006774 <_malloc_r+0xfc>
 80066a2:	f000 f869 	bl	8006778 <__malloc_lock>
 80066a6:	f8d8 3000 	ldr.w	r3, [r8]
 80066aa:	461c      	mov	r4, r3
 80066ac:	bb44      	cbnz	r4, 8006700 <_malloc_r+0x88>
 80066ae:	4629      	mov	r1, r5
 80066b0:	4630      	mov	r0, r6
 80066b2:	f7ff ffbf 	bl	8006634 <sbrk_aligned>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	4604      	mov	r4, r0
 80066ba:	d158      	bne.n	800676e <_malloc_r+0xf6>
 80066bc:	f8d8 4000 	ldr.w	r4, [r8]
 80066c0:	4627      	mov	r7, r4
 80066c2:	2f00      	cmp	r7, #0
 80066c4:	d143      	bne.n	800674e <_malloc_r+0xd6>
 80066c6:	2c00      	cmp	r4, #0
 80066c8:	d04b      	beq.n	8006762 <_malloc_r+0xea>
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	4639      	mov	r1, r7
 80066ce:	4630      	mov	r0, r6
 80066d0:	eb04 0903 	add.w	r9, r4, r3
 80066d4:	f000 fc6c 	bl	8006fb0 <_sbrk_r>
 80066d8:	4581      	cmp	r9, r0
 80066da:	d142      	bne.n	8006762 <_malloc_r+0xea>
 80066dc:	6821      	ldr	r1, [r4, #0]
 80066de:	1a6d      	subs	r5, r5, r1
 80066e0:	4629      	mov	r1, r5
 80066e2:	4630      	mov	r0, r6
 80066e4:	f7ff ffa6 	bl	8006634 <sbrk_aligned>
 80066e8:	3001      	adds	r0, #1
 80066ea:	d03a      	beq.n	8006762 <_malloc_r+0xea>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	442b      	add	r3, r5
 80066f0:	6023      	str	r3, [r4, #0]
 80066f2:	f8d8 3000 	ldr.w	r3, [r8]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	bb62      	cbnz	r2, 8006754 <_malloc_r+0xdc>
 80066fa:	f8c8 7000 	str.w	r7, [r8]
 80066fe:	e00f      	b.n	8006720 <_malloc_r+0xa8>
 8006700:	6822      	ldr	r2, [r4, #0]
 8006702:	1b52      	subs	r2, r2, r5
 8006704:	d420      	bmi.n	8006748 <_malloc_r+0xd0>
 8006706:	2a0b      	cmp	r2, #11
 8006708:	d917      	bls.n	800673a <_malloc_r+0xc2>
 800670a:	1961      	adds	r1, r4, r5
 800670c:	42a3      	cmp	r3, r4
 800670e:	6025      	str	r5, [r4, #0]
 8006710:	bf18      	it	ne
 8006712:	6059      	strne	r1, [r3, #4]
 8006714:	6863      	ldr	r3, [r4, #4]
 8006716:	bf08      	it	eq
 8006718:	f8c8 1000 	streq.w	r1, [r8]
 800671c:	5162      	str	r2, [r4, r5]
 800671e:	604b      	str	r3, [r1, #4]
 8006720:	4630      	mov	r0, r6
 8006722:	f000 f82f 	bl	8006784 <__malloc_unlock>
 8006726:	f104 000b 	add.w	r0, r4, #11
 800672a:	1d23      	adds	r3, r4, #4
 800672c:	f020 0007 	bic.w	r0, r0, #7
 8006730:	1ac2      	subs	r2, r0, r3
 8006732:	bf1c      	itt	ne
 8006734:	1a1b      	subne	r3, r3, r0
 8006736:	50a3      	strne	r3, [r4, r2]
 8006738:	e7af      	b.n	800669a <_malloc_r+0x22>
 800673a:	6862      	ldr	r2, [r4, #4]
 800673c:	42a3      	cmp	r3, r4
 800673e:	bf0c      	ite	eq
 8006740:	f8c8 2000 	streq.w	r2, [r8]
 8006744:	605a      	strne	r2, [r3, #4]
 8006746:	e7eb      	b.n	8006720 <_malloc_r+0xa8>
 8006748:	4623      	mov	r3, r4
 800674a:	6864      	ldr	r4, [r4, #4]
 800674c:	e7ae      	b.n	80066ac <_malloc_r+0x34>
 800674e:	463c      	mov	r4, r7
 8006750:	687f      	ldr	r7, [r7, #4]
 8006752:	e7b6      	b.n	80066c2 <_malloc_r+0x4a>
 8006754:	461a      	mov	r2, r3
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	42a3      	cmp	r3, r4
 800675a:	d1fb      	bne.n	8006754 <_malloc_r+0xdc>
 800675c:	2300      	movs	r3, #0
 800675e:	6053      	str	r3, [r2, #4]
 8006760:	e7de      	b.n	8006720 <_malloc_r+0xa8>
 8006762:	230c      	movs	r3, #12
 8006764:	6033      	str	r3, [r6, #0]
 8006766:	4630      	mov	r0, r6
 8006768:	f000 f80c 	bl	8006784 <__malloc_unlock>
 800676c:	e794      	b.n	8006698 <_malloc_r+0x20>
 800676e:	6005      	str	r5, [r0, #0]
 8006770:	e7d6      	b.n	8006720 <_malloc_r+0xa8>
 8006772:	bf00      	nop
 8006774:	20000440 	.word	0x20000440

08006778 <__malloc_lock>:
 8006778:	4801      	ldr	r0, [pc, #4]	@ (8006780 <__malloc_lock+0x8>)
 800677a:	f7ff bf0e 	b.w	800659a <__retarget_lock_acquire_recursive>
 800677e:	bf00      	nop
 8006780:	20000438 	.word	0x20000438

08006784 <__malloc_unlock>:
 8006784:	4801      	ldr	r0, [pc, #4]	@ (800678c <__malloc_unlock+0x8>)
 8006786:	f7ff bf09 	b.w	800659c <__retarget_lock_release_recursive>
 800678a:	bf00      	nop
 800678c:	20000438 	.word	0x20000438

08006790 <__sfputc_r>:
 8006790:	6893      	ldr	r3, [r2, #8]
 8006792:	3b01      	subs	r3, #1
 8006794:	2b00      	cmp	r3, #0
 8006796:	b410      	push	{r4}
 8006798:	6093      	str	r3, [r2, #8]
 800679a:	da08      	bge.n	80067ae <__sfputc_r+0x1e>
 800679c:	6994      	ldr	r4, [r2, #24]
 800679e:	42a3      	cmp	r3, r4
 80067a0:	db01      	blt.n	80067a6 <__sfputc_r+0x16>
 80067a2:	290a      	cmp	r1, #10
 80067a4:	d103      	bne.n	80067ae <__sfputc_r+0x1e>
 80067a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067aa:	f000 bb6d 	b.w	8006e88 <__swbuf_r>
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	1c58      	adds	r0, r3, #1
 80067b2:	6010      	str	r0, [r2, #0]
 80067b4:	7019      	strb	r1, [r3, #0]
 80067b6:	4608      	mov	r0, r1
 80067b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067bc:	4770      	bx	lr

080067be <__sfputs_r>:
 80067be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c0:	4606      	mov	r6, r0
 80067c2:	460f      	mov	r7, r1
 80067c4:	4614      	mov	r4, r2
 80067c6:	18d5      	adds	r5, r2, r3
 80067c8:	42ac      	cmp	r4, r5
 80067ca:	d101      	bne.n	80067d0 <__sfputs_r+0x12>
 80067cc:	2000      	movs	r0, #0
 80067ce:	e007      	b.n	80067e0 <__sfputs_r+0x22>
 80067d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d4:	463a      	mov	r2, r7
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ffda 	bl	8006790 <__sfputc_r>
 80067dc:	1c43      	adds	r3, r0, #1
 80067de:	d1f3      	bne.n	80067c8 <__sfputs_r+0xa>
 80067e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067e4 <_vfiprintf_r>:
 80067e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067e8:	460d      	mov	r5, r1
 80067ea:	b09d      	sub	sp, #116	@ 0x74
 80067ec:	4614      	mov	r4, r2
 80067ee:	4698      	mov	r8, r3
 80067f0:	4606      	mov	r6, r0
 80067f2:	b118      	cbz	r0, 80067fc <_vfiprintf_r+0x18>
 80067f4:	6a03      	ldr	r3, [r0, #32]
 80067f6:	b90b      	cbnz	r3, 80067fc <_vfiprintf_r+0x18>
 80067f8:	f7ff fdca 	bl	8006390 <__sinit>
 80067fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067fe:	07d9      	lsls	r1, r3, #31
 8006800:	d405      	bmi.n	800680e <_vfiprintf_r+0x2a>
 8006802:	89ab      	ldrh	r3, [r5, #12]
 8006804:	059a      	lsls	r2, r3, #22
 8006806:	d402      	bmi.n	800680e <_vfiprintf_r+0x2a>
 8006808:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800680a:	f7ff fec6 	bl	800659a <__retarget_lock_acquire_recursive>
 800680e:	89ab      	ldrh	r3, [r5, #12]
 8006810:	071b      	lsls	r3, r3, #28
 8006812:	d501      	bpl.n	8006818 <_vfiprintf_r+0x34>
 8006814:	692b      	ldr	r3, [r5, #16]
 8006816:	b99b      	cbnz	r3, 8006840 <_vfiprintf_r+0x5c>
 8006818:	4629      	mov	r1, r5
 800681a:	4630      	mov	r0, r6
 800681c:	f000 fb72 	bl	8006f04 <__swsetup_r>
 8006820:	b170      	cbz	r0, 8006840 <_vfiprintf_r+0x5c>
 8006822:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006824:	07dc      	lsls	r4, r3, #31
 8006826:	d504      	bpl.n	8006832 <_vfiprintf_r+0x4e>
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	b01d      	add	sp, #116	@ 0x74
 800682e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006832:	89ab      	ldrh	r3, [r5, #12]
 8006834:	0598      	lsls	r0, r3, #22
 8006836:	d4f7      	bmi.n	8006828 <_vfiprintf_r+0x44>
 8006838:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800683a:	f7ff feaf 	bl	800659c <__retarget_lock_release_recursive>
 800683e:	e7f3      	b.n	8006828 <_vfiprintf_r+0x44>
 8006840:	2300      	movs	r3, #0
 8006842:	9309      	str	r3, [sp, #36]	@ 0x24
 8006844:	2320      	movs	r3, #32
 8006846:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800684a:	f8cd 800c 	str.w	r8, [sp, #12]
 800684e:	2330      	movs	r3, #48	@ 0x30
 8006850:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006a00 <_vfiprintf_r+0x21c>
 8006854:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006858:	f04f 0901 	mov.w	r9, #1
 800685c:	4623      	mov	r3, r4
 800685e:	469a      	mov	sl, r3
 8006860:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006864:	b10a      	cbz	r2, 800686a <_vfiprintf_r+0x86>
 8006866:	2a25      	cmp	r2, #37	@ 0x25
 8006868:	d1f9      	bne.n	800685e <_vfiprintf_r+0x7a>
 800686a:	ebba 0b04 	subs.w	fp, sl, r4
 800686e:	d00b      	beq.n	8006888 <_vfiprintf_r+0xa4>
 8006870:	465b      	mov	r3, fp
 8006872:	4622      	mov	r2, r4
 8006874:	4629      	mov	r1, r5
 8006876:	4630      	mov	r0, r6
 8006878:	f7ff ffa1 	bl	80067be <__sfputs_r>
 800687c:	3001      	adds	r0, #1
 800687e:	f000 80a7 	beq.w	80069d0 <_vfiprintf_r+0x1ec>
 8006882:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006884:	445a      	add	r2, fp
 8006886:	9209      	str	r2, [sp, #36]	@ 0x24
 8006888:	f89a 3000 	ldrb.w	r3, [sl]
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 809f 	beq.w	80069d0 <_vfiprintf_r+0x1ec>
 8006892:	2300      	movs	r3, #0
 8006894:	f04f 32ff 	mov.w	r2, #4294967295
 8006898:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800689c:	f10a 0a01 	add.w	sl, sl, #1
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	9307      	str	r3, [sp, #28]
 80068a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80068a8:	931a      	str	r3, [sp, #104]	@ 0x68
 80068aa:	4654      	mov	r4, sl
 80068ac:	2205      	movs	r2, #5
 80068ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068b2:	4853      	ldr	r0, [pc, #332]	@ (8006a00 <_vfiprintf_r+0x21c>)
 80068b4:	f7f9 fcac 	bl	8000210 <memchr>
 80068b8:	9a04      	ldr	r2, [sp, #16]
 80068ba:	b9d8      	cbnz	r0, 80068f4 <_vfiprintf_r+0x110>
 80068bc:	06d1      	lsls	r1, r2, #27
 80068be:	bf44      	itt	mi
 80068c0:	2320      	movmi	r3, #32
 80068c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068c6:	0713      	lsls	r3, r2, #28
 80068c8:	bf44      	itt	mi
 80068ca:	232b      	movmi	r3, #43	@ 0x2b
 80068cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068d0:	f89a 3000 	ldrb.w	r3, [sl]
 80068d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068d6:	d015      	beq.n	8006904 <_vfiprintf_r+0x120>
 80068d8:	9a07      	ldr	r2, [sp, #28]
 80068da:	4654      	mov	r4, sl
 80068dc:	2000      	movs	r0, #0
 80068de:	f04f 0c0a 	mov.w	ip, #10
 80068e2:	4621      	mov	r1, r4
 80068e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068e8:	3b30      	subs	r3, #48	@ 0x30
 80068ea:	2b09      	cmp	r3, #9
 80068ec:	d94b      	bls.n	8006986 <_vfiprintf_r+0x1a2>
 80068ee:	b1b0      	cbz	r0, 800691e <_vfiprintf_r+0x13a>
 80068f0:	9207      	str	r2, [sp, #28]
 80068f2:	e014      	b.n	800691e <_vfiprintf_r+0x13a>
 80068f4:	eba0 0308 	sub.w	r3, r0, r8
 80068f8:	fa09 f303 	lsl.w	r3, r9, r3
 80068fc:	4313      	orrs	r3, r2
 80068fe:	9304      	str	r3, [sp, #16]
 8006900:	46a2      	mov	sl, r4
 8006902:	e7d2      	b.n	80068aa <_vfiprintf_r+0xc6>
 8006904:	9b03      	ldr	r3, [sp, #12]
 8006906:	1d19      	adds	r1, r3, #4
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	9103      	str	r1, [sp, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	bfbb      	ittet	lt
 8006910:	425b      	neglt	r3, r3
 8006912:	f042 0202 	orrlt.w	r2, r2, #2
 8006916:	9307      	strge	r3, [sp, #28]
 8006918:	9307      	strlt	r3, [sp, #28]
 800691a:	bfb8      	it	lt
 800691c:	9204      	strlt	r2, [sp, #16]
 800691e:	7823      	ldrb	r3, [r4, #0]
 8006920:	2b2e      	cmp	r3, #46	@ 0x2e
 8006922:	d10a      	bne.n	800693a <_vfiprintf_r+0x156>
 8006924:	7863      	ldrb	r3, [r4, #1]
 8006926:	2b2a      	cmp	r3, #42	@ 0x2a
 8006928:	d132      	bne.n	8006990 <_vfiprintf_r+0x1ac>
 800692a:	9b03      	ldr	r3, [sp, #12]
 800692c:	1d1a      	adds	r2, r3, #4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	9203      	str	r2, [sp, #12]
 8006932:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006936:	3402      	adds	r4, #2
 8006938:	9305      	str	r3, [sp, #20]
 800693a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006a10 <_vfiprintf_r+0x22c>
 800693e:	7821      	ldrb	r1, [r4, #0]
 8006940:	2203      	movs	r2, #3
 8006942:	4650      	mov	r0, sl
 8006944:	f7f9 fc64 	bl	8000210 <memchr>
 8006948:	b138      	cbz	r0, 800695a <_vfiprintf_r+0x176>
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	eba0 000a 	sub.w	r0, r0, sl
 8006950:	2240      	movs	r2, #64	@ 0x40
 8006952:	4082      	lsls	r2, r0
 8006954:	4313      	orrs	r3, r2
 8006956:	3401      	adds	r4, #1
 8006958:	9304      	str	r3, [sp, #16]
 800695a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800695e:	4829      	ldr	r0, [pc, #164]	@ (8006a04 <_vfiprintf_r+0x220>)
 8006960:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006964:	2206      	movs	r2, #6
 8006966:	f7f9 fc53 	bl	8000210 <memchr>
 800696a:	2800      	cmp	r0, #0
 800696c:	d03f      	beq.n	80069ee <_vfiprintf_r+0x20a>
 800696e:	4b26      	ldr	r3, [pc, #152]	@ (8006a08 <_vfiprintf_r+0x224>)
 8006970:	bb1b      	cbnz	r3, 80069ba <_vfiprintf_r+0x1d6>
 8006972:	9b03      	ldr	r3, [sp, #12]
 8006974:	3307      	adds	r3, #7
 8006976:	f023 0307 	bic.w	r3, r3, #7
 800697a:	3308      	adds	r3, #8
 800697c:	9303      	str	r3, [sp, #12]
 800697e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006980:	443b      	add	r3, r7
 8006982:	9309      	str	r3, [sp, #36]	@ 0x24
 8006984:	e76a      	b.n	800685c <_vfiprintf_r+0x78>
 8006986:	fb0c 3202 	mla	r2, ip, r2, r3
 800698a:	460c      	mov	r4, r1
 800698c:	2001      	movs	r0, #1
 800698e:	e7a8      	b.n	80068e2 <_vfiprintf_r+0xfe>
 8006990:	2300      	movs	r3, #0
 8006992:	3401      	adds	r4, #1
 8006994:	9305      	str	r3, [sp, #20]
 8006996:	4619      	mov	r1, r3
 8006998:	f04f 0c0a 	mov.w	ip, #10
 800699c:	4620      	mov	r0, r4
 800699e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069a2:	3a30      	subs	r2, #48	@ 0x30
 80069a4:	2a09      	cmp	r2, #9
 80069a6:	d903      	bls.n	80069b0 <_vfiprintf_r+0x1cc>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0c6      	beq.n	800693a <_vfiprintf_r+0x156>
 80069ac:	9105      	str	r1, [sp, #20]
 80069ae:	e7c4      	b.n	800693a <_vfiprintf_r+0x156>
 80069b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80069b4:	4604      	mov	r4, r0
 80069b6:	2301      	movs	r3, #1
 80069b8:	e7f0      	b.n	800699c <_vfiprintf_r+0x1b8>
 80069ba:	ab03      	add	r3, sp, #12
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	462a      	mov	r2, r5
 80069c0:	4b12      	ldr	r3, [pc, #72]	@ (8006a0c <_vfiprintf_r+0x228>)
 80069c2:	a904      	add	r1, sp, #16
 80069c4:	4630      	mov	r0, r6
 80069c6:	f3af 8000 	nop.w
 80069ca:	4607      	mov	r7, r0
 80069cc:	1c78      	adds	r0, r7, #1
 80069ce:	d1d6      	bne.n	800697e <_vfiprintf_r+0x19a>
 80069d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069d2:	07d9      	lsls	r1, r3, #31
 80069d4:	d405      	bmi.n	80069e2 <_vfiprintf_r+0x1fe>
 80069d6:	89ab      	ldrh	r3, [r5, #12]
 80069d8:	059a      	lsls	r2, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_vfiprintf_r+0x1fe>
 80069dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069de:	f7ff fddd 	bl	800659c <__retarget_lock_release_recursive>
 80069e2:	89ab      	ldrh	r3, [r5, #12]
 80069e4:	065b      	lsls	r3, r3, #25
 80069e6:	f53f af1f 	bmi.w	8006828 <_vfiprintf_r+0x44>
 80069ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069ec:	e71e      	b.n	800682c <_vfiprintf_r+0x48>
 80069ee:	ab03      	add	r3, sp, #12
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	462a      	mov	r2, r5
 80069f4:	4b05      	ldr	r3, [pc, #20]	@ (8006a0c <_vfiprintf_r+0x228>)
 80069f6:	a904      	add	r1, sp, #16
 80069f8:	4630      	mov	r0, r6
 80069fa:	f000 f879 	bl	8006af0 <_printf_i>
 80069fe:	e7e4      	b.n	80069ca <_vfiprintf_r+0x1e6>
 8006a00:	08007168 	.word	0x08007168
 8006a04:	08007172 	.word	0x08007172
 8006a08:	00000000 	.word	0x00000000
 8006a0c:	080067bf 	.word	0x080067bf
 8006a10:	0800716e 	.word	0x0800716e

08006a14 <_printf_common>:
 8006a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a18:	4616      	mov	r6, r2
 8006a1a:	4698      	mov	r8, r3
 8006a1c:	688a      	ldr	r2, [r1, #8]
 8006a1e:	690b      	ldr	r3, [r1, #16]
 8006a20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	bfb8      	it	lt
 8006a28:	4613      	movlt	r3, r2
 8006a2a:	6033      	str	r3, [r6, #0]
 8006a2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a30:	4607      	mov	r7, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	b10a      	cbz	r2, 8006a3a <_printf_common+0x26>
 8006a36:	3301      	adds	r3, #1
 8006a38:	6033      	str	r3, [r6, #0]
 8006a3a:	6823      	ldr	r3, [r4, #0]
 8006a3c:	0699      	lsls	r1, r3, #26
 8006a3e:	bf42      	ittt	mi
 8006a40:	6833      	ldrmi	r3, [r6, #0]
 8006a42:	3302      	addmi	r3, #2
 8006a44:	6033      	strmi	r3, [r6, #0]
 8006a46:	6825      	ldr	r5, [r4, #0]
 8006a48:	f015 0506 	ands.w	r5, r5, #6
 8006a4c:	d106      	bne.n	8006a5c <_printf_common+0x48>
 8006a4e:	f104 0a19 	add.w	sl, r4, #25
 8006a52:	68e3      	ldr	r3, [r4, #12]
 8006a54:	6832      	ldr	r2, [r6, #0]
 8006a56:	1a9b      	subs	r3, r3, r2
 8006a58:	42ab      	cmp	r3, r5
 8006a5a:	dc26      	bgt.n	8006aaa <_printf_common+0x96>
 8006a5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a60:	6822      	ldr	r2, [r4, #0]
 8006a62:	3b00      	subs	r3, #0
 8006a64:	bf18      	it	ne
 8006a66:	2301      	movne	r3, #1
 8006a68:	0692      	lsls	r2, r2, #26
 8006a6a:	d42b      	bmi.n	8006ac4 <_printf_common+0xb0>
 8006a6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a70:	4641      	mov	r1, r8
 8006a72:	4638      	mov	r0, r7
 8006a74:	47c8      	blx	r9
 8006a76:	3001      	adds	r0, #1
 8006a78:	d01e      	beq.n	8006ab8 <_printf_common+0xa4>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	6922      	ldr	r2, [r4, #16]
 8006a7e:	f003 0306 	and.w	r3, r3, #6
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	bf02      	ittt	eq
 8006a86:	68e5      	ldreq	r5, [r4, #12]
 8006a88:	6833      	ldreq	r3, [r6, #0]
 8006a8a:	1aed      	subeq	r5, r5, r3
 8006a8c:	68a3      	ldr	r3, [r4, #8]
 8006a8e:	bf0c      	ite	eq
 8006a90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a94:	2500      	movne	r5, #0
 8006a96:	4293      	cmp	r3, r2
 8006a98:	bfc4      	itt	gt
 8006a9a:	1a9b      	subgt	r3, r3, r2
 8006a9c:	18ed      	addgt	r5, r5, r3
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	341a      	adds	r4, #26
 8006aa2:	42b5      	cmp	r5, r6
 8006aa4:	d11a      	bne.n	8006adc <_printf_common+0xc8>
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	e008      	b.n	8006abc <_printf_common+0xa8>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	4652      	mov	r2, sl
 8006aae:	4641      	mov	r1, r8
 8006ab0:	4638      	mov	r0, r7
 8006ab2:	47c8      	blx	r9
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d103      	bne.n	8006ac0 <_printf_common+0xac>
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac0:	3501      	adds	r5, #1
 8006ac2:	e7c6      	b.n	8006a52 <_printf_common+0x3e>
 8006ac4:	18e1      	adds	r1, r4, r3
 8006ac6:	1c5a      	adds	r2, r3, #1
 8006ac8:	2030      	movs	r0, #48	@ 0x30
 8006aca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ace:	4422      	add	r2, r4
 8006ad0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ad4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ad8:	3302      	adds	r3, #2
 8006ada:	e7c7      	b.n	8006a6c <_printf_common+0x58>
 8006adc:	2301      	movs	r3, #1
 8006ade:	4622      	mov	r2, r4
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	4638      	mov	r0, r7
 8006ae4:	47c8      	blx	r9
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d0e6      	beq.n	8006ab8 <_printf_common+0xa4>
 8006aea:	3601      	adds	r6, #1
 8006aec:	e7d9      	b.n	8006aa2 <_printf_common+0x8e>
	...

08006af0 <_printf_i>:
 8006af0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006af4:	7e0f      	ldrb	r7, [r1, #24]
 8006af6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006af8:	2f78      	cmp	r7, #120	@ 0x78
 8006afa:	4691      	mov	r9, r2
 8006afc:	4680      	mov	r8, r0
 8006afe:	460c      	mov	r4, r1
 8006b00:	469a      	mov	sl, r3
 8006b02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006b06:	d807      	bhi.n	8006b18 <_printf_i+0x28>
 8006b08:	2f62      	cmp	r7, #98	@ 0x62
 8006b0a:	d80a      	bhi.n	8006b22 <_printf_i+0x32>
 8006b0c:	2f00      	cmp	r7, #0
 8006b0e:	f000 80d2 	beq.w	8006cb6 <_printf_i+0x1c6>
 8006b12:	2f58      	cmp	r7, #88	@ 0x58
 8006b14:	f000 80b9 	beq.w	8006c8a <_printf_i+0x19a>
 8006b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b20:	e03a      	b.n	8006b98 <_printf_i+0xa8>
 8006b22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b26:	2b15      	cmp	r3, #21
 8006b28:	d8f6      	bhi.n	8006b18 <_printf_i+0x28>
 8006b2a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b30 <_printf_i+0x40>)
 8006b2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b30:	08006b89 	.word	0x08006b89
 8006b34:	08006b9d 	.word	0x08006b9d
 8006b38:	08006b19 	.word	0x08006b19
 8006b3c:	08006b19 	.word	0x08006b19
 8006b40:	08006b19 	.word	0x08006b19
 8006b44:	08006b19 	.word	0x08006b19
 8006b48:	08006b9d 	.word	0x08006b9d
 8006b4c:	08006b19 	.word	0x08006b19
 8006b50:	08006b19 	.word	0x08006b19
 8006b54:	08006b19 	.word	0x08006b19
 8006b58:	08006b19 	.word	0x08006b19
 8006b5c:	08006c9d 	.word	0x08006c9d
 8006b60:	08006bc7 	.word	0x08006bc7
 8006b64:	08006c57 	.word	0x08006c57
 8006b68:	08006b19 	.word	0x08006b19
 8006b6c:	08006b19 	.word	0x08006b19
 8006b70:	08006cbf 	.word	0x08006cbf
 8006b74:	08006b19 	.word	0x08006b19
 8006b78:	08006bc7 	.word	0x08006bc7
 8006b7c:	08006b19 	.word	0x08006b19
 8006b80:	08006b19 	.word	0x08006b19
 8006b84:	08006c5f 	.word	0x08006c5f
 8006b88:	6833      	ldr	r3, [r6, #0]
 8006b8a:	1d1a      	adds	r2, r3, #4
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	6032      	str	r2, [r6, #0]
 8006b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e09d      	b.n	8006cd8 <_printf_i+0x1e8>
 8006b9c:	6833      	ldr	r3, [r6, #0]
 8006b9e:	6820      	ldr	r0, [r4, #0]
 8006ba0:	1d19      	adds	r1, r3, #4
 8006ba2:	6031      	str	r1, [r6, #0]
 8006ba4:	0606      	lsls	r6, r0, #24
 8006ba6:	d501      	bpl.n	8006bac <_printf_i+0xbc>
 8006ba8:	681d      	ldr	r5, [r3, #0]
 8006baa:	e003      	b.n	8006bb4 <_printf_i+0xc4>
 8006bac:	0645      	lsls	r5, r0, #25
 8006bae:	d5fb      	bpl.n	8006ba8 <_printf_i+0xb8>
 8006bb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006bb4:	2d00      	cmp	r5, #0
 8006bb6:	da03      	bge.n	8006bc0 <_printf_i+0xd0>
 8006bb8:	232d      	movs	r3, #45	@ 0x2d
 8006bba:	426d      	negs	r5, r5
 8006bbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bc0:	4859      	ldr	r0, [pc, #356]	@ (8006d28 <_printf_i+0x238>)
 8006bc2:	230a      	movs	r3, #10
 8006bc4:	e011      	b.n	8006bea <_printf_i+0xfa>
 8006bc6:	6821      	ldr	r1, [r4, #0]
 8006bc8:	6833      	ldr	r3, [r6, #0]
 8006bca:	0608      	lsls	r0, r1, #24
 8006bcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bd0:	d402      	bmi.n	8006bd8 <_printf_i+0xe8>
 8006bd2:	0649      	lsls	r1, r1, #25
 8006bd4:	bf48      	it	mi
 8006bd6:	b2ad      	uxthmi	r5, r5
 8006bd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bda:	4853      	ldr	r0, [pc, #332]	@ (8006d28 <_printf_i+0x238>)
 8006bdc:	6033      	str	r3, [r6, #0]
 8006bde:	bf14      	ite	ne
 8006be0:	230a      	movne	r3, #10
 8006be2:	2308      	moveq	r3, #8
 8006be4:	2100      	movs	r1, #0
 8006be6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bea:	6866      	ldr	r6, [r4, #4]
 8006bec:	60a6      	str	r6, [r4, #8]
 8006bee:	2e00      	cmp	r6, #0
 8006bf0:	bfa2      	ittt	ge
 8006bf2:	6821      	ldrge	r1, [r4, #0]
 8006bf4:	f021 0104 	bicge.w	r1, r1, #4
 8006bf8:	6021      	strge	r1, [r4, #0]
 8006bfa:	b90d      	cbnz	r5, 8006c00 <_printf_i+0x110>
 8006bfc:	2e00      	cmp	r6, #0
 8006bfe:	d04b      	beq.n	8006c98 <_printf_i+0x1a8>
 8006c00:	4616      	mov	r6, r2
 8006c02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c06:	fb03 5711 	mls	r7, r3, r1, r5
 8006c0a:	5dc7      	ldrb	r7, [r0, r7]
 8006c0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c10:	462f      	mov	r7, r5
 8006c12:	42bb      	cmp	r3, r7
 8006c14:	460d      	mov	r5, r1
 8006c16:	d9f4      	bls.n	8006c02 <_printf_i+0x112>
 8006c18:	2b08      	cmp	r3, #8
 8006c1a:	d10b      	bne.n	8006c34 <_printf_i+0x144>
 8006c1c:	6823      	ldr	r3, [r4, #0]
 8006c1e:	07df      	lsls	r7, r3, #31
 8006c20:	d508      	bpl.n	8006c34 <_printf_i+0x144>
 8006c22:	6923      	ldr	r3, [r4, #16]
 8006c24:	6861      	ldr	r1, [r4, #4]
 8006c26:	4299      	cmp	r1, r3
 8006c28:	bfde      	ittt	le
 8006c2a:	2330      	movle	r3, #48	@ 0x30
 8006c2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c34:	1b92      	subs	r2, r2, r6
 8006c36:	6122      	str	r2, [r4, #16]
 8006c38:	f8cd a000 	str.w	sl, [sp]
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	aa03      	add	r2, sp, #12
 8006c40:	4621      	mov	r1, r4
 8006c42:	4640      	mov	r0, r8
 8006c44:	f7ff fee6 	bl	8006a14 <_printf_common>
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d14a      	bne.n	8006ce2 <_printf_i+0x1f2>
 8006c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c50:	b004      	add	sp, #16
 8006c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c56:	6823      	ldr	r3, [r4, #0]
 8006c58:	f043 0320 	orr.w	r3, r3, #32
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	4833      	ldr	r0, [pc, #204]	@ (8006d2c <_printf_i+0x23c>)
 8006c60:	2778      	movs	r7, #120	@ 0x78
 8006c62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	6831      	ldr	r1, [r6, #0]
 8006c6a:	061f      	lsls	r7, r3, #24
 8006c6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c70:	d402      	bmi.n	8006c78 <_printf_i+0x188>
 8006c72:	065f      	lsls	r7, r3, #25
 8006c74:	bf48      	it	mi
 8006c76:	b2ad      	uxthmi	r5, r5
 8006c78:	6031      	str	r1, [r6, #0]
 8006c7a:	07d9      	lsls	r1, r3, #31
 8006c7c:	bf44      	itt	mi
 8006c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c82:	6023      	strmi	r3, [r4, #0]
 8006c84:	b11d      	cbz	r5, 8006c8e <_printf_i+0x19e>
 8006c86:	2310      	movs	r3, #16
 8006c88:	e7ac      	b.n	8006be4 <_printf_i+0xf4>
 8006c8a:	4827      	ldr	r0, [pc, #156]	@ (8006d28 <_printf_i+0x238>)
 8006c8c:	e7e9      	b.n	8006c62 <_printf_i+0x172>
 8006c8e:	6823      	ldr	r3, [r4, #0]
 8006c90:	f023 0320 	bic.w	r3, r3, #32
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	e7f6      	b.n	8006c86 <_printf_i+0x196>
 8006c98:	4616      	mov	r6, r2
 8006c9a:	e7bd      	b.n	8006c18 <_printf_i+0x128>
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	6825      	ldr	r5, [r4, #0]
 8006ca0:	6961      	ldr	r1, [r4, #20]
 8006ca2:	1d18      	adds	r0, r3, #4
 8006ca4:	6030      	str	r0, [r6, #0]
 8006ca6:	062e      	lsls	r6, r5, #24
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	d501      	bpl.n	8006cb0 <_printf_i+0x1c0>
 8006cac:	6019      	str	r1, [r3, #0]
 8006cae:	e002      	b.n	8006cb6 <_printf_i+0x1c6>
 8006cb0:	0668      	lsls	r0, r5, #25
 8006cb2:	d5fb      	bpl.n	8006cac <_printf_i+0x1bc>
 8006cb4:	8019      	strh	r1, [r3, #0]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	6123      	str	r3, [r4, #16]
 8006cba:	4616      	mov	r6, r2
 8006cbc:	e7bc      	b.n	8006c38 <_printf_i+0x148>
 8006cbe:	6833      	ldr	r3, [r6, #0]
 8006cc0:	1d1a      	adds	r2, r3, #4
 8006cc2:	6032      	str	r2, [r6, #0]
 8006cc4:	681e      	ldr	r6, [r3, #0]
 8006cc6:	6862      	ldr	r2, [r4, #4]
 8006cc8:	2100      	movs	r1, #0
 8006cca:	4630      	mov	r0, r6
 8006ccc:	f7f9 faa0 	bl	8000210 <memchr>
 8006cd0:	b108      	cbz	r0, 8006cd6 <_printf_i+0x1e6>
 8006cd2:	1b80      	subs	r0, r0, r6
 8006cd4:	6060      	str	r0, [r4, #4]
 8006cd6:	6863      	ldr	r3, [r4, #4]
 8006cd8:	6123      	str	r3, [r4, #16]
 8006cda:	2300      	movs	r3, #0
 8006cdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ce0:	e7aa      	b.n	8006c38 <_printf_i+0x148>
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	4640      	mov	r0, r8
 8006cea:	47d0      	blx	sl
 8006cec:	3001      	adds	r0, #1
 8006cee:	d0ad      	beq.n	8006c4c <_printf_i+0x15c>
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	079b      	lsls	r3, r3, #30
 8006cf4:	d413      	bmi.n	8006d1e <_printf_i+0x22e>
 8006cf6:	68e0      	ldr	r0, [r4, #12]
 8006cf8:	9b03      	ldr	r3, [sp, #12]
 8006cfa:	4298      	cmp	r0, r3
 8006cfc:	bfb8      	it	lt
 8006cfe:	4618      	movlt	r0, r3
 8006d00:	e7a6      	b.n	8006c50 <_printf_i+0x160>
 8006d02:	2301      	movs	r3, #1
 8006d04:	4632      	mov	r2, r6
 8006d06:	4649      	mov	r1, r9
 8006d08:	4640      	mov	r0, r8
 8006d0a:	47d0      	blx	sl
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d09d      	beq.n	8006c4c <_printf_i+0x15c>
 8006d10:	3501      	adds	r5, #1
 8006d12:	68e3      	ldr	r3, [r4, #12]
 8006d14:	9903      	ldr	r1, [sp, #12]
 8006d16:	1a5b      	subs	r3, r3, r1
 8006d18:	42ab      	cmp	r3, r5
 8006d1a:	dcf2      	bgt.n	8006d02 <_printf_i+0x212>
 8006d1c:	e7eb      	b.n	8006cf6 <_printf_i+0x206>
 8006d1e:	2500      	movs	r5, #0
 8006d20:	f104 0619 	add.w	r6, r4, #25
 8006d24:	e7f5      	b.n	8006d12 <_printf_i+0x222>
 8006d26:	bf00      	nop
 8006d28:	08007179 	.word	0x08007179
 8006d2c:	0800718a 	.word	0x0800718a

08006d30 <__sflush_r>:
 8006d30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d38:	0716      	lsls	r6, r2, #28
 8006d3a:	4605      	mov	r5, r0
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	d454      	bmi.n	8006dea <__sflush_r+0xba>
 8006d40:	684b      	ldr	r3, [r1, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dc02      	bgt.n	8006d4c <__sflush_r+0x1c>
 8006d46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	dd48      	ble.n	8006dde <__sflush_r+0xae>
 8006d4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d4e:	2e00      	cmp	r6, #0
 8006d50:	d045      	beq.n	8006dde <__sflush_r+0xae>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d58:	682f      	ldr	r7, [r5, #0]
 8006d5a:	6a21      	ldr	r1, [r4, #32]
 8006d5c:	602b      	str	r3, [r5, #0]
 8006d5e:	d030      	beq.n	8006dc2 <__sflush_r+0x92>
 8006d60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d62:	89a3      	ldrh	r3, [r4, #12]
 8006d64:	0759      	lsls	r1, r3, #29
 8006d66:	d505      	bpl.n	8006d74 <__sflush_r+0x44>
 8006d68:	6863      	ldr	r3, [r4, #4]
 8006d6a:	1ad2      	subs	r2, r2, r3
 8006d6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d6e:	b10b      	cbz	r3, 8006d74 <__sflush_r+0x44>
 8006d70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d72:	1ad2      	subs	r2, r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d78:	6a21      	ldr	r1, [r4, #32]
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	47b0      	blx	r6
 8006d7e:	1c43      	adds	r3, r0, #1
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	d106      	bne.n	8006d92 <__sflush_r+0x62>
 8006d84:	6829      	ldr	r1, [r5, #0]
 8006d86:	291d      	cmp	r1, #29
 8006d88:	d82b      	bhi.n	8006de2 <__sflush_r+0xb2>
 8006d8a:	4a2a      	ldr	r2, [pc, #168]	@ (8006e34 <__sflush_r+0x104>)
 8006d8c:	410a      	asrs	r2, r1
 8006d8e:	07d6      	lsls	r6, r2, #31
 8006d90:	d427      	bmi.n	8006de2 <__sflush_r+0xb2>
 8006d92:	2200      	movs	r2, #0
 8006d94:	6062      	str	r2, [r4, #4]
 8006d96:	04d9      	lsls	r1, r3, #19
 8006d98:	6922      	ldr	r2, [r4, #16]
 8006d9a:	6022      	str	r2, [r4, #0]
 8006d9c:	d504      	bpl.n	8006da8 <__sflush_r+0x78>
 8006d9e:	1c42      	adds	r2, r0, #1
 8006da0:	d101      	bne.n	8006da6 <__sflush_r+0x76>
 8006da2:	682b      	ldr	r3, [r5, #0]
 8006da4:	b903      	cbnz	r3, 8006da8 <__sflush_r+0x78>
 8006da6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006da8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006daa:	602f      	str	r7, [r5, #0]
 8006dac:	b1b9      	cbz	r1, 8006dde <__sflush_r+0xae>
 8006dae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006db2:	4299      	cmp	r1, r3
 8006db4:	d002      	beq.n	8006dbc <__sflush_r+0x8c>
 8006db6:	4628      	mov	r0, r5
 8006db8:	f7ff fbf2 	bl	80065a0 <_free_r>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dc0:	e00d      	b.n	8006dde <__sflush_r+0xae>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b0      	blx	r6
 8006dc8:	4602      	mov	r2, r0
 8006dca:	1c50      	adds	r0, r2, #1
 8006dcc:	d1c9      	bne.n	8006d62 <__sflush_r+0x32>
 8006dce:	682b      	ldr	r3, [r5, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0c6      	beq.n	8006d62 <__sflush_r+0x32>
 8006dd4:	2b1d      	cmp	r3, #29
 8006dd6:	d001      	beq.n	8006ddc <__sflush_r+0xac>
 8006dd8:	2b16      	cmp	r3, #22
 8006dda:	d11e      	bne.n	8006e1a <__sflush_r+0xea>
 8006ddc:	602f      	str	r7, [r5, #0]
 8006dde:	2000      	movs	r0, #0
 8006de0:	e022      	b.n	8006e28 <__sflush_r+0xf8>
 8006de2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006de6:	b21b      	sxth	r3, r3
 8006de8:	e01b      	b.n	8006e22 <__sflush_r+0xf2>
 8006dea:	690f      	ldr	r7, [r1, #16]
 8006dec:	2f00      	cmp	r7, #0
 8006dee:	d0f6      	beq.n	8006dde <__sflush_r+0xae>
 8006df0:	0793      	lsls	r3, r2, #30
 8006df2:	680e      	ldr	r6, [r1, #0]
 8006df4:	bf08      	it	eq
 8006df6:	694b      	ldreq	r3, [r1, #20]
 8006df8:	600f      	str	r7, [r1, #0]
 8006dfa:	bf18      	it	ne
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	eba6 0807 	sub.w	r8, r6, r7
 8006e02:	608b      	str	r3, [r1, #8]
 8006e04:	f1b8 0f00 	cmp.w	r8, #0
 8006e08:	dde9      	ble.n	8006dde <__sflush_r+0xae>
 8006e0a:	6a21      	ldr	r1, [r4, #32]
 8006e0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006e0e:	4643      	mov	r3, r8
 8006e10:	463a      	mov	r2, r7
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b0      	blx	r6
 8006e16:	2800      	cmp	r0, #0
 8006e18:	dc08      	bgt.n	8006e2c <__sflush_r+0xfc>
 8006e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e22:	81a3      	strh	r3, [r4, #12]
 8006e24:	f04f 30ff 	mov.w	r0, #4294967295
 8006e28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e2c:	4407      	add	r7, r0
 8006e2e:	eba8 0800 	sub.w	r8, r8, r0
 8006e32:	e7e7      	b.n	8006e04 <__sflush_r+0xd4>
 8006e34:	dfbffffe 	.word	0xdfbffffe

08006e38 <_fflush_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	690b      	ldr	r3, [r1, #16]
 8006e3c:	4605      	mov	r5, r0
 8006e3e:	460c      	mov	r4, r1
 8006e40:	b913      	cbnz	r3, 8006e48 <_fflush_r+0x10>
 8006e42:	2500      	movs	r5, #0
 8006e44:	4628      	mov	r0, r5
 8006e46:	bd38      	pop	{r3, r4, r5, pc}
 8006e48:	b118      	cbz	r0, 8006e52 <_fflush_r+0x1a>
 8006e4a:	6a03      	ldr	r3, [r0, #32]
 8006e4c:	b90b      	cbnz	r3, 8006e52 <_fflush_r+0x1a>
 8006e4e:	f7ff fa9f 	bl	8006390 <__sinit>
 8006e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0f3      	beq.n	8006e42 <_fflush_r+0xa>
 8006e5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e5c:	07d0      	lsls	r0, r2, #31
 8006e5e:	d404      	bmi.n	8006e6a <_fflush_r+0x32>
 8006e60:	0599      	lsls	r1, r3, #22
 8006e62:	d402      	bmi.n	8006e6a <_fflush_r+0x32>
 8006e64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e66:	f7ff fb98 	bl	800659a <__retarget_lock_acquire_recursive>
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	f7ff ff5f 	bl	8006d30 <__sflush_r>
 8006e72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e74:	07da      	lsls	r2, r3, #31
 8006e76:	4605      	mov	r5, r0
 8006e78:	d4e4      	bmi.n	8006e44 <_fflush_r+0xc>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	059b      	lsls	r3, r3, #22
 8006e7e:	d4e1      	bmi.n	8006e44 <_fflush_r+0xc>
 8006e80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e82:	f7ff fb8b 	bl	800659c <__retarget_lock_release_recursive>
 8006e86:	e7dd      	b.n	8006e44 <_fflush_r+0xc>

08006e88 <__swbuf_r>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	460e      	mov	r6, r1
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	4605      	mov	r5, r0
 8006e90:	b118      	cbz	r0, 8006e9a <__swbuf_r+0x12>
 8006e92:	6a03      	ldr	r3, [r0, #32]
 8006e94:	b90b      	cbnz	r3, 8006e9a <__swbuf_r+0x12>
 8006e96:	f7ff fa7b 	bl	8006390 <__sinit>
 8006e9a:	69a3      	ldr	r3, [r4, #24]
 8006e9c:	60a3      	str	r3, [r4, #8]
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	071a      	lsls	r2, r3, #28
 8006ea2:	d501      	bpl.n	8006ea8 <__swbuf_r+0x20>
 8006ea4:	6923      	ldr	r3, [r4, #16]
 8006ea6:	b943      	cbnz	r3, 8006eba <__swbuf_r+0x32>
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f000 f82a 	bl	8006f04 <__swsetup_r>
 8006eb0:	b118      	cbz	r0, 8006eba <__swbuf_r+0x32>
 8006eb2:	f04f 37ff 	mov.w	r7, #4294967295
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	6922      	ldr	r2, [r4, #16]
 8006ebe:	1a98      	subs	r0, r3, r2
 8006ec0:	6963      	ldr	r3, [r4, #20]
 8006ec2:	b2f6      	uxtb	r6, r6
 8006ec4:	4283      	cmp	r3, r0
 8006ec6:	4637      	mov	r7, r6
 8006ec8:	dc05      	bgt.n	8006ed6 <__swbuf_r+0x4e>
 8006eca:	4621      	mov	r1, r4
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f7ff ffb3 	bl	8006e38 <_fflush_r>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	d1ed      	bne.n	8006eb2 <__swbuf_r+0x2a>
 8006ed6:	68a3      	ldr	r3, [r4, #8]
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	60a3      	str	r3, [r4, #8]
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	1c5a      	adds	r2, r3, #1
 8006ee0:	6022      	str	r2, [r4, #0]
 8006ee2:	701e      	strb	r6, [r3, #0]
 8006ee4:	6962      	ldr	r2, [r4, #20]
 8006ee6:	1c43      	adds	r3, r0, #1
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d004      	beq.n	8006ef6 <__swbuf_r+0x6e>
 8006eec:	89a3      	ldrh	r3, [r4, #12]
 8006eee:	07db      	lsls	r3, r3, #31
 8006ef0:	d5e1      	bpl.n	8006eb6 <__swbuf_r+0x2e>
 8006ef2:	2e0a      	cmp	r6, #10
 8006ef4:	d1df      	bne.n	8006eb6 <__swbuf_r+0x2e>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f7ff ff9d 	bl	8006e38 <_fflush_r>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	d0d9      	beq.n	8006eb6 <__swbuf_r+0x2e>
 8006f02:	e7d6      	b.n	8006eb2 <__swbuf_r+0x2a>

08006f04 <__swsetup_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	4b29      	ldr	r3, [pc, #164]	@ (8006fac <__swsetup_r+0xa8>)
 8006f08:	4605      	mov	r5, r0
 8006f0a:	6818      	ldr	r0, [r3, #0]
 8006f0c:	460c      	mov	r4, r1
 8006f0e:	b118      	cbz	r0, 8006f18 <__swsetup_r+0x14>
 8006f10:	6a03      	ldr	r3, [r0, #32]
 8006f12:	b90b      	cbnz	r3, 8006f18 <__swsetup_r+0x14>
 8006f14:	f7ff fa3c 	bl	8006390 <__sinit>
 8006f18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f1c:	0719      	lsls	r1, r3, #28
 8006f1e:	d422      	bmi.n	8006f66 <__swsetup_r+0x62>
 8006f20:	06da      	lsls	r2, r3, #27
 8006f22:	d407      	bmi.n	8006f34 <__swsetup_r+0x30>
 8006f24:	2209      	movs	r2, #9
 8006f26:	602a      	str	r2, [r5, #0]
 8006f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f2c:	81a3      	strh	r3, [r4, #12]
 8006f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f32:	e033      	b.n	8006f9c <__swsetup_r+0x98>
 8006f34:	0758      	lsls	r0, r3, #29
 8006f36:	d512      	bpl.n	8006f5e <__swsetup_r+0x5a>
 8006f38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f3a:	b141      	cbz	r1, 8006f4e <__swsetup_r+0x4a>
 8006f3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f40:	4299      	cmp	r1, r3
 8006f42:	d002      	beq.n	8006f4a <__swsetup_r+0x46>
 8006f44:	4628      	mov	r0, r5
 8006f46:	f7ff fb2b 	bl	80065a0 <_free_r>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f4e:	89a3      	ldrh	r3, [r4, #12]
 8006f50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f54:	81a3      	strh	r3, [r4, #12]
 8006f56:	2300      	movs	r3, #0
 8006f58:	6063      	str	r3, [r4, #4]
 8006f5a:	6923      	ldr	r3, [r4, #16]
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	f043 0308 	orr.w	r3, r3, #8
 8006f64:	81a3      	strh	r3, [r4, #12]
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	b94b      	cbnz	r3, 8006f7e <__swsetup_r+0x7a>
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f74:	d003      	beq.n	8006f7e <__swsetup_r+0x7a>
 8006f76:	4621      	mov	r1, r4
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f000 f84f 	bl	800701c <__smakebuf_r>
 8006f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f82:	f013 0201 	ands.w	r2, r3, #1
 8006f86:	d00a      	beq.n	8006f9e <__swsetup_r+0x9a>
 8006f88:	2200      	movs	r2, #0
 8006f8a:	60a2      	str	r2, [r4, #8]
 8006f8c:	6962      	ldr	r2, [r4, #20]
 8006f8e:	4252      	negs	r2, r2
 8006f90:	61a2      	str	r2, [r4, #24]
 8006f92:	6922      	ldr	r2, [r4, #16]
 8006f94:	b942      	cbnz	r2, 8006fa8 <__swsetup_r+0xa4>
 8006f96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f9a:	d1c5      	bne.n	8006f28 <__swsetup_r+0x24>
 8006f9c:	bd38      	pop	{r3, r4, r5, pc}
 8006f9e:	0799      	lsls	r1, r3, #30
 8006fa0:	bf58      	it	pl
 8006fa2:	6962      	ldrpl	r2, [r4, #20]
 8006fa4:	60a2      	str	r2, [r4, #8]
 8006fa6:	e7f4      	b.n	8006f92 <__swsetup_r+0x8e>
 8006fa8:	2000      	movs	r0, #0
 8006faa:	e7f7      	b.n	8006f9c <__swsetup_r+0x98>
 8006fac:	2000002c 	.word	0x2000002c

08006fb0 <_sbrk_r>:
 8006fb0:	b538      	push	{r3, r4, r5, lr}
 8006fb2:	4d06      	ldr	r5, [pc, #24]	@ (8006fcc <_sbrk_r+0x1c>)
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	4604      	mov	r4, r0
 8006fb8:	4608      	mov	r0, r1
 8006fba:	602b      	str	r3, [r5, #0]
 8006fbc:	f7fb f898 	bl	80020f0 <_sbrk>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	d102      	bne.n	8006fca <_sbrk_r+0x1a>
 8006fc4:	682b      	ldr	r3, [r5, #0]
 8006fc6:	b103      	cbz	r3, 8006fca <_sbrk_r+0x1a>
 8006fc8:	6023      	str	r3, [r4, #0]
 8006fca:	bd38      	pop	{r3, r4, r5, pc}
 8006fcc:	20000434 	.word	0x20000434

08006fd0 <__swhatbuf_r>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fd8:	2900      	cmp	r1, #0
 8006fda:	b096      	sub	sp, #88	@ 0x58
 8006fdc:	4615      	mov	r5, r2
 8006fde:	461e      	mov	r6, r3
 8006fe0:	da0d      	bge.n	8006ffe <__swhatbuf_r+0x2e>
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006fe8:	f04f 0100 	mov.w	r1, #0
 8006fec:	bf14      	ite	ne
 8006fee:	2340      	movne	r3, #64	@ 0x40
 8006ff0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	6031      	str	r1, [r6, #0]
 8006ff8:	602b      	str	r3, [r5, #0]
 8006ffa:	b016      	add	sp, #88	@ 0x58
 8006ffc:	bd70      	pop	{r4, r5, r6, pc}
 8006ffe:	466a      	mov	r2, sp
 8007000:	f000 f848 	bl	8007094 <_fstat_r>
 8007004:	2800      	cmp	r0, #0
 8007006:	dbec      	blt.n	8006fe2 <__swhatbuf_r+0x12>
 8007008:	9901      	ldr	r1, [sp, #4]
 800700a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800700e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007012:	4259      	negs	r1, r3
 8007014:	4159      	adcs	r1, r3
 8007016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800701a:	e7eb      	b.n	8006ff4 <__swhatbuf_r+0x24>

0800701c <__smakebuf_r>:
 800701c:	898b      	ldrh	r3, [r1, #12]
 800701e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007020:	079d      	lsls	r5, r3, #30
 8007022:	4606      	mov	r6, r0
 8007024:	460c      	mov	r4, r1
 8007026:	d507      	bpl.n	8007038 <__smakebuf_r+0x1c>
 8007028:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	2301      	movs	r3, #1
 8007032:	6163      	str	r3, [r4, #20]
 8007034:	b003      	add	sp, #12
 8007036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007038:	ab01      	add	r3, sp, #4
 800703a:	466a      	mov	r2, sp
 800703c:	f7ff ffc8 	bl	8006fd0 <__swhatbuf_r>
 8007040:	9f00      	ldr	r7, [sp, #0]
 8007042:	4605      	mov	r5, r0
 8007044:	4639      	mov	r1, r7
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff fb16 	bl	8006678 <_malloc_r>
 800704c:	b948      	cbnz	r0, 8007062 <__smakebuf_r+0x46>
 800704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007052:	059a      	lsls	r2, r3, #22
 8007054:	d4ee      	bmi.n	8007034 <__smakebuf_r+0x18>
 8007056:	f023 0303 	bic.w	r3, r3, #3
 800705a:	f043 0302 	orr.w	r3, r3, #2
 800705e:	81a3      	strh	r3, [r4, #12]
 8007060:	e7e2      	b.n	8007028 <__smakebuf_r+0xc>
 8007062:	89a3      	ldrh	r3, [r4, #12]
 8007064:	6020      	str	r0, [r4, #0]
 8007066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800706a:	81a3      	strh	r3, [r4, #12]
 800706c:	9b01      	ldr	r3, [sp, #4]
 800706e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007072:	b15b      	cbz	r3, 800708c <__smakebuf_r+0x70>
 8007074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007078:	4630      	mov	r0, r6
 800707a:	f000 f81d 	bl	80070b8 <_isatty_r>
 800707e:	b128      	cbz	r0, 800708c <__smakebuf_r+0x70>
 8007080:	89a3      	ldrh	r3, [r4, #12]
 8007082:	f023 0303 	bic.w	r3, r3, #3
 8007086:	f043 0301 	orr.w	r3, r3, #1
 800708a:	81a3      	strh	r3, [r4, #12]
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	431d      	orrs	r5, r3
 8007090:	81a5      	strh	r5, [r4, #12]
 8007092:	e7cf      	b.n	8007034 <__smakebuf_r+0x18>

08007094 <_fstat_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d07      	ldr	r5, [pc, #28]	@ (80070b4 <_fstat_r+0x20>)
 8007098:	2300      	movs	r3, #0
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	4611      	mov	r1, r2
 80070a0:	602b      	str	r3, [r5, #0]
 80070a2:	f7fa fffc 	bl	800209e <_fstat>
 80070a6:	1c43      	adds	r3, r0, #1
 80070a8:	d102      	bne.n	80070b0 <_fstat_r+0x1c>
 80070aa:	682b      	ldr	r3, [r5, #0]
 80070ac:	b103      	cbz	r3, 80070b0 <_fstat_r+0x1c>
 80070ae:	6023      	str	r3, [r4, #0]
 80070b0:	bd38      	pop	{r3, r4, r5, pc}
 80070b2:	bf00      	nop
 80070b4:	20000434 	.word	0x20000434

080070b8 <_isatty_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d06      	ldr	r5, [pc, #24]	@ (80070d4 <_isatty_r+0x1c>)
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	f7fa fffb 	bl	80020be <_isatty>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_isatty_r+0x1a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_isatty_r+0x1a>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	20000434 	.word	0x20000434

080070d8 <_init>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	bf00      	nop
 80070dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070de:	bc08      	pop	{r3}
 80070e0:	469e      	mov	lr, r3
 80070e2:	4770      	bx	lr

080070e4 <_fini>:
 80070e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070e6:	bf00      	nop
 80070e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ea:	bc08      	pop	{r3}
 80070ec:	469e      	mov	lr, r3
 80070ee:	4770      	bx	lr
